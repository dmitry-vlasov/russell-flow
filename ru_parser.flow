import fs/filesystem;
import ru_ast;
import ru_parse;
import ru_parse_ast_mnemonics;

export {
	rusParse(file : string, math : RuMath) -> RuMath;
}

russell_parser = compilePegGrammar("#include russell.lingo");

rusParse(file : string, math : RuMath) -> RuMath {
	switch (lookupTree(math.sources, file)) {
		Some(src): math;
		None(): {
			if (fileExists(file)) {
				src = parsic(russell_parser, str, 
						SemanticActions(
							mergeTree(defaultPegActions.t,
							pairs2tree([
								Pair("createSeq", \s -> NmSeq(concat3([s[0]], [s[1]], s[2]))),
								Pair("createChoice", \s -> NmChoice(concat3([s[0]], [s[1]], s[2]))),
								Pair("createIfElse", \s -> 
									NmChoice([
										NmSeq([NmTest(s[0], s[1], s[2]), s[3]]),
										NmSeq([NmTest(neg_op(s[0]), s[1], s[2]), s[4]])
									])
								),
								Pair("createWhile", \s -> 
									NmSeq([
										NmLoop(NmSeq([NmTest(s[0], s[1], s[2]), s[3]])),
										NmTest(neg_op(s[0]), s[1], s[2])
									])
								),
							]))
						)
					);
				RuMath(with sources = setTree(math.sources, src)); 
			} else {
				math.onError("file " + file + " is not found");
				math
			}
		}
	}
}



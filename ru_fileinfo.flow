import utctime;
import fs/filesystem;

export {

RuFileInfo(
	file : string, // The path as used by flow imports
	path : string, // The full filesystem path
	time : double, // The timestamp of the source file
	//md5sum : string,
	//filesize : double,
	lastupdate : double, // The timestamp of the last successfull compilation
);

ruMakeFileInfo(file : string, path : string) -> RuFileInfo;

ruNoFileInfo = ruMakeFileInfo("__no", "__no");

RuPath(
	dirs : [string],
	file : string
);

ruPath2s(path : RuPath) -> string;
ruSplitPath(path : string) -> RuPath;
ruDirName(path : string) -> string;
ruCommonDir(paths : [RuPath]) -> RuPath;

}

ruMakeFileInfo(file : string, path : string) -> RuFileInfo {
	RuFileInfo(
		file,
		path,
		fileModified(file),
		timestamp()
	)
}

ruPath2s(path : RuPath) -> string {
	(if (path.dirs != []) strGlue(path.dirs, "/") + "/" else "") + path.file
}

ruDirName(path : string) -> string {
	path1 = strReplace(path, "\\", "/");
	if (strContains(path1, "/")) {
		i = strLastIndexOf(path1, "/");
		if (i == 0) path else strLeft(path, i);
	} else {
		""
	}
}

RuPath(
	dirs : [string],
	file : string
);

ruSplitPath(path : string) -> RuPath {
	file = fileNameOnly(path);
	dir = ruDirName(path);
	if (dir != "") {
		RuPath(ruSplitDir(dir), file);
	} else {
		RuPath([], file);
	}
}

ruSplitDir(path : string) -> [string] {
	dir = fileNameOnly(path);
	left = ruDirName(path);
	if (left == "") [dir] else concat(ruSplitDir(left), [dir]);
}


ruCommonDir(paths : [RuPath]) -> RuPath {
	if (paths == []) RuPath([], "") else {
		RuPath(
			fold(tail(paths), paths[0].dirs, \acc, path ->
				fold(zipWith(path.dirs, acc, \d1, d2 -> Pair(d1, d2)), Pair([], true), \ac, p ->
					if (p.first == p.second && ac.second) Pair(concat(ac.first, [p.first]), true) else Pair(ac.first, false)
				).first
			), 
			""
		);
	}
}

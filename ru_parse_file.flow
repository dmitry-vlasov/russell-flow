import string;
import lingo/compiler/syntaxtree_types;
import ru_ast_mnemonics;

export {
	parse_source(t : string) -> Pair<SyntaxTree, ExpectError>;
}

parse_source(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [], noExpectError);
	r = do_parse_source_source(acc);
	Pair(r, acc.expect);
}
do_parse_source_source(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_ws(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_source_import);
		c2 = SyntaxStar(acc, do_parse_source_decl);
		SyntaxTree(st_source, 0, i, acc.i, [[c0], c1, c2]);
	} else c0
}

do_parse_source_import(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "import", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_symb(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
					acc.i ::= acc.i + 2;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_import, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected ';;'"
					updateExpectError(acc, "", ";;", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'import'"
		updateExpectError(acc, "", "import", i);
		failSyntaxTree;
	}
}

do_parse_source_decl(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_const(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_type(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_source_rule(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_source_axiom(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_source_def(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_source_theorem(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree(st_Expected_decl, -1, i, i, [])
						}

					}

				}

			}

		}

	}

}

do_parse_source_const(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_const2(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_const1(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_source_const0(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_const, -1, i, i, [])
			}

		}

	}

}

do_parse_source_const0(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "constant", acc.i, acc.i + 8) == acc.i) {
		acc.i ::= acc.i + 8;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_source_ws(acc);
				if (c3.choice != -1) {
					if (strRangeIndexOf(acc.input, "symbol", acc.i, acc.i + 6) == acc.i) {
						acc.i ::= acc.i + 6;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							c6 = do_parse_source_symb(acc);
							if (c6.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
									acc.i ::= acc.i + 2;
									c8 = do_parse_source_ws(acc);
									if (c8.choice != -1) {
										if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
											acc.i ::= acc.i + 1;
											c10 = do_parse_source_ws(acc);
											if (c10.choice != -1) {
												SyntaxTree(st_const0, 0, i, acc.i, [[c1], [c3], [c5], [c6], [c8], [c10]]);
											} else c10
										} else {
											// "Expected '}'"
											updateExpectError(acc, "", "}", i);
											failSyntaxTree;
										}
									} else c8
								} else {
									// "Expected ';;'"
									updateExpectError(acc, "", ";;", i);
									failSyntaxTree;
								}
							} else c6
						} else c5
					} else {
						// "Expected 'symbol'"
						updateExpectError(acc, "", "symbol", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected '{'"
				updateExpectError(acc, "", "{", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected 'constant'"
		updateExpectError(acc, "", "constant", i);
		failSyntaxTree;
	}
}

do_parse_source_const1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "constant", acc.i, acc.i + 8) == acc.i) {
		acc.i ::= acc.i + 8;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_source_ws(acc);
				if (c3.choice != -1) {
					if (strRangeIndexOf(acc.input, "symbol", acc.i, acc.i + 6) == acc.i) {
						acc.i ::= acc.i + 6;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							c6 = do_parse_source_symb(acc);
							if (c6.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
									acc.i ::= acc.i + 2;
									c8 = do_parse_source_ws(acc);
									if (c8.choice != -1) {
										if (strRangeIndexOf(acc.input, "ascii", acc.i, acc.i + 5) == acc.i) {
											acc.i ::= acc.i + 5;
											c10 = do_parse_source_ws(acc);
											if (c10.choice != -1) {
												c11 = do_parse_source_symb(acc);
												if (c11.choice != -1) {
													if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
														acc.i ::= acc.i + 2;
														c13 = do_parse_source_ws(acc);
														if (c13.choice != -1) {
															if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
																acc.i ::= acc.i + 1;
																c15 = do_parse_source_ws(acc);
																if (c15.choice != -1) {
																	SyntaxTree(st_const1, 0, i, acc.i, [[c1], [c3], [c5], [c6], [c8], [c10], [c11], [c13], [c15]]);
																} else c15
															} else {
																// "Expected '}'"
																updateExpectError(acc, "", "}", i);
																failSyntaxTree;
															}
														} else c13
													} else {
														// "Expected ';;'"
														updateExpectError(acc, "", ";;", i);
														failSyntaxTree;
													}
												} else c11
											} else c10
										} else {
											// "Expected 'ascii'"
											updateExpectError(acc, "", "ascii", i);
											failSyntaxTree;
										}
									} else c8
								} else {
									// "Expected ';;'"
									updateExpectError(acc, "", ";;", i);
									failSyntaxTree;
								}
							} else c6
						} else c5
					} else {
						// "Expected 'symbol'"
						updateExpectError(acc, "", "symbol", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected '{'"
				updateExpectError(acc, "", "{", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected 'constant'"
		updateExpectError(acc, "", "constant", i);
		failSyntaxTree;
	}
}

do_parse_source_const2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "constant", acc.i, acc.i + 8) == acc.i) {
		acc.i ::= acc.i + 8;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_source_ws(acc);
				if (c3.choice != -1) {
					if (strRangeIndexOf(acc.input, "symbol", acc.i, acc.i + 6) == acc.i) {
						acc.i ::= acc.i + 6;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							c6 = do_parse_source_symb(acc);
							if (c6.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
									acc.i ::= acc.i + 2;
									c8 = do_parse_source_ws(acc);
									if (c8.choice != -1) {
										if (strRangeIndexOf(acc.input, "ascii", acc.i, acc.i + 5) == acc.i) {
											acc.i ::= acc.i + 5;
											c10 = do_parse_source_ws(acc);
											if (c10.choice != -1) {
												c11 = do_parse_source_symb(acc);
												if (c11.choice != -1) {
													if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
														acc.i ::= acc.i + 2;
														if (strRangeIndexOf(acc.input, "latex", acc.i, acc.i + 5) == acc.i) {
															acc.i ::= acc.i + 5;
															c14 = do_parse_source_ws(acc);
															if (c14.choice != -1) {
																c15 = do_parse_source_symb(acc);
																if (c15.choice != -1) {
																	if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
																		acc.i ::= acc.i + 2;
																		c17 = do_parse_source_ws(acc);
																		if (c17.choice != -1) {
																			if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
																				acc.i ::= acc.i + 1;
																				c19 = do_parse_source_ws(acc);
																				if (c19.choice != -1) {
																					SyntaxTree(st_const2, 0, i, acc.i, [[c1], [c3], [c5], [c6], [c8], [c10], [c11], [c14], [c15], [c17], [c19]]);
																				} else c19
																			} else {
																				// "Expected '}'"
																				updateExpectError(acc, "", "}", i);
																				failSyntaxTree;
																			}
																		} else c17
																	} else {
																		// "Expected ';;'"
																		updateExpectError(acc, "", ";;", i);
																		failSyntaxTree;
																	}
																} else c15
															} else c14
														} else {
															// "Expected 'latex'"
															updateExpectError(acc, "", "latex", i);
															failSyntaxTree;
														}
													} else {
														// "Expected ';;'"
														updateExpectError(acc, "", ";;", i);
														failSyntaxTree;
													}
												} else c11
											} else c10
										} else {
											// "Expected 'ascii'"
											updateExpectError(acc, "", "ascii", i);
											failSyntaxTree;
										}
									} else c8
								} else {
									// "Expected ';;'"
									updateExpectError(acc, "", ";;", i);
									failSyntaxTree;
								}
							} else c6
						} else c5
					} else {
						// "Expected 'symbol'"
						updateExpectError(acc, "", "symbol", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected '{'"
				updateExpectError(acc, "", "{", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected 'constant'"
		updateExpectError(acc, "", "constant", i);
		failSyntaxTree;
	}
}

do_parse_source_type(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "type", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_type__auto51(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
						acc.i ::= acc.i + 2;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_type, 0, i, acc.i, [[c1], [c2], [c3], [c5]]);
						} else c5
					} else {
						// "Expected ';;'"
						updateExpectError(acc, "", ";;", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'type'"
		updateExpectError(acc, "", "type", i);
		failSyntaxTree;
	}
}

do_parse_source_rule(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "rule", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_vars(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							c6 = do_parse_source_term(acc);
							if (c6.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
									acc.i ::= acc.i + 1;
									c8 = do_parse_source_ws(acc);
									if (c8.choice != -1) {
										SyntaxTree(st_rule, 0, i, acc.i, [[c1], [c2], [c3], [c5], [c6], [c8]]);
									} else c8
								} else {
									// "Expected '}'"
									updateExpectError(acc, "", "}", i);
									failSyntaxTree;
								}
							} else c6
						} else c5
					} else {
						// "Expected '{'"
						updateExpectError(acc, "", "{", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'rule'"
		updateExpectError(acc, "", "rule", i);
		failSyntaxTree;
	}
}

do_parse_source_axiom(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_axiom1(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_axiom2(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_axiom, -1, i, i, [])
		}

	}

}

do_parse_source_axiom1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "axiom", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_vars(acc);
				if (c3.choice != -1) {
					i4 = acc.i;
					t4 = do_parse_source_disjs(acc);
					c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
					if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
						acc.i ::= acc.i + 1;
						c6 = do_parse_source_ws(acc);
						if (c6.choice != -1) {
							if (strRangeIndexOf(acc.input, "prop", acc.i, acc.i + 4) == acc.i) {
								acc.i ::= acc.i + 4;
								c8 = do_parse_source_ws(acc);
								if (c8.choice != -1) {
									c9 = do_parse_source_expr(acc);
									if (c9.choice != -1) {
										if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
											acc.i ::= acc.i + 1;
											c11 = do_parse_source_ws(acc);
											if (c11.choice != -1) {
												SyntaxTree(st_axiom1, 0, i, acc.i, [[c1], [c2], [c3], c4, [c6], [c8], [c9], [c11]]);
											} else c11
										} else {
											// "Expected '}'"
											updateExpectError(acc, "", "}", i);
											failSyntaxTree;
										}
									} else c9
								} else c8
							} else {
								// "Expected 'prop'"
								updateExpectError(acc, "", "prop", i);
								failSyntaxTree;
							}
						} else c6
					} else {
						// "Expected '{'"
						updateExpectError(acc, "", "{", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'axiom'"
		updateExpectError(acc, "", "axiom", i);
		failSyntaxTree;
	}
}

do_parse_source_axiom2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "axiom", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_vars(acc);
				if (c3.choice != -1) {
					i4 = acc.i;
					t4 = do_parse_source_disjs(acc);
					c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
					if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
						acc.i ::= acc.i + 1;
						c6 = do_parse_source_ws(acc);
						if (c6.choice != -1) {
							c7 = SyntaxPlus(acc, do_parse_source_axiom2__auto52);
							if (length(c7) >= 1) {
								if (strRangeIndexOf(acc.input, "-----", acc.i, acc.i + 5) == acc.i) {
									acc.i ::= acc.i + 5;
									SyntaxStar(acc, \na ->
										if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
											acc.i ::= acc.i + 1;
											dummySyntaxTree;
										} else {
											failSyntaxTree
										}
									);
									if (strRangeIndexOf(acc.input, "prop", acc.i, acc.i + 4) == acc.i) {
										acc.i ::= acc.i + 4;
										c11 = do_parse_source_ws(acc);
										if (c11.choice != -1) {
											c12 = do_parse_source_expr(acc);
											if (c12.choice != -1) {
												if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
													acc.i ::= acc.i + 1;
													c14 = do_parse_source_ws(acc);
													if (c14.choice != -1) {
														SyntaxTree(st_axiom2, 0, i, acc.i, [[c1], [c2], [c3], c4, [c6], c7, [c11], [c12], [c14]]);
													} else c14
												} else {
													// "Expected '}'"
													updateExpectError(acc, "", "}", i);
													failSyntaxTree;
												}
											} else c12
										} else c11
									} else {
										// "Expected 'prop'"
										updateExpectError(acc, "", "prop", i);
										failSyntaxTree;
									}
								} else {
									// "Expected '-----'"
									updateExpectError(acc, "", "-----", i);
									failSyntaxTree;
								}
							} else {
								// "Expected at least one axiom2$auto52"
								updateExpectError(acc, "", "axiom2$auto52", i);
								failSyntaxTree;
							}
						} else c6
					} else {
						// "Expected '{'"
						updateExpectError(acc, "", "{", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'axiom'"
		updateExpectError(acc, "", "axiom", i);
		failSyntaxTree;
	}
}

do_parse_source_def(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "definition", acc.i, acc.i + 10) == acc.i) {
		acc.i ::= acc.i + 10;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_vars(acc);
				if (c3.choice != -1) {
					i4 = acc.i;
					t4 = do_parse_source_disjs(acc);
					c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
					if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
						acc.i ::= acc.i + 1;
						c6 = do_parse_source_ws(acc);
						if (c6.choice != -1) {
							c7 = SyntaxPlus(acc, do_parse_source_def__auto53);
							if (length(c7) >= 1) {
								if (strRangeIndexOf(acc.input, "defiendum", acc.i, acc.i + 9) == acc.i) {
									acc.i ::= acc.i + 9;
									c9 = do_parse_source_ws(acc);
									if (c9.choice != -1) {
										c10 = do_parse_source_expr(acc);
										if (c10.choice != -1) {
											if (strRangeIndexOf(acc.input, "definiens", acc.i, acc.i + 9) == acc.i) {
												acc.i ::= acc.i + 9;
												c12 = do_parse_source_ws(acc);
												if (c12.choice != -1) {
													c13 = do_parse_source_expr(acc);
													if (c13.choice != -1) {
														if (strRangeIndexOf(acc.input, "-----", acc.i, acc.i + 5) == acc.i) {
															acc.i ::= acc.i + 5;
															SyntaxStar(acc, \na ->
																if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
																	acc.i ::= acc.i + 1;
																	dummySyntaxTree;
																} else {
																	failSyntaxTree
																}
															);
															if (strRangeIndexOf(acc.input, "prop", acc.i, acc.i + 4) == acc.i) {
																acc.i ::= acc.i + 4;
																c17 = do_parse_source_ws(acc);
																if (c17.choice != -1) {
																	c18 = do_parse_source_expr(acc);
																	if (c18.choice != -1) {
																		if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
																			acc.i ::= acc.i + 1;
																			c20 = do_parse_source_ws(acc);
																			if (c20.choice != -1) {
																				SyntaxTree(st_def, 0, i, acc.i, [[c1], [c2], [c3], c4, [c6], c7, [c9], [c10], [c12], [c13], [c17], [c18], [c20]]);
																			} else c20
																		} else {
																			// "Expected '}'"
																			updateExpectError(acc, "", "}", i);
																			failSyntaxTree;
																		}
																	} else c18
																} else c17
															} else {
																// "Expected 'prop'"
																updateExpectError(acc, "", "prop", i);
																failSyntaxTree;
															}
														} else {
															// "Expected '-----'"
															updateExpectError(acc, "", "-----", i);
															failSyntaxTree;
														}
													} else c13
												} else c12
											} else {
												// "Expected 'definiens'"
												updateExpectError(acc, "", "definiens", i);
												failSyntaxTree;
											}
										} else c10
									} else c9
								} else {
									// "Expected 'defiendum'"
									updateExpectError(acc, "", "defiendum", i);
									failSyntaxTree;
								}
							} else {
								// "Expected at least one def$auto53"
								updateExpectError(acc, "", "def$auto53", i);
								failSyntaxTree;
							}
						} else c6
					} else {
						// "Expected '{'"
						updateExpectError(acc, "", "{", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'definition'"
		updateExpectError(acc, "", "definition", i);
		failSyntaxTree;
	}
}

do_parse_source_theorem(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_theorem1(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_theorem2(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_theorem, -1, i, i, [])
		}

	}

}

do_parse_source_theorem1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "theorem", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_vars(acc);
				if (c3.choice != -1) {
					i4 = acc.i;
					t4 = do_parse_source_disjs(acc);
					c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
					if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
						acc.i ::= acc.i + 1;
						c6 = do_parse_source_ws(acc);
						if (c6.choice != -1) {
							if (strRangeIndexOf(acc.input, "prop", acc.i, acc.i + 4) == acc.i) {
								acc.i ::= acc.i + 4;
								c8 = do_parse_source_ws(acc);
								if (c8.choice != -1) {
									c9 = do_parse_source_expr(acc);
									if (c9.choice != -1) {
										if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
											acc.i ::= acc.i + 1;
											c11 = do_parse_source_ws(acc);
											if (c11.choice != -1) {
												c12 = do_parse_source_proof(acc);
												if (c12.choice != -1) {
													SyntaxTree(st_theorem1, 0, i, acc.i, [[c1], [c2], [c3], c4, [c6], [c8], [c9], [c11], [c12]]);
												} else c12
											} else c11
										} else {
											// "Expected '}'"
											updateExpectError(acc, "", "}", i);
											failSyntaxTree;
										}
									} else c9
								} else c8
							} else {
								// "Expected 'prop'"
								updateExpectError(acc, "", "prop", i);
								failSyntaxTree;
							}
						} else c6
					} else {
						// "Expected '{'"
						updateExpectError(acc, "", "{", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'theorem'"
		updateExpectError(acc, "", "theorem", i);
		failSyntaxTree;
	}
}

do_parse_source_theorem2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "theorem", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_vars(acc);
				if (c3.choice != -1) {
					i4 = acc.i;
					t4 = do_parse_source_disjs(acc);
					c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
					if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
						acc.i ::= acc.i + 1;
						c6 = do_parse_source_ws(acc);
						if (c6.choice != -1) {
							c7 = SyntaxPlus(acc, do_parse_source_theorem2__auto54);
							if (length(c7) >= 1) {
								if (strRangeIndexOf(acc.input, "-----", acc.i, acc.i + 5) == acc.i) {
									acc.i ::= acc.i + 5;
									SyntaxStar(acc, \na ->
										if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
											acc.i ::= acc.i + 1;
											dummySyntaxTree;
										} else {
											failSyntaxTree
										}
									);
									if (strRangeIndexOf(acc.input, "prop", acc.i, acc.i + 4) == acc.i) {
										acc.i ::= acc.i + 4;
										c11 = do_parse_source_ws(acc);
										if (c11.choice != -1) {
											c12 = do_parse_source_expr(acc);
											if (c12.choice != -1) {
												if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
													acc.i ::= acc.i + 1;
													c14 = do_parse_source_ws(acc);
													if (c14.choice != -1) {
														c15 = do_parse_source_proof(acc);
														if (c15.choice != -1) {
															SyntaxTree(st_theorem2, 0, i, acc.i, [[c1], [c2], [c3], c4, [c6], c7, [c11], [c12], [c14], [c15]]);
														} else c15
													} else c14
												} else {
													// "Expected '}'"
													updateExpectError(acc, "", "}", i);
													failSyntaxTree;
												}
											} else c12
										} else c11
									} else {
										// "Expected 'prop'"
										updateExpectError(acc, "", "prop", i);
										failSyntaxTree;
									}
								} else {
									// "Expected '-----'"
									updateExpectError(acc, "", "-----", i);
									failSyntaxTree;
								}
							} else {
								// "Expected at least one theorem2$auto54"
								updateExpectError(acc, "", "theorem2$auto54", i);
								failSyntaxTree;
							}
						} else c6
					} else {
						// "Expected '{'"
						updateExpectError(acc, "", "{", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'theorem'"
		updateExpectError(acc, "", "theorem", i);
		failSyntaxTree;
	}
}

do_parse_source_proof(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_vars(acc);
	if (c0.choice != -1) {
		c1 = do_parse_source_disj(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_source_ws(acc);
				if (c3.choice != -1) {
					c4 = SyntaxStar(acc, do_parse_source_step);
					if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
						acc.i ::= acc.i + 1;
						c6 = do_parse_source_ws(acc);
						if (c6.choice != -1) {
							SyntaxTree(st_proof, 0, i, acc.i, [[c0], [c1], [c3], c4, [c6]]);
						} else c6
					} else {
						// "Expected '}'"
						updateExpectError(acc, "", "}", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected '{'"
				updateExpectError(acc, "", "{", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_source_step(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "step", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ind(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
					acc.i ::= acc.i + 1;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						c5 = do_parse_source_id(acc);
						if (c5.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
								acc.i ::= acc.i + 1;
								c7 = do_parse_source_refs(acc);
								if (c7.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 124 && getCharCodeAt(acc.input, acc.i + 1) == 45 /* |- */) {
										acc.i ::= acc.i + 2;
										c9 = SyntaxStar(acc, do_parse_source_symb);
										if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
											acc.i ::= acc.i + 2;
											c11 = do_parse_source_ws(acc);
											if (c11.choice != -1) {
												SyntaxTree(st_step, 0, i, acc.i, [[c1], [c2], [c4], [c5], [c7], c9, [c11]]);
											} else c11
										} else {
											// "Expected ';;'"
											updateExpectError(acc, "", ";;", i);
											failSyntaxTree;
										}
									} else {
										// "Expected '|-'"
										updateExpectError(acc, "", "|-", i);
										failSyntaxTree;
									}
								} else c7
							} else {
								// "Expected '='"
								updateExpectError(acc, "", "=", i);
								failSyntaxTree;
							}
						} else c5
					} else c4
				} else {
					// "Expected ':'"
					updateExpectError(acc, "", ":", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'step'"
		updateExpectError(acc, "", "step", i);
		failSyntaxTree;
	}
}

do_parse_source_refs(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_refs2(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_refs1(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_source_refs0(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_refs, -1, i, i, [])
			}

		}

	}

}

do_parse_source_refs0(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_id(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 40 && getCharCodeAt(acc.input, acc.i + 1) == 41 /* () */) {
			acc.i ::= acc.i + 2;
			c2 = do_parse_source_ws(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_refs0, 0, i, acc.i, [[c0], [c2]]);
			} else c2
		} else {
			// "Expected '()'"
			updateExpectError(acc, "", "()", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_refs1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_id(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
			acc.i ::= acc.i + 1;
			c2 = do_parse_source_ws(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_ref(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_refs1, 0, i, acc.i, [[c0], [c2], [c3], [c5]]);
						} else c5
					} else {
						// "Expected ')'"
						updateExpectError(acc, "", ")", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else {
			// "Expected '('"
			updateExpectError(acc, "", "(", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_refs2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_id(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
			acc.i ::= acc.i + 1;
			c2 = do_parse_source_ws(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_ref(acc);
				if (c3.choice != -1) {
					c4 = SyntaxPlus(acc, do_parse_source_refs2__auto55);
					if (length(c4) >= 1) {
						if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_refs2, 0, i, acc.i, [[c0], [c2], [c3], c4]);
						} else {
							// "Expected ')'"
							updateExpectError(acc, "", ")", i);
							failSyntaxTree;
						}
					} else {
						// "Expected at least one refs2$auto55"
						updateExpectError(acc, "", "refs2$auto55", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else {
			// "Expected '('"
			updateExpectError(acc, "", "(", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_ref(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (strRangeIndexOf(acc.input, "hyp", acc.i, acc.i + 3) == acc.i) {
			acc.i ::= acc.i + 3;
			c1 = do_parse_source_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_source_ind(acc);
				if (c2.choice != -1) {
					SyntaxTree(st_ref, 0, i, acc.i, [[c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (strRangeIndexOf(acc.input, "step", acc.i, acc.i + 4) == acc.i) {
				acc.i ::= acc.i + 4;
				c1 = do_parse_source_ws(acc);
				if (c1.choice != -1) {
					c2 = do_parse_source_ind(acc);
					if (c2.choice != -1) {
						SyntaxTree(st_ref, 1, i, acc.i, [[c1], [c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ref, -1, i, i, [])
		}

	}

}

do_parse_source_term(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "term", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_expr(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_term, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected 'term'"
		updateExpectError(acc, "", "term", i);
		failSyntaxTree;
	}
}

do_parse_source_disjs(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_disjs2(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_disjs1(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_source_disjs0(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_disjs, -1, i, i, [])
			}

		}

	}

}

do_parse_source_disjs0(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "disjointed()", acc.i, acc.i + 12) == acc.i) {
		acc.i ::= acc.i + 12;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_disjs0, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected 'disjointed()'"
		updateExpectError(acc, "", "disjointed()", i);
		failSyntaxTree;
	}
}

do_parse_source_disjs1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "disjointed(", acc.i, acc.i + 11) == acc.i) {
		acc.i ::= acc.i + 11;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_disj(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
					acc.i ::= acc.i + 1;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_disjs1, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected ')'"
					updateExpectError(acc, "", ")", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'disjointed('"
		updateExpectError(acc, "", "disjointed(", i);
		failSyntaxTree;
	}
}

do_parse_source_disjs2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "disjointed(", acc.i, acc.i + 11) == acc.i) {
		acc.i ::= acc.i + 11;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_disj(acc);
			if (c2.choice != -1) {
				c3 = SyntaxStar(acc, do_parse_source_disjs2__auto56);
				if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
					acc.i ::= acc.i + 1;
					c5 = do_parse_source_ws(acc);
					if (c5.choice != -1) {
						SyntaxTree(st_disjs2, 0, i, acc.i, [[c1], [c2], c3, [c5]]);
					} else c5
				} else {
					// "Expected ')'"
					updateExpectError(acc, "", ")", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'disjointed('"
		updateExpectError(acc, "", "disjointed(", i);
		failSyntaxTree;
	}
}

do_parse_source_disj(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_symb);
	if (length(c0) >= 1) {
		SyntaxTree(st_disj, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one symb"
		updateExpectError(acc, "", "symb", i);
		failSyntaxTree;
	}
}

do_parse_source_vars(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_vars0(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_vars1(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_source_vars2(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_vars, -1, i, i, [])
			}

		}

	}

}

do_parse_source_vars0(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 && getCharCodeAt(acc.input, acc.i + 1) == 41 /* () */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_vars0, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '()'"
		updateExpectError(acc, "", "()", i);
		failSyntaxTree;
	}
}

do_parse_source_vars1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_var_decl(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
					acc.i ::= acc.i + 1;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_vars1, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected ')'"
					updateExpectError(acc, "", ")", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected '('"
		updateExpectError(acc, "", "(", i);
		failSyntaxTree;
	}
}

do_parse_source_vars2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_var_decl(acc);
			if (c2.choice != -1) {
				c3 = SyntaxStar(acc, do_parse_source_vars2__auto57);
				if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
					acc.i ::= acc.i + 1;
					c5 = do_parse_source_ws(acc);
					if (c5.choice != -1) {
						SyntaxTree(st_vars2, 0, i, acc.i, [[c1], [c2], c3, [c5]]);
					} else c5
				} else {
					// "Expected ')'"
					updateExpectError(acc, "", ")", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected '('"
		updateExpectError(acc, "", "(", i);
		failSyntaxTree;
	}
}

do_parse_source_var_decl(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_id(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
			acc.i ::= acc.i + 1;
			c2 = do_parse_source_ws(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_id(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_var_decl, 0, i, acc.i, [[c0], [c2], [c3]]);
				} else c3
			} else c2
		} else {
			// "Expected ':'"
			updateExpectError(acc, "", ":", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_expr(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
					acc.i ::= acc.i + 1;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						c5 = do_parse_source_expr__choice49(acc);
						if (c5.choice != -1) {
							c6 = SyntaxStar(acc, do_parse_source_symb);
							if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
								acc.i ::= acc.i + 2;
								SyntaxTree(st_expr, 0, i, acc.i, [[c1], [c2], [c4], [c5], c6]);
							} else {
								// "Expected ';;'"
								updateExpectError(acc, "", ";;", i);
								failSyntaxTree;
							}
						} else c5
					} else c4
				} else {
					// "Expected '='"
					updateExpectError(acc, "", "=", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected ':'"
		updateExpectError(acc, "", ":", i);
		failSyntaxTree;
	}
}

do_parse_source_symb(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_symb__auto58);
	if (length(c0) >= 1) {
		SyntaxTree(st_symb, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one symb$auto58"
		updateExpectError(acc, "", "symb$auto58", i);
		failSyntaxTree;
	}
}

do_parse_source_ind(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	TODO 4: Plus(CharRange("0", "9"))
}

do_parse_source_id(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_id__choice50);
	if (length(c0) >= 1) {
		SyntaxTree(st_id, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one id$choice50"
		updateExpectError(acc, "", "id$choice50", i);
		failSyntaxTree;
	}
}

do_parse_source_char_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_char_, 0, i, acc.i, []);
	} else {
		// "Expected ' '-'￿'"
		updateExpectError(acc, "", "' '-'￿'", i);
		failSyntaxTree;
	}
}

do_parse_source_ws(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_source_whitespace_);
	SyntaxTree(st_ws, 0, i, acc.i, []);
}

do_parse_source_s(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_whitespace_);
	if (length(c0) >= 1) {
		SyntaxTree(st_s, 0, i, acc.i, []);
	} else {
		// "Expected at least one whitespace_"
		updateExpectError(acc, "", "whitespace_", i);
		failSyntaxTree;
	}
}

do_parse_source_whitespace_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_whitespace_, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_whitespace_, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 10 /* 
				 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_whitespace_, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_source_comment(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 13 /*  */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_whitespace_, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_whitespace_, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_source_comment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_restOfComment(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_comment, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '/'"
		updateExpectError(acc, "", "/", i);
		failSyntaxTree;
	}
}

do_parse_source_restOfComment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 42 /* * */) {
			acc.i ::= acc.i + 1;
			c1 = SyntaxStar(acc, do_parse_source_nonstarchar_);
			if (c1 != []) {
				if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
					acc.i ::= acc.i + 2;
					i3 = acc.i;
					t3 = do_parse_source_restOfComment2(acc);
					c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
					SyntaxTree(st_restOfComment, 0, i, acc.i, [c3]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (strRangeIndexOf(acc.input, "**/", acc.i, acc.i + 3) == acc.i) {
				acc.i ::= acc.i + 3;
				i1 = acc.i;
				t1 = do_parse_source_restOfComment2(acc);
				c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
				SyntaxTree(st_restOfComment, 1, i, acc.i, [c1]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
					acc.i ::= acc.i + 1;
					c1 = SyntaxStar(acc, do_parse_source_nonlinebreakchar_);
					if (c1 != []) {
						if (getCharCodeAt(acc.input, acc.i) == 10 /* 
						 */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_restOfComment, 2, i, acc.i, []);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 10 /* /
					 */) {
						acc.i ::= acc.i + 2;
						SyntaxTree(st_restOfComment, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_restOfComment, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_source_restOfComment2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_source_restOfComment1);
	if (getCharCodeAt(acc.input, acc.i) == 10 /* 
	 */) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_restOfComment2, 0, i, acc.i, [c0]);
	} else {
		// "Expected '\n'"
		updateExpectError(acc, "", "\n", i);
		failSyntaxTree;
	}
}

do_parse_source_restOfComment1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_restOfComment1, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_restOfComment1, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_restOfComment1, -1, i, i, [])
		}

	}

}

do_parse_source_nonstarchar_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
		SyntaxTree(-42, -1, i, i, [])
	} else {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_nonstarchar_, 0, i, acc.i, []);
		} else c1
	}
}

do_parse_source_nonlinebreakchar_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 10 /* 
	 */) {
		SyntaxTree(-10, -1, i, i, [])
	} else {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_nonlinebreakchar_, 0, i, acc.i, []);
		} else c1
	}
}

do_parse_source_lastLineComment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 47 /* // */) {
		acc.i ::= acc.i + 2;
		c1 = SyntaxStar(acc, do_parse_source_nonlinebreakchar_);
		SyntaxTree(st_lastLineComment, 0, i, acc.i, []);
	} else {
		// "Expected '//'"
		updateExpectError(acc, "", "//", i);
		failSyntaxTree;
	}
}

do_parse_source_expr__choice49(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 35 /* # */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_expr__choice49, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 124 && getCharCodeAt(acc.input, acc.i + 1) == 45 /* |- */) {
				acc.i ::= acc.i + 2;
				SyntaxTree(st_expr__choice49, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_expr__choice49, -1, i, i, [])
		}

	}

}

do_parse_source_id__choice50(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (strRangeIndexOf(acc.input, "a-z", acc.i, acc.i + 3) == acc.i) {
			acc.i ::= acc.i + 3;
			SyntaxTree(st_id__choice50, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (strRangeIndexOf(acc.input, "A-Z", acc.i, acc.i + 3) == acc.i) {
				acc.i ::= acc.i + 3;
				SyntaxTree(st_id__choice50, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_id__choice50, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_id__choice50, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_id__choice50, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
								acc.i ::= acc.i + 1;
								SyntaxTree(st_id__choice50, 5, i, acc.i, []);
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree(st_Expected_id__choice50, -1, i, i, [])
						}

					}

				}

			}

		}

	}

}

do_parse_source_type__auto51(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = SyntaxPlus(acc, do_parse_source_id);
			if (length(c2) >= 1) {
				SyntaxTree(st_type__auto51, 0, i, acc.i, [[c1], c2]);
			} else {
				// "Expected at least one id"
				updateExpectError(acc, "", "id", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected ':'"
		updateExpectError(acc, "", ":", i);
		failSyntaxTree;
	}
}

do_parse_source_axiom2__auto52(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "hyp", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ind(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_expr(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_axiom2__auto52, 0, i, acc.i, [[c1], [c2], [c3]]);
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'hyp'"
		updateExpectError(acc, "", "hyp", i);
		failSyntaxTree;
	}
}

do_parse_source_def__auto53(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "hyp", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ind(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_expr(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_def__auto53, 0, i, acc.i, [[c1], [c2], [c3]]);
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'hyp'"
		updateExpectError(acc, "", "hyp", i);
		failSyntaxTree;
	}
}

do_parse_source_theorem2__auto54(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "hyp", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ind(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_expr(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_theorem2__auto54, 0, i, acc.i, [[c1], [c2], [c3]]);
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'hyp'"
		updateExpectError(acc, "", "hyp", i);
		failSyntaxTree;
	}
}

do_parse_source_refs2__auto55(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ref(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_refs2__auto55, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_source_disjs2__auto56(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_disj(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_disjs2__auto56, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_source_vars2__auto57(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_var_decl(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_vars2__auto57, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_source_symb__auto58(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
		SyntaxTree(-59, -1, i, i, [])
	} else {
		c1 = do_parse_source_ws(acc);
		if (c1.choice == -1) {
			SyntaxTree(st_symb__auto58, 0, i, acc.i, []);
		} else SyntaxTree(st_DidNotExpectsource_ws, -1, 1, acc.i, []);
	}
}




a := 2;
b := 3;
c := (1 + 2);
c := (1 + (2 * 3));
c := (1 + 3);
lam1 := \x, y -> (x + y);
print(a + " + " + b + " = " + lam1(a, b));

lam2 := \x -> (x + a);
print ("lam2(" + b + ") = " + lam2(b));
a := 3;
print ("lam2(" + b + ") = " + lam2(b));

fact := \n -> ((n == 0) ? 1 : (n * fact((n - 1))));
print ("fact !!!= " + fact);

print ("fact(5) = " + fact(5));


print ("1) 1 + 2 = " + (1 + 2));
print ("2) 1 + 2 = " + 1 + 2);



fact1 := \n -> (
	(n == 0) ? 1 : 
	(n * 
		fact1((n - 1))
	)
);

print ("fact1 = " + fact1);
print ("fact1(5) = " + fact1(5));

arr1 := [1, 2, 3];
print("arr1: " + arr1);
print("arr1[1] = " + arr1[1]);
print("arr1[0] = " + arr1[0]);
//print("arr1[3] = " + arr1[3]);

print ("strGlue([a, b, c], -) = " + strGlue(["a", "b", "c"], "-"));
print ("superglue([1, 2, 3], i2s, -) = " + superglue([1, 2, 3], i2s, "-"));
print ("superglue([1, 2, 3], \x -> i2s(x), -) = " + superglue([1, 2, 3], \x -> i2s(x), "-"));


map1 := {"a" = 1, "b" = 2, "c" = 3};

print("map1: " + map1);

xxx := "AAA";
print("xxx: " + xxx);

print("map1.a = " + map1.a);
print("map1.b = " + map1.b);
print("map1.x = " + map1.x);


print("map1[a] = " + map1["a"]);
print("map1[b] = " + map1["b"]);
print("map1[x] = " + map1["x"]);


map2 := {ax = 1, bx = 2, cx = {f1 = "AA", f2 = [{a = 0.001, b = "???"}  ]}};
print("map2: " + map2);
print("map2.a = " + map2.ax);
print("map2.b = " + map2.bx);
print("map2.x = " + map2.xx);
print("map2.cx = " + map2.cx);
print("(map2.cx).f2 = " + (map2.cx).f2);
print("((map2.cx).f2)[1] = " + ((map2.cx).f2)[0]);
print("(((map2.cx).f2)[1]).b = " + (((map2.cx).f2)[0]).b);

print("map2.cx.f2 = " + map2.cx.f2);
print("map2.cx.f2[1] = " + map2.cx.f2[0]);
print("map2.cx.f2[1].b = " + map2.cx.f2[0].b);

str := Triple(1, "a", true);
print("str: " + str);
print("str.first: " + str.first);
print("str.second: " + str.second);
print("str.third: " + str.third);
print("str.fourth: " + str.fourth);


//var.a.b.c[fact1(3)].d := 45;

arr1[1] := "AAA";
print arr1;
arr1[1] := Pair("A", 1);
print arr1;
arr1[1].first := [1, 2, 3];
print arr1;
arr1[1].first[1] := Triple("XX", 34, false);
print arr1;

print ruCurrentWorkingDir();

assert (1 == 1);
print "assert (1 == 1)";
assert (1 == "1");
print "assert (1 == \"1\")";

//assert (1 == 2);
//print "assert (1 == 2)";

ss := \xA -> let bb = 3; \-> (bb + xA);

print-ast \xA -> let bb = 3; \-> (bb + xA);
print (ss(2))();
//lll = \ -> 
//	let a = 1; 
//	\x -> (a + x);
print-ast \ -> 
	let a = 1; 
	\x -> (a + x);
//print ("lll: " + (lll())(2));

//print current-script;
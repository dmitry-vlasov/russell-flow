/**
	@help { Translates a $afile.mm to a directory$adir/$afile/$afile.ru }
	@defarg afile
	@category translate
	@arg afile { input metamath file without .mm extension @defval set }
*/

if (conf.workingDir != "") {
	print ("(conf.workingDir != ''): '" + conf.workingDir + "'");
    adir := conf.workingDir;
} else {
    adir := ruCurrentWorkingDir();
}

print "Translation: Metamath --> Russell";
print "---------------------------------";
print "file: $afile, dir: $adir";
print "";

conf-push
	project=$afile
	project-roots=$adir/$afile/$afile.ru
	import-roots=$adir/$afile
	ru-root=$adir/$afile
	verbose=0;
conf-save dir=$adir/$afile;

conf-pop;


//stats-mem;
conf-set 
    die-at-verify-failure=1 
    project-roots=
    mm-decompress-proofs=0
	verbose=0;


conf-set gc-after-task=1;

info_total := \size, time -> println(("(A)mm read: " + size + " files in " + time));
info_source := \src, time -> println(("\t(A)mm read: " + src + " file in " + time));

read-mm $afile.mm info-total=info_total info-source=info_source;
//read-mm $afile.mm;
	print ("mm read: " + read-mm.size + " files in " + time2s(read-mm.time));

conf-set import-roots=$adir;

//conf verb=1;
mm-decompress-proofs;
	print ("mm decompressed: " + mm-decompress-proofs.size + " proofs in " + time2s(mm-decompress-proofs.time));
mm-verify;
	print ("mm verified: " + mm-verify.size + " files in " + time2s(mm-verify.time));
mm-split-source $afile.mm;
	print ("mm splited into: " + split-source-mm.size + " files in " + time2s(split-source-mm.time));
conf-load dir=$adir/$afile;

mm-html2md;
	print ("mm html to markdown in " + time2s(mm-html2md.time));


//info-volume;

//conf verbose=1;

mm-to-ru $afile.mm;
	print ("mm translated: " + mm-to-ru.size + " files in " + time2s(mm-to-ru.time));

//conf verbose=0;
clear-math what=mm;

conf-set import-roots=$adir/$afile;
//stats-mem;
//output_mem_stats;

//conf verb=2;
ru-remove-trivial-sources keep=$afile;
	print ("ru removed: " + ru-remove-trivial-sources.size + " trivial sources in " + time2s(ru-remove-trivial-sources.time));
//conf verb=0;

optimize-imports-ru;
	print ("ru optimized imports (1) of: " + optimize-imports-ru.size + " files in " + time2s(optimize-imports-ru.time));
optimize-imports-ru;
	print ("ru optimized imports (2) of: " + optimize-imports-ru.size + " files in " + time2s(optimize-imports-ru.time));

verify;
	print ("ru verified: " + verify.size + " theorems in " + time2s(verify.time));
//stats-mem;
//output_mem_stats;
//info-volume;
	print "	Mem BEFORE write:";
	output_mem_stats;

write-ru;
print ("ru has written: " + write-ru.size + " files in " + time2s(write-ru.time));
	print "	Mem AFTER write:";
	output_mem_stats;

info-volume;
stats-math;
output_mem_stats;
run-gc;
output_mem_stats;
/**
@help { 
	Optimizes all math sources in given directory.
	Performs follwing optimizations:
	- optimization of hypothesis
	- shorten proofs
	- removes trivial theorems
}
@category refactor
@arg time_limit { Global time limit on optimization, sec. @defval 900 }
*/

print "Going to optimize. time limit: $time_limit s.";

started = time();

conf progress-update-sec=3.0;

read;
have_read = true;
output_math_stats;

stats-math-1;
steps_before  = [[[stats-math-1.stats: "assertions"]: 1]: "steps"];
initial_steps = steps_before;
initial_hyps = [[[stats-math-1.stats: "assertions"]: 1]: "hyps"];

optimized = 1;
was_optimized_globally = false;

while (optimized > 0) {
	optimize_hyps;
	optimize_shorten time_limit=$time_limit;
	conf verbose=2;
	remove-trivial-theorems;
	conf verbose=1;
	verify;
	conf verbose=0;
	stats-math-1;
	steps_after  = [[[stats-math-1.stats: "assertions"]: 1]: "steps"];
	optimized = (steps_before - steps_after);
	steps_before = steps_after;
	if (optimized > 0) {
		was_optimized_globally = true;
	}
}

output_math_stats;

if was_optimized_globally {
	final_hyps = [[[stats-math-1.stats: "assertions"]: 1]: "hyps"];
	final_steps = [[[stats-math-1.stats: "assertions"]: 1]: "steps"];
	print ("totally reduced: " + (initial_steps - final_steps) + " steps and " + (initial_hyps - final_hyps) + " hyps");
    print "writing optimized globally math ... ";
    write-ru;
	print ("optimized globally math is written in " + time2s(write-ru.time) + ", total optimization time: " + time2s((time() - started)));
} else {
    print ("nothing was globally optimzied, " + time2s((time() - started)) + " passed");
}


/**
@help { 
	Optimizes all math sources in given directory.
	Performs follwing optimizations:
	- optimization of hypothesis
	- shorten proofs
	- removes trivial theorems
}
@category refactor
@arg time_limit { Global time limit on optimization, sec. @defval 900 }
@arg iter_limit { Limit on optimization cycles number. Set to -1 to make unlimited. @defval 10 }
*/

print "Going to optimize. time limit: $time_limit s., iteration limit: $iter_limit";

started = time();

conf progress-update-sec=3.0;

read;
have_read = true;
output_math_stats;

stats-math-1;
steps_before  = [[[stats-math-1.stats: "assertions"]: 1]: "steps"];
initial_steps = steps_before;
initial_hyps = [[[stats-math-1.stats: "assertions"]: 1]: "hyps"];

optimized = 1;
was_optimized_globally = false;
iteration = 1;

while ((optimized > 0) && ((iteration <= a2i(iter_limit)) || (a2i(iter_limit) == -1))) {
	print ("Iteration: " + iteration);
	optimize_hyps;
	optimize_shorten time_limit=$time_limit;
	remove-trivial-theorems;
	verify;
	stats-math-1;
	steps_after  = [[[stats-math-1.stats: "assertions"]: 1]: "steps"];
	optimized = (steps_before - steps_after);
	steps_before = steps_after;
	if (optimized > 0) {
		was_optimized_globally = true;
	}
	iteration = (1 + iteration);
	/*
	print ("iteration: " + iteration);
	print ("a2i(iter_limit): " + a2i(iter_limit));
	print ("(optimized > 0): " + (optimized > 0));
	print ("(iteration <= a2i(iter_limit)): " + (iteration <= a2i(iter_limit)));
	print ("(a2i(iter_limit) == -1): " + (a2i(iter_limit) == -1));
	print ("((iteration <= a2i(iter_limit)) || (a2i(iter_limit) == -1): " +  ((iteration <= a2i(iter_limit)) || (a2i(iter_limit) == -1));
	print ("((optimized > 0) && ((iteration <= a2i(iter_limit)) || (a2i(iter_limit) == -1))): " + ((optimized > 0) && ((iteration <= a2i(iter_limit)) || (a2i(iter_limit) == -1))));
	*/
}

print ("iteration: " + iteration + " THE LAST");

output_math_stats;

if was_optimized_globally {
	final_hyps = [[[stats-math-1.stats: "assertions"]: 1]: "hyps"];
	final_steps = [[[stats-math-1.stats: "assertions"]: 1]: "steps"];
	print ("totally reduced: " + (initial_steps - final_steps) + " steps and " + (initial_hyps - final_hyps) + " hyps");
    print "writing optimized globally math ... ";
    write-ru;
	print ("optimized globally math is written in " + time2s(write-ru.time) + ", total optimization time: " + time2s((time() - started)));
} else {
    print ("nothing was globally optimzied, " + time2s((time() - started)) + " passed");
}


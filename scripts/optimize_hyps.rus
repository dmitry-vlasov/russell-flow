/**
@help { 
	Iterates optimization of:
	- remove-duplicate-steps
	- remove-unused-steps
	- remove-unused-hyps
	until these actions make no effect.
	After oprimization writes the result.
}
@autoindent
@category refactor
*/

if !isdef(have_read) {
	read;
}

iteration = 1;
optimized = 1;
was_optimized = false;

print "Optimizing hyps ...";
print "";

while (optimized > 0) {
    print ("iteration " + iteration); 
    iteration = (iteration + 1);
    remove-duplicate-steps;
	print ("duplicate steps: " + remove-duplicate-steps.optimized-steps + " in " + time2s(remove-duplicate-steps.time));
    remove-unused-steps;
	print ("unused steps: " + remove-unused-steps.optimized-steps + " in " + time2s(remove-unused-steps.time));
    remove-unused-hyps;
	print ("remove-unused-hyps: " + remove-unused-hyps.optimized-hyps + " in " + time2s(remove-unused-hyps.time));
    optimized = (
        remove-duplicate-steps.optimized-theorems +
        remove-unused-steps.optimized-theorems +
        remove-unused-hyps.optimized-theorems
    );
    if (optimized > 0) {
        was_optimized = true;
    }
    print ("optimized " + optimized); 
}

if was_optimized {
    print "writing optimized hyps math ... ";
    write-ru;
	print ("optimized hyps math are written in " + time2s(write-ru.time));
} else {
    print "nothing was optimzied";
}

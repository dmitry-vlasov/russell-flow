import string;
import lingo/compiler/syntaxtree_types;
import parse/ru_parse_ast_mnemonics;

export {
	parse_source(t : string) -> Pair<SyntaxTree, ExpectError>;
}

parse_source(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [], noExpectError);
	r = do_parse_source_source(acc);
	Pair(r, acc.expect);
}
do_parse_source_source(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 65279 /* ï»¿ */) {
		acc.i ::= acc.i + 1;
	}
	c1 = do_parse_source_ws(acc);
	if (c1.choice != -1) {
		c2 = SyntaxStar(acc, do_parse_source_decl);
		SyntaxTree(st_source, 0, i, acc.i, [[c1], c2]);
	} else c1
}

do_parse_source_decl(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_import(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_const(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_source_type(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_source_rule(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_source_axiom(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_source_def(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_source_theorem(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_source_scomment(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										c0 = do_parse_source_comment(acc);
										if (c0.choice != -1) {
											c0
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										SyntaxTree(st_Expected_decl, -1, i, i, [])
									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_source_import(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "import", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_symb(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
					acc.i ::= acc.i + 2;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_import, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected ';;'"
					updateExpectError(acc, "", ";;", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'import'"
		updateExpectError(acc, "", "import", i);
		failSyntaxTree;
	}
}

do_parse_source_comment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_scomment(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_mcomment(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_comment, -1, i, i, [])
		}

	}

}

do_parse_source_scomment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 47 /* // */) {
		acc.i ::= acc.i + 2;
		c1 = SyntaxStar(acc, do_parse_source_scomment__auto49);
		if (getCharCodeAt(acc.input, acc.i) == 10 /* 
		 */) {
			acc.i ::= acc.i + 1;
			c3 = do_parse_source_ws(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_scomment, 0, i, acc.i, [c1, [c3]]);
			} else c3
		} else {
			// "Expected '\n'"
			updateExpectError(acc, "", "\n", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '//'"
		updateExpectError(acc, "", "//", i);
		failSyntaxTree;
	}
}

do_parse_source_mcomment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 42 /* /* */) {
		acc.i ::= acc.i + 2;
		c1 = SyntaxStar(acc, do_parse_source_mcomment__auto50);
		if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
			acc.i ::= acc.i + 2;
			c3 = do_parse_source_ws(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_mcomment, 0, i, acc.i, [c1, [c3]]);
			} else c3
		} else {
			// "Expected '*/'"
			updateExpectError(acc, "", "*/", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '/*'"
		updateExpectError(acc, "", "/*", i);
		failSyntaxTree;
	}
}

do_parse_source_const(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "constant", acc.i, acc.i + 8) == acc.i) {
		acc.i ::= acc.i + 8;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_source_symbol(acc);
				if (c3.choice != -1) {
					i4 = acc.i;
					t4 = do_parse_source_ascii(acc);
					c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
					i5 = acc.i;
					t5 = do_parse_source_latex(acc);
					c5 = if (t5.choice == -1) {acc.i ::= i5; [] } else [t5];
					if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
						acc.i ::= acc.i + 1;
						c7 = do_parse_source_ws(acc);
						if (c7.choice != -1) {
							SyntaxTree(st_const, 0, i, acc.i, [[c1], [c3], c4, c5, [c7]]);
						} else c7
					} else {
						// "Expected '}'"
						updateExpectError(acc, "", "}", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected '{'"
				updateExpectError(acc, "", "{", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected 'constant'"
		updateExpectError(acc, "", "constant", i);
		failSyntaxTree;
	}
}

do_parse_source_symbol(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "symbol", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_symb(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
					acc.i ::= acc.i + 2;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_symbol, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected ';;'"
					updateExpectError(acc, "", ";;", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'symbol'"
		updateExpectError(acc, "", "symbol", i);
		failSyntaxTree;
	}
}

do_parse_source_ascii(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "ascii", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_symb(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
					acc.i ::= acc.i + 2;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_ascii, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected ';;'"
					updateExpectError(acc, "", ";;", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'ascii'"
		updateExpectError(acc, "", "ascii", i);
		failSyntaxTree;
	}
}

do_parse_source_latex(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "latex", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_symb(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
					acc.i ::= acc.i + 2;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_latex, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected ';;'"
					updateExpectError(acc, "", ";;", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'latex'"
		updateExpectError(acc, "", "latex", i);
		failSyntaxTree;
	}
}

do_parse_source_type(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "type", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				i3 = acc.i;
				t3 = do_parse_source_type__auto51(acc);
				c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
				if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
					acc.i ::= acc.i + 2;
					c5 = do_parse_source_ws(acc);
					if (c5.choice != -1) {
						SyntaxTree(st_type, 0, i, acc.i, [[c1], [c2], c3, [c5]]);
					} else c5
				} else {
					// "Expected ';;'"
					updateExpectError(acc, "", ";;", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'type'"
		updateExpectError(acc, "", "type", i);
		failSyntaxTree;
	}
}

do_parse_source_supers(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_id(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_source_super);
		SyntaxTree(st_supers, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_source_super(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_super, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_source_rule(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "rule", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_vars(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							c6 = do_parse_source_term(acc);
							if (c6.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
									acc.i ::= acc.i + 1;
									c8 = do_parse_source_ws(acc);
									if (c8.choice != -1) {
										SyntaxTree(st_rule, 0, i, acc.i, [[c1], [c2], [c3], [c5], [c6], [c8]]);
									} else c8
								} else {
									// "Expected '}'"
									updateExpectError(acc, "", "}", i);
									failSyntaxTree;
								}
							} else c6
						} else c5
					} else {
						// "Expected '{'"
						updateExpectError(acc, "", "{", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'rule'"
		updateExpectError(acc, "", "rule", i);
		failSyntaxTree;
	}
}

do_parse_source_axiom(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "axiom", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				i3 = acc.i;
				t3 = do_parse_source_vars(acc);
				c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
				i4 = acc.i;
				t4 = do_parse_source_disjs(acc);
				c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
				if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
					acc.i ::= acc.i + 1;
					c6 = do_parse_source_ws(acc);
					if (c6.choice != -1) {
						i7 = acc.i;
						t7 = do_parse_source_axiom__auto52(acc);
						c7 = if (t7.choice == -1) {acc.i ::= i7; [] } else [t7];
						c8 = do_parse_source_prop(acc);
						if (c8.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
								acc.i ::= acc.i + 1;
								c10 = do_parse_source_ws(acc);
								if (c10.choice != -1) {
									SyntaxTree(st_axiom, 0, i, acc.i, [[c1], [c2], c3, c4, [c6], c7, [c8], [c10]]);
								} else c10
							} else {
								// "Expected '}'"
								updateExpectError(acc, "", "}", i);
								failSyntaxTree;
							}
						} else c8
					} else c6
				} else {
					// "Expected '{'"
					updateExpectError(acc, "", "{", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'axiom'"
		updateExpectError(acc, "", "axiom", i);
		failSyntaxTree;
	}
}

do_parse_source_hyps(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_hyp);
	if (length(c0) >= 1) {
		SyntaxTree(st_hyps, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one hyp"
		updateExpectError(acc, "", "hyp", i);
		failSyntaxTree;
	}
}

do_parse_source_hyp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "hyp", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ind(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_expr(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_hyp, 0, i, acc.i, [[c1], [c2], [c3]]);
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'hyp'"
		updateExpectError(acc, "", "hyp", i);
		failSyntaxTree;
	}
}

do_parse_source_def(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "definition", acc.i, acc.i + 10) == acc.i) {
		acc.i ::= acc.i + 10;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				i3 = acc.i;
				t3 = do_parse_source_vars(acc);
				c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
				i4 = acc.i;
				t4 = do_parse_source_disjs(acc);
				c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
				if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
					acc.i ::= acc.i + 1;
					c6 = do_parse_source_ws(acc);
					if (c6.choice != -1) {
						i7 = acc.i;
						t7 = do_parse_source_hyps(acc);
						c7 = if (t7.choice == -1) {acc.i ::= i7; [] } else [t7];
						c8 = do_parse_source_defiendum(acc);
						if (c8.choice != -1) {
							c9 = do_parse_source_definiens(acc);
							if (c9.choice != -1) {
								if (strRangeIndexOf(acc.input, "-----", acc.i, acc.i + 5) == acc.i) {
									acc.i ::= acc.i + 5;
									SyntaxStar(acc, \na ->
										if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
											acc.i ::= acc.i + 1;
											dummySyntaxTree;
										} else {
											failSyntaxTree
										}
									);
									c12 = do_parse_source_prop(acc);
									if (c12.choice != -1) {
										if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
											acc.i ::= acc.i + 1;
											c14 = do_parse_source_ws(acc);
											if (c14.choice != -1) {
												SyntaxTree(st_def, 0, i, acc.i, [[c1], [c2], c3, c4, [c6], c7, [c8], [c9], [c12], [c14]]);
											} else c14
										} else {
											// "Expected '}'"
											updateExpectError(acc, "", "}", i);
											failSyntaxTree;
										}
									} else c12
								} else {
									// "Expected '-----'"
									updateExpectError(acc, "", "-----", i);
									failSyntaxTree;
								}
							} else c9
						} else c8
					} else c6
				} else {
					// "Expected '{'"
					updateExpectError(acc, "", "{", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'definition'"
		updateExpectError(acc, "", "definition", i);
		failSyntaxTree;
	}
}

do_parse_source_defiendum(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "defiendum", acc.i, acc.i + 9) == acc.i) {
		acc.i ::= acc.i + 9;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_expr(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_defiendum, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected 'defiendum'"
		updateExpectError(acc, "", "defiendum", i);
		failSyntaxTree;
	}
}

do_parse_source_definiens(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "definiens", acc.i, acc.i + 9) == acc.i) {
		acc.i ::= acc.i + 9;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_expr(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_definiens, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected 'definiens'"
		updateExpectError(acc, "", "definiens", i);
		failSyntaxTree;
	}
}

do_parse_source_prop(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "prop", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_expr(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_prop, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected 'prop'"
		updateExpectError(acc, "", "prop", i);
		failSyntaxTree;
	}
}

do_parse_source_theorem(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "theorem", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				i3 = acc.i;
				t3 = do_parse_source_vars(acc);
				c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
				i4 = acc.i;
				t4 = do_parse_source_disjs(acc);
				c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
				if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
					acc.i ::= acc.i + 1;
					c6 = do_parse_source_ws(acc);
					if (c6.choice != -1) {
						i7 = acc.i;
						t7 = do_parse_source_theorem__auto53(acc);
						c7 = if (t7.choice == -1) {acc.i ::= i7; [] } else [t7];
						c8 = do_parse_source_prop(acc);
						if (c8.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
								acc.i ::= acc.i + 1;
								c10 = do_parse_source_ws(acc);
								if (c10.choice != -1) {
									c11 = do_parse_source_proof(acc);
									if (c11.choice != -1) {
										SyntaxTree(st_theorem, 0, i, acc.i, [[c1], [c2], c3, c4, [c6], c7, [c8], [c10], [c11]]);
									} else c11
								} else c10
							} else {
								// "Expected '}'"
								updateExpectError(acc, "", "}", i);
								failSyntaxTree;
							}
						} else c8
					} else c6
				} else {
					// "Expected '{'"
					updateExpectError(acc, "", "{", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected 'theorem'"
		updateExpectError(acc, "", "theorem", i);
		failSyntaxTree;
	}
}

do_parse_source_proof(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "proof", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_source_vars(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			i3 = acc.i;
			t3 = do_parse_source_disjs(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
				acc.i ::= acc.i + 1;
				c5 = do_parse_source_ws(acc);
				if (c5.choice != -1) {
					c6 = SyntaxStar(acc, do_parse_source_step);
					if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
						acc.i ::= acc.i + 1;
						c8 = do_parse_source_ws(acc);
						if (c8.choice != -1) {
							SyntaxTree(st_proof, 0, i, acc.i, [[c1], c2, c3, [c5], c6, [c8]]);
						} else c8
					} else {
						// "Expected '}'"
						updateExpectError(acc, "", "}", i);
						failSyntaxTree;
					}
				} else c5
			} else {
				// "Expected '{'"
				updateExpectError(acc, "", "{", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected 'proof'"
		updateExpectError(acc, "", "proof", i);
		failSyntaxTree;
	}
}

do_parse_source_step(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "step", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ind(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_type_id(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_source_id(acc);
						if (c5.choice != -1) {
							c6 = do_parse_source_refs(acc);
							if (c6.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 124 && getCharCodeAt(acc.input, acc.i + 1) == 45 /* |- */) {
									acc.i ::= acc.i + 2;
									c8 = SyntaxStar(acc, do_parse_source_symb);
									if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
										acc.i ::= acc.i + 2;
										c10 = do_parse_source_ws(acc);
										if (c10.choice != -1) {
											SyntaxTree(st_step, 0, i, acc.i, [[c1], [c2], [c3], [c5], [c6], c8, [c10]]);
										} else c10
									} else {
										// "Expected ';;'"
										updateExpectError(acc, "", ";;", i);
										failSyntaxTree;
									}
								} else {
									// "Expected '|-'"
									updateExpectError(acc, "", "|-", i);
									failSyntaxTree;
								}
							} else c6
						} else c5
					} else {
						// "Expected '='"
						updateExpectError(acc, "", "=", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'step'"
		updateExpectError(acc, "", "step", i);
		failSyntaxTree;
	}
}

do_parse_source_refs(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_source_refs__auto54(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_refs, 0, i, acc.i, [[c1], c2]);
			} else {
				// "Expected ')'"
				updateExpectError(acc, "", ")", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected '('"
		updateExpectError(acc, "", "(", i);
		failSyntaxTree;
	}
}

do_parse_source_refs1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_source_refs1__auto55);
	SyntaxTree(st_refs1, 0, i, acc.i, [c0]);
}

do_parse_source_ref(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_hyp_ref(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_step_ref(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ref, -1, i, i, [])
		}

	}

}

do_parse_source_hyp_ref(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "hyp", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ind(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_hyp_ref, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected 'hyp'"
		updateExpectError(acc, "", "hyp", i);
		failSyntaxTree;
	}
}

do_parse_source_step_ref(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "step", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ind(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_step_ref, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected 'step'"
		updateExpectError(acc, "", "step", i);
		failSyntaxTree;
	}
}

do_parse_source_term(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "term", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_expr(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_term, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected 'term'"
		updateExpectError(acc, "", "term", i);
		failSyntaxTree;
	}
}

do_parse_source_disjs(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "disjointed(", acc.i, acc.i + 11) == acc.i) {
		acc.i ::= acc.i + 11;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_source_disjs__auto56(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
				acc.i ::= acc.i + 1;
				c4 = do_parse_source_ws(acc);
				if (c4.choice != -1) {
					SyntaxTree(st_disjs, 0, i, acc.i, [[c1], c2, [c4]]);
				} else c4
			} else {
				// "Expected ')'"
				updateExpectError(acc, "", ")", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected 'disjointed('"
		updateExpectError(acc, "", "disjointed(", i);
		failSyntaxTree;
	}
}

do_parse_source_disjs1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_source_disjs1__auto57);
	SyntaxTree(st_disjs1, 0, i, acc.i, [c0]);
}

do_parse_source_disj(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_disj__auto58);
	if (length(c0) >= 1) {
		SyntaxTree(st_disj, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one disj$auto58"
		updateExpectError(acc, "", "disj$auto58", i);
		failSyntaxTree;
	}
}

do_parse_source_vars(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
		acc.i ::= acc.i + 1;
		i1 = acc.i;
		t1 = do_parse_source_vars__auto59(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_vars, 0, i, acc.i, [c1]);
		} else {
			// "Expected ')'"
			updateExpectError(acc, "", ")", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '('"
		updateExpectError(acc, "", "(", i);
		failSyntaxTree;
	}
}

do_parse_source_vars1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_var(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_vars1, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_source_var(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_source_type_id(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_var, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_source_type_id(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_id(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_type_id, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ':'"
		updateExpectError(acc, "", ":", i);
		failSyntaxTree;
	}
}

do_parse_source_expr(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_type_id(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			acc.i ::= acc.i + 1;
			c2 = do_parse_source_ws(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_expr__choice46(acc);
				if (c3.choice != -1) {
					c4 = do_parse_source_symbs(acc);
					if (c4.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
							acc.i ::= acc.i + 2;
							c6 = do_parse_source_ws(acc);
							if (c6.choice != -1) {
								SyntaxTree(st_expr, 0, i, acc.i, [[c0], [c2], [c3], [c4], [c6]]);
							} else c6
						} else {
							// "Expected ';;'"
							updateExpectError(acc, "", ";;", i);
							failSyntaxTree;
						}
					} else c4
				} else c3
			} else c2
		} else {
			// "Expected '='"
			updateExpectError(acc, "", "=", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_symbs(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_source_symb);
	SyntaxTree(st_symbs, 0, i, acc.i, [c0]);
}

do_parse_source_symb(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_symb__auto60);
	if (length(c0) >= 1) {
		SyntaxTree(st_symb, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one symb$auto60"
		updateExpectError(acc, "", "symb$auto60", i);
		failSyntaxTree;
	}
}

do_parse_source_ind(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_digit);
	if (length(c0) >= 1) {
		SyntaxTree(st_ind, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one digit"
		updateExpectError(acc, "", "digit", i);
		failSyntaxTree;
	}
}

do_parse_source_digit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_digit, 0, i, acc.i, []);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_source_id(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_id__choice48);
	if (length(c0) >= 1) {
		SyntaxTree(st_id, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one id$choice48"
		updateExpectError(acc, "", "id$choice48", i);
		failSyntaxTree;
	}
}

do_parse_source_char_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_char_, 0, i, acc.i, []);
	} else {
		// "Expected ' '-'ï¿¿'"
		updateExpectError(acc, "", "' '-'ï¿¿'", i);
		failSyntaxTree;
	}
}

do_parse_source_ws(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_source_space);
	SyntaxTree(st_ws, 0, i, acc.i, [c0]);
}

do_parse_source_space(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_space, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_space, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 10 /* 
				 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_space, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 13 /* 
 */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_space, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_space, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_source_expr__choice46(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 35 /* # */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_expr__choice46, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 124 && getCharCodeAt(acc.input, acc.i + 1) == 45 /* |- */) {
				acc.i ::= acc.i + 2;
				SyntaxTree(st_expr__choice46, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_expr__choice46, -1, i, i, [])
		}

	}

}

do_parse_source_symb__choice47(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 59 && getCharCodeAt(acc.input, acc.i + 1) == 59 /* ;; */) {
			acc.i ::= acc.i + 2;
			SyntaxTree(st_symb__choice47, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_space(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_symb__choice47, -1, i, i, [])
		}

	}

}

do_parse_source_id__choice48(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (strRangeIndexOf(acc.input, "a-z", acc.i, acc.i + 3) == acc.i) {
			acc.i ::= acc.i + 3;
			SyntaxTree(st_id__choice48, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (strRangeIndexOf(acc.input, "A-Z", acc.i, acc.i + 3) == acc.i) {
				acc.i ::= acc.i + 3;
				SyntaxTree(st_id__choice48, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_id__choice48, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_id__choice48, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_id__choice48, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
								acc.i ::= acc.i + 1;
								SyntaxTree(st_id__choice48, 5, i, acc.i, []);
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree(st_Expected_id__choice48, -1, i, i, [])
						}

					}

				}

			}

		}

	}

}

do_parse_source_scomment__auto49(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 10 /* 
	 */) {
		SyntaxTree(-10, -1, i, i, [])
	} else {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_scomment__auto49, 0, i, acc.i, []);
		} else c1
	}
}

do_parse_source_mcomment__auto50(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
		SyntaxTree(-42, -1, i, i, [])
	} else {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_mcomment__auto50, 0, i, acc.i, []);
		} else c1
	}
}

do_parse_source_type__auto51(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_supers(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_type__auto51, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected ':'"
		updateExpectError(acc, "", ":", i);
		failSyntaxTree;
	}
}

do_parse_source_axiom__auto52(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_hyps(acc);
	if (c0.choice != -1) {
		if (strRangeIndexOf(acc.input, "-----", acc.i, acc.i + 5) == acc.i) {
			acc.i ::= acc.i + 5;
			SyntaxStar(acc, \na ->
				if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
					acc.i ::= acc.i + 1;
					dummySyntaxTree;
				} else {
					failSyntaxTree
				}
			);
			SyntaxTree(st_axiom__auto52, 0, i, acc.i, [[c0]]);
		} else {
			// "Expected '-----'"
			updateExpectError(acc, "", "-----", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_theorem__auto53(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_hyps(acc);
	if (c0.choice != -1) {
		if (strRangeIndexOf(acc.input, "-----", acc.i, acc.i + 5) == acc.i) {
			acc.i ::= acc.i + 5;
			SyntaxStar(acc, \na ->
				if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
					acc.i ::= acc.i + 1;
					dummySyntaxTree;
				} else {
					failSyntaxTree
				}
			);
			SyntaxTree(st_theorem__auto53, 0, i, acc.i, [[c0]]);
		} else {
			// "Expected '-----'"
			updateExpectError(acc, "", "-----", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_refs__auto54(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_ref(acc);
	if (c0.choice != -1) {
		c1 = do_parse_source_refs1(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_refs__auto54, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_source_refs1__auto55(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_ref(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_refs1__auto55, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_source_disjs__auto56(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_disj(acc);
	if (c0.choice != -1) {
		c1 = do_parse_source_disjs1(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_disjs__auto56, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_source_disjs1__auto57(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_source_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_disj(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_disjs1__auto57, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_source_disj__auto58(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		SyntaxTree(-44, -1, i, i, [])
	} else {
		if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
			SyntaxTree(-41, -1, i, i, [])
		} else {
			c2 = do_parse_source_symb(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_disj__auto58, 0, i, acc.i, [[c2]]);
			} else c2
		}
	}
}

do_parse_source_vars__auto59(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_var(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_source_vars1);
		SyntaxTree(st_vars__auto59, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_source_symb__auto60(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_symb__choice47(acc);
	if (c0.choice == -1) {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_symb__auto60, 0, i, acc.i, []);
		} else c1
	} else SyntaxTree(st_DidNotExpectflow_symb__choice47, -1, 0, acc.i, []);
}


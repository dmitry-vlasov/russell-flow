import lingo/compiler/syntaxtree_types;
import parse/ru_load_ast_mnemonics;

export {
	get_load_block_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_import(st : SyntaxTree) -> SyntaxTree;
	get_load_path(st : SyntaxTree) -> SyntaxTree;
	get_load_other(st : SyntaxTree) -> SyntaxTree;
	get_load_ws(st : SyntaxTree) -> SyntaxTree;
	get_load_space(st : SyntaxTree) -> SyntaxTree;
	get_load_comment(st : SyntaxTree) -> SyntaxTree;
	get_load_scomment(st : SyntaxTree) -> SyntaxTree;
	get_load_mcomment(st : SyntaxTree) -> SyntaxTree;
	get_load_char_(st : SyntaxTree) -> SyntaxTree;
	get_load_ws__choice11(st : SyntaxTree) -> SyntaxTree;
	get_load_ws__choice11_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_path__auto12(st : SyntaxTree) -> SyntaxTree;
	get_load_path__auto12_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_other__auto13(st : SyntaxTree) -> SyntaxTree;
	get_load_other__auto13_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_scomment__auto14(st : SyntaxTree) -> SyntaxTree;
	get_load_scomment__auto14_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_mcomment__auto15(st : SyntaxTree) -> SyntaxTree;
	get_load_mcomment__auto15_s(st : SyntaxTree) -> [SyntaxTree];

}

get_load_import(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_block) {
		st.children[0][0];
	} else failSyntaxTree
}
get_load_path(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_import) {
		st.children[1][0];
	} else failSyntaxTree
}
get_load_other(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_block) {
		st.children[0][0];
	} else failSyntaxTree
}
get_load_ws(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_load) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_scomment) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_mcomment) {
		st.children[1][0];
	} else failSyntaxTree
}
get_load_space(st : SyntaxTree) -> SyntaxTree {
	if (get_load_ws__choice11(st) != failSyntaxTree) {
		get_load_ws__choice11(st);
	} else failSyntaxTree
}
get_load_comment(st : SyntaxTree) -> SyntaxTree {
	if (get_load_ws__choice11(st) != failSyntaxTree) {
		get_load_ws__choice11(st);
	} else failSyntaxTree
}
get_load_scomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_load_mcomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_load_char_(st : SyntaxTree) -> SyntaxTree {
	if (get_load_path__auto12(st).choice == 0) {
		get_load_path__auto12(st).children[0][0];
	} else if (get_load_other__auto13(st).choice == 0) {
		get_load_other__auto13(st).children[0][0];
	} else if (get_load_scomment__auto14(st).choice == 0) {
		get_load_scomment__auto14(st).children[0][0];
	} else if (get_load_mcomment__auto15(st).choice == 0) {
		get_load_mcomment__auto15(st).children[0][0];
	} else failSyntaxTree
}
get_load_ws__choice11(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_load_path__auto12(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_load_other__auto13(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_load_scomment__auto14(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_load_mcomment__auto15(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}

get_load_block_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_load) {
		st.children[1];
	} else []
}
get_load_ws__choice11_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ws) {
		st.children[0];
	} else []
}
get_load_path__auto12_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_path) {
		st.children[0];
	} else []
}
get_load_other__auto13_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_other) {
		st.children[0];
	} else []
}
get_load_scomment__auto14_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_scomment) {
		st.children[0];
	} else []
}
get_load_mcomment__auto15_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_mcomment) {
		st.children[0];
	} else []
}


import lingo/compiler/syntaxtree_types;
import ru_load_ast_mnemonics;

export {
	get_source_block_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_import(st : SyntaxTree) -> SyntaxTree;
	get_source_other(st : SyntaxTree) -> SyntaxTree;
	get_source_ws(st : SyntaxTree) -> SyntaxTree;
	get_source_space(st : SyntaxTree) -> SyntaxTree;
	get_source_comment(st : SyntaxTree) -> SyntaxTree;
	get_source_scomment(st : SyntaxTree) -> SyntaxTree;
	get_source_mcomment(st : SyntaxTree) -> SyntaxTree;
	get_source_char_(st : SyntaxTree) -> SyntaxTree;
	get_source_ws__choice10(st : SyntaxTree) -> SyntaxTree;
	get_source_ws__choice10_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_import__auto11(st : SyntaxTree) -> SyntaxTree;
	get_source_import__auto11_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_other__auto12(st : SyntaxTree) -> SyntaxTree;
	get_source_other__auto12_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_scomment__auto13(st : SyntaxTree) -> SyntaxTree;
	get_source_scomment__auto13_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_mcomment__auto14(st : SyntaxTree) -> SyntaxTree;
	get_source_mcomment__auto14_s(st : SyntaxTree) -> [SyntaxTree];

}

get_source_import(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_block) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_other(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_block) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_ws(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_source) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_scomment) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_mcomment) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_space(st : SyntaxTree) -> SyntaxTree {
	if (get_source_ws__choice10(st) != failSyntaxTree) {
		get_source_ws__choice10(st);
	} else failSyntaxTree
}
get_source_comment(st : SyntaxTree) -> SyntaxTree {
	if (get_source_ws__choice10(st) != failSyntaxTree) {
		get_source_ws__choice10(st);
	} else failSyntaxTree
}
get_source_scomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_mcomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_char_(st : SyntaxTree) -> SyntaxTree {
	if (get_source_import__auto11(st).choice == 0) {
		get_source_import__auto11(st).children[0][0];
	} else if (get_source_other__auto12(st).choice == 0) {
		get_source_other__auto12(st).children[0][0];
	} else if (get_source_scomment__auto13(st).choice == 0) {
		get_source_scomment__auto13(st).children[0][0];
	} else if (get_source_mcomment__auto14(st).choice == 0) {
		get_source_mcomment__auto14(st).children[0][0];
	} else failSyntaxTree
}
get_source_ws__choice10(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_import__auto11(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_other__auto12(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_scomment__auto13(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_mcomment__auto14(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}

get_source_block_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_source) {
		st.children[1];
	} else []
}
get_source_ws__choice10_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ws) {
		st.children[0];
	} else []
}
get_source_import__auto11_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_import) {
		st.children[1];
	} else []
}
get_source_other__auto12_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_other) {
		st.children[0];
	} else []
}
get_source_scomment__auto13_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_scomment) {
		st.children[0];
	} else []
}
get_source_mcomment__auto14_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_mcomment) {
		st.children[0];
	} else []
}


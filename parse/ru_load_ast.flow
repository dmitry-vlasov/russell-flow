import lingo/compiler/syntaxtree_types;
import parse/ru_load_ast_mnemonics;

export {
	get_load_lblock_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_limport(st : SyntaxTree) -> SyntaxTree;
	get_load_lpath(st : SyntaxTree) -> SyntaxTree;
	get_load_lother(st : SyntaxTree) -> SyntaxTree;
	get_load_lws(st : SyntaxTree) -> SyntaxTree;
	get_load_lspace(st : SyntaxTree) -> SyntaxTree;
	get_load_lcomment(st : SyntaxTree) -> SyntaxTree;
	get_load_lscomment(st : SyntaxTree) -> SyntaxTree;
	get_load_lmcomment(st : SyntaxTree) -> SyntaxTree;
	get_load_lchar(st : SyntaxTree) -> SyntaxTree;
	get_load_lws__choice11(st : SyntaxTree) -> SyntaxTree;
	get_load_lws__choice11_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_lpath__auto12(st : SyntaxTree) -> SyntaxTree;
	get_load_lpath__auto12_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_lother__auto13(st : SyntaxTree) -> SyntaxTree;
	get_load_lother__auto13_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_lscomment__auto14(st : SyntaxTree) -> SyntaxTree;
	get_load_lscomment__auto14_s(st : SyntaxTree) -> [SyntaxTree];
	get_load_lmcomment__auto15(st : SyntaxTree) -> SyntaxTree;
	get_load_lmcomment__auto15_s(st : SyntaxTree) -> [SyntaxTree];

}

get_load_limport(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_lblock) {
		st.children[0][0];
	} else failSyntaxTree
}
get_load_lpath(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_limport) {
		st.children[1][0];
	} else failSyntaxTree
}
get_load_lother(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_lblock) {
		st.children[0][0];
	} else failSyntaxTree
}
get_load_lws(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_load) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_limport) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_limport) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_lscomment) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_lmcomment) {
		st.children[1][0];
	} else failSyntaxTree
}
get_load_lspace(st : SyntaxTree) -> SyntaxTree {
	if (get_load_lws__choice11(st) != failSyntaxTree) {
		get_load_lws__choice11(st);
	} else failSyntaxTree
}
get_load_lcomment(st : SyntaxTree) -> SyntaxTree {
	if (get_load_lws__choice11(st) != failSyntaxTree) {
		get_load_lws__choice11(st);
	} else failSyntaxTree
}
get_load_lscomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_lcomment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_load_lmcomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_lcomment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_load_lchar(st : SyntaxTree) -> SyntaxTree {
	if (get_load_lpath__auto12(st).choice == 0) {
		get_load_lpath__auto12(st).children[0][0];
	} else if (get_load_lother__auto13(st).choice == 0) {
		get_load_lother__auto13(st).children[0][0];
	} else if (get_load_lscomment__auto14(st).choice == 0) {
		get_load_lscomment__auto14(st).children[0][0];
	} else if (get_load_lmcomment__auto15(st).choice == 0) {
		get_load_lmcomment__auto15(st).children[0][0];
	} else failSyntaxTree
}
get_load_lws__choice11(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_load_lpath__auto12(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_load_lother__auto13(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_load_lscomment__auto14(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_load_lmcomment__auto15(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}

get_load_lblock_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_load) {
		st.children[1];
	} else []
}
get_load_lws__choice11_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_lws) {
		st.children[0];
	} else []
}
get_load_lpath__auto12_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_lpath) {
		st.children[0];
	} else []
}
get_load_lother__auto13_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_lother) {
		st.children[0];
	} else []
}
get_load_lscomment__auto14_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_lscomment) {
		st.children[0];
	} else []
}
get_load_lmcomment__auto15_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_lmcomment) {
		st.children[0];
	} else []
}


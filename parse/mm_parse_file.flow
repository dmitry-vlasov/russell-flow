import string;
import lingo/compiler/syntaxtree_types;
import parse/mm_parse_ast_mnemonics;

export {
	parse_source(t : string) -> Pair<SyntaxTree, ExpectError>;
}

parse_source(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [], noExpectError);
	r = do_parse_source_source(acc);
	Pair(r, acc.expect);
}
do_parse_source_source(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_ws(acc);
	if (c0.choice != -1) {
		c1 = do_parse_source_block(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_source, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_source_block(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_source_element);
	SyntaxTree(st_block, 0, i, acc.i, [c0]);
}

do_parse_source_element(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_source_comment(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_source_disj(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_source_essential(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_source_provable(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 123 /* ${ */) {
							acc.i ::= acc.i + 2;
							c1 = do_parse_source_ws(acc);
							if (c1.choice != -1) {
								c2 = do_parse_source_block(acc);
								if (c2.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 125 /* $} */) {
										acc.i ::= acc.i + 2;
										c4 = do_parse_source_ws(acc);
										if (c4.choice != -1) {
											SyntaxTree(st_element, 4, i, acc.i, [[c1], [c2], [c4]]);
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_source_axiomatic(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_source_const(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_source_var(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										c0 = do_parse_source_floating(acc);
										if (c0.choice != -1) {
											c0
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											c0 = do_parse_source_include(acc);
											if (c0.choice != -1) {
												c0
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											SyntaxTree(st_Expected_element, -1, i, i, [])
										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_source_const(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 99 /* $c */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_source_s(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_string(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 46 /* $. */) {
					acc.i ::= acc.i + 2;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_const, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected '$.'"
					updateExpectError(acc, "", "$.", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected '$c'"
		updateExpectError(acc, "", "$c", i);
		failSyntaxTree;
	}
}

do_parse_source_var(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 118 /* $v */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_source_s(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_string(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 46 /* $. */) {
					acc.i ::= acc.i + 2;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_var, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected '$.'"
					updateExpectError(acc, "", "$.", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected '$v'"
		updateExpectError(acc, "", "$v", i);
		failSyntaxTree;
	}
}

do_parse_source_disj(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 100 /* $d */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_source_s(acc);
		if (c1.choice != -1) {
			c2 = do_parse_source_string(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 46 /* $. */) {
					acc.i ::= acc.i + 2;
					c4 = do_parse_source_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_disj, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected '$.'"
					updateExpectError(acc, "", "$.", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected '$d'"
		updateExpectError(acc, "", "$d", i);
		failSyntaxTree;
	}
}

do_parse_source_floating(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_label(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 102 /* $f */) {
			acc.i ::= acc.i + 2;
			c2 = do_parse_source_s(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_string(acc);
				if (c3.choice != -1) {
					c4 = do_parse_source_string(acc);
					if (c4.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 46 /* $. */) {
							acc.i ::= acc.i + 2;
							c6 = do_parse_source_ws(acc);
							if (c6.choice != -1) {
								SyntaxTree(st_floating, 0, i, acc.i, [[c0], [c2], [c3], [c4], [c6]]);
							} else c6
						} else {
							// "Expected '$.'"
							updateExpectError(acc, "", "$.", i);
							failSyntaxTree;
						}
					} else c4
				} else c3
			} else c2
		} else {
			// "Expected '$f'"
			updateExpectError(acc, "", "$f", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_essential(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_label(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 101 /* $e */) {
			acc.i ::= acc.i + 2;
			c2 = do_parse_source_s(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_expr(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 46 /* $. */) {
						acc.i ::= acc.i + 2;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_essential, 0, i, acc.i, [[c0], [c2], [c3], [c5]]);
						} else c5
					} else {
						// "Expected '$.'"
						updateExpectError(acc, "", "$.", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else {
			// "Expected '$e'"
			updateExpectError(acc, "", "$e", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_axiomatic(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_label(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 97 /* $a */) {
			acc.i ::= acc.i + 2;
			c2 = do_parse_source_s(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_expr(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 46 /* $. */) {
						acc.i ::= acc.i + 2;
						c5 = do_parse_source_ws(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_axiomatic, 0, i, acc.i, [[c0], [c2], [c3], [c5]]);
						} else c5
					} else {
						// "Expected '$.'"
						updateExpectError(acc, "", "$.", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else {
			// "Expected '$a'"
			updateExpectError(acc, "", "$a", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_provable(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_label(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 112 /* $p */) {
			acc.i ::= acc.i + 2;
			c2 = do_parse_source_s(acc);
			if (c2.choice != -1) {
				c3 = do_parse_source_expr(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* $= */) {
						acc.i ::= acc.i + 2;
						c5 = do_parse_source_s(acc);
						if (c5.choice != -1) {
							c6 = do_parse_source_proof(acc);
							if (c6.choice != -1) {
								SyntaxTree(st_provable, 0, i, acc.i, [[c0], [c2], [c3], [c5], [c6]]);
							} else c6
						} else c5
					} else {
						// "Expected '$='"
						updateExpectError(acc, "", "$=", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else {
			// "Expected '$p'"
			updateExpectError(acc, "", "$p", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_source_proof(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_label);
	if (length(c0) >= 1) {
		SyntaxTree(st_proof, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one label"
		updateExpectError(acc, "", "label", i);
		failSyntaxTree;
	}
}

do_parse_source_expr(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_symb);
	if (length(c0) >= 1) {
		SyntaxTree(st_expr, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one symb"
		updateExpectError(acc, "", "symb", i);
		failSyntaxTree;
	}
}

do_parse_source_string(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_string__auto22);
	if (length(c0) >= 1) {
		c1 = do_parse_source_s(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_string, 0, i, acc.i, [c0, [c1]]);
		} else c1
	} else {
		// "Expected at least one string$auto22"
		updateExpectError(acc, "", "string$auto22", i);
		failSyntaxTree;
	}
}

do_parse_source_symb(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_symb__auto23);
	if (length(c0) >= 1) {
		c1 = do_parse_source_s(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_symb, 0, i, acc.i, [c0, [c1]]);
		} else c1
	} else {
		// "Expected at least one symb$auto23"
		updateExpectError(acc, "", "symb$auto23", i);
		failSyntaxTree;
	}
}

do_parse_source_label(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_label__auto24);
	if (length(c0) >= 1) {
		c1 = do_parse_source_s(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_label, 0, i, acc.i, [c0, [c1]]);
		} else c1
	} else {
		// "Expected at least one label$auto24"
		updateExpectError(acc, "", "label$auto24", i);
		failSyntaxTree;
	}
}

do_parse_source_comment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 40 /* $( */) {
		acc.i ::= acc.i + 2;
		c1 = SyntaxStar(acc, do_parse_source_comment__choice21);
		if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 41 /* $) */) {
			acc.i ::= acc.i + 2;
			c3 = do_parse_source_ws(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_comment, 0, i, acc.i, [c1, [c3]]);
			} else c3
		} else {
			// "Expected '$)'"
			updateExpectError(acc, "", "$)", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '$('"
		updateExpectError(acc, "", "$(", i);
		failSyntaxTree;
	}
}

do_parse_source_include(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 91 /* $[ */) {
		acc.i ::= acc.i + 2;
		c1 = SyntaxStar(acc, do_parse_source_include__auto25);
		if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 93 /* $] */) {
			acc.i ::= acc.i + 2;
			c3 = do_parse_source_ws(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_include, 0, i, acc.i, [c1, [c3]]);
			} else c3
		} else {
			// "Expected '$]'"
			updateExpectError(acc, "", "$]", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '$['"
		updateExpectError(acc, "", "$[", i);
		failSyntaxTree;
	}
}

do_parse_source_s(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_source_ws_);
	if (length(c0) >= 1) {
		SyntaxTree(st_s, 0, i, acc.i, []);
	} else {
		// "Expected at least one ws_"
		updateExpectError(acc, "", "ws_", i);
		failSyntaxTree;
	}
}

do_parse_source_ws(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_source_ws_);
	SyntaxTree(st_ws, 0, i, acc.i, []);
}

do_parse_source_ws_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_ws_, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_ws_, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 10 /* 
				 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_ws_, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 13 /*  */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_ws_, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_source_comment(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_ws_, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_source_char_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
		SyntaxTree(-36, -1, i, i, [])
	} else {
		if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_char_, 0, i, acc.i, []);
		} else {
			// "Expected ' '-'￿'"
			updateExpectError(acc, "", "' '-'￿'", i);
			failSyntaxTree;
		}
	}
}

do_parse_source_comment__choice21(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
			failSyntaxTree
		} else {
			c1 = do_parse_source_char_(acc);
			if (c1.choice != -1) {
				SyntaxTree(st_comment__choice21, 0, i, acc.i, []);
			} else failSyntaxTree;
		}
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
				acc.i ::= acc.i + 1;
				if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
					failSyntaxTree
				} else {
					c2 = do_parse_source_char_(acc);
					if (c2.choice != -1) {
						SyntaxTree(st_comment__choice21, 1, i, acc.i, []);
					} else failSyntaxTree;
				}
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_comment__choice21, -1, i, i, [])
		}

	}

}

do_parse_source_string__auto22(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_s(acc);
	if (c0.choice == -1) {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_string__auto22, 0, i, acc.i, []);
		} else c1
	} else SyntaxTree(st_DidNotExpectsource_s, -1, 0, acc.i, []);
}

do_parse_source_symb__auto23(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_s(acc);
	if (c0.choice == -1) {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_symb__auto23, 0, i, acc.i, []);
		} else c1
	} else SyntaxTree(st_DidNotExpectsource_s, -1, 0, acc.i, []);
}

do_parse_source_label__auto24(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_source_s(acc);
	if (c0.choice == -1) {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_label__auto24, 0, i, acc.i, []);
		} else c1
	} else SyntaxTree(st_DidNotExpectsource_s, -1, 0, acc.i, []);
}

do_parse_source_include__auto25(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 36 && getCharCodeAt(acc.input, acc.i + 1) == 93 /* $] */) {
		SyntaxTree(-36, -1, i, i, [])
	} else {
		c1 = do_parse_source_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_include__auto25, 0, i, acc.i, []);
		} else c1
	}
}


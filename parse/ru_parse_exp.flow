import parse/ru_table;

export {
	ruParseExp(term : RuTerm, types : Tree<string, RuTypeEnv>, conf : RuConf) -> Maybe<RuExp> {
		if (length(term.expr) == 0) {
			conf.onError("empty expression met", []);
			None()
		} else {
			ret = switch (lookupTree(types, term.type)) {
				Some(tenv): {
					println("going to parse: " + ruTerm2s(term));
					switch (ruParseExpr(
						RuParseEnv(term.expr, types, conf), 0, 
						RuParseStack(None(), 0, tenv.trie, [])
					)) {
						Some(expr): {
							println("successfully parsed: " + ruExpRPN2s(expr));
							Some(RuExp(expr));
						}
						None(): {
							conf.onError("expr was not successfully parsed: " + ruTerm2s(term), []);
							None();
						}
					}
				}
				None(): {
					conf.onError("unknown type: " + term.type, []);
					None();
				}
			}
			if (ret == None()) {
				quit(0);
			}
			ret
		}
	}
}

RuParseEnv(
	nodes : [RuTermNode],
	types : Tree<string, RuTypeEnv>, 
	conf : RuConf,
);

RuParseStack(
	parent : Maybe<RuParseStack>,
	start : int,
	trie : RuTrie<string, (RuTermNode, int) -> [RuExpNode]>,
	expr : [RuExpNode]
);

stackDepth(stack : RuParseStack) -> int {
	switch (stack.parent) {
		Some(p): 1 + stackDepth(p);
		None(): 0;
	}
}

printStack(stack : RuParseStack) {
	prn_keys = \mp -> 
	strGlue(
		map(getTreeKeys(mp), 
			\key -> 
				if (isSome(lookupTreeDef(mp, key, ruTrieEmpty).data)) "*" + key else key
		),
		", "
	);
	println(
		strGlue([
			"STACK depth: " + i2s(stackDepth(stack)) + ", start: " + i2s(stack.start),
			//"expr: " + ruExpRPN2s(stack.expr),
			"trie keys: {" + prn_keys(stack.trie.map) + "}",
			switch (stack.parent) {
				Some(parent): "parent keys: {" + prn_keys(parent.trie.map) + "}";
				None(): "no parent";
			}
		], ", ")
	)
}

showNode(n : RuTermNode) -> string {
	switch (n) {
		RuVarRef(v, t): "\"" + v + "\"";
		RuConstRef(c): "\"" + c + "\"";
	}
}

ruUnrollStack(env : RuParseEnv, pos : int, stack : RuParseStack) -> RuParseStack {
	switch (stack.trie.data) {
		Some(callback): {
			switch (stack.parent) {
				Some(parent): {
					ruUnrollStack(env, pos, RuParseStack(parent with
						expr = concat3(parent.expr, stack.expr, callback(env.nodes[pos], pos - stack.start))
					));
				}
				None(): stack;
			}
		}
		None(): stack;
	}
}

ruParseExpr(env : RuParseEnv, pos : int, stack : RuParseStack) -> Maybe<[RuExpNode]> {
	if (pos == length(env.nodes)) {
		//None() 
		Some(stack.expr)
	} else {
		println("exr[" + i2s(pos) + "]= " + showNode(env.nodes[pos]) /*", acc: " + ruExpRPN2s(stack.expr) +*/);
		printStack(stack);

		do_step = \st, n -> {
			switch (ruParseExpr(env, pos + 1, RuParseStack(st with trie = n))) {
				Some(expr): Some(expr);
				None(): {
					switch (n.data) {
						Some(callback): {
							switch (st.parent) {
								Some(parent): {
									poped = ruUnrollStack(env, pos, parent);
									println("poped:");
									printStack(poped);
									ruParseExpr(env, pos + 1, poped);
								}
								None(): {
									if (pos + 1 == length(env.nodes)) {
										Some(concat(st.expr, callback(env.nodes[pos], pos - st.start)))
									} else {
										env.conf.onError("pop of an empty stack", []);
										None() 
									}
								}
							}
						}
						None(): None();
					}
				}
			}
		}
		switch (env.nodes[pos]) {
			RuVarRef(v, t):
				switch (lookupTree(stack.trie.map, t)) {
					Some(n): {
						ret = do_step(stack, n);
						if (isSome(ret)) ret else {
							supers = lookupTreeDef(env.types, t, ruNoTypeEnv).supers;
							foldTree(stack.trie.map, None(), \tp, m, ac -> 
								if (ac != None()) ac else {
									switch (lookupTree(supers, tp)) {
										Some(r): 
											do_step(RuParseStack(stack with expr = concat(stack.expr, [RuRuleRef(r.name, 1), RuVarRef(v, t)])), m);
										None(): ac;
									}
								}
							);
						}
					}
					None(): {
						supers = lookupTreeDef(env.types, t, ruNoTypeEnv).supers;
						foldTree(stack.trie.map, None(), \tp, n, ac -> 
							if (ac != None()) ac else {
								switch (lookupTree(supers, tp)) {
									Some(r): 
										do_step(RuParseStack(stack with expr = concat(stack.expr, [RuRuleRef(r.name, 1), RuVarRef(v, t)])), n);
									None(): ac;
								}
							}
						);
					}
				}
			RuConstRef(c): {
				switch (lookupTree(stack.trie.map, c)) {
					Some(n): do_step(stack, n);
					None(): {
						foldTree(stack.trie.map, None(), \t, n, ac ->
							if (ac != None()) ac else {
								switch (lookupTree(env.types, t)) {
									Some(tenv):
										ruParseExpr(env, pos, 
											RuParseStack(
												Some(RuParseStack(stack with trie = n)), 
												pos, tenv.trie, []
											)
										);
									None(): ac;
								}
							}
						)
					}
				}
			}
		}
	}
}



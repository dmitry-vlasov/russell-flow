import math/stringmath;
import parse/ru_type_env;

export {
	ruParseExp(term : RuTerm, types : Tree<string, RuTypeEnv>, conf : RuConf) -> Maybe<RuExp> {
		if (length(term.expr) == 0) {
			conf.onError("empty expression met", []);
			None()
		} else {
			ret = switch (lookupTree(types, term.type)) {
				Some(tenv): {
					if (length(term.expr) > ^max_len) {
						max_len := length(term.expr);
					}
					//println("going to parse, max len: " + i2s(^max_len) + " len: " + i2s(length(term.expr)) + " = " + ruTerm2s(term.expr));
					start = timestamp();
					switch (ruParseExpr(
						RuParseEnv(term.expr, types, conf), 0, 
						RuParseStack(None(), 0, 0, tenv.type.name, tenv.trie, [])
					)) {
						Some(expr): {
							//println("successfully parsed: " + ruExpRPN2s(expr));
							time = timestamp() - start;
							if (time > ^max_time) {
								max_time := time;
								println("max time: expr " + ruTerm2s(term.expr) + " parsed in " + d2st(^max_time/ 1000.0, 2));
							}
							
							Some(RuExp(expr));
						}
						None(): {
							conf.onError("expr was not successfully parsed: " + ruTerm2s(term.expr), []);
							debug := true;
							
							traverseInOrder(types, \name, te -> {
									println("type: '" + name + "'");
									println("rule trie: ");
									println(ruTrie2s(te.trie, idfn, \cb -> ruExpRPN2s(cb([]))));
								}
							);
							
							ruParseExpr(
								RuParseEnv(term.expr, types, conf), 0, 
								RuParseStack(None(), 0, 0, tenv.type.name, tenv.trie, [])
							);
							
							quit(0);
							None();
						}
					}
				}
				None(): {
					conf.onError("unknown type: " + term.type, []);
					None();
				}
			}
			if (ret == None()) {
				quit(0);
			}
			ret
		}
	}
}

debug = ref false;

max_len = ref 0;
max_time = ref 0.0;

RuParseEnv(
	nodes : [RuTermNode],
	types : Tree<string, RuTypeEnv>, 
	conf : RuConf,
);

RuParseStack(
	parent : Maybe<RuParseStack>,
	start : int,
	curr : int,
	type : string,
	trie : RuTrie<string, ([RuExpNode])->[RuExpNode]>,
	expr : [RuExpNode]
);

stackDepth(stack : RuParseStack) -> int {
	switch (stack.parent) {
		Some(p): 1 + stackDepth(p);
		None(): 0;
	}
}

printStack(stack : RuParseStack) -> string {
	prn_keys = \mp -> 
	strGlue(
		map(getTreeKeys(mp), 
			\key -> 
				if (isSome(lookupTreeDef(mp, key, ruTrieEmpty).data)) "*" + key else key
		),
		", "
	);
	strGlue([
		"depth: " + i2s(stackDepth(stack)) + ", start: " + i2s(stack.start),
		//"expr: " + ruExpRPN2s(stack.expr),
		"trie keys: {" + prn_keys(stack.trie.map) + "}",
		switch (stack.parent) {
			Some(parent): "parent keys: {" + prn_keys(parent.trie.map) + "}";
			None(): "no parent";
		},
		"expr: " + ruExpRPN2s(stack.expr)
	], ", ")
}

showNode(n : RuTermNode) -> string {
	switch (n) {
		RuVarRef(v, t): "\"" + v + ":" + t + "\"";
		RuConstRef(c): "\"" + c + "\"";
	}
}

ruPopExprStack(env : RuParseEnv, pos : int, stack : RuParseStack) -> RuParseStack {
	switch (stack.trie.data) {
		Some(rule_action): {
			switch (stack.parent) {
				Some(parent): {
					ruPopExprStack(env, pos, 
						RuParseStack(parent with expr = concat(parent.expr, rule_action(stack.expr)))
					);
				}
				None(): stack;
			}
		}
		None(): stack;
	}
}

ruParseExpr(env : RuParseEnv, pos : int, stack0 : RuParseStack) -> Maybe<[RuExpNode]> {
	stack = RuParseStack(stack0 with curr = pos);
	if (pos == length(env.nodes)) {
		//None() 
		switch (stack.trie.data) {
			Some(rule_action): Some(rule_action(stack.expr));
			None(): Some(stack.expr);
		}
	} else {
		if (^debug) {
			println("exr[" + i2s(pos) + "]= " + showNode(env.nodes[pos]) + ", stack: " + printStack(stack));
		}

		do_step = \st, n -> {
			poped = ruPopExprStack(env, pos, RuParseStack(st with trie = n));
			ruParseExpr(env, pos + 1, poped);
		}
		switch (env.nodes[pos]) {
			RuVarRef(v, t):
				switch (lookupTree(stack.trie.map, t)) {
					Some(n): {
						ret = do_step(RuParseStack(stack with expr = concat(stack.expr, [RuVarRef(v, t)])), n);
						if (isSome(ret)) ret else {
							supers = lookupTreeDef(env.types, t, ruNoTypeEnv).supers;
							foldTree(stack.trie.map, None(), \tp, m, ac -> 
								if (ac != None()) ac else {
									switch (lookupTree(supers, tp)) {
										Some(r): 
											do_step(RuParseStack(stack with 
												expr = concat(stack.expr, [RuVarRef(v, t), RuRuleRef(r.name, 1)])
											), m);
										None(): ac;
									}
								}
							);
						}
					}
					None(): {
						supers = lookupTreeDef(env.types, t, ruNoTypeEnv).supers;
						foldTree(stack.trie.map, None(), \tp, n, ac -> 
							if (ac != None()) ac else {
								switch (lookupTree(supers, tp)) {
									Some(r): 
										do_step(RuParseStack(stack with 
											expr = concat(stack.expr, [RuVarRef(v, t), RuRuleRef(r.name, 1)])
										), n);
									None(): ac;
								}
							}
						);
					}
				}
			RuConstRef(c): {
				switch (lookupTree(stack.trie.map, c)) {
					Some(n): {
						ret = do_step(stack, n); 
						if (isSome(ret)) ret else {
							foldTree(stack.trie.map, None(), \t, m, ac ->
								if (ac != None()) ac else {
									switch (lookupTree(env.types, t)) {
										Some(tenv):
											if (tenv.type.name == stack.type && stack.curr == stack.start) ac else
											ruParseExpr(env, pos, 
												RuParseStack(
													Some(RuParseStack(stack with trie = m)), 
													pos, pos, tenv.type.name, tenv.trie, []
												)
											);
										None(): ac;
									}
								}
							)
						}
					}
					None(): {
						foldTree(stack.trie.map, None(), \t, n, ac ->
							if (ac != None()) ac else {
								switch (lookupTree(env.types, t)) {
									Some(tenv):
										if (tenv.type.name == stack.type && stack.curr == stack.start) ac else
										ruParseExpr(env, pos, 
											RuParseStack(
												Some(RuParseStack(stack with trie = n)), 
												pos, pos, tenv.type.name, tenv.trie, []
											)
										);
									None(): ac;
								}
							}
						)
					}
				}
			}
		}
	}
}



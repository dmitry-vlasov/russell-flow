import math/stringmath;
import parse/ru_type_env;

export {
	ruParseExp(term : RuTerm, types : Tree<string, RuTypeEnv>, conf : RuConf) -> Maybe<RuExp> {
		if (length(term.expr) == 0) {
			conf.onError("empty expression met", []);
			None()
		} else {
			switch (lookupTree(types, term.type)) {
				Some(tenv):
					maybeMap(
						ruParseExpr(RuParseEnv(term.expr, types, conf), 0, RuParseStack(None(), 0, 0, tenv.type.name, tenv.trie, [])),
						\nodes -> RuExp(nodes)
					);
				None(): {
					conf.onError("unknown type: " + term.type, []);
					None();
				}
			}
		}
	}
}

RuParseEnv(
	nodes : [RuTermNode],
	types : Tree<string, RuTypeEnv>, 
	conf : RuConf,
);

RuParseStack(
	parent : Maybe<RuParseStack>,
	start : int,
	curr : int,
	type : string,
	trie : RuTrie<string, string>,
	expr : [RuExpNode],
);

ruPopExprStack(env : RuParseEnv, pos : int, stack : RuParseStack) -> RuParseStack {
	switch (stack.trie.data) {
		Some(rule): {
			switch (stack.parent) {
				Some(parent): {
					ruPopExprStack(env, pos, 
						RuParseStack(parent with 
							expr = concat3(parent.expr, stack.expr, [RuRuleRef(rule, length(stack.expr))])
						)
					);
				}
				None(): stack;
			}
		}
		None(): stack;
	}
}

ruParseExpr(env : RuParseEnv, pos : int, stack0 : RuParseStack) -> Maybe<[RuExpNode]> {
	stack = RuParseStack(stack0 with curr = pos);
	if (pos == length(env.nodes)) {
		switch (stack.trie.data) {
			Some(rule): Some(concat(stack.expr, [RuRuleRef(rule, length(stack.expr))]));
			None(): Some(stack.expr);
		}
	} else {
		do_step = \st, n -> {
			poped = ruPopExprStack(env, pos, RuParseStack(st with trie = n));
			ruParseExpr(env, pos + 1, poped);
		}
		try_supers = \v, t -> {
			supers = lookupTreeDef(env.types, t, ruNoTypeEnv).supers;
			foldTree(stack.trie.map, None(), \tp, m, ac -> 
				if (ac != None()) ac else {
					switch (lookupTree(supers, tp)) {
						Some(r): 
							do_step(RuParseStack(stack with 
								expr = concat(stack.expr, [RuVarRef(v, t), RuRuleRef(r.name, 1)])
							), m);
						None(): ac;
					}
				}
			);
		}
		try_vars = \-> {
			foldTree(stack.trie.map, None(), \t, n, ac ->
				if (ac != None()) ac else {
					switch (lookupTree(env.types, t)) {
						Some(tenv):
							if (tenv.type.name == stack.type && stack.curr == stack.start) ac else {
								ruParseExpr(env, pos, 
									RuParseStack(
										Some(RuParseStack(stack with trie = n)), 
										pos, pos, tenv.type.name, tenv.trie, []
									)
								)
							}
						None(): ac;
					}
				}
			)
		}
		switch (env.nodes[pos]) {
			RuVarRef(v, t):
				switch (lookupTree(stack.trie.map, t)) {
					Some(n): {
						switch (do_step(RuParseStack(stack with expr = concat(stack.expr, [RuVarRef(v, t)])), n)) {
							Some(ret): Some(ret);
							None(): try_supers(v, t);
						}
					}
					None(): try_supers(v, t);
				}
			RuConstRef(c): {
				switch (lookupTree(stack.trie.map, c)) {
					Some(n): {
						switch (do_step(stack, n)) {
							Some(ret): Some(ret);
							None(): try_vars();
						}
					}
					None(): try_vars();
				}
			}
		}
	}
}

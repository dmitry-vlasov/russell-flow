import fs/filesystem;
import sys/concurrent;
import math/stringmath;
import lingo/compiler/syntaxtree_util;
import ru_conf;
import ru_fileinfo;
import parse/ru_load_file;
import parse/ru_load_ast;

export {
	RuLoadSource(imps : [string], src : string, info : RuFileInfo);
	ruLoad(conf : RuConf) -> Tree<string, RuLoadSource>;
}

ruLoad(conf : RuConf) -> Tree<string, RuLoadSource> {
	ruLoadImports([conf.file], conf, makeTree())
}

ruLoadImports(imports : [string], conf : RuConf, acc : Tree<string, RuLoadSource>) -> Tree<string, RuLoadSource> {
	if (imports == []) acc else {
		loaded = filtermap(
			concurrent(true, map(imports, \imp -> \ -> ruLoadSource(imp, conf))), 
			idfn
		);
		acc1 = fold(loaded, acc, \ac, l -> setTree(ac, l.info.file, l));
		new_imports = fold(loaded, makeSet(), \ac, l -> 
			fold(l.imps, ac, \a, p ->
				if (containsKeyTree(acc1, ruTrimPath(p, conf))) a else insertSet(a, p)
			)
		);
		ruLoadImports(set2array(new_imports), conf, acc1)
	}
}

ruLoadSource(file : string, conf : RuConf) -> Maybe<RuLoadSource> {
	start = timestamp();
	trimmed = ruTrimPath(file, conf);
	resolved = ruFindPath(trimmed, conf);
	if (fileExists(resolved)) {
		src_str = getFileContent(resolved);
		pr1 = parse_load(src_str);
		st = pr1.first;
		err = pr1.second;
		if (st.end != strlen(src_str)) {
			conf.onError("Syntax error: expected one of " + strGlue(err.expected, ", ") + " while met: " + err.met, []);
			None()
		} else {
			if (conf.verbose > 1) {
				println("loaded: " + trimmed + " in " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
			}
			Some(RuLoadSource(
				filter(
					map(
						filter(get_load_lblock_s(st), \b -> b.rule == st_limport), 
						\i -> grabSTText(get_load_lpath(i), src_str)
					),
					\p -> !strContains(p, "Appendix___")
				),
				src_str, 
				makeRuFileInfo(trimmed, resolved)
			));
		}
	} else {
		conf.onError("file " + file + " is not found", []);
		None()
	}
}

import math/stringmath;
import parse/ru_parse_exp;
import parse/ru_parse_src;
import ru_math;

export {
	ruCollectMath(parsed : Tree<string, RuParseSource>, conf : RuConf) -> RuMath {
		ruDoCollectMath(parsed, conf, ruMakeRuMath(conf));
	}
	ruSuperTypeName(super : string, infer : string) -> string {
		infer + "-" + super
	}
}

ruDoCollectMath(left : Tree<string, RuParseSource>, conf : RuConf, acc : RuMath) -> RuMath {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.path))
		);
		//println("modules to process: " + strGlue(map(ready, \s -> s.info.file), ", "));
		collected = concurrent(true, map(ready, \s -> \-> ruCollectSource(s, acc))); 
		new_acc = fold(collected, acc, \ac, coll -> ruMergeRuMath(coll, ac));
		new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.file));
		ruDoCollectMath(new_left, conf, new_acc);
	}
}

RuCollectAcc(
	file : string,
	global : RuMath,
	local : RuMath,
	types : Tree<string, RuTypeEnv>,
	conf : RuConf
);

ruCollectSource(src : RuParseSource, acc : RuMath) -> RuMath {
	start = timestamp();
	switch (lookupTree(acc.sources, src.info.file)) {
		Some(__): {
			acc.conf.onError("source " + src.info.file + " is already defined", []);
			acc
		}
		None(): {
			imps = map(src.imports, \imp -> RuImport(imp.path, imp.pos));
			acc0 = RuCollectAcc(src.info.file, acc, ruMakeRuMath(acc.conf), acc.types, acc.conf);
			acc1 = fold(src.decls, acc0, \ac, block -> 
				switch(block) {
					RuParseDecl(): ruCollectSyntax(block, ac);
					RuParseComment(__,__): ac;
				}
			);
			parse_decls : [RuParseDecl] = filtermap(src.decls, \block -> 
				switch(block) {
					RuParseDecl(): Some(block);
					RuParseComment(__,__): None();
				}
			);
			created_decls = concurrent(true, map(parse_decls, \decl -> \-> ruCreateAssertion(decl, acc1)));
			assertions = filtermap(created_decls, idfn);
			acc2 = fold(assertions, acc1, \ac, ass -> 
				RuCollectAcc(ac with
					local = RuMath(ac.local with 
						assertions = setTree(ac.local.assertions, ass.name, ass),
						names = setTree(ac.local.names, ass.name, src.info.file)
					),
				)
			);
			decls = fold(src.decls, [], \ac, block -> 
				switch (block) {
					RuParseConst(name,__,__,__):            concat(ac, [lookupTreeDef(acc2.local.consts, name, ruNoConst)]);
					RuParseType(name,__,__):                concat(ac, [lookupTreeDef(acc2.local.types, name, ruNoTypeEnv).type]);
					RuParseRule(name,__,__,__):             concat(ac, [lookupTreeDef(acc2.local.rules, name, ruNoRule)]);
					RuParseAxiom(name,__,__,__,__,__):      concat(ac, [lookupTreeDef(acc2.local.assertions, name, ruNoAxiom)]);
					RuParseTheorem(name,__,__,__,__,__,__): concat(ac, [lookupTreeDef(acc2.local.assertions, name, ruNoTheorem)]);
					RuParseDef(name,__,__,__,__,__,__,__):  concat(ac, [lookupTreeDef(acc2.local.assertions, name, ruNoAxiom)]);
					RuParseComment(text, pos):              concat(ac, [RuComment(text, pos)]);
					RuParseTheory(name, __,__):             ac; // TODO
				}
			);
			if (acc2.conf.verbose > 0) {
				println("collected: " + src.info.file + " in " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
			}
			RuMath(acc2.local with 
				sources = makeTree1(src.info.file, RuSource(imps, decls, src.info))
			);
		}
	}
}

ruCollectSyntax(decl : RuParseDecl, acc : RuCollectAcc) -> RuCollectAcc {
	switch (decl) {
		RuParseConst(__,__,__,__): ruCollectConst(decl, acc);
		RuParseType(__,__,__):     ruCollectType(decl, acc);
		RuParseRule(__,__,__,__):  ruCollectRule(decl, acc);
		default: acc;
	}
}

ruCreateAssertion(decl : RuParseDecl, acc : RuCollectAcc) -> Maybe<RuAssertion> {
	switch (decl) {
		RuParseAxiom(__,__,__,__,__,__):      ruCreateAxiom(decl, acc);
		RuParseTheorem(__,__,__,__,__,__,__): ruCreateTheorem(decl, acc);
		RuParseDef(__,__,__,__,__,__,__,__):  ruCreateDef(decl, acc);
		default: None();
	}
}

ruCollectConst(const : RuParseConst, acc : RuCollectAcc) -> RuCollectAcc {
	switch (ruLookupConst(acc, const.symb)) {
		Some(__): {
			acc.conf.onError("constant " + const.symb + " is already defined", [RuPlace(acc.file, const.pos)]);
			acc
		}
		None(): {
			RuCollectAcc(acc with
				local = RuMath(acc.local with 
					consts = setTree(acc.local.consts, const.symb, RuConst(const.symb, const.ascii, const.latex, const.pos)),
					names = setTree(acc.local.names, const.symb, acc.file),
				)
			);
		}
	}
}

ruCollectType(type : RuParseType, acc : RuCollectAcc) -> RuCollectAcc {
	switch (ruLookupType(acc, type.name)) {
		Some(__): {
			acc.conf.onError("type " + type.name + " is already defined", [RuPlace(acc.file, type.pos)]);
			acc
		}
		None(): {
			infer = type.name;
			super_rule = \super -> {
				RuRule(
					ruSuperTypeName(super, infer), 
					makeTree1("x", RuVar("x", infer, type.pos)), 
					RuTerm(super, [RuVarRef("x", infer)], type.pos),
					type.pos
				);
			}
			supers = fold(type.supers, makeTree(), \ac, s ->
				switch (ruLookupType(acc, s)) {
					Some(env): {
						foldTree(env.supers,
							setTree(ac, s, super_rule(s)), 
							\super, __, a ->
								setTree(a, super, super_rule(super))
						)
					}
					None(): {
						acc.conf.onError("unknown super type " + s + " for a type" + infer, [RuPlace(acc.file, type.pos)]);
						ac
					}
				}
			);
			super_types = foldTree(supers, acc.types, 
				\sup_name, sup_rule, ac -> {
					env = lookupTreeDef(ac, sup_name, ruNoTypeEnv);
					setTree(ac, sup_name, RuTypeEnv(env with infers = setTree(env.infers, infer, super_rule(sup_name))))
				}
			);
			new_types = setTree(super_types, type.name, 
				RuTypeEnv(
					RuType(type.name, type.supers, type.pos), 
					ruAddTerm2RuTrie(
						RuTerm(type.name, [RuVarRef("x", type.name)], type.pos), 
						None(),
						ruTrieEmpty, acc.conf
					), 
					supers, makeTree()
				)
			);
			RuCollectAcc(acc with
				local = RuMath(acc.local with 
					types = new_types,
					rules = foldTree(supers, acc.local.rules, \__, rule, ac -> setTree(ac, rule.name, rule)),
					names = setTree(acc.local.names, type.name, acc.file)
				),
				types = new_types
			)
		}
	}
}

ruCollectRule(rule : RuParseRule, acc : RuCollectAcc) -> RuCollectAcc {
	switch (ruLookupRule(acc, rule.name)) {
		Some(__): {
			acc.conf.onError("rule " + rule.name + " is already defined", [RuPlace(acc.file, rule.pos)]);
			acc
		}
		None(): {
			type = rule.term.type;
			vars = fold(rule.vars, makeTree(), \ac, v ->
				switch (ruLookupType(acc, v.type)) {
					Some(tp): setTree(ac, v.name, RuVar(v.name, v.type, v.pos));
					None(): {
						acc.conf.onError("unknown var " + v.name + " type " + v.type, [RuPlace(acc.file, v.pos)]);
						ac
					}
				}
			);
			term = ruMakeTerm(rule.term, vars, acc, ruAddErr2Conf(acc.conf, "\nat rule: " + rule.name));
			new_rule = RuRule(rule.name, vars, term, rule.pos);
			switch (ruLookupType(acc, rule.term.type)) {
				Some(env): {
					new_types = setTree(acc.types, env.type.name,
						RuTypeEnv(env with 
							trie = ruAddTerm2RuTrie(new_rule.term, 
								Some(RuRuleRef(rule.name, rule.term.type, sizeTree(vars), 0)),
								env.trie, acc.conf
							)
						)
					);
					RuCollectAcc(acc with
						local = RuMath(acc.local with 
							rules = setTree(acc.local.rules, rule.name, new_rule),
							types = new_types,
							names = setTree(acc.local.names, rule.name, acc.file)
						),
						types = new_types
					);
				}
				None(): {
					acc.conf.onError("unknown type " + rule.term.type, [RuPlace(acc.file, rule.term.pos)]);
					acc;
				}
			}
		}
	}
}

ruMakeTerm(term : RuParseExp, vars : Tree<string, RuVar>, acc : RuCollectAcc, conf : RuConf) -> RuTerm {
	expr = fold(term.symbs, [], \ac, symb -> {
		switch (ruLookupConst(acc, symb)) {
			Some(s): concat(ac, [RuConstRef(symb)]);
			None(): 
				switch (lookupTree(vars, symb)) {
					Some(v): concat(ac, [RuVarRef(symb, v.type)]);
					None(): {
						conf.onError("unknown symbol " + symb, [RuPlace(acc.file, term.pos)]);
						ac
					}
				}
			}
		}
	);
	RuTerm(term.type, expr, term.pos);
}

ruCreateAxiom(ax : RuParseAxiom, acc : RuCollectAcc) -> Maybe<RuAxiom> {
	switch (ruLookupAssertion(acc, ax.name)) {
		Some(__): {
			acc.conf.onError("assertion with name " + ax.name + " is already defined", [RuPlace(acc.file, ax.pos)]);
			None();
		}
		None(): {
			err = \-> { acc.conf.onError("error in axiom " + ax.name, [RuPlace(acc.file, ax.pos)]); None(); }
			conf1 = ruAddErr2Conf(acc.conf, "\nat axiom " + ax.name);
			vars = ruCollectVars(ax.vars, acc, conf1);
			disjs = ruCollectDisjs(vars, ax.disjs, acc, conf1);
			hyps = filtermap(ax.hyps, \h -> ruCollectHyp(h, vars, acc, conf1));
			if (length(hyps) != length(ax.hyps)) {
				err();
			} else {
				switch (ruCollectExp(ax.prop, vars, acc, conf1)) {
					Some(prop): {
						Some(RuAxiom(ax.name, vars, disjs, hyps, prop, ax.pos));
					}
					None(): err();
				}
			}
		}
	}
}

ruCollectExp(ex : RuParseExp, vars : Tree<string, RuVar>, acc : RuCollectAcc, conf : RuConf) -> Maybe<RuExp> {
	ruParseExp(ruMakeTerm(ex, vars, acc, conf), acc.types, conf)
}

ruCollectVars(vars : [RuParseVar], acc : RuCollectAcc, conf : RuConf) -> Tree<string, RuVar> {
	fold(vars, makeTree(), \ac, v ->
		switch (ruLookupType(acc, v.type)) {
			Some(tp): setTree(ac, v.name, RuVar(v.name, v.type, v.pos));
			None(): {
				conf.onError("unknown var " + v.name + " type " + v.type, [RuPlace(acc.file, v.pos)]);
				ac
			}
		}
	)
}

ruCollectDisjs(vars : Tree<string, RuVar>, disjs : [RuParseDisj], acc : RuCollectAcc, conf : RuConf) -> Set<RuDisj> {
	fold(disjs, makeSet(), \acc1, disj -> 
		fold(disj.vars, acc1, \acc2, v1 ->
			fold(disj.vars, acc2, \acc3, v2 -> {
					switch (lookupTree(vars, v1)) {
						Some(vr1): {
							switch (lookupTree(vars, v2)) {
								Some(vr2): {
									if (vr1.name < vr2.name) 
										insertSet(acc3, RuDisj(RuVarRef(vr1.name, vr1.type), RuVarRef(vr2.name, vr2.type))) 
									else if (vr2.name < vr1.name) 
										insertSet(acc3, RuDisj(RuVarRef(vr2.name, vr2.type), RuVarRef(vr1.name, vr1.type))) 
									else acc3 
								}
								None(): {
									conf.onError("unknown var '" + v2 + "' in disjointed set, vars: " + 
									strGlue(map(getTreeValues(vars), \v -> "'" + v.name + "'"), ", "), 
									[RuPlace(acc.file, disj.pos)]); acc3;
								}
							}
						}
						None(): {
							conf.onError("unknown var '" + v1 + "' in disjointed set, vars: " + 
							strGlue(map(getTreeValues(vars), \v -> "'" + v.name + "'"), ", "), 
							[RuPlace(acc.file, disj.pos)]); acc3;
						}
					}
				}
			)
		)
	)
}

ruCollectHyp(hyp : RuParseHyp, vars : Tree<string, RuVar>, acc : RuCollectAcc, conf : RuConf) -> Maybe<RuHyp> {
	maybeMap(
		ruCollectExp(hyp.expr, vars, acc, conf), 
		\expr -> RuHyp(hyp.ind, expr, hyp.pos)
	)
}

ruCreateTheorem(th : RuParseTheorem, acc : RuCollectAcc) -> Maybe<RuTheorem> {
	switch (ruLookupAssertion(acc, th.name)) {
		Some(__): {
			acc.conf.onError("assertion with name " + th.name + " is already defined", [RuPlace(acc.file, th.pos)]);
			None()
		}
		None(): {
			err = \-> { acc.conf.onError("error in theorem " + th.name, [RuPlace(acc.file, th.pos)]); None(); }
			conf1 = ruAddErr2Conf(acc.conf, "\nat theorem " + th.name);
			vars = ruCollectVars(th.vars, acc, conf1);
			disjs = ruCollectDisjs(vars, th.disjs, acc, conf1);
			hyps = filtermap(th.hyps, \h -> ruCollectHyp(h, vars, acc, conf1));
			if (length(hyps) != length(th.hyps)) {
				err();
			} else {
				switch (ruCollectExp(th.prop, vars, acc, conf1)) { 
					Some(prop): {
						switch (ruCollectProof(th.proof, vars, acc, conf1)) {
							Some(proof): Some(RuTheorem(th.name, vars, disjs, hyps, prop, proof, th.pos));
							None(): err();
						}
					}
					None(): err();
				}
			}
		}
	}
}

ruCollectProof(proof : RuParseProof, vars : Tree<string, RuVar>, acc : RuCollectAcc, conf : RuConf) -> Maybe<RuProof> {
	proof_vars = ruCollectVars(proof.vars, acc, conf);
	all_vars = mergeTreeCustom(proof_vars, vars, \v, w,__ -> {
		conf.onError("duplicate variable " + v, [RuPlace(acc.file, proof.pos)]);
		w
	});
	proof_disjs = ruCollectDisjs(all_vars, proof.disjs, acc, conf);
	do_ref = \r -> switch (r) {
		RuParseHypRef(i, p): RuHypRef(i, p);
		RuParseStepRef(i, p): RuStepRef(i, p);
	}
	steps = filtermap(proof.steps,
		\s ->
			maybeMap(ruCollectExp(s.expr, all_vars, acc, conf),
				\expr -> RuStep(s.ind, s.assertion, map(s.refs, do_ref), expr, s.pos)
			)
	);
	if (length(steps) != length(proof.steps)) None() else {
		Some(RuProof(proof_vars, proof_disjs, steps, proof.pos));
	}
}

ruCreateDef(df : RuParseDef, acc : RuCollectAcc) -> Maybe<RuDef> {
	switch (ruLookupAssertion(acc, df.name)) {
		Some(__): {
			acc.conf.onError("assertion with name " + df.name + " is already defined", [RuPlace(acc.file, df.pos)]);
			None()
		}
		None(): {
			err = \-> { acc.conf.onError("error in definition " + df.name, [RuPlace(acc.file, df.pos)]); None(); }
			conf1 = ruAddErr2Conf(acc.conf, "\nat definitoin " + df.name);
			vars = ruCollectVars(df.vars, acc, conf1);
			disjs = ruCollectDisjs(vars, df.disjs, acc, conf1);
			prop_ex = fold(df.def.symbs, [], \ac, s ->
				if (s == "defiendum") concat(ac, df.defm.symbs) else
				if (s == "definiens") concat(ac, df.defs.symbs) else
				concat(ac, [s])
			);
			hyps = filtermap(df.hyps, \h -> ruCollectHyp(h, vars, acc, conf1));
			if (length(hyps) != length(df.hyps)) {
				err();
			} else {
				switch (ruCollectExp(RuParseExp(df.def.type, prop_ex, df.def.pos), vars, acc, conf1)) {
					Some(prop): {
						switch (ruCollectExp(df.defm, vars, acc, conf1)) {
							Some(defm): {
								switch (ruCollectExp(df.defs, vars, acc, conf1)) {
									Some(defs): 
										Some(RuDef(df.name, vars, disjs, hyps, defm, defs, prop, df.pos));
									None(): err();
								}
							}
							None(): err();
						}
					}
					None(): err();
				}
			}
		}
	}
}

ruLookupConst(acc : RuCollectAcc, n : string) -> Maybe<RuConst> {
	switch(lookupTree(acc.global.consts, n)) {
		Some(c): Some(c);
		None(): lookupTree(acc.local.consts, n);
	}
}

ruLookupType(acc : RuCollectAcc, n : string) -> Maybe<RuTypeEnv> {
	lookupTree(acc.types, n)
}

ruLookupRule(acc : RuCollectAcc, n : string) -> Maybe<RuRule> {
	switch(lookupTree(acc.global.rules, n)) {
		Some(r): Some(r);
		None(): lookupTree(acc.local.rules, n);
	}
}

ruLookupAssertion(acc : RuCollectAcc, n : string) -> Maybe<RuAssertion> {
	switch(lookupTree(acc.global.assertions, n)) {
		Some(a): Some(a);
		None(): lookupTree(acc.local.assertions, n);
	}
}

source = '\uFEFF'? ws decl*;

decl = import | const | type | rule | axiom | def | theorem | scomment | comment;

import = "import" ws symb ";;" ws;

comment = scomment | mcomment;
scomment = "//" (!'\n' char_)* '\n' ws;
mcomment = "/*" (!"*/" char_)* "*/" ws;

const  = const2 | const1 | const0 ;
const0 = "constant" ws '{' ws "symbol" ws symb ";;" ws '}' ws ;
const1 = "constant" ws '{' ws "symbol" ws symb ";;" ws "ascii" ws symb ";;" ws '}' ws ;
const2 = "constant" ws '{' ws "symbol" ws symb ";;" ws "ascii" ws symb ";;" "latex" ws symb ";;" ws '}' ws ;

type   = "type" ws id (':' ws id+)? ";;" ws;
rule   = "rule" ws id vars '{' ws term '}' ws;

axiom  = axiom1 | axiom2;
axiom1 = "axiom" ws id vars disjs? '{' ws  
	"prop" ws expr
'}' ws;
axiom2 = "axiom" ws id vars disjs? '{' ws
	("hyp" ws ind expr)+
	"-----" '-'*
	"prop" ws expr
'}' ws;

def = "definition" ws id vars disjs? '{' ws
	("hyp" ws ind expr)+
	"defiendum" ws expr
	"definiens" ws expr
	"-----" '-'*
	"prop" ws expr
'}' ws;

theorem  = theorem1 | theorem2;
theorem1 = "theorem" ws id vars disjs? '{' ws  
	"prop" ws expr
'}' ws proof;
theorem2 = "theorem" ws id vars disjs? '{' ws
	("hyp" ws ind expr)+
	"-----" '-'*
	"prop" ws expr
'}' ws proof;

proof = vars disj '{' ws
	step*
'}' ws;

step = "step" ws ind ':' ws id '=' refs "|-" symb* ";;" ws;
refs = refs2 | refs1 | refs0;
refs0 = id "()" ws;
refs1 = id '(' ws ref ')' ws;
refs2 = id '(' ws ref (',' ws ref)+ ')';

ref = "hyp" ws ind | "step" ws ind;

term   = "term" ws expr;

disjs   = disjs2 | disjs1 | disjs0;
disjs0  = "disjointed()" ws;
disjs1  = "disjointed(" ws disj ')' ws;
disjs2  = "disjointed(" ws disj ("," ws disj)* ')' ws;
disj    = symb+;

vars   = vars0 | vars1 | vars2;
vars0  = "()" ws;
vars1  = '(' ws var_decl ')' ws;
vars2  = '(' ws var_decl ("," ws var_decl)* ')' ws;

var_decl = id ':' ws id;

expr  = ':' ws id '=' ws ("#" | "|-") symb* ";;" ws;

symb  = (!(";;" | space) char_)+;
ind   = digit+;
digit = '0'-'9';
id = ('a-z' | 'A-Z' | '_' | '.' | '-' | '\'')+;

char_ = '\u0000'-'\uFFFF';
ws = space*;
space = ' ' | '\t' | '\n' | '\r';

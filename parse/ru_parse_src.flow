import string;
import ru_fileinfo;

export {
	RuParseSource(imps : [RuParseImport], decls : [RuParseDecl], info : RuFileInfo);
	RuParseImport(path : string);
	RuParseDecl ::= RuParseConst, RuParseType, RuParseRule, RuParseAxiom, RuParseDef, RuParseTheorem, RuParseTheory, RuParseComment;
	RuParseComment(text : string);
	RuParseTheory(name : string, decls : [RuParseDecl]);
	RuParseConst(symb : string, ascii : string, latex : string);
	RuParseType(name : string, supers : [string]);
	RuParseRule(name : string, vars : [RuParseVar], term : RuParseExp);
	RuParseAxiom(name : string, vars : [RuParseVar], disjs : [RuParseDisj], hyps : [RuParseHyp], prop : RuParseExp);
	RuParseHyp(ind : int, expr : RuParseExp);
	RuParseVar(name : string, type : string);
	RuParseDisj(vars : [string]);
	RuParseTheorem(name : string, vars : [RuParseVar], disjs : [RuParseDisj], hyps : [RuParseHyp], prop : RuParseExp, proof : RuParseProof);
	RuParseDef(name : string, vars : [RuParseVar], disjs : [RuParseDisj], hyps : [RuParseHyp], defm : RuParseExp, defs : RuParseExp, prop : RuParseExp);
	RuParseProof(vars : [RuParseVar], disjs : [RuParseDisj], steps : [RuParseStep]);
	RuParseStep(ind : int, assertion : string, refs : [RuParseRef], expr : RuParseExp);
	RuParseRef ::= RuParseHypRef, RuParseStepRef;
	RuParseHypRef(ind : int);
	RuParseStepRef(ind : int);
	RuParseExp(type : string, symbs : [string]);

	RuParseAny ::= 
		RuParseSource, RuParseImport, RuParseConst, RuParseType, RuParseRule, RuParseAxiom, RuParseDef, RuParseTheorem, RuParseTheory, RuParseComment,
		RuParseStep, RuParseExp, RuParseHyp, RuParseProof, RuParseDisj, RuParseVar, RuParseHypRef, RuParseStepRef;

	ruParse2s(a : RuParseAny) -> string {
		vars2s  = \vars -> if (vars == []) "" else "(" + strGlue(map(vars, ruParse2s), ", ") + ")";
		disjs2s = \disjs -> if (disjs == []) "" else "disjointed(" + strGlue(map(disjs, ruParse2s), ", ") + ")";
		exp2s   = \expr, delim -> ": " + expr.type + " = " + delim + " " + strGlue(expr.symbs, " ") + " ;;";
		prop2s  = \prop -> "\tprop " + exp2s(prop, "|-") + "\n";
		refs2s  = \refs -> "(" + strGlue(map(refs, ruParse2s), ", ") + ")";
		switch (a) {
			RuParseSource(imps, decls, info): 
				strGlue(map(imps, ruParse2s), "\n") + "\n" +
				strGlue(map(decls, ruParse2s), "\n");
			RuParseImport(path):
				"import " + path + ";;";
			RuParseConst(symbol, ascii, latex): 
				"constant {\n" + 
					"\tsymbol " + symbol + ";;\n" +
					(if (ascii != "") "\tascii " + ascii + ";;\n" else "") + 
					(if (latex != "") "\tlatex " + latex + ";;\n" else "") +
				"}\n";
			RuParseType(name, supers): 
				"type " + name + (if (supers == []) "" else " : " + strGlue(supers, ", ")) + " ;;\n";
			RuParseRule(name, vars, term):
				"rule " + name + " " + vars2s(vars) + " {\n" +
					"\tterm " + exp2s(term, "#") + "\n" +
				"}\n";
			RuParseAxiom(name, vars, disjs, hyps, prop): 
				"axiom " + name + " " + vars2s(vars) + " " + disjs2s(disjs) + " {\n" +
					strGlue(map(hyps, ruParse2s), "\n") + "\n" +
					(if (hyps == []) "" else "\t----------\n") +
					prop2s(prop) +
				"}\n";
			RuParseDef(name, vars, disjs, hyps, defm, defs, prop): 
				"definition " + name + " " + vars2s(vars) + " " + disjs2s(disjs) + " {\n" +
					strGlue(map(hyps, ruParse2s), "\n") + "\n" +
					"\tdefiendum " + exp2s(defm, "#") + "\n" +
					"\tdefiniens " + exp2s(defs, "#") + "\n" +
					"\t-------------\n" +
					prop2s(prop) +
				"}\n";
			RuParseTheorem(name, vars, disjs, hyps, prop, proof): 
				"theorem " + name + " " + vars2s(vars) + " " + disjs2s(disjs) + " {\n" +
					strGlue(map(hyps, ruParse2s), "\n") + "\n" +
					(if (hyps == []) "" else "\t----------\n") +
					prop2s(prop) +
				"} " + ruParse2s(proof);
			RuParseHyp(ind, expr): 
				"\thyp " + i2s(ind) + " " + exp2s(expr, "|-");
			RuParseProof(vars, disjs, steps): 
				"proof " + " " + vars2s(vars) + " " + disjs2s(disjs) + " {\n" +
					strGlue(map(steps, ruParse2s), "\n") +
				"}\n";
			RuParseStep(ind, assertion, refs, expr):
				"\tstep " + i2s(ind) + " : " + expr.type + " = " + 
					assertion + " " + refs2s(refs) + " |- " + strGlue(expr.symbs, " ") + " ;;";
			RuParseTheory(name, ds): 
				"theory " + name + " {\n" +
					strGlue(map(ds, ruParse2s), "\n") +
				"}\n";
			RuParseComment(text):
				if (strContains(text, "\n")) "/*" + text + "*/" else "//" + text;
			RuParseDisj(disj): strGlue(disj, " ");
			RuParseExp(type, symbs): exp2s(a, "|-");
			RuParseHypRef(i): "hyp " + i2s(i);
			RuParseStepRef(i): "dtep " + i2s(i);
			RuParseVar(name, type): name + " : " + type;
		}
	}
}

import string;
import ru_fileinfo;

export {
	RuParseSource(imports : [RuParseImport], decls : [RuParseBlock], info : RuFileInfo);
	RuParseImport(path : string, pos : int);
	RuParseBlock ::= RuParseDecl, RuParseComment;
	RuParseDecl ::= RuParseConst, RuParseType, RuParseRule, RuParseAxiom, RuParseDef, RuParseTheorem, RuParseTheory;
	RuParseComment(text : string, pos : int);
	RuParseTheory(name : string, decls : [RuParseDecl], pos : int);
	RuParseConst(symb : string, ascii : string, latex : string, pos : int);
	RuParseType(name : string, supers : [string], pos : int);
	RuParseRule(name : string, vars : [RuParseVar], term : RuParseExp, pos : int);
	RuParseAxiom(name : string, vars : [RuParseVar], disjs : [RuParseDisj], hyps : [RuParseHyp], prop : RuParseExp, pos : int);
	RuParseHyp(ind : int, expr : RuParseExp, pos : int);
	RuParseVar(name : string, type : string, pos : int);
	RuParseDisj(vars : [string], pos : int);
	RuParseTheorem(name : string, vars : [RuParseVar], disjs : [RuParseDisj], hyps : [RuParseHyp], prop : RuParseExp, proof : RuParseProof, pos : int);
	RuParseDef(name : string, vars : [RuParseVar], disjs : [RuParseDisj], hyps : [RuParseHyp], defm : RuParseExp, defs : RuParseExp, def : RuParseExp, pos : int);
	RuParseProof(vars : [RuParseVar], disjs : [RuParseDisj], steps : [RuParseStep], pos : int);
	RuParseStep(ind : int, assertion : string, refs : [RuParseRef], expr : RuParseExp, pos : int);
	RuParseRef ::= RuParseHypRef, RuParseStepRef;
	RuParseHypRef(ind : int, pos : int);
	RuParseStepRef(ind : int, pos : int);
	RuParseExp(type : string, symbs : [string], pos : int);

	RuParseAny ::= 
		RuParseSource, RuParseImport, RuParseConst, RuParseType, RuParseRule, RuParseAxiom, RuParseDef, RuParseTheorem, RuParseTheory, RuParseComment,
		RuParseStep, RuParseExp, RuParseHyp, RuParseProof, RuParseDisj, RuParseVar, RuParseHypRef, RuParseStepRef;

	ruParse2s(a : RuParseAny) -> string;
	ruSplitSources(src : RuParseSource) -> [RuParseSource];
}

ruParse2s(a : RuParseAny) -> string {
	vars2s  = \vars -> if (vars == []) "" else "(" + strGlue(map(vars, ruParse2s), ", ") + ") ";
	disjs2s = \disjs -> if (disjs == []) "" else "disjointed(" + strGlue(map(disjs, ruParse2s), ", ") + ") ";
	exp2s   = \expr, delim -> ": " + expr.type + " = " + delim + " " + strGlue(expr.symbs, " ") + " ;;";
	prop2s  = \prop -> "\tprop " + exp2s(prop, "|-") + "\n";
	refs2s  = \refs -> "(" + strGlue(map(refs, ruParse2s), ", ") + ")";
	hyps2s  = \hyps -> if (hyps == []) "" else strGlue(map(hyps, ruParse2s), "\n") + "\n";
	switch (a) {
		RuParseSource(imps, decls, info): 
			(if (imps == []) "" else strGlue(map(imps, ruParse2s), "\n") + "\n\n") +
			strGlue(map(decls, ruParse2s), "\n");
		RuParseImport(path,__):
			"import " + path + ";;";
		RuParseConst(symbol, ascii, latex,__): 
			"constant {\n" + 
				"\tsymbol " + symbol + " ;;\n" +
				(if (ascii != "") "\tascii " + ascii + " ;;\n" else "") + 
				(if (latex != "") "\tlatex " + latex + " ;;\n" else "") +
			"}\n";
		RuParseType(name, supers,__): 
			"type " + name + (if (supers == []) "" else " : " + strGlue(supers, ", ")) + " ;;\n";
		RuParseRule(name, vars, term,__):
			"rule " + name + " " + vars2s(vars) + "{\n" +
				"\tterm " + exp2s(term, "#") + "\n" +
			"}\n";
		RuParseAxiom(name, vars, disjs, hyps, prop,__): 
			"axiom " + name + " " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				hyps2s(hyps) +
				(if (hyps == []) "" else "\t----------\n") +
				prop2s(prop) +
			"}\n";
		RuParseDef(name, vars, disjs, hyps, defm, defs, prop,__): 
			"definition " + name + " " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				hyps2s(hyps) +
				"\tdefiendum " + exp2s(defm, "#") + "\n" +
				"\tdefiniens " + exp2s(defs, "#") + "\n" +
				"\t-------------\n" +
				prop2s(prop) +
			"}\n";
		RuParseTheorem(name, vars, disjs, hyps, prop, proof,__): 
			"theorem " + name + " " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				hyps2s(hyps) + 
				(if (hyps == []) "" else "\t----------\n") +
				prop2s(prop) +
			"} " + ruParse2s(proof);
		RuParseHyp(ind, expr,__): 
			"\thyp " + i2s(ind + 1) + " " + exp2s(expr, "|-");
		RuParseProof(vars, disjs, steps,__): 
			"proof " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				strGlue(map(steps, ruParse2s), "\n") + "\n" +
			"}\n";
		RuParseStep(ind, assertion, refs, expr,__):
			"\tstep " + i2s(ind + 1) + " : " + expr.type + " = " + 
				assertion + " " + refs2s(refs) + " |- " + strGlue(expr.symbs, " ") + " ;;";
		RuParseTheory(name, ds,__): 
			"theory " + name + " {\n" +
				strGlue(map(ds, ruParse2s), "\n") + "\n" +
			"}\n";
		RuParseComment(text,__): "/* " + text + " */\n";
		RuParseDisj(disj,__): strGlue(disj, " ");
		RuParseExp(type, symbs,__): exp2s(a, "|-");
		RuParseHypRef(i,__): "hyp " + i2s(i + 1);
		RuParseStepRef(i,__): "step " + i2s(i + 1);
		RuParseVar(name, type,__): name + " : " + type;
	}
}

RuSplitSource(
	pattern : string,
	header : string,
	path : string,
	decls : ref [RuParseBlock],
	subs : ref [RuSplitSource]
);

strReplaceAll(str : string, chars : string, onto : string) -> string {
	char_codes = buildSet(s2a(chars));
	under_code = getCharCodeAt(onto, 0);
	fold(
		map(s2a(str), \i -> if (containsSet(char_codes, i)) under_code else i),
		"",
		\ac, i -> ac + fromCharCode(i)
	)
}

ruSplitLevel(src : RuSplitSource, pattern : string, upper : RuSplitSource) -> RuSplitSource {
	makePath = \h -> strReplaceAll(h, " /:.?!;$\\\"'", "_");
	addBlock = \acc, block -> { refArrayPush(lastElement(^(acc.subs), acc).decls, block); acc }
	addSrc = \acc, h -> {
		path = upper.path + "/" + makePath(h);
		refArrayPush(acc.subs, RuSplitSource(pattern, h, makePath(h), ref [], ref [])); 
		acc 
	}
	getHeader = \txt -> trim2(strSplit(txt, "\n")[2], " \t\n\r");
	fold(^(src.decls), upper, \acc, block ->
		switch (block) {
			RuParseComment(text, __): {
				if (!strContains(text, pattern)) {
					addBlock(acc, block)
				} else {
					addBlock(addSrc(acc, getHeader(text)), block);
				}
			}
			default: addBlock(acc, block);
		}
	)
}

RuSplitPattern(
	pattern : string, 
	child : Maybe<RuSplitPattern>
);

ruSplitSourceRec(src : RuSplitSource, p : RuSplitPattern, upper : RuSplitSource) -> RuSplitSource {
	parts = ruSplitLevel(src, p.pattern, upper);
	switch (p.child) {
		None(): parts;
		Some(ch_p):
			RuSplitSource(parts with
				subs = ref map(^(parts.subs), \part -> ruSplitSourceRec(part, ch_p, parts))
			);
	}
}

ruDoSplitSource(src : RuParseSource) -> RuSplitSource {
	ruSplitSourceRec(
		RuSplitSource("", "", ruDirName(src.info.file), ref src.decls, ref []), 
		RuSplitPattern("######", 
			Some(RuSplitPattern("#*#*#*#", 
				Some(RuSplitPattern("#*#*#*#", 
					Some(RuSplitPattern("=-=-=-=", 
						Some(RuSplitPattern("-.-.-.-.", 
							None()
						))
					))
				))
			))
		),
		RuSplitSource("", "", ruDirName(src.info.file), ref src.decls, ref [])
	)
}

ruLinearizeSplitSources(src : RuSplitSource, acc : [RuParseSource]) -> [RuParseSource] {
	header_pattern = lpad("", src.pattern, 40); 
	curr_src = RuParseSource(
		if (acc == []) [] else [RuParseImport(acc[length(acc) - 1].info.file, -1)],
		concat(
			[RuParseComment(header_pattern + "\n" + src.header + "\n" + header_pattern, -1)],
			^(src.decls)
		),
		RuFileInfo(src.path + ".ru", src.path + ".ru", 0.0, 0.0)
	);
	fold(^(src.subs), concat(acc, [curr_src]), \ac, sub ->
		ruLinearizeSplitSources(sub, ac)
	);
}

ruSplitSources(src : RuParseSource) -> [RuParseSource] {
	ruLinearizeSplitSources(ruDoSplitSource(src), [])
}

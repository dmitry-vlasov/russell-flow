
export {
	RuParseSource(imps : [RuParseImport], decls : [RuParseDecl]);
	RuParseImport(imp : string);
	RuParseDecl ::= RuParseConst, RuParseType, RuParseRule, RuParseAxiom, RuParseDef, RuParseTheorem, RuParseTheory, RuParseComment;
	RuParseComment(text : string);
	RuParseTheory(name : string, decls : [RuParseDecl]);
	RuParseConst(symb : string, ascii : string, latex : string);
	RuParseType(name : string, supers : [string]);
	RuParseRule(name : string, vars : [RuParseVar], term : RuParseExp);
	RuParseAxiom(name : string, vars : [RuParseVar], disj : [RuParseDisj], hyps : [RuParseHyp], prop : RuParseExp);
	RuParseHyp(ind : int, expr : RuParseExp);
	RuParseVar(name : string, type : string);
	RuParseDisj(vars : [string]);
	RuParseTheorem(name : string, vars : [RuParseVar], disj : [RuParseDisj], hyps : [RuParseHyp], prop : RuParseExp, proof : RuParseProof);
	RuParseDef(name : string, vars : [RuParseVar], disj : [RuParseDisj], hyps : [RuParseHyp], defm : RuParseExp, defs : RuParseExp, prop : RuParseExp);
	RuParseProof(vars : [RuParseVar], disj : [RuParseDisj], steps : [RuParseStep]);
	RuParseStep(ind : int, assertion : string, refs : [RuParseRef], expr : RuParseExp);
	RuParseRef ::= RuParseHyp, RuParseStep;
	RuParseExp(type : string, symbs : [string]);
}

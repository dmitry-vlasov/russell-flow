import ru_src;
import ru_conf;

export {
	RuTrie(
		data : Maybe<??>,
		map : Tree<?, RuTrie<?, ??>>,
	);
	ruTrieEmpty = RuTrie(None(), makeTree());

	ruAdd2Trie(key : [?], data : Maybe<??>, trie : RuTrie<?, ??>) -> RuTrie<?, ??> {
		if (length(key) == 0) trie else doRuAdd2Trie(0, key, data, trie)
	}
	
	ruTrie2s(t : RuTrie<?, ??>, show_key : (?) -> string, show_val : (??) -> string) -> string {
		foldTree(doRuTrie2tree(t, [], makeTree(), show_key, show_val), "",
			\path, val, acc ->
				acc + strGlue(path, " ") + " --> " + val + "\n"
		)
	}
	
	ruAddTerm2RuTrie(term : RuTerm, rule : Maybe<string>, trie : RuTrie<string, string>) -> RuTrie<string, string> {
		term_key = \x -> switch (x) {
			RuConstRef(c):  c;
			RuVarRef(v, t): t;
		}
		ruAdd2Trie(map(term.expr, term_key), rule, trie)
	}

	RuTypeEnv(
		type : RuType,
		trie   : RuTrie<string, string>,
		supers : Tree<string, RuRule>,
		infers : Tree<string, RuRule>
	);

	ruNoTypeEnv = RuTypeEnv(ruNoType, ruTrieEmpty, makeTree(), makeTree());
}

doRuAdd2Trie(i : int, key : [?], data : Maybe<??>, trie : RuTrie<?, ??>) -> RuTrie<?, ??> {
	n = lookupTreeDef(trie.map, key[i], ruTrieEmpty);
	if (i + 1 == length(key)) {
		RuTrie(n.data, setTree(trie.map, key[i], RuTrie(n with data = data)));
	} else {
		RuTrie(n.data, setTree(trie.map, key[i], doRuAdd2Trie(i + 1, key, data, n)));
	}
}

doRuTrie2tree(trie : RuTrie<?, ??>, path : [string], acc : Tree<[string], string>, show_key : (?) -> string, show_val : (??) -> string) -> Tree<[string], string> {
	foldTree(trie.map, acc, 
		\k, v, ac -> {
			path1 = concat(path, [show_key(k)]);
			ac1 = doRuTrie2tree(v, path1, ac, show_key, show_val);
			switch (v.data) {
				None(): ac1;
				Some(d): setTree(ac1, path1, show_val(d));
			}
		}
	)
}

import lingo/compiler/syntaxtree_types;
import parse/ru_parse_ast_mnemonics;

export {
	get_source_decl_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_import(st : SyntaxTree) -> SyntaxTree;
	get_source_comment(st : SyntaxTree) -> SyntaxTree;
	get_source_scomment(st : SyntaxTree) -> SyntaxTree;
	get_source_mcomment(st : SyntaxTree) -> SyntaxTree;
	get_source_const(st : SyntaxTree) -> SyntaxTree;
	get_source_symbol(st : SyntaxTree) -> SyntaxTree;
	get_source_ascii_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_latex_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_type(st : SyntaxTree) -> SyntaxTree;
	get_source_supers_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_super_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_rule(st : SyntaxTree) -> SyntaxTree;
	get_source_axiom(st : SyntaxTree) -> SyntaxTree;
	get_source_def(st : SyntaxTree) -> SyntaxTree;
	get_source_theorem(st : SyntaxTree) -> SyntaxTree;
	get_source_proof(st : SyntaxTree) -> SyntaxTree;
	get_source_hyps_bar_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_hyps_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_hyp_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_defm(st : SyntaxTree) -> SyntaxTree;
	get_source_defs(st : SyntaxTree) -> SyntaxTree;
	get_source_step_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_refs(st : SyntaxTree) -> SyntaxTree;
	get_source_refs0_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_refs1_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_ref(st : SyntaxTree) -> SyntaxTree;
	get_source_hyp_ref(st : SyntaxTree) -> SyntaxTree;
	get_source_step_ref(st : SyntaxTree) -> SyntaxTree;
	get_source_disjs_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_disjs0_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_disjs1_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_disj(st : SyntaxTree) -> SyntaxTree;
	get_source_dis0_v(st : SyntaxTree) -> SyntaxTree;
	get_source_dis1_v_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_vars_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_vars0_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_vars1_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_var(st : SyntaxTree) -> SyntaxTree;
	get_source_type_id(st : SyntaxTree) -> SyntaxTree;
	get_source_expr(st : SyntaxTree) -> SyntaxTree;
	get_source_symbs(st : SyntaxTree) -> SyntaxTree;
	get_source_symbws_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_symb(st : SyntaxTree) -> SyntaxTree;
	get_source_ind(st : SyntaxTree) -> SyntaxTree;
	get_source_id(st : SyntaxTree) -> SyntaxTree;
	get_source_id_char_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_digit_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_char_(st : SyntaxTree) -> SyntaxTree;
	get_source_ws(st : SyntaxTree) -> SyntaxTree;
	get_source_space_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_expr__choice53(st : SyntaxTree) -> SyntaxTree;
	get_source_scomment__auto54(st : SyntaxTree) -> SyntaxTree;
	get_source_scomment__auto54_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_mcomment__auto55(st : SyntaxTree) -> SyntaxTree;
	get_source_mcomment__auto55_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_symb__auto56(st : SyntaxTree) -> SyntaxTree;
	get_source_symb__auto56_s(st : SyntaxTree) -> [SyntaxTree];

}

get_source_import(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_comment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 8 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_scomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_decl) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_mcomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_const(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_symbol(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_const) {
		st.children[2][0];
	} else failSyntaxTree
}
get_source_type(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_rule(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_axiom(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_def(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_theorem(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_proof(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_theorem) {
		st.children[10][0];
	} else failSyntaxTree
}
get_source_defm(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_def) {
		st.children[7][0];
	} else failSyntaxTree
}
get_source_defs(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_def) {
		st.children[8][0];
	} else failSyntaxTree
}
get_source_refs(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_step) {
		st.children[7][0];
	} else failSyntaxTree
}
get_source_ref(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_refs0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_refs1) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_hyp_ref(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ref) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_step_ref(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ref) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_disj(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_disjs0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_disjs1) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_dis0_v(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_disj) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_var(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_vars0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_vars1) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_type_id(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_step) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_var) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_expr(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_rule) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_axiom) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[11][0];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_hyp) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_defm) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_defs) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_symbs(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_step) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[4][0];
	} else failSyntaxTree
}
get_source_symb(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_import) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_symbol) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ascii) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_latex) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_symbws) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_ind(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_hyp) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_hyp_ref) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_step_ref) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_id(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_type) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_supers) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_super) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_axiom) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_dis0_v) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_dis1_v) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_var) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_type_id) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_char_(st : SyntaxTree) -> SyntaxTree {
	if (get_source_scomment__auto54(st).choice == 0) {
		get_source_scomment__auto54(st).children[0][0];
	} else if (get_source_mcomment__auto55(st).choice == 0) {
		get_source_mcomment__auto55(st).children[0][0];
	} else if (get_source_symb__auto56(st).choice == 0) {
		get_source_symb__auto56(st).children[0][0];
	} else failSyntaxTree
}
get_source_ws(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_source) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_scomment) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_mcomment) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_const) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_const) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_const) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_symbol) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_symbol) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_symbol) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ascii) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ascii) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ascii) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_latex) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_latex) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_latex) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_type) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_type) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_type) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_supers) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_supers) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_super) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_super) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_axiom) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_axiom) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_axiom) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_axiom) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_axiom) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[10][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[12][0];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_proof) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_proof) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_proof) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_hyps_bar) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_hyp) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_hyp) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_defm) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_defs) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[10][0];
	} else if (st.choice == 0 && st.rule == st_refs) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_refs) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_refs1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_hyp_ref) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_hyp_ref) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_step_ref) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_step_ref) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_disjs) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_disjs) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_disjs1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_dis0_v) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_dis1_v) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_vars) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_vars) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_vars1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_var) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_type_id) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_type_id) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_symbws) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_expr__choice53(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_expr) {
		st.children[2][0];
	} else failSyntaxTree
}
get_source_scomment__auto54(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_mcomment__auto55(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_symb__auto56(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}

get_source_decl_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_source) {
		st.children[1];
	} else []
}
get_source_ascii_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_const) {
		st.children[3];
	} else []
}
get_source_latex_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_const) {
		st.children[4];
	} else []
}
get_source_supers_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_type) {
		st.children[3];
	} else []
}
get_source_super_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_supers) {
		st.children[3];
	} else []
}
get_source_hyps_bar_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_axiom) {
		st.children[6];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[6];
	} else []
}
get_source_hyps_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_def) {
		st.children[6];
	} else []
}
get_source_hyp_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_hyps_bar) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_hyps) {
		st.children[0];
	} else []
}
get_source_step_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_proof) {
		st.children[4];
	} else []
}
get_source_refs0_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_refs) {
		st.children[1];
	} else []
}
get_source_refs1_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_refs0) {
		st.children[1];
	} else []
}
get_source_disjs_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_axiom) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_proof) {
		st.children[2];
	} else []
}
get_source_disjs0_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_disjs) {
		st.children[1];
	} else []
}
get_source_disjs1_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_disjs0) {
		st.children[1];
	} else []
}
get_source_dis1_v_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_disj) {
		st.children[1];
	} else []
}
get_source_vars_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_rule) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_axiom) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_theorem) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_proof) {
		st.children[1];
	} else []
}
get_source_vars0_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_vars) {
		st.children[1];
	} else []
}
get_source_vars1_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_vars0) {
		st.children[1];
	} else []
}
get_source_symbws_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_symbs) {
		st.children[0];
	} else []
}
get_source_id_char_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_id) {
		st.children[0];
	} else []
}
get_source_digit_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ind) {
		st.children[0];
	} else []
}
get_source_space_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ws) {
		st.children[0];
	} else []
}
get_source_scomment__auto54_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_scomment) {
		st.children[0];
	} else []
}
get_source_mcomment__auto55_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_mcomment) {
		st.children[0];
	} else []
}
get_source_symb__auto56_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_symb) {
		st.children[0];
	} else []
}


import ru_src;
import ru_conf;
import parse/ru_trie;

export {
	RuTypeEnv(
		type : RuType,
		trie   : RuTrie<string, ([RuExpNode])->[RuExpNode]>,
		supers : Tree<string, RuRule>,
		infers : Tree<string, RuRule>
	);
	ruNoTypeEnv = RuTypeEnv(ruNoType, ruTrieEmpty, makeTree(), makeTree());

	ruAddTerm2RuTrie(term : RuTerm, rule : Maybe<([RuExpNode])->[RuExpNode]>, trie : RuTrie<string, ([RuExpNode])->[RuExpNode]>) -> RuTrie<string, ([RuExpNode])->[RuExpNode]> {
		term_key = \x -> switch (x) {
			RuConstRef(c):  c;
			RuVarRef(v, t): t;
		}
		ruAdd2Trie(map(term.expr, term_key), rule, trie)
	}
}

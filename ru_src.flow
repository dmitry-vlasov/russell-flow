
export {
	RuSource(imps : [RuImport], decls : [RuDecl]);
	RuImport(imp : string, src : RuSource);
	RuDecl ::= RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem, RuTheory, RuComment;
	RuComment(text : string);
	RuTheory(name : string, decls : [RuDecl]);
	RuConst(symb : string, ascii : string, latex : string);
	RuType(name : string, supers : [RuType]);
	RuRule(name : string, vars : [RuVar], term : RuExp);
	RuAxiom(name : string, vars : [RuVar], disj : [RuDisj], hyps : [RuHyp], prop : RuExp);
	RuHyp(ind : int, expr : RuExp);
	RuVar(id : int, type : RuType);
	RuDisj(vars : [int]);
	RuTheorem(name : string, vars : [RuVar], disj : [RuDisj], hyps : [RuHyp], prop : RuExp, proof : RuProof);
	RuDef(name : string, vars : [RuVar], disj : [RuDisj], hyps : [RuHyp], defm : RuExp, defs : RuExp, prop : RuExp);
	RuProof(vars : [RuVar], disj : [RuDisj], steps : [RuStep]);
	RuStep(ind : int, assertion : RuAssertion, refs : [RuRef], expr : RuExp);
	RuRef ::= RuHyp, RuStep;
	RuAssertion ::= RuAxiom, RuTheorem, RuDef;

	RuExp(mutable lin : RuLin, mutable rpn : RuRpn);
	RuLin(type : RuType, expr : [int]);

	RuRpn(nodes : [RuRpnNode]);
	RuRpnNode ::= RuRpnRule, RuVar;
	RuRpnRule(rule : RuRule, len : int);

	dummyLin = RuLin(RuType("", []), []);
	dummyRpn = RuRpn([]);
}

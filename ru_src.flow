import string;
import ds/tree;
import ru_fileinfo;

export {
	RuSource(imports : [RuImport], decls : [RuBlock], info : RuFileInfo);
	RuImport(path : string, pos : int);
	RuBlock ::= RuDecl, RuComment;
	RuDecl ::= RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem, RuTheory;
	RuComment(text : string, pos : int);
	RuTheory(name : string, decls : [RuDecl], pos : int);
	RuConst(symb : string, ascii : string, latex : string, pos : int);
	RuType(name : string, supers : [string], pos : int);
	RuRule(name : string, vars : Tree<string, RuVar>, term : RuTerm, pos : int);
	RuAxiom(name : string, vars : Tree<string, RuVar>, disjs : Set<RuDisj>, hyps : [RuHyp], prop : RuExp, pos : int);
	RuVar(name : string, type : string);
	RuHyp(ind : int, expr : RuExp, pos : int);
	RuDisj(v1 : RuVar, v2 : RuVar);
	RuTheorem(name : string, vars : Tree<string, RuVar>, disjs : Set<RuDisj>, hyps : [RuHyp], prop : RuExp, proof : RuProof, pos : int);
	RuDef(name : string, vars : Tree<string, RuVar>, disjs : Set<RuDisj>, hyps : [RuHyp], defm : RuExp, defs : RuExp, prop : RuExp, pos : int);
	RuProof(vars : Tree<string, RuVar>, disjs : Set<RuDisj>, steps : [RuStep], pos : int);
	RuStep(ind : int, assertion : string, refs : [RuRef], expr : RuExp, pos : int);
	RuRef ::= RuHypRef, RuStepRef;
	RuHypRef(ind : int, pos : int);
	RuStepRef(ind : int, pos : int);

	RuTerm(type : string, expr : [RuTermNode], pos : int);
	RuExp(nodes : [RuExpNode], pos : int);
	RuExpNode ::= RuRuleRef, RuVar;
	RuTermNode ::= RuConstRef, RuVar;
	RuRuleRef(name : string, type : string, arity : int, len : int);
	RuConstRef(name : string);

	RuAssertion ::= RuAxiom, RuTheorem, RuDef;
	RuAny ::= 
		RuSource, RuImport, RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem, RuTheory, RuComment,
		RuStep, RuExp, RuHyp, RuProof, RuDisj, RuHypRef, RuStepRef, RuTerm, RuVar, RuConstRef;

	ruNoVar = RuVar("__no", "__no");
	ruNoConst = RuConst("__no", "", "", -1);
	ruNoType = RuType("__no", [], -1);
	ruNoRule = RuRule("__no", makeTree(), ruNoTerm, -1);
	ruNoAxiom = RuAxiom("__no", makeTree(), makeSet(), [], ruNoExp, -1);
	ruNoTheorem = RuTheorem("__no", makeTree(), makeSet(), [], ruNoExp, ruNoProof, -1);
	ruNoProof = RuProof(makeTree(), makeSet(), [], -1);
	ruNoStep = RuStep(-1, "__no", [], ruNoExp, -1);
	
	ruNoTerm = RuTerm("__no", [], -1);
	ruNoExpNode = ruNoVar;
	ruNoExp = RuExp([], -1);
		
	ruAny2s(a : RuAny, rules : Tree<string, RuRule>) -> string;
	ruExp2s(e : RuExp, rules : Tree<string, RuRule>) -> string;
	ruExp2Term(e : RuExp, rules : Tree<string, RuRule>) -> RuTerm;

	ruExpType(nodes : [RuExpNode], rules : Tree<string, RuRule>) -> string;
	ruTerm2s(nodes : [RuTermNode]) -> string {
		strGlue(map(nodes, \n -> n.name), " ")
	}
	ruExpRPN2s(nodes : [RuExpNode]) -> string {
		strGlue(map(nodes, \n -> {
			switch (n) {
				RuRuleRef(r, t, a, l): r + "-" + i2s(l);
				RuVar(v, t): v;
			}
		}), " ")
	}
	
	ruExp2Vars(nodes : [RuExpNode]) -> Set<RuVar> {
		fold(nodes, makeSet(), \acc, n ->
			switch (n) {
				RuRuleRef(__,__,__,__): acc;
				RuVar(__,__): insertSet(acc, n);
			}
		)
	}
	ruAssertion2Vars(ass : RuAssertion) -> Set<RuVar> {
		fold(ass.hyps, ruExp2Vars(ass.prop.nodes), \acc, h ->
			mergeSets(acc, ruExp2Vars(h.expr.nodes))
		)
	}
	ruDisjs2Array(disjs : Set<RuDisj>) -> [Set<RuVar>];
}

ruExpType(nodes : [RuExpNode], rules : Tree<string, RuRule>) -> string {
	lastElement(nodes, ruNoExpNode).type
}

ruExp2s(e : RuExp, rules : Tree<string, RuRule>) -> string {
	ruTerm2s(ruExp2Term(e, rules).expr)
}

ruExp2Term(e : RuExp, rules : Tree<string, RuRule>) -> RuTerm {
	switch (fold(e.nodes, None(), \acc, n -> ruExp2sAccOperation(n, acc, rules))) {
		Some(stack): RuTerm(ruExpType(e.nodes, rules), stack.nodes, e.pos);
		None(): ruNoTerm;
	}
}

RuExp2sStack(
	parent : Maybe<RuExp2sStack>,
	nodes : [RuTermNode]
);

ruExp2sAccOperation(node : RuExpNode, stack : Maybe<RuExp2sStack>, rules : Tree<string, RuRule>) -> Maybe<RuExp2sStack> {
	switch (node) {
		RuVar(var, __): 
			Some(RuExp2sStack(stack, [node]));
		RuRuleRef(name, type, arity, len): {
			rule = lookupTreeDef(rules, name, ruNoRule);
			stack_str = fold(reverseA(rule.term.expr), Pair(stack, []), 
				\ac, symb -> {
					switch (symb) {
						RuVar(__,__): {
							switch (ac.first) {
								Some(st): Pair(st.parent, concat(ac.second, reverseA(st.nodes)));
								None(): ac;
							}
						}
						RuConstRef(s):
							Pair(ac.first, concat(ac.second, [symb]));
					}
				}
			);
			Some(RuExp2sStack(stack_str.first, reverseA(stack_str.second)));
		}
	}
}

ruAny2s(a : RuAny, rules : Tree<string, RuRule>) -> string {
	ru2s    = \x -> ruAny2s(x, rules);
	vars2s  = \vars -> if (sizeTree(vars) == 0) "" else "(" + strGlue(map(getTreeValues(vars), ru2s), ", ") + ") ";
	disjs2s = \disjs -> if (sizeSet(disjs) == 0) "" else 
		"disjointed(" + strGlue(map(ruDisjs2Array(disjs), \s -> strGlue(map(set2array(s), \v -> v.name), " ")), ", ") + ") ";
	exp2s   = \expr, delim -> ": " + ruExpType(expr.nodes, rules) + " = " + delim + " " + ruExp2s(expr, rules) + " ;;";
	prop2s  = \prop -> "\tprop " + exp2s(prop, "|-") + "\n";
	refs2s  = \refs -> "(" + strGlue(map(refs, ru2s), ", ") + ")";
	hyps2s  = \hyps -> if (hyps == []) "" else strGlue(map(hyps, ru2s), "\n") + "\n";
	switch (a) {
		RuSource(imps, decls, info): 
			(if (imps == []) "" else strGlue(map(imps, ru2s), "\n") + "\n\n") +
			strGlue(map(decls, ru2s), "\n");
		RuImport(path, __):
			"import " + path + ";;";
		RuConst(symbol, ascii, latex, __): 
			"constant {\n" + 
				"\tsymbol " + symbol + ";;\n" +
				(if (ascii != "") "\tascii " + ascii + ";;\n" else "") + 
				(if (latex != "") "\tlatex " + latex + ";;\n" else "") +
			"}\n";
		RuType(name, supers, __): 
			"type " + name + (if (supers == []) "" else " : " + strGlue(supers, ", ")) + " ;;\n";
		RuRule(name, vars, term, __):
			"rule " + name + " " + vars2s(vars) + "{\n" +
				"\tterm " + ru2s(term) + "\n" +
			"}\n";
		RuAxiom(name, vars, disjs, hyps, prop, __): 
			"axiom " + name + " " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				hyps2s(hyps) +
				(if (hyps == []) "" else "\t----------\n") +
				prop2s(prop) +
			"}\n";
		RuDef(name, vars, disjs, hyps, defm, defs, prop, __): 
			"definition " + name + " " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				hyps2s(hyps) +
				"\tdefiendum " + exp2s(defm, "#") + "\n" +
				"\tdefiniens " + exp2s(defs, "#") + "\n" +
				"\t-------------\n" +
				prop2s(ruMakeDefProp(prop.nodes, defm.nodes, defs.nodes, rules)) +
			"}\n";
		RuTheorem(name, vars, disjs, hyps, prop, proof, __): 
			"theorem " + name + " " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				hyps2s(hyps) + 
				(if (hyps == []) "" else "\t----------\n") +
				prop2s(prop) +
			"} " + ru2s(proof);
		RuHyp(ind, expr, __): 
			"\thyp " + i2s(ind + 1) + " " + exp2s(expr, "|-");
		RuProof(vars, disjs, steps, __): 
			"proof " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				strGlue(map(steps, ru2s), "\n") + "\n" +
			"}\n";
		RuStep(ind, assertion, refs, expr, __):
			"\tstep " + i2s(ind + 1) + " : " + ruExpType(expr.nodes, rules) + " = " + 
				assertion + " " + refs2s(refs) + " |- " + ruExp2s(expr, rules) + " ;;";
		RuTheory(name, ds, __): 
			"theory " + name + " {\n" +
				strGlue(map(ds, ru2s), "\n") + "\n" +
			"}\n";
		RuComment(text, __): text;
		RuDisj(v1, v2): v1.name + " " + v2.name;
		RuExp(nodes, __): ruExp2s(a, rules);
		RuHypRef(i, __): "hyp " + i2s(i + 1);
		RuStepRef(i, __): "step " + i2s(i + 1);
		RuVar(name, type): name + " : " + type;
		RuTerm(type, expr, __): 
			": " + type + " = # " + strGlue(map(expr, ru2s), " ") + " ;;";
		RuConstRef(name): name;
	}
}

ruDisjs2Array(disjs : Set<RuDisj>) -> [Set<RuVar>] {
	make_disj = \v, w -> if (v.name < w.name) RuDisj(v, w) else RuDisj(w, v);
	may_be_added = \v, s ->
		forall(set2array(s), \w -> 
			if (v == w) true else {
				containsSet(disjs, make_disj(v, w))
			}
		);
	foldSet(disjs, [], \acc, disj ->
		if (exists(acc, \s -> containsSet(s, disj.v1) && containsSet(s, disj.v2))) acc else {
			switch (findi(acc, \s -> containsSet(s, disj.v1) && may_be_added(disj.v2, s))) {
				Some(i): replace(acc, i, insertSet(acc[i], disj.v2));
				None(): 
					switch (findi(acc, \s -> containsSet(s, disj.v2) && may_be_added(disj.v1, s))) {
						Some(i): replace(acc, i, insertSet(acc[i], disj.v1));
						None(): concat(acc, [insertSet(makeSet1(disj.v1), disj.v2)]);
					}
			}
		}
	);
}

ruIndOfArr(arr1 : [?], arr2 : [?]) -> int {
	foldi(arr1, -1, \i, ac, x -> 
		if (ac >= 0) ac else {
			if (i <= length(arr1) - length(arr2)) {
				ind = fold(arr2, i, \j, y ->
					if (j == -1) -1 else
					if (y == arr1[j]) j + 1 else -1
				);
				if (ind != -1) i else -1;
			} else {
				-1
			}
		}
	)
}

ruMakeDefProp(prop : [RuExpNode], dfs: [RuExpNode], dfm : [RuExpNode], rules : Tree<string, RuRule>) -> RuExp {
	dfs_i = ruIndOfArr(prop, dfs);
	dfm_i = ruIndOfArr(prop, dfm);
	dfs_len = length(dfs);
	dfm_len = length(dfm);
	if (dfs_i == -1 || dfm_i == -1) {
		ruNoExp
	} else {
		RuExp(foldi(prop, [], \i, ac, s ->
			if (i == dfs_i) concat(ac, [RuVar("definiens", "__no")]) else
			if (dfs_i < i && i < dfs_i + dfs_len) ac else
			if (i == dfm_i) concat(ac, [RuVar("defiendum", "__no")]) else
			if (dfm_i < i && i < dfm_i + dfm_len) ac else
			concat(ac, [s])
		), -1)
	}
}

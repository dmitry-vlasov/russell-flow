import lingo/compiler/syntaxtree_types;
import ru_ast_mnemonics;

export {
	get_source_import_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_decl_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_const(st : SyntaxTree) -> SyntaxTree;
	get_source_const0(st : SyntaxTree) -> SyntaxTree;
	get_source_const1(st : SyntaxTree) -> SyntaxTree;
	get_source_const2(st : SyntaxTree) -> SyntaxTree;
	get_source_type(st : SyntaxTree) -> SyntaxTree;
	get_source_rule(st : SyntaxTree) -> SyntaxTree;
	get_source_axiom(st : SyntaxTree) -> SyntaxTree;
	get_source_axiom1(st : SyntaxTree) -> SyntaxTree;
	get_source_axiom2(st : SyntaxTree) -> SyntaxTree;
	get_source_def(st : SyntaxTree) -> SyntaxTree;
	get_source_theorem(st : SyntaxTree) -> SyntaxTree;
	get_source_theorem1(st : SyntaxTree) -> SyntaxTree;
	get_source_theorem2(st : SyntaxTree) -> SyntaxTree;
	get_source_proof(st : SyntaxTree) -> SyntaxTree;
	get_source_step_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_refs(st : SyntaxTree) -> SyntaxTree;
	get_source_refs0(st : SyntaxTree) -> SyntaxTree;
	get_source_refs1(st : SyntaxTree) -> SyntaxTree;
	get_source_refs2(st : SyntaxTree) -> SyntaxTree;
	get_source_ref(st : SyntaxTree) -> SyntaxTree;
	get_source_term(st : SyntaxTree) -> SyntaxTree;
	get_source_disjs_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_disjs0(st : SyntaxTree) -> SyntaxTree;
	get_source_disjs1(st : SyntaxTree) -> SyntaxTree;
	get_source_disjs2(st : SyntaxTree) -> SyntaxTree;
	get_source_disj(st : SyntaxTree) -> SyntaxTree;
	get_source_vars(st : SyntaxTree) -> SyntaxTree;
	get_source_vars0(st : SyntaxTree) -> SyntaxTree;
	get_source_vars1(st : SyntaxTree) -> SyntaxTree;
	get_source_vars2(st : SyntaxTree) -> SyntaxTree;
	get_source_var_decl(st : SyntaxTree) -> SyntaxTree;
	get_source_expr(st : SyntaxTree) -> SyntaxTree;
	get_source_symb(st : SyntaxTree) -> SyntaxTree;
	get_source_symb_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_ind(st : SyntaxTree) -> SyntaxTree;
	get_source_id(st : SyntaxTree) -> SyntaxTree;
	get_source_id_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_char_(st : SyntaxTree) -> SyntaxTree;
	get_source_ws(st : SyntaxTree) -> SyntaxTree;
	get_source_whitespace__s(st : SyntaxTree) -> [SyntaxTree];
	get_source_comment(st : SyntaxTree) -> SyntaxTree;
	get_source_restOfComment(st : SyntaxTree) -> SyntaxTree;
	get_source_restOfComment2_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_restOfComment1_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_nonstarchar__s(st : SyntaxTree) -> [SyntaxTree];
	get_source_nonlinebreakchar__s(st : SyntaxTree) -> [SyntaxTree];
	get_source_expr__choice49(st : SyntaxTree) -> SyntaxTree;
	get_source_id__choice50(st : SyntaxTree) -> SyntaxTree;
	get_source_id__choice50_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_type__auto51(st : SyntaxTree) -> SyntaxTree;
	get_source_axiom2__auto52(st : SyntaxTree) -> SyntaxTree;
	get_source_axiom2__auto52_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_def__auto53(st : SyntaxTree) -> SyntaxTree;
	get_source_def__auto53_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_theorem2__auto54(st : SyntaxTree) -> SyntaxTree;
	get_source_theorem2__auto54_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_refs2__auto55(st : SyntaxTree) -> SyntaxTree;
	get_source_refs2__auto55_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_disjs2__auto56(st : SyntaxTree) -> SyntaxTree;
	get_source_disjs2__auto56_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_vars2__auto57(st : SyntaxTree) -> SyntaxTree;
	get_source_vars2__auto57_s(st : SyntaxTree) -> [SyntaxTree];
	get_source_symb__auto58(st : SyntaxTree) -> SyntaxTree;
	get_source_symb__auto58_s(st : SyntaxTree) -> [SyntaxTree];

}

get_source_const(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_const0(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_const) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_const1(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_const) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_const2(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_const) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_type(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_rule(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_axiom(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_axiom1(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_axiom) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_axiom2(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_axiom) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_def(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_theorem(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_decl) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_theorem1(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_theorem) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_theorem2(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_theorem) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_proof(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[9][0];
	} else failSyntaxTree
}
get_source_refs(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_step) {
		st.children[4][0];
	} else failSyntaxTree
}
get_source_refs0(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_refs) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_refs1(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_refs) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_refs2(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_refs) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_ref(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_refs1) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_refs2) {
		st.children[2][0];
	} else if (get_source_refs2__auto55(st).choice == 0) {
		get_source_refs2__auto55(st).children[1][0];
	} else failSyntaxTree
}
get_source_term(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_rule) {
		st.children[4][0];
	} else failSyntaxTree
}
get_source_disjs0(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_disjs) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_disjs1(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_disjs) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_disjs2(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_disjs) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_disj(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_proof) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_disjs1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_disjs2) {
		st.children[1][0];
	} else if (get_source_disjs2__auto56(st).choice == 0) {
		get_source_disjs2__auto56(st).children[1][0];
	} else failSyntaxTree
}
get_source_vars(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_rule) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_proof) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_vars0(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_vars) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_vars1(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_vars) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_vars2(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_vars) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_var_decl(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_vars1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_vars2) {
		st.children[1][0];
	} else if (get_source_vars2__auto57(st).choice == 0) {
		get_source_vars2__auto57(st).children[1][0];
	} else failSyntaxTree
}
get_source_expr(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[11][0];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_term) {
		st.children[1][0];
	} else if (get_source_axiom2__auto52(st).choice == 0) {
		get_source_axiom2__auto52(st).children[2][0];
	} else if (get_source_def__auto53(st).choice == 0) {
		get_source_def__auto53(st).children[2][0];
	} else if (get_source_theorem2__auto54(st).choice == 0) {
		get_source_theorem2__auto54(st).children[2][0];
	} else failSyntaxTree
}
get_source_symb(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_import) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_const0) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[8][0];
	} else failSyntaxTree
}
get_source_ind(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_step) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ref) {
		st.children[1][0];
	} else if (st.choice == 1 && st.rule == st_ref) {
		st.children[1][0];
	} else if (get_source_axiom2__auto52(st).choice == 0) {
		get_source_axiom2__auto52(st).children[1][0];
	} else if (get_source_def__auto53(st).choice == 0) {
		get_source_def__auto53(st).children[1][0];
	} else if (get_source_theorem2__auto54(st).choice == 0) {
		get_source_theorem2__auto54(st).children[1][0];
	} else failSyntaxTree
}
get_source_id(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_type) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_refs0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_refs1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_refs2) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_var_decl) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_var_decl) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[1][0];
	} else failSyntaxTree
}
get_source_char_(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_nonstarchar_) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_nonlinebreakchar_) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_ws(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_source) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_import) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_const0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_const0) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_const0) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_const0) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_const0) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[10][0];
	} else if (st.choice == 0 && st.rule == st_type) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_type) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[10][0];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[12][0];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_proof) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_proof) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_refs0) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_refs1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_refs1) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_refs2) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ref) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_ref) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_term) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_disjs0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_disjs1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_disjs1) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_disjs2) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_disjs2) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_vars0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_vars1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_vars1) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_vars2) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_vars2) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_var_decl) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[2][0];
	} else if (get_source_type__auto51(st).choice == 0) {
		get_source_type__auto51(st).children[0][0];
	} else if (get_source_axiom2__auto52(st).choice == 0) {
		get_source_axiom2__auto52(st).children[0][0];
	} else if (get_source_def__auto53(st).choice == 0) {
		get_source_def__auto53(st).children[0][0];
	} else if (get_source_theorem2__auto54(st).choice == 0) {
		get_source_theorem2__auto54(st).children[0][0];
	} else if (get_source_refs2__auto55(st).choice == 0) {
		get_source_refs2__auto55(st).children[0][0];
	} else if (get_source_disjs2__auto56(st).choice == 0) {
		get_source_disjs2__auto56(st).children[0][0];
	} else if (get_source_vars2__auto57(st).choice == 0) {
		get_source_vars2__auto57(st).children[0][0];
	} else failSyntaxTree
}
get_source_comment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_whitespace_) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_restOfComment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_source_expr__choice49(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_expr) {
		st.children[3][0];
	} else failSyntaxTree
}
get_source_id__choice50(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_type__auto51(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_type) {
		st.children[2][0];
	} else failSyntaxTree
}
get_source_axiom2__auto52(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_def__auto53(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_theorem2__auto54(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_refs2__auto55(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_disjs2__auto56(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_vars2__auto57(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_source_symb__auto58(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}

get_source_import_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_source) {
		st.children[1];
	} else []
}
get_source_decl_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_source) {
		st.children[2];
	} else []
}
get_source_step_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_proof) {
		st.children[3];
	} else []
}
get_source_disjs_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[3];
	} else []
}
get_source_symb_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_import) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_const0) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_const1) {
		st.children[6];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[6];
	} else if (st.choice == 0 && st.rule == st_const2) {
		st.children[8];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[5];
	} else if (st.choice == 0 && st.rule == st_disj) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[4];
	} else []
}
get_source_id_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_type) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_rule) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_axiom1) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_def) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_theorem1) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_step) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_refs0) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_refs1) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_refs2) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_var_decl) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_var_decl) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_expr) {
		st.children[1];
	} else if (get_source_type__auto51(st).choice == 0) {
		get_source_type__auto51(st).children[1];
	} else []
}
get_source_whitespace__s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ws) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_s) {
		st.children[0];
	} else []
}
get_source_restOfComment2_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_restOfComment) {
		st.children[1];
	} else if (st.choice == 1 && st.rule == st_restOfComment) {
		st.children[0];
	} else []
}
get_source_restOfComment1_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_restOfComment2) {
		st.children[0];
	} else []
}
get_source_nonstarchar__s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_restOfComment) {
		st.children[0];
	} else []
}
get_source_nonlinebreakchar__s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 2 && st.rule == st_restOfComment) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_lastLineComment) {
		st.children[0];
	} else []
}
get_source_id__choice50_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_id) {
		st.children[0];
	} else []
}
get_source_axiom2__auto52_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_axiom2) {
		st.children[5];
	} else []
}
get_source_def__auto53_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_def) {
		st.children[5];
	} else []
}
get_source_theorem2__auto54_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_theorem2) {
		st.children[5];
	} else []
}
get_source_refs2__auto55_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_refs2) {
		st.children[3];
	} else []
}
get_source_disjs2__auto56_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_disjs2) {
		st.children[2];
	} else []
}
get_source_vars2__auto57_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_vars2) {
		st.children[2];
	} else []
}
get_source_symb__auto58_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_symb) {
		st.children[0];
	} else []
}


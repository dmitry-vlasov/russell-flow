import parse/ru_type_env;
import ru_conf;
import ru_src;

export {
	RuMath(
		sources : Tree<string, RuSource>,
		consts  : Tree<string, RuConst>,
		types   : Tree<string, RuTypeEnv>,
		rules   : Tree<string, RuRule>,
		assertions : Tree<string, RuAssertion>,
		conf : RuConf
	);

	ruMathAxioms(math : RuMath) ->Tree<string, RuAxiom> {
		foldTree(math.assertions, makeTree(),
			\name, ass, acc -> 
				switch (ass) { 
					RuAxiom(__,__,__,__,__): setTree(acc, name, ass); 
					default: acc; 
				} 
		)
	}

	ruMathTheorems(math : RuMath) ->Tree<string, RuTheorem> {
		foldTree(math.assertions, makeTree(),
			\name, ass, acc -> 
				switch (ass) { 
					RuTheorem(__,__,__,__,__,__): setTree(acc, name, ass); 
					default: acc; 
				} 
		)
	}
	
	ruMathDefs(math : RuMath) ->Tree<string, RuDef> {
		foldTree(math.assertions, makeTree(),
			\name, ass, acc -> 
				switch (ass) { 
					RuDef(__,__,__,__,__,__,__): setTree(acc, name, ass); 
					default: acc; 
				} 
		)
	}

	ruMathStats(math : RuMath) -> string {
		strGlue([
			"sources:    " + i2s(sizeTree(math.sources)),
			"consts:     " + i2s(sizeTree(math.consts)),
			"types:      " + i2s(sizeTree(math.types)),
			"rules:      " + i2s(sizeTree(math.rules)),
			"assertions: " + i2s(sizeTree(math.assertions)),
			"\taxioms: " + i2s(sizeTree(ruMathAxioms(math))),
			"\ttheorems: " + i2s(sizeTree(ruMathTheorems(math))),
			"\tdefs: " + i2s(sizeTree(ruMathDefs(math)))
		], "\n")
	}
}

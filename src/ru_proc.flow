import ru_util;

export {
	RuProc(
		command : string, 
		args : [string], 
		cwd : string, 
		onStart : () -> void,
		onOut : (string) -> void,
		onErr : (string) -> void,
		onExit : (errorcode : int) -> void
	);
	ruParseProc(command_w_args : string) -> RuProc;
	ruMakeProc(command : string, args : [string]) -> RuProc;
	ruMakeProcInDir(command : string, args : [string], cwd : string) -> RuProc;

	ruExecCallback(proc : RuProc) -> (() -> void) -> void;
	ruFuncCallback(func : () -> void) -> (() -> void) -> void;
	ruCallbackChain(cbs : [(() -> void) -> void]) -> (() -> void) -> void;

	ruScriptCallback(lines : [string]) -> (() -> void) -> void;
	ruScriptWithDirsCallback(lines : [Pair<string, string>]) -> (() -> void) -> void;

	ruExecCallback1(proc : RuProc) -> ((bool) -> void) -> void;
	ruFuncCallback1(func : () -> bool) -> ((bool) -> void) -> void;
	ruCallbackChain1(cbs : [((bool) -> void) -> void]) -> ((bool) -> void) -> void;

	ruExecFunc(proc : RuProc) -> () -> bool;
	ruFuncChain(fs : [() -> bool]) -> () -> bool;
	ruScript(lines : [string]) -> () -> bool;
	ruScriptWithDirs(lines : [Pair<string, string>]) -> () -> bool;
}

ruParseProc(command_w_args : string) -> RuProc {
	elems = filter(strSplit(command_w_args, " "), \w -> ruTrimAll(w) != "");
	if (elems == []) ruMakeProc("", []) else {
		command = elems[0];
		args = fold(tail(elems), Triple([], "", false), \acc, elem ->
			if (acc.third) {
				arg = acc.second + " " + trim2(elem, "'");
				if (endsWith(elem, "'")) {
					Triple(concat(acc.first, [arg]), "", false);
				} else {
					Triple(acc.first, arg, true);
				}
			} else {
				arg = trim2(elem, "'");
				if (startsWith(elem, "'")) {
					if (endsWith(elem, "'")) {
						Triple(concat(acc.first, [arg]), "", false);
					} else {
						Triple(acc.first, arg, true);
					}
				} else {
					Triple(concat(acc.first, [arg]), "", false);
				}
			}
		).first;
		ruMakeProc(command, args);
	}
}

ruMakeProc(command : string, args : [string]) -> RuProc {
	ruMakeProcInDir(command, args, ".");
}

ruMakeProcInDir(command : string, args : [string], cwd : string) -> RuProc {
	RuProc(command, args, cwd, nop, println, println,
		\code -> if (code != 0) println("Error: code = " + i2s(code))
	);
}

ruFuncCallback(fn : () -> void) -> (() -> void) -> void {
	\cb -> { fn(); cb(); }
}

ruExecCallback(proc : RuProc) -> (() -> void) -> void {
	\cb : () -> void -> {
		proc.onStart();
		runSystemProcess(proc.command, proc.args, resolveRelativePath(proc.cwd), proc.onOut, proc.onErr,
			\code -> {
				proc.onExit(code);
				cb();
			}
		);
		{}
	}
}

ruCallbackChain(cbs : [(() -> void) -> void]) -> (() -> void) -> void {
	\cb_final : () -> void -> 
		fold(reverseA(cbs), cb_final, \acc, cb -> 
			\-> cb(acc)
		)
	();
}

ruScriptCallback(lines : [string]) -> (() -> void) -> void {
	ruCallbackChain(
		filtermap(lines, \line -> 
			if (ruTrimAll(line) == "") None() else 
			Some(ruExecCallback(ruParseProc(line)))
		)
	);
}

ruScriptWithDirsCallback(lines : [Pair<string, string>]) -> (() -> void) -> void {
	ruCallbackChain(
		filtermap(lines, \line -> 
			if (ruTrimAll(line.second) == "") None() else {
				proc = RuProc(ruParseProc(line.second) with cwd = line.first);
				Some(ruExecCallback(proc));
			}
		)
	);
}

ruFuncCallback1(fn : () -> bool) -> ((bool) -> void) -> void {
	\cb -> cb(fn())
}

ruExecCallback1(proc : RuProc) -> ((bool) -> void) -> void {
	\cb : (bool) -> void -> {
		proc.onStart();
		err = ref false;
		runSystemProcess(proc.command, proc.args, proc.cwd, proc.onOut, 
			\e -> { proc.onErr(e); err := true; },
			\code -> {
				proc.onExit(code);
				cb(code == 0 && !^err);
			}
		);
		{}
	}
}

ruCallbackChain1(cbs : [((bool) -> void) -> void]) -> ((bool) -> void) -> void {
	\cb_final : (bool) -> void ->
		fold(reverseA(cbs), cb_final, \acc, cb -> 
			\x : bool -> if (x) cb(acc) else { }
		)(true);
}

ruExecFunc(proc : RuProc) -> () -> bool {
	\-> {
		proc.onStart();
		execSystemProcess(proc.command, proc.args, proc.cwd, proc.onOut, proc.onErr) == 0;
	}
}

ruFuncChain(fs : [() -> bool]) -> () -> bool {
	fold(reverseA(fs), \ -> true, \acc, f ->
		\-> if (f()) acc() else false
	);
}

ruScript(lines : [string]) -> () -> bool {
	ruFuncChain(
		filtermap(lines, \line -> 
			if (ruTrimAll(line) == "") None() else 
			Some(ruExecFunc(ruParseProc(line)))
		)
	);
}

ruScriptWithDirs(lines : [Pair<string, string>]) -> () -> bool {
	ruFuncChain(
		filtermap(lines, \line -> 
			if (ruTrimAll(line.second) == "") None() else {
				proc = RuProc(ruParseProc(line.second) with cwd = line.first);
				Some(ruExecFunc(proc));
			}
		)
	);
}

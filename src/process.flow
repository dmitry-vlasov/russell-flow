import net/http;
import sys/process;
import text/serialize;
import text/blueprint;
import base/comms;
import ru/comms;
import mm/comms;
import script/exec;
import runner/messages;
import help;
import clear;

export {
	ruInitConf(conf : RuConf) -> void;
	ruProcess(uuid : string, script : ScComm, onRunComplete : (int) -> void, env : RuEnv) -> void;
	ruProcessLocal(script : ScComm, onRunComplete : (int) -> void, out : RuOut) -> void;
	ruCommandsTree() -> Tree<string, RuComm>;
}

ru_state = ref ruEmptyState;

ruInitConf(conf : RuConf) -> void {
	ru_state := RuState(^ru_state with conf = conf);
}

ruProcess(uuid : string, script : ScComm, onRunComplete : (int) -> void, env : RuEnv) -> void {
	if (getUrlParameterBoolDef("no-server", false)) {
		ruProcessLocal(script, onRunComplete, env.out);
	} else {
		ruProcessRemote(uuid, Some(script), onRunComplete, env, \-> ruProcessLocal(script, onRunComplete, env.out));
	}
}

ruProcessRemote(uuid : string, script : Maybe<ScComm>, onRunComplete : (int) -> void, env : RuEnv, onServerError : () -> void) -> void {
	serverUrl = 
		"http://" + getUrlParameterDef("server-url", "localhost") + 
		":" + getUrlParameterDef("server-port", "20001");
	cwd = strReplace(resolveRelativePath("."), "\\", "/");
	patch_remote = \s -> ScCommSeq([
		ScTask("conf-load", [ScTaskArg("dir", cwd)]), 
		ScTask("conf-set", [ScTaskArg("working-dir", cwd)]), 
		s
	]);
	request = RuRequest(uuid,
		eitherMap(script, \s -> 
			json2string(ruScComm2Json(patch_remote(s))), ""
		)
	);
	ruClientLog(blueprint("<%uuid%> Client request: '%body%'",
		[
			"uuid", uuid,
			"body", ruCutLongString(ruServerEscapeString(request.body))
		]), env.conf
	);
	httpCustomRequest(
		serverUrl,
		GET(), [], RequestPayload(serialize(request)),
		\status, resp, headers -> {
			if (status == 200) {
				value = deserialize(resp, IllegalStruct());
				if (value == IllegalStruct()) {
					ruClientLog("WARNING: Illegal serialized data in response. (ruProcessRemote): \n" + resp, env.conf);
					onRunComplete(1);
				} else {
					switch (value) {
						RuResponse(uuid_, body, mcode): {
							if (uuid == uuid_) {
								ruClientLog(blueprint("<%uuid%> %code% Server response: '%body%'",
									[
										"uuid", uuid,
										"code", eitherMap(mcode, \code -> "exit: " + i2s(code), ""),
										"body", ruCutLongString(ruServerEscapeString(body))
									]), env.conf
								);
								switch (mcode) {
									Some(code): {
										// Final response
										if (body != "") {
											env.out.onData(body);
										}
										onRunComplete(code);
									}
									None(): {
										// Intermediate response
										if (body != "") {
											env.out.onMessage(body);
										}
										ruProcessRemote(uuid, None(), onRunComplete, env, onServerError);
									}
								}
							} else {
								ruClientLog(blueprint("<%uuid%> != <%uuid_%> %code% Server [%time%]: '%body%'",
									[
										"uuid", uuid, 
										"uuid_", uuid_,
										"code", eitherMap(mcode, \code -> "exit: " + i2s(code), ""),
										"body", ruCutLongString(ruServerEscapeString(body))
									]), env.conf
								);
							}
						}
						default: {
							ruClientLog("WARNING: Illegal serialized data in response. (ruProcessRemote 2): \n" + resp, env.conf);
							onRunComplete(1);
						}
					}
					//onData(value);
				}
				//onMessage(msg);
				//onRunComplete(0);
			} else {
				onServerError();
			}
		},
		false
	)
}

ruProcessLocal(script : ScComm, onRunComplete : (int) -> void, out : RuOut) -> void {
	ru_state := ruProcessScript(script, ^ru_state, out);
	onRunComplete(0);
}

ruProcessScript(s : ScComm, state : RuState, out : RuOut) -> RuState {
	ruExecScript(s, ruCommandsTree(), state, out);
}

ru_commands_tree : ref Maybe<Tree<string, RuComm>> = ref None();

ruCommandsTree() -> Tree<string, RuComm> {
	init_commands_tree = \-> {
		commands_list = [
			[
				ruCommServerShutdown,
				ruCommRunScript,
				ruCommVerifyMetamath,
				ruApplyToProjectRoots(ruCommReadAny),
				ruCommSplitMathAny,
				ruCommOptimizeImportsAny,
				ruCommMergeMath(ruProcessScript),
				ruCommServerStatus,
				ruCommServerKill
			],
			ruHelpCommands(ruCommandsTree),
			ruBaseCommands,
			ruClearCommands,
			ruCommands(ruProcessScript),
			mmCommands
		];
		fold(concatA(commands_list), makeTree(), \acc, comm -> setTree(acc, comm.info.name, comm));
    }
    onlyOnce(ru_commands_tree, init_commands_tree);
}

ruCommReadAny = RuComm(
	RuCommInfo(
		"read", "io", "read a Russell/Metamath file depending on extension", "file", true, false, 
		[RuCommArg("file", true, "input file", "")], []
	),
	ruChooseRunerByExt(ruRunRead, mmRunRead)
);

ruCommSplitMathAny = RuComm(
	RuCommInfo(
		"split-source", "misc", "split a single Russell/Metamath file into a filesystem depending on extension", "file", true, false, 
		[RuCommArg("file", true, "input file", "")], []
	),
	ruChooseRunerByExt(ruRunSplitMath, mmRunSplitSource)
);

ruCommOptimizeImportsAny = RuComm(
	RuCommInfo(
		"optimize-imports", "misc", "optimize imports in Russell/Metamath file depending on extension", "file", true, false, 
		[RuCommArg("file", true, "input file", "")], []
	),
	ruChooseRunerByExt(ruRunOptimizeImports, mmRunOptimizeImports)
);

ruChooseRunerByExt( 
	run_ru : (RuUnit) -> Maybe<RuState>,
	run_mm : (RuUnit) -> Maybe<RuState>
) -> (RuUnit) -> Maybe<RuState> {
	\unit -> {
		file = ruGetTaskArg(unit.task.args, "file", "");
		if (endsWith(file, ".ru")) {
			run_ru(unit);
		} else if (endsWith(file, ".mm")) {
			run_mm(unit);
		} else {
			unit.out.onError("Unknown file '" + file + "' extension: '" + getFileExt(file) + "', must be '*.ru' or '*.mm'", []);
			None();
		}
	}
}

ruCommServerShutdown = RuComm(
	RuCommInfo(
		"server-shutdown", "server", "send the command to exit to a server", "", false, false, 
		[RuCommArg("server-port", true, "port using by a server", "20001")], []
	),
	\unit -> { Some(unit.state); }
);

ruCommRunScript = RuComm(
	RuCommInfo(
		"run-script", "misc", "load and run a script", "script", false, false, 
		[RuCommArg("script", false, "the file with russell command script", "")], []
	),
	ruRunScript
);

ruRunScript(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	name = ruGetTaskArg(task.args, "script", "");
	maybeMap(
		ruLoadScript(name, env),
		\src -> {
			timer = ruMakeTimer();
			new_state = ruProcessScript(
				src.command,
				RuState(state with 
					vars = mergeTree(state.vars, mapTree(ruTaskArgs2Tree(task.args), \s -> 
						ruApplyScriptVars(s, state.vars, state.conf)
					))
				),
				env.out
			);
			RuState(new_state with 
				vars = setTree(state.vars, 
					name + ".time", ruTimePassed(timer)
				)
			);
		}
	);
}

ruCommVerifyMetamath = RuComm(
	RuCommInfo(
		"verify-mm", "misc", "verify a file with Metamath", "file", true, false, 
		[RuCommArg("file", false, "the Metamath file", "")], []
	),
	ruRunVerifyMetamath
);

ruRunVerifyMetamath(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = env.conf;
	file = changeFileExt(ruGetTaskArg(task.args, "file", ""), ".mm");
	resolved = ruResolveRelativeFile(file, conf.workingDir);
	dir = ruDirName(resolved);
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("Going to verify file: '" + file + "' with Metamath, dir: '" + dir + "', resolved: '" + resolved);
	}
	timer = ruMakeTimer();
	if (!fileExists(resolved)) {
		env.out.onError("mm file '" + file + "' doesn't exist", []);
	} else {
		lines = ref [];
		code = execSystemProcess(
			"metamath", 
			["read " + fileNameOnly(file), "verify proof *", "exit"],
			if (dir == "") "." else dir,
			\out -> refArrayPush(lines, out),
			\err -> refArrayPush(lines, err),
		);
		env.out.onMessage(strGlue(^lines, "\n"));
		if (code != 0) {
			env.out.onError("Verification of '" + file + "' with Metamath eneded up with return code: " + i2s(code), []);
		} else {
			if (ruVerbose(env.conf) > 0) {
				env.out.onMessage("mm file '" + fileNameOnly(file) + "' is verified with Metamath in " + ruTimePassed2s(timer));
			}
		}
	}
	Some(RuState(state with
		vars = setTree(state.vars, "verify-mm", pairs2tree([
			Pair("time", flow(ruTimePassed(timer)))
		]))
	));
}

ruCommServerStatus = RuComm(
	RuCommInfo(
		"server-status", "misc", "get info about a (running) http Russell server", "", true, false, 
		[], []
	),
	ruRunServerStatus
);

ruRunServerStatus(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	out = env.out;
	task = unit.task;
	state = unit.state;
	switch (findProcessIds("russell.jar server=http")) {
		Some(ids): {
			if (length(ids) == 0) {
				out.onMessage("Rusell http server is not running");
			} else if (length(ids) == 1) {
				out.onMessage("Russell http server is running, process id = " + ids[0]);
			} else {
				out.onMessage("Multiple Russell http server instances are running, process ids = " + strGlue(ids, ", "));
			}
		}
		None(): out.onMessage("Failed to determine if a Russell http server is running");
	}
	Some(state);
}

ruCommServerKill = RuComm(
	RuCommInfo(
		"server-kill", "misc", "kill all running http Russell servers", "", true, false, 
		[], []
	),
	ruRunServerKill
);

ruRunServerKill(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	out = env.out;
	task = unit.task;
	state = unit.state;
	switch (findProcessIds("russell.jar server=http")) {
		Some(ids): iter(ids, killProcessId);
		None(): out.onMessage("Failed to determine russell http server process");
	}
	Some(state);
}

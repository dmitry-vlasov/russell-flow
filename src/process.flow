import net/http;
import base/comms;
import ru/comms;
import mm/comms;
import script/exec;
import help;
import clear;

export {
	ruProcess(s : ScScript, onRunComplete : (int) -> void, out : RuOut) -> void;
	ruProcessLocal(s : ScScript, onRunComplete : (int) -> void, out : RuOut) -> void;
	ruCommandsTree(conf : RuConf) -> Tree<string, RuComm>;
}

ru_env = ref ruEmptyState;

ruProcess(s : ScScript, onRunComplete : (int) -> void, out : RuOut) -> void {
	if (getUrlParameterBoolDef("local", false)) {
		ruProcessLocal(s, onRunComplete, out);
	} else {
		ruProcessRemote(s, out.onMessage, onRunComplete, 
			\code -> ruProcessLocal(s, onRunComplete, out)
		);
	}
}

ruProcessRemote(s : ScScript, onMessage: (string) -> void, onRunComplete : (int) -> void, onServerError : (int) -> void) -> void {
	serverUrl = 
		"http://" + getUrlParameterDef("server-url", "localhost") + 
		":" + getUrlParameterDef("server-port", "20001");
	cwd = strReplace(resolveRelativePath("."), "\\", "/");
	remote_s = ScSeq([ruSetNoLogging(ScTask("conf-set", makeTree1("working-dir", cwd))), s]);
	httpCustomRequest(
		serverUrl,
		GET(), [], RequestPayload(json2string(ruScript2Json(remote_s))),
		\status, msg, headers -> {
			code = status - 200;
			if (code == 0) {
				onMessage(msg);
				onRunComplete(0);
			} else if (0 < code && code < 64) {
				onMessage("Compilation error " + i2s(code) + "\n" + msg);
				onRunComplete(code);
			} else {
				onServerError(status);
			}
		},
		false
	)
}

ruProcessLocal(s : ScScript, onRunComplete : (int) -> void, out : RuOut) -> void {
	ru_env := ruProcessScript(s, ^ru_env, out);
	onRunComplete(0);
}

ruProcessScript(s : ScScript, env : RuState, out : RuOut) -> RuState {
	either(ruExecScript(s, ruCommandsTree(env.conf), env, out), env);
}

ru_commands_tree : ref Maybe<Tree<string, RuComm>> = ref None();

ruCommandsTree(conf : RuConf) -> Tree<string, RuComm> {
	init_commands_tree = \-> {
		commands_list = [
			[
				ruCommServerShutdown,
				ruCommRunScript,
				ruCommVerifyMetamath,
				ruApplyToProjectRoots(ruCommReadAny),
				ruCommSplitMathAny,
				ruCommOptimizeImportsAny,
				ruCommMergeMath(ruProcessScript),
			],
			ruHelpCommands(ruCommandsTree),
			ruBaseCommands,
			ruClearCommands,
			ruCommands,
			mmCommands
		];
		fold(concatA(commands_list), makeTree(), \acc, comm -> setTree(acc, comm.descr.name, comm));
    }
    onlyOnce(ru_commands_tree, init_commands_tree);
}

ruCommReadAny = RuComm(
	RuCommDescr(
		"read", "io", "read a Russell/Metamath file depending on extension", "file", true, false, 
		[RuCommArg("file", true, "input file", "")], []
	),
	ruChooseRunerByExt(ruRunRead, mmRunRead)
);

ruCommSplitMathAny = RuComm(
	RuCommDescr(
		"split-math", "misc", "split a single Russell/Metamath file into a filesystem depending on extension", "file", true, false, 
		[RuCommArg("file", true, "input file", "")], []
	),
	ruChooseRunerByExt(ruRunSplitMath, mmRunSplitSource)
);

ruCommOptimizeImportsAny = RuComm(
	RuCommDescr(
		"optimize-imports", "misc", "optimize imports in Russell/Metamath file depending on extension", "file", true, false, 
		[RuCommArg("file", true, "input file", "")], []
	),
	ruChooseRunerByExt(ruRunOptimizeImports, mmRunOptimizeImports)
);

ruChooseRunerByExt( 
	run_ru : (RuUnit) -> Maybe<RuState>,
	run_mm : (RuUnit) -> Maybe<RuState>
) -> (RuUnit) -> Maybe<RuState> {
	\unit -> {
		file = lookupTreeDef(unit.task.args, "file", "");
		if (endsWith(file, ".ru")) {
			run_ru(unit);
		} else if (endsWith(file, ".mm")) {
			run_mm(unit);
		} else {
			unit.out.onError("Unknown file '" + file + "' extension: '" + getFileExt(file) + "', must be '*.ru' or '*.mm'", []);
			None();
		}
	}
}

ruCommServerShutdown = RuComm(
	RuCommDescr(
		"server-shutdown", "server", "send the command to exit to a server", "", false, false, 
		[RuCommArg("server-port", true, "port using by a server", "20001")], []
	),
	\unit -> { Some(unit.state); }
);

ruCommRunScript = RuComm(
	RuCommDescr(
		"run-script", "misc", "load and run a script", "script", false, false, 
		[RuCommArg("script", false, "the file with russell command script", "")], []
	),
	ruRunScript
);

ruRunScript(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	name = lookupTreeDef(task.args, "script", "");
	maybeMap(
		ruLoadScript(name, env),
		\src -> {
			ruProcessScript(
				src.script,
				RuState(state with 
					vars = mergeTree(state.vars, mapTree(task.args, \s -> 
						ValString(ruApplyScriptVars(s, state.vars, state.conf))
					)),
					depth = state.depth + 1
				),
				env.out
			)
		}
	);
}

ruCommVerifyMetamath = RuComm(
	RuCommDescr(
		"verify-mm", "misc", "verify a file with Metamath", "file", true, false, 
		[RuCommArg("file", false, "the Metamath file", "")], []
	),
	ruRunVerifyMetamath
);

ruRunVerifyMetamath(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	conf = env.conf;
	file = changeFileExt(lookupTreeDef(task.args, "file", ""), ".mm");
	module = ruTrimPath(file, unit.state.conf, ".mm");
	resolved = ruResolveRelativeFile(file, conf.workingDir);
	dir = ruDirName(resolved);
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("Going to verify file: '" + file + "' with Metamath, dir: '" + dir + "', resolved: '" + resolved + "', module: " + module);
	}
	if (!fileExists(resolved)) {
		env.out.onError("mm file '" + file + "' doesn't exist", []);
	} else {
		timer = ruMakeTimer();
		lines = ref [];
		code = execSystemProcess(
			"metamath", 
			["read " + fileNameOnly(file), "verify proof *", "exit"],
			if (dir == "") "." else dir,
			\out -> refArrayPush(lines, out),
			\err -> refArrayPush(lines, err),
		);
		env.out.onMessage(strGlue(^lines, "\n"));
		if (code != 0) {
			env.out.onError("Verification of '" + file + "' with Metamath eneded up with return code: " + i2s(code), []);
		} else {
			if (ruVerbose(env.conf) > 0) {
				env.out.onMessage("mm file '" + module + "' is verified with Metamath in " + ruTimePassed2s(timer));
			}
		}
	}
	Some(unit.state);
}

import script/value;

export {
	ruEvalValueFn(args : [flow], fn : ([flow]) -> Maybe<flow>, sign : string, arity : int) -> flow;
	ruEvalBoolFn(args : [flow], fn : ([bool]) -> Maybe<flow>, sign : string, arity : int) -> flow;
	ruEvalIntFn(args : [flow], fn : ([int]) -> Maybe<flow>, sign : string, arity : int) -> flow;
	ruEvalToStringFn(args : [flow], fn : ([string]) -> Maybe<flow>, sign : string, arity : int) -> flow;
	ruEvalStringFn(args : [flow], fn : ([string]) -> Maybe<flow>, sign : string, arity : int) -> flow;
	ruEvalDoubleFn(args : [flow], fn : ([double]) -> Maybe<flow>, sign : string, arity : int) -> flow;
	ruEvalArrayFn(args : [flow], fn : ([[flow]]) -> Maybe<flow>, sign : string, arity : int) -> flow;
	ruEvalTreeFn(args : [flow], fn : ([Tree<flow, flow>]) -> Maybe<flow>, sign : string, arity : int) -> flow;
	//ruEvalValueFn(args : [flow], fn : ([flow]) -> Maybe<flow>, sign : string, arity : int) -> flow;
}

ruEvalValueFn(args : [flow], fn : ([flow]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	if (arity >= 0 && length(args) != arity) {
		ruEvalArityError(args, sign, arity);
	} else {
		switch (fn(args)) {
			Some(v): v;
			None(): ruEvalComputeError(args, sign);
		}
	}
}

ruEvalBoolFn(args : [flow], fn : ([bool]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	switch (ruFilterBoolArgs(args)) {
		Some(bool_args): {
			if (arity >=0 && length(bool_args) != arity) {
				ruEvalArityError(args, sign, arity);
			} else {
				switch (fn(bool_args)) {
					Some(v): v;
					None(): ruEvalComputeError(args, sign);
				}
			}
		}
		None(): {
			ruEvalArgTypeError(args, sign, "bool"); 
		}
	}
}

ruEvalIntFn(args : [flow], fn : ([int]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	switch (ruFilterIntArgs(args)) {
		Some(int_args): {
			if (arity >=0 && length(int_args) != arity) {
				ruEvalArityError(args, sign, arity);
			} else {
				switch (fn(int_args)) {
					Some(v): v;
					None(): ruEvalComputeError(args, sign);
				}
			}
		}
		None(): {
			ruEvalArgTypeError(args, sign, "int"); 
		}
	}
}

ruEvalToStringFn(args : [flow], fn : ([string]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	str_args = map(args, ruScValue2s);
	if (arity >=0 && length(str_args) != arity) {
		ruEvalArityError(args, sign, arity);
	} else {
		switch (fn(str_args)) {
			Some(val): val;
			None(): ruEvalComputeError(args, sign);
		}
	}
}

ruEvalStringFn(args : [flow], fn : ([string]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	switch (ruFilterStringArgs(args)) {
		Some(str_args): {
			if (arity >=0 && length(str_args) != arity) {
				ruEvalArityError(args, sign, arity);
			} else {
				switch (fn(str_args)) {
					Some(val): val;
					None(): ruEvalComputeError(args, sign);
				}
			}
		}
		None(): {
			ruEvalArgTypeError(args, sign, "string"); 
		}
	}
}

ruEvalDoubleFn(args : [flow], fn : ([double]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	switch (ruFilterDoubleArgs(args)) {
		Some(double_args): {
			if (arity >=0 && length(double_args) != arity) {
				ruEvalArityError(args, sign, arity);
			} else {
				switch (fn(double_args)) {
					Some(val): val;
					None(): ruEvalComputeError(args, sign);
				}
			}
		}
		None(): {
			ruEvalArgTypeError(args, sign, "double"); 
		}
	}
}

ruEvalArrayFn(args : [flow], fn : ([[flow]]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	switch (ruFilterArrayArgs(args)) {
		Some(arr_args): {
			if (arity >=0 && length(arr_args) != arity) {
				ruEvalArityError(args, sign, arity);
			} else {
				switch (fn(arr_args)) {
					Some(v): v;
					None(): ruEvalComputeError(args, sign);
				}
			}
		}
		None(): {
			ruEvalArgTypeError(args, sign, "array"); 
		}
	}
}

ruEvalTreeFn(args : [flow], fn : ([Tree<flow, flow>]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	switch (ruFilterMapArgs(args)) {
		Some(map_args): {
			if (arity >=0 && length(map_args) != arity) {
				ruEvalArityError(args, sign, arity);
			} else {
				switch (fn(map_args)) {
					Some(v): v;
					None(): ruEvalComputeError(args, sign);
				}
			}
		}
		None(): {
			ruEvalArgTypeError(args, sign, "map");
		}
	}
}

/*
ruEvalValueFn(args : [flow], fn : ([flow]) -> Maybe<flow>, sign : string, arity : int) -> flow {
	switch (ruFilterValueArgs(args)) {
		Some(data_args): {
			if (arity >=0 && length(data_args) != arity) {
				ruEvalArityError(args, sign, arity);
			} else {
				switch (fn(data_args)) {
					Some(v): v;
					None(): ruEvalComputeError(args, sign);
				}
			}
		}
		None(): {
			ruEvalArgTypeError(args, sign, "map");
		}
	}
}
*/

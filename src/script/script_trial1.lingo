script1 = ws (script | empty_seq);
non_seq = if_else | if | exit | stop | while | print | data | define | assign | task ;

script = non_seq:ns script2:j { makeScScript(:ns, :j) };
	script2 = seq | empty_seq;
	empty_seq = '' { makeEmptySeq() };
	seq  = script+ :js { ScSeq(:js) };

	if_else  = "if" ws exp_0:c '{' ws script:p '}' ws "else" ws '{' ws script:n '}' ws { ScIfElse(:c, :p, :n) };
	if       = "if" ws exp_0:c '{' ws script:j '}' ws    { ScIf(:c, :j) };
	while    = "while" ws exp_0:c '{' ws script:j '}' ws { ScWhile(:c, :j) };
	print    = "print" ws exp_0:e ';' ws                 { ScPrint(:e) };
	data     = "output" ws exp_0:e ';' ws                { ScOutput(:e) };
	define   = "let" ws id:i ':' ws type '=' ws exp_0:v ';' ws  { ScDefine(:i, :type, :v) };
	assign   = id:i ':=' ws exp_0:v ';' ws               { ScAssign(:i, :v) };
	exit     = "exit" ws ';' ws                          { ScExit() };
	stop     = "stop" ws ';' ws                          { ScStop() };
	task     = id:i task_args:as ';' ws                  { makeScTask(:i, :as) };
		task_args = (!';' any)* $s ws { :s };

type = type_arr | type_fn | type_infix | type_prefix | type_const ;
	type_arr     = "[" ws type:t "]" ws                                           { makeTypeArray(:t) } ;
	type_fn      = "(" ws (type_fn_arg)*:as ")" ws "->" ws type:v                 { makeTypeFn(:as, :v) };
	type_infix   = "(" ws type:t1 type_id:op ws type:t2 (type_inf_arg)*:as ")" ws { makeTypeInfix(:op, :t1, :t2, :as) };
	type_prefix  = type_id:op ws "(" ws (type_fn_arg)*:as ")" ws                  { makeTypePrefix(:op, :as) };
	type_const   = type_id:op ws                                                  { makeTypeConst(:op) };
	type_fn_arg  = type:t (',' ws)?  { :t };
	type_inf_arg = type_id ws type:t { :t };
	type_id   = (!bad_type_id_char any)+ $id { $id };
	bad_type_id_char = ws_ | '(' | ')' | '[' | ']' | '{' | '}' | ',';

//exp_0 = cond_exp_0 | infix_op_0 | exp;
exp_0 = infix_op_0 | exp;
//exp_0 = exp;
	cond_exp_0  = exp:c '?' ws exp_0:p ':' ws exp_0:n { ScCond(:c, :p, :n) };
	infix_op_0  = exp:e infix_arg+:as { ScInfixOp(:e, :as) };

exp = undef_const | bool_const | double_const | int_const | string_const | 
	cond_exp | infix_op | index | pref_op | call_exp | call_name | lambda | var;

	cond_exp      = '(' ws exp_0:c '?' ws exp_0:p ':' ws exp_0:n ')' ws { ScCond(:c, :p, :n) };
	infix_op      = '(' ws exp_0:e infix_arg+:as ')' ws                 { ScInfixOp(:e, :as) };
		infix_arg = op:o exp_0:v                                        { ScInfixArg(:o, :v) };
	pref_op       = op:o exp_0:v                                        { ScPrefixOp(:o, :v) };
	call_name     = var:fn call_args:as                                 { ScCall(:fn, :as) };
	call_exp      = '(' ws exp_0:fn ')' ws call_args:as                 { ScCall(:fn, :as) };
		call_args = zeroary_args | unary_args | nary_args;
			zeroary_args = '(' ws ')' ws                                { emptyArray() };
			unary_args = '(' ws call_arg:a ')' ws                       { array(:a) };
			nary_args =  '(' ws exp_0:a0 call_arg*:as ')' ws            { consArray(:a0, :as) };
				call_arg  = ',' ws exp_0:arg                            { :arg };
	index         = '[' ws exp:m ':' ws exp :i ']' ws                   { ScIndex(:m, :i) };
	lambda        = '\\' ws lam_args:as "->" ws exp_0:b                 { ScLambda(:as, :b) };
			lam_args = nary_lamargs | unary_lamargs | zeroary_lamargs;
			zeroary_lamargs = ws                                        { emptyArray() };
			unary_lamargs = var:v ws                                    { array(:v) };
			nary_lamargs =  var:v0 lam_arg*:vs                          { consArray(:v0, :vs) };
				lam_arg  = ',' ws var:v                                 { :v };

	double_const = (digit+ '.' digit+) $s ws         { ScDoubleConst(s2d(:s)) };
	string_const = '"' (!'"' any)* $s '"' ws         { ScStringConst(:s) };
	int_const    = num:n                             { ScIntConst(s2i(:n)) };
	var          = id:i                              { ScVar(:i) };
	bool_const   = ("true" | "false") $s ws          { makeScBoolConst(:s) };
	undef_const  = "undef" ws                        { ScUndefConst() };

num  = digit+ $s ws { :s };
id   = (id_start id_symb*) $s ws { :s };
str  = (!space any)+ $s ws { :s };
op   = (!n_op any)+ $s ws { :s };
n_op = space | '(' | ')' | '"' | '[' | ']' | ',' | ':' | id_start | digit | '\\' | '/' | ';' | '=' | ":=";

digit    = '0'-'9';
id_symb  = 'a'-'z' | 'A'-'Z' | '0'-'9' | '-' | '_' | '.';
id_start = 'a'-'z' | 'A'-'Z';

space = ' ' | '\t' | '\n' | '\r';
ws_ = space | comment1 | comment2 | comment3 | comment4;
ws = ws_*;
comment1 = "//" (!'\n' any)* '\n';
comment2 = "#" (!'\n' any)* '\n';
comment3 = "/**" (!"*/" any)* $s "*/" { makeDocComment(:s) };
comment4 = "/*" (!"*/" any)* "*/";

any = '\u0000'-'\uFFFF';

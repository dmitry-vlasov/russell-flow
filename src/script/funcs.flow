import ds/tree;
import script/value;
import script/script;

export {
	ruEval(ex : ScExp, state : Tree<string, ValValue>) -> Maybe<ValValue>;
}

ScriptFn(
	fn : ([ValValue]) -> Maybe<ValValue>
);

ru_script_fns : ref Maybe< Tree<string, ScriptFn>> = ref None();

ruScriptFns() -> Tree<string, ScriptFn> {
	init_script_fns = \-> {
		makeTree();
	}
	onlyOnce(ru_script_fns, init_script_fns);
}

ruEval(ex : ScExp, state : Tree<string, ValValue>) -> Maybe<ValValue> {
	switch (ex) {
		ScInfixOp(e, args): {
			vals = filtermap(
				concat([e], map(args, \arg -> arg.exp)), 
				\arg -> ruEval(arg, state)
			);
			if (length(vals) != length(args) + 1) None() else {
				maybeBind(
					lookupTree(ruScriptFns(), args[0].op),
					\func -> func.fn(vals)
				);
			}
		}
		ScPrefixOp(op, e): {
			maybeBind2(\func, val -> func.fn([val]))
			(
				lookupTree(ruScriptFns(), op),
				ruEval(e, state)
			);
		}
		ScFunc(fn, args): {
			vals = filtermap(args, \arg -> ruEval(arg, state));
			if (length(vals) != length(args)) None() else {
				maybeBind(
					lookupTree(ruScriptFns(), fn),
					\func -> func.fn(vals)
				);
			}
		}
		ScIntConst(val): Some(ValInt(val));
		ScVar(var): lookupTree(state, var);
	}
}

import formats/json/json;
import ds/tree;
import ds/set;
import string;

export {
    // General algebraic types: type variables and type constructors.
    ScType ::= ScTypeVar, ScTypeGen;

    // Type variable (polymorphic) - a variable for a type.
    ScTypeVar(name : string);

    // General form of an algebraic type: a function on types.
    ScTypeGen(
        name : string, 
        args : [ScType]
    );

	// The name of an outer type function. If is a type variable, returns "".
	scTypeGen(type : ScType) -> string;
    scTypeArgs(type : ScType) -> [ScType];

    // Substitute type variables with approptiate values from 'sub'
    scInstantiateType(tp : ScType, sub : Tree<string, ScType>) -> ScType;
	scTypeContainsVar(tp : ScType, var : string) -> bool;
	scTypeVars(acc : Set<string>, tp : ScType) -> Set<string>;
	scRenameTypeVars(tp : ScType, renaming : Tree<string, string>) -> ScType;

	// Return a version of 'right' type so that all typevars in it are not present in 'left'.
	scMakeVarsDisjointed(left : ScType, right : ScType) -> ScType;

	scType2Json(type : ScType) -> Json;
	ruJson2ScType(json : Json) -> Maybe<ScType>;
}


scTypeGen(type : ScType) -> string {
	switch (type) {
        ScTypeVar(name): "";
        ScTypeGen(name, __): name;
	}	
}

scTypeArgs(type : ScType) -> [ScType] {
	switch (type) {
        ScTypeVar(__): [];
        ScTypeGen(__,args): args;
	}
}

scInstantiateType(tp : ScType, sub : Tree<string, ScType>) -> ScType {
    switch (tp) {
        ScTypeVar(v): lookupTreeDef(sub, v, tp);
        ScTypeGen(__, as): {
            ScTypeGen(tp with args = map(as, \a -> scInstantiateType(a, sub)));
        }
    }
}

scTypeContainsVar(tp : ScType, var : string) -> bool {
	switch (tp) {
        ScTypeVar(v): v == var;
        ScTypeGen(__, as): {
			exists(as, \a -> scTypeContainsVar(a, var));
        }
    }
}

scTypeVars(acc : Set<string>, tp : ScType) -> Set<string> {
	switch (tp) {
        ScTypeVar(v): insertSet(acc, v);
        ScTypeGen(__, as): {
			fold(as, acc, scTypeVars);
        }
    }
}

scRenameTypeVars(tp : ScType, renaming : Tree<string, string>) -> ScType {
	switch (tp) {
        ScTypeVar(v): ScTypeVar(lookupTreeDef(renaming, v, v));
        ScTypeGen(nm, as): {
			ScTypeGen(nm, map(as, \a -> scRenameTypeVars(a, renaming)));
        }
    }
}

scGenerateFreshVar(vars : Set<string>, var : string, ind : int) -> string {
	if (!containsSet(vars, var)) var else {
		fresh = var + "_" + i2s(ind);
		if (!containsSet(vars, fresh)) fresh else 
		scGenerateFreshVar(vars, var, ind + 1);
	}
}

scMakeVarsDisjointed(left : ScType, right : ScType) -> ScType {
	left_vars = scTypeVars(makeSet(), left);
	right_vars = scTypeVars(makeSet(), right);
	if (sizeSet(intersectSets(left_vars, right_vars)) == 0) right else {
		renaming = foldSet(right_vars, makeTree(), \acc, var -> 
			setTree(acc, var, scGenerateFreshVar(left_vars, var, 0))
		);
		scRenameTypeVars(right, renaming);
	}
}

scType2Json(type : ScType) -> Json {
	switch (type) {
		ScTypeVar(var): {
			JsonObject([
				Pair("struct", JsonString("ScTypeVar")),
				Pair("var", JsonString(var))
			]);
		}
        ScTypeGen(name, args): {
			JsonObject([
				Pair("struct", JsonString("ScTypeGen")),
				Pair("name", JsonString(name)),
				Pair("args", JsonArray(map(args, scType2Json)))
			]);
		}
	}
}

ruJson2ScType(json : Json) -> Maybe<ScType> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScTypeVar") {
		var = getJsonStringField(json, "var", "");
		if (var == "") None() else {
			Some(ScTypeVar(var));
		}
	} else 
	if (struct == "ScTypeGen") {
		name = getJsonStringField(json, "name", "");
		if (name == "") None() else {
			json_args = getJsonArrayField(json, "args");
			args = filtermap(json_args, ruJson2ScType);
			if (length(json_args) == length(args)) {
				Some(ScTypeGen(name, args));
			} else {
				None();
			}
		}
	} else None();
}
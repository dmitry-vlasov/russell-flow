import lingo/pegcode/driver;
import base/util/parse;
import base/task;

export {
	ScCommWDocs(comm : ScComm, docs : string);

	ScComm ::= ScCommSeq, ScAssign, ScIf, ScWhile, ScOutput, ScTask, ScAction;
		ScCommSeq(seq : [ScComm]);
		ScAssign(var : ScVar, exp : ScExp);
		ScIf(cond : ScExp, pos : ScComm, neg : Maybe<ScComm>);
		ScWhile(cond : ScExp, script : ScComm);
		ScOutput(mode : string, exp : ScExp);
		ScAction(action : string, args : [ScExp]);
		ScTask(command : string, args : [ScTaskArg]);
			ScTaskArg(name : string, value : ScConst);

	ScExp ::= 
		ScInfixOp, ScPrefixOp, ScCall, ScCond, ScLet, ScIndex, 
		ScLambda, ScArray, ScMap, ScField, ScStruct,
		ScQuote, ScEval, ScConst, ScVar, ScExpSeq;
		// general
		ScInfixOp(exp : ScExp, args : [ScInfixArg]);
			ScInfixArg(op : string, exp : ScExp);
		ScPrefixOp(op : string, exp : ScExp);
		ScCond(cond : ScExp, pos : ScExp, neg : ScExp);
		ScLet(var : string, exp : ScExp, scope : ScExp);
		// functions: make lambda / call fn
		ScCall(fn : ScExp, args : [ScExp]);
		ScLambda(args : [string], body : ScExp);
		// array: make/access
		ScArray(arr : [ScExp]);
		ScIndex(arr : ScExp, ind : ScExp);
		// maps: make/access
		ScMap(pairs : [Pair<ScExp, ScExp>]);
		ScField(exp : ScExp, key : string);
		ScStruct(name : string, args : [ScExp]);
		// Quote/eval pair
		ScQuote(exp : ScExp);
		ScEval(exp : ScExp);

	ScConst ::= ScUndef, ScBool, ScInt, ScDouble, ScString;
		ScUndef();
		ScBool(val : bool);
		ScInt(val : int);
		ScDouble(val : double);
		ScString(val : string);
		ScVar(var : string, access : ScAccess);
		ScExpSeq(seq : [ScExp]);
	
	ScAccess ::= ScFieldAccess, ScIndexAccess, ScCallAccess, ScDirectAccess;
		ScFieldAccess(field : string, next : ScAccess);
		ScIndexAccess(ind : ScExp, next : ScAccess);
		ScCallAccess(args : [ScExp], next : ScAccess);
		ScDirectAccess();

	ruParseScComm(str : string) -> Maybe<ScCommWDocs>;
	ruScComm2Json(script : ScComm) -> Json;
	ruJson2ScComm(json : Json) -> Maybe<ScComm>;

	ruScTaskSetArg(args : [ScTaskArg], name : string, value : ScConst) -> [ScTaskArg];
	ruScTaskLookupArg(args : [ScTaskArg], name : string) -> Maybe<ScConst>;
	ruScTaskGetArg(args : [ScTaskArg], name : string, defval : ScConst) -> ScConst;
	ruScTaskHasArg(args : [ScTaskArg], name : string) -> bool;
	ruScTaskArgs2Tree(args : [ScTaskArg]) -> Tree<string, string>;
	ruTree2ScTaskArgs(tree : Tree<string, string>) -> [ScTaskArg];
	ruSetScTaskNoLogging(task : ScTask) -> ScTask;
	ruScTaskIsNoLogging(task : ScTask) -> bool;
	ruScTaskIsLogging(task : ScTask) -> bool;

	ruScComm2s(script : ScComm) -> string;
	ruScExp2s(e : ScExp) -> string;
	ruScCommTasks(script : ScComm) -> [ScTask];
	ruScCommSetTasksFile(script : ScComm, file : string) -> ScComm;

	ruSetScCommTaskArg(script : ScComm, key : string, val : string) -> ScComm;

	ruScExpVars(acc : Set<string>, e : ScExp) -> Set<string>;

	sc_exp_types = buildSet([
		"ScInfixOp", "ScPrefixOp", "ScCall", "ScCond", "ScLet", "ScIndex", "ScLambda", "ScArray", "ScMap", "ScField", "ScStruct",
		"ScQuote", "ScEval", "ScUndef", "ScBool", "ScInt", "ScDouble", "ScString", "ScVar", "ScExpSeq"
	]);
}

ruMakeScTask(as : [flow]) -> ScTask {
	ScTask(as[0], 
		map(
			filtermap(
				ruSplitTaskArgs(flow2s(as[1]), 0, RuSplitTaskArgsAcc([], "", false)), 
				\s0 -> {
					s = trim2(s0, " \n\t\r");
					if (s == "" || s == "do_not_log_this") None() else Some(s);
				}
			),
			\s -> {
				sp = strSplit(s, "=");
				if (length(sp) == 1) {
					ScTaskArg(s, ScString(""));
				} else {
					ruMakeScTaskArg(sp);
				}
			}
		)
	);
}

ruMakeScTaskArg(as : [flow]) -> ScTaskArg {
	key = as[0];
	val = as[1];
	if (isDigits(val)) {
		ScTaskArg(key, ScInt(s2i(val)));
	} else if (isDouble(val)) {
		ScTaskArg(key, ScDouble(s2d(val)));
	} else if (val == "true") {
		ScTaskArg(key, ScBool(true));
	} else if (val == "true") {
		ScTaskArg(key, ScBool(true));
	} else {
		ScTaskArg(key, ScString(val));
	}
}

RuSplitTaskArgsAcc(
	args : [string],
	curr : string,
	inString : bool
);

ruSplitTaskArgs(args : string, i : int, acc : RuSplitTaskArgsAcc) -> [string] {
	if (i == strlen(args)) {
		if (acc.curr == "") acc.args else concat(acc.args, [acc.curr]);
	} else {
		ch = getCharAt(args, i);
		if (acc.inString) {
			if (ch == "\"" && (i == 0 || (i > 0 && getCharAt(args, i - 1) != "\\"))) {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with inString = false, curr = acc.curr + ch)
				);
			} else {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with curr = acc.curr + ch)
				);
			}
		} else {
			if (ch == "\"") {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with inString = true, curr = acc.curr + ch)
				);
			} else if (ch == " " || ch == "\t" || ch == "\n" || ch == "\r") {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with args = concat(acc.args, [acc.curr]), curr = "")
				);
			} else {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with curr = acc.curr + ch)
				);
			}
		}
	}
}

ru_script_parser = compilePegGrammar("#include script/script.lingo");
ru_script_actions = SemanticActions(mergeTree(defaultPegActions.t, 
	pairs2tree([
		Pair("makeScTask", \s : [flow] -> flow(ruMakeScTask(s))),
		Pair("makeScript", \s : [flow] -> if (length(s[0]) == 1) flow(s[0][0]) else flow(ScCommSeq(s[0]))),
		Pair("unescapeStr", \s : [flow] -> flow(unescapeStr(s[0]))),
		Pair("makeScTaskArg", \s : [flow] -> flow(ruMakeScTaskArg(s)))
	])
));

ruParseScComm(str : string) -> Maybe<ScCommWDocs> {
	comms = ref [];
	actions = SemanticActions(
		setTree(ru_script_actions.t, "makeDocComment", \s -> { refArrayPush(comms, s[0]); 0})
	);
	ret1 = ruParsic(ru_script_parser, str, actions);
	if (ret1 == "PARSING FAILED") {
		ret2 = ruParsic(ru_script_parser, str + ";", actions);
		if (ret2 == "PARSING FAILED") {
			None();
		} else {
			Some(ScCommWDocs(ret2, concatStrings(^comms)));
		}
	} else {
		//println("PARSED SCRIPT:\n" + ruScComm2s(ret1));
		/*json = ruScComm2Json(ret1);
		switch (ruJson2ScComm(json)) {
			Some(r): {
				if (ret1 == r) {
					println("JSON script coincides, ok");
				} else {
					println("JSON script differs:\n" + ruScComm2s(ret1) + "\n  !=  \n" + ruScComm2s(r) + "\nJSON:\n" + json2string(json));
				}
			}
			None(): {
				println("JSON was not parsed:\n" + json2string(json));
			}
		}*/
		Some(ScCommWDocs(ret1, concatStrings(^comms)));
	}
}

ruScTaskSetArg(args : [ScTaskArg], name : string, value : ScConst) -> [ScTaskArg] {
	i = findiDef(args, \arg -> arg.name == name, -1);
	arg = ScTaskArg(name, value);
	if (i == -1) {
		concat(args, [arg]);
	} else {
		replace(args, i, arg);
	}
}

ruScTaskLookupArg(args : [ScTaskArg], name : string) -> Maybe<ScConst> {
	i = findiDef(args, \arg -> arg.name == name, -1);
	if (i == -1) {
		None();
	} else {
		Some(args[i].value);
	}
}

ruScTaskGetArg(args : [ScTaskArg], name : string, defval : ScConst) -> ScConst {
	i = findiDef(args, \arg -> arg.name == name, -1);
	if (i == -1) {
		defval;
	} else {
		args[i].value;
	}
}

ruScTaskHasArg(args : [ScTaskArg], name : string) -> bool {
	findiDef(args, \arg -> arg.name == name, -1) != -1;
}

ruScTaskArgs2Tree(args : [ScTaskArg]) -> Tree<string, string> {
	pairs2tree(map(args, \arg ->
		switch (arg.value) {
			ScUndef(): Pair(arg.name, "");
			ScInt(v): Pair(arg.name, i2s(v));
			ScBool(v): Pair(arg.name, b2s(v));
			ScDouble(v): Pair(arg.name, d2s(v));
			ScString(v): Pair(arg.name, v);
		}
	));
}

ruTree2ScTaskArgs(tree : Tree<string, string>) -> [ScTaskArg] {
	map(tree2pairs(tree), \p -> ScTaskArg(p.first, ScString(p.second)));
}

ruSetScTaskNoLogging(task : ScTask) -> ScTask {
	ScTask(task with args = concat(task.args, [ScTaskArg(non_logging_watermark, ScUndef())]));
}

ruScTaskIsNoLogging(task : ScTask) -> bool {
	exists(task.args, \arg -> arg.name == non_logging_watermark);
}

ruScTaskIsLogging(task : ScTask) -> bool {
	forall(task.args, \arg -> arg.name != non_logging_watermark);
}

ruScComm2Json(j : ScComm) -> Json {
	switch (j) {
		ScCommSeq(seq): {
			JsonObject([
				Pair("struct", JsonString("ScCommSeq")),
				Pair("seq", JsonArray(map(seq, ruScComm2Json)))
			]);
		}
		ScAssign(var, ex): {
			JsonObject([
				Pair("struct", JsonString("ScAssign")),
				Pair("var", ruScExp2Json(var)),
				Pair("exp", ruScExp2Json(ex))
			]);
		}
		ScIf(cond, pos, mneg): {
			JsonObject(filtermap([
				Some(Pair("struct", JsonString("ScIf"))),
				Some(Pair("cond", ruScExp2Json(cond))),
				Some(Pair("pos", ruScComm2Json(pos))),
				maybeMap(mneg, \neg -> Pair("neg", ruScComm2Json(neg)))
			], idfn));
		}
		ScWhile(cond, script): {
			JsonObject([
				Pair("struct", JsonString("ScWhile")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("script", ruScComm2Json(script)),
			]);
		}
		ScOutput(mode, ex): {
			JsonObject([
				Pair("struct", JsonString("ScOutput")),
				Pair("mode", JsonString(mode)),
				Pair("exp", ruScExp2Json(ex)),
			]);
		}
		ScTask(comm, args): {
			JsonObject([
				Pair("struct", JsonString("ScTask")),
				Pair("command", JsonString(comm)),
				Pair("args", JsonArray(map(args, 
					\arg -> JsonObject([
						Pair("name", JsonString(arg.name)),
						Pair("value", ruScExp2Json(arg.value))
					])
				)))
			]);
		}
		ScAction(action, args): {
			JsonObject([
				Pair("struct", JsonString("ScAction")),
				Pair("action", JsonString(action)),
				Pair("args", JsonArray(map(args, ruScExp2Json)))
			]);
		}
	}
}

ruScAccess2Json(a : ScAccess) -> Json {
	switch (a) {
		ScFieldAccess(field, next): {
			JsonObject([
				Pair("struct", JsonString("ScFieldAccess")),
				Pair("field", JsonString(field)),
				Pair("next", ruScAccess2Json(next))
			]);
		}
		ScIndexAccess(ind, next): {
			JsonObject([
				Pair("struct", JsonString("ScIndexAccess")),
				Pair("ind", ruScExp2Json(ind)),
				Pair("next", ruScAccess2Json(next))
			]);
		}
		ScCallAccess(args, next): {
			JsonObject([
				Pair("struct", JsonString("ScCallAccess")),
				Pair("args", JsonArray(map(args, ruScExp2Json))),
				Pair("next", ruScAccess2Json(next))
			]);
		}
		ScDirectAccess(): {
			JsonObject([
				Pair("struct", JsonString("ScDirectAccess"))
			]);
		}
	}
}

ruScExp2Json(e : ScExp) -> Json {
	switch (e) {
		ScInfixOp(ex, args): {
			JsonObject([
				Pair("struct", JsonString("ScInfixOp")),
				Pair("exp", ruScExp2Json(ex)),
				Pair("args", JsonArray(map(args, \arg -> 
					JsonObject([
						Pair("op", JsonString(arg.op)),
						Pair("exp", ruScExp2Json(arg.exp))
					])
				)))
			]);
		}
		ScPrefixOp(op, ex): {
			JsonObject([
				Pair("struct", JsonString("ScPrefixOp")),
				Pair("op", JsonString(op)),
				Pair("exp", ruScExp2Json(ex))
			]);
		}
		ScCall(fn, args): {
			JsonObject([
				Pair("struct", JsonString("ScCall")),
				Pair("fn", ruScExp2Json(fn)),
				Pair("args", JsonArray(map(args, ruScExp2Json)))
			]);
		}
		ScCond(cond, pos, neg): {
			JsonObject([
				Pair("struct", JsonString("ScCond")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("pos", ruScExp2Json(pos)),
				Pair("neg", ruScExp2Json(neg))
			]);
		}
		ScLet(var, ex, scope): {
			JsonObject([
				Pair("struct", JsonString("ScLet")),
				Pair("var", JsonString(var)),
				Pair("exp", ruScExp2Json(ex)),
				Pair("scope", ruScExp2Json(scope))
			]);
		}
		ScIndex(ex, ind): {
			JsonObject([
				Pair("struct", JsonString("ScIndex")),
				Pair("ex", ruScExp2Json(ex)),
				Pair("ind", ruScExp2Json(ind))
			]);
		}
		ScLambda(args, body): {
			JsonObject([
				Pair("struct", JsonString("ScLambda")),
				Pair("args", JsonArray(map(args, \v -> JsonString(v)))),
				Pair("body", ruScExp2Json(body))
			]);
		}
		ScArray(arr): {
			JsonObject([
				Pair("struct", JsonString("ScArray")),
				Pair("arr", JsonArray(map(arr, ruScExp2Json))),
			]);
		}
		ScMap(pairs): {
			JsonObject([
				Pair("struct", JsonString("ScMap")),
				Pair("pairs", JsonArray(map(pairs, \p ->
					JsonObject([
						Pair("key", ruScExp2Json(p.first)),
						Pair("val", ruScExp2Json(p.second))
					])
				))),
			]);
		}
		ScField(ex, field): {
			JsonObject([
				Pair("struct", JsonString("ScField")),
				Pair("exp", ruScExp2Json(ex)),
				Pair("field", JsonString(field))
			]);
		}
		ScStruct(name, args): {
			JsonObject([
				Pair("struct", JsonString("ScStruct")),
				Pair("name", JsonString(name)),
				Pair("args", JsonArray(map(args, ruScExp2Json)))
			]);
		}
		ScQuote(ex): {
			JsonObject([
				Pair("struct", JsonString("ScQuote")),
				Pair("exp", ruScExp2Json(ex)),
			]);
		}
		ScEval(ex): {
			JsonObject([
				Pair("struct", JsonString("ScEval")),
				Pair("exp", ruScExp2Json(ex)),
			]);
		}
		ScUndef(): {
			JsonObject([
				Pair("struct", JsonString("ScUndef"))
			]);
		}
		ScBool(val): {
			JsonObject([
				Pair("struct", JsonString("ScBool")),
				Pair("val", JsonBool(val))
			]);
		}
		ScInt(val): {
			JsonObject([
				Pair("struct", JsonString("ScInt")),
				Pair("val", JsonDouble(i2d(val)))
			]);
		}
		ScDouble(val): {
			JsonObject([
				Pair("struct", JsonString("ScDouble")),
				Pair("val", JsonDouble(val))
			]);
		}
		ScString(val): {
			JsonObject([
				Pair("struct", JsonString("ScString")),
				Pair("val", JsonString(val))
			]);
		}
		ScVar(var, access): {
			JsonObject([
				Pair("struct", JsonString("ScVar")),
				Pair("var", JsonString(var)),
				Pair("access", ruScAccess2Json(access))
			]);
		}
		ScExpSeq(seq): {
			JsonObject([
				Pair("struct", JsonString("ScExpSeq")),
				Pair("seq", JsonArray(map(seq, ruScExp2Json))),
			]);
		}
	}
}

ruJson2ScAccess(json : Json) -> Maybe<ScAccess> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScFieldAccess") {
		field = getJsonStringField(json, "field", "");
		if (field == "") None() else {
			json_next = getJsonFieldValue(json, "next", JsonNull());
			maybeMap(ruJson2ScAccess(json_next), \next ->
				ScFieldAccess(field, next)
			);
		}
	} else 
	if (struct == "ScIndexAccess") {
		json_ind = getJsonFieldValue(json, "ind", JsonNull());
		json_next = getJsonFieldValue(json, "next", JsonNull());
		maybeMap2(\ind, next -> ScIndexAccess(ind, next))(
			ruJson2ScExp(json_ind),
			ruJson2ScAccess(json_next),
		);
	} else 
	if (struct == "ScCallAccess") {
		json_args = getJsonArrayField(json, "args");
		json_next = getJsonFieldValue(json, "next", JsonNull());
		args = filtermap(json_args, ruJson2ScExp);
		if (length(args) != length(json_args)) None() else {
			maybeMap(ruJson2ScAccess(json_next), \next -> ScCallAccess(args, next));
		}
	} else 
	if (struct == "ScDirectAccess") {
		Some(ScDirectAccess());
	} else {
		None();
	}
}

ruJson2ScComm(json : Json) -> Maybe<ScComm> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScCommSeq") {
		json_seq = getJsonArrayField(json, "seq");
		seq = filtermap(json_seq, ruJson2ScComm);
		if (length(json_seq) == length(seq)) {
			Some(ScCommSeq(seq));
		} else {
			None();
		}
	} else 
	if (struct == "ScAssign") {
		json_var = getJsonFieldValue(json, "var", JsonNull());
		maybeBind(ruJson2ScExp(json_var), \var ->
			switch (var) {
				ScVar(__,__): {
					json_exp = getJsonFieldValue(json, "exp", JsonNull());
					maybeMap(ruJson2ScExp(json_exp), \ex -> ScAssign(var, ex));
				}
				default: None();
			}

		)
	} else 
	if (struct == "ScIf") {
		neg = if (!jsonObjectHasField(json, "neg")) None() else {
			ruJson2ScComm(getJsonFieldValue(json, "neg", JsonNull()));
		}
		maybeMap2(\cond, pos -> ScIf(cond, pos, neg))(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			ruJson2ScComm(getJsonFieldValue(json, "pos", JsonNull()))
		);
	} else 
	if (struct == "ScWhile") {
		maybeMap2(\cond, script -> ScWhile(cond, script))(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			ruJson2ScComm(getJsonFieldValue(json, "script", JsonNull()))
		);
	} else 
	if (struct == "ScOutput") {
		mode = getJsonStringField(json, "mode", "");
		if (mode == "") None() else {
			maybeMap(
				ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
				\ex -> ScOutput(mode, ex)
			);
		}
	} else 
	if (struct == "ScTask") {
		comm = getJsonStringField(json, "command", "");
		if (comm == "") None() else {
			json_args = getJsonArrayField(json, "args");
			args = filtermap(json_args, \opt -> {
				name = getJsonStringField(opt, "name", "");
				if (name == "") None() else {
					maybeMap(ruJson2ScConst(getJsonFieldValue(opt, "value", JsonNull())), \value ->
						ScTaskArg(name, value)
					);
				}
			});
			if (length(json_args) != length(args)) None() else {
				Some(ScTask(comm, args));
			}
		}
	} else if (struct == "ScAction") {
		action = getJsonStringField(json, "action", "");
		if (action == "") None() else {
			json_args = getJsonArrayField(json, "args");
			args = filtermap(json_args, ruJson2ScExp);
			if (length(json_args) != length(args)) None() else {
				Some(ScAction(action, args));
			}
		}
	} else {
		None();
	}
}

ruJson2ScExp(json : Json) -> Maybe<ScExp> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScInfixOp") {
		maybeBind(
			ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\exp -> {
				json_args = getJsonArrayField(json, "args");
				if (json_args == []) None() else {
					args = filtermap(json_args, \arg -> {
						op = getJsonStringField(arg, "op", "");
						if (op == "") None() else {
							maybeMap(
								ruJson2ScExp(getJsonFieldValue(arg, "exp", JsonNull())),
								\ex -> ScInfixArg(op, ex)
							);
						}
					});
					if (length(args) != length(json_args)) None() else {
						Some(ScInfixOp(exp, args));
					}
				}
			}
		);
	} else 
	if (struct == "ScPrefixOp") {
		op = getJsonStringField(json, "op", "");
		if (op == "") None() else {
			maybeMap(
				ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())), 
				\ex -> ScPrefixOp(op, ex)
			);
		} 
	} else 
	if (struct == "ScCall") {
		fn_json = getJsonFieldValue(json, "fn", JsonNull());
		if (fn_json == JsonNull()) None() else {
			maybeBind(ruJson2ScExp(fn_json), 
				\fn -> if (!jsonObjectHasField(json, "args")) None() else {
					json_args = getJsonArrayField(json, "args");
					args = filtermap(json_args, ruJson2ScExp);
					if (length(args) != length(json_args)) None() else {
						Some(ScCall(fn, args));
					}
				}
			);
		}
	} else 
	if (struct == "ScCond") {
		cond_json = getJsonFieldValue(json, "cond", JsonNull());
		pos_json = getJsonFieldValue(json, "pos", JsonNull());
		neg_json = getJsonFieldValue(json, "neg", JsonNull());
		if (cond_json == JsonNull() || pos_json == JsonNull() || neg_json == JsonNull()) None() else {
			maybeBind(ruJson2ScExp(cond_json), 
				\cond -> maybeMap2(\pos, neg -> ScCond(cond, pos, neg))
				(ruJson2ScExp(pos_json), ruJson2ScExp(neg_json))
			);
		}
	} else 
	if (struct == "ScLet") {
		var = getJsonStringField(json, "var", "");
		if (var == "") None() else {
			json_val = getJsonFieldValue(json, "exp", JsonNull());
			json_scope = getJsonFieldValue(json, "scope", JsonNull());
			maybeMap2(\val, scope -> ScLet(var, val, scope))(
				ruJson2ScExp(json_val),
				ruJson2ScExp(json_scope)
			);
		}
	} else
	if (struct == "ScIndex") {
		ex = getJsonFieldValue(json, "ex", JsonNull());
		if (ex == JsonNull()) None() else {
			if (!jsonObjectHasField(json, "ind")) None() else {
				ind = getJsonFieldValue(json, "ind", JsonNull());
				maybeMap2(\e, i -> ScIndex(e, i))(ruJson2ScExp(ex), ruJson2ScExp(ind));
			}
		}
	} else 
	if (struct == "ScLambda") {
		body_json = getJsonFieldValue(json, "body", JsonNull());
		if (body_json == JsonNull()) None() else {
			if (!jsonObjectHasField(json, "args")) None() else {
				args_json = getJsonArrayField(json, "args");
				args = filtermap(args_json, \arg_json -> 
					switch (arg_json) {
						JsonString(arg): Some(arg);
						default: None();
					}
				);
				if (length(args) != length(args_json)) None() else {
					maybeMap(ruJson2ScExp(body_json), \body -> ScLambda(args, body));
				}
			}
		}
	} else 
	if (struct == "ScArray") {
		if (!jsonObjectHasField(json, "arr")) None() else {
			arr_json = getJsonArrayField(json, "arr");
			arr = filtermap(arr_json, ruJson2ScExp);
			if (length(arr) == length(arr_json)) {
				Some(ScArray(arr));
			} else {
				None();
			}
		}
	} else 
	if (struct == "ScMap") {
		if (!jsonObjectHasField(json, "pairs")) None() else {
			pairs_jsons = getJsonArrayField(json, "pairs");
			pairs = filtermap(pairs_jsons, \pair_json -> {
				key_json = getJsonFieldValue(pair_json, "key", JsonNull());
				val_json = getJsonFieldValue(pair_json, "val", JsonNull());
				maybeMap2(\key, val -> Pair(key, val))(
					ruJson2ScExp(key_json),
					ruJson2ScExp(val_json)
				)
			});
			if (length(pairs) == length(pairs_jsons)) {
				Some(ScMap(pairs));
			} else {
				None();
			}
		}
	} else 
	if (struct == "ScField") {
		maybeBind(ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\ex -> {
				field = getJsonStringField(json, "field", "");
				if (field == "") None() else 
				Some(ScField(ex, field));
			}
		);
	} else
	if (struct == "ScStruct") {
		name = getJsonStringField(json, "name", "");
		if (name == "") None() else {
			if (!jsonObjectHasField(json, "args")) None() else {
				json_args = getJsonArrayField(json, "args");
				args = filtermap(json_args, ruJson2ScExp);
				if (length(args) != length(json_args)) None() else {
					Some(ScStruct(name, args));
				}
			}
		}
	} else 
	if (struct == "ScQuote") {
		maybeMap(ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\ex -> ScQuote(ex)
		);
	} else
	if (struct == "ScEval") {
		maybeMap(ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\ex -> ScEval(ex)
		);
	} else 
	if (struct == "ScVar") {
		var = getJsonStringField(json, "var", "");
		if (var == "") None() else {
			json_access = getJsonFieldValue(json, "access", JsonNull());
			maybeMap(ruJson2ScAccess(json_access), \access ->
				ScVar(var, access)
			);
		} 
	} else 
	if (struct == "ScExpSeq") {
		if (!jsonObjectHasField(json, "seq")) None() else {
			seq_json = getJsonArrayField(json, "seq");
			seq = filtermap(seq_json, ruJson2ScExp);
			if (length(seq) == length(seq_json)) {
				Some(ScExpSeq(seq));
			} else {
				None();
			}
		}
	} else {
		ruJson2ScConst(json);
	}
}

ruJson2ScConst(json : Json) -> Maybe<ScConst> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScUndef") {
		Some(ScUndef());
	} else 
	if (struct == "ScBool") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonBoolField(json, "val", false);
			Some(ScBool(val));
		} 
	} else 
	if (struct == "ScInt") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonDoubleField(json, "val", 0.0);
			Some(ScInt(round(val)));
		} 
	} else 
	if (struct == "ScDouble") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonDoubleField(json, "val", 0.0);
			Some(ScDouble(val));
		} 
	} else 
	if (struct == "ScString") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonStringField(json, "val", "");
			Some(ScString(val));
		} 
	} else {
		None();
	}
}

ruScComm2s(s : ScComm) -> string {
	switch (s) {
		ScCommSeq(seq):
			strGlue(map(seq, ruScComm2s), "\n");
		ScAssign(var, val): ruScExp2s(var) + " := " + ruScExp2s(val) + ";";
		ScIf(cond, pos, mneg):
			"if " + ruScExp2s(cond) + " {\n" + strIndent(ruScComm2s(pos)) + "\n}" + 
			eitherMap(mneg, \neg -> " else {\n" + strIndent(ruScComm2s(neg)) + "\n}", "");
		ScWhile(cond, script): 
			"while " + ruScExp2s(cond) + " {\n" + strIndent(ruScComm2s(script)) + "\n}";
		ScOutput(mode, ex): 
			mode + " " + ruScExp2s(ex) + ";";
		ScTask(comm, args): 
			comm + " " + superglue(args, \arg -> arg.name + "=" + ruScExp2s(arg.value), " ") + ";"
		ScAction(action, args): 
			action + if (length(args) == 0) ";" else "(" + superglue(args, ruScExp2s, ",") + ");";
	}
}

ruScAccess2s(a : ScAccess) -> string {
	switch (a) {
		ScFieldAccess(field, next): 
			"." + field + ruScAccess2s(next);
		ScIndexAccess(ind, next): 
			"[" + ruScExp2s(ind) + "]" + ruScAccess2s(next);
		ScCallAccess(args, next): 
			"(" + superglue(args, ruScExp2s, ", ") + ")" + ruScAccess2s(next);
		ScDirectAccess(): 
			"";
	}
}

ruScExp2s(e : ScExp) -> string {
	too_long = \s -> strContains(s, "\n") || strlen(s) > 64;
	switch (e) {
		ScInfixOp(ex, args): {
			arg_strs = map(concat([ex], map(args, \arg -> arg.exp)), ruScExp2s);
			short = strGlue(arg_strs,  " " + args[0].op + " ");
			if (!too_long(short)) {
				"(" + short + ")";
			} else {
				"(\n" + strIndent(strGlue(arg_strs, args[0].op + "\n")) + "\n)";
			}
		}
		ScPrefixOp(op, ex): op + ruScExp2s(ex);
		ScCall(fn, args): {
			fn_str = ruScExp2s(fn);
			arg_strs = map(args, ruScExp2s);
			short_args = strGlue(map(args, ruScExp2s),", ");
			if (!too_long(short_args)) {
				fn_str + "(" + short_args + ")";
			} else {
				fn_str + "(\n" + strIndent(strGlue(map(args, ruScExp2s),",\n")) + "\n)";
			}
		}
		ScCond(cond, pos, neg): {
			cond_str = ruScExp2s(cond);
			pos_str = ruScExp2s(pos);
			neg_str = ruScExp2s(neg);
			if (!too_long(cond_str)) {
				if (!too_long(pos_str) && !too_long(neg_str)) {
					"(" + ruScExp2s(cond) + "?" + ruScExp2s(pos) + ":" + ruScExp2s(neg) + ")";
				} else {
					"(" + ruScExp2s(cond) + "?\n" + strIndent(ruScExp2s(pos)) + ":\n" + strIndent(ruScExp2s(neg)) + "\n)";
				}
			} else {
				if (!too_long(pos_str) && !too_long(neg_str)) {
					"(\n" + strIndent(ruScExp2s(cond)) + "\n?" + ruScExp2s(pos) + ":" + ruScExp2s(neg) + ")";
				} else {
					"(\n" + strIndent(ruScExp2s(cond)) + "\n?\n" + strIndent(ruScExp2s(pos)) + ":\n" + strIndent(ruScExp2s(neg)) + "\n)";
				}
			}
		}
		ScLet(var, ex, scope): {
			ex_str = ruScExp2s(ex);
			if (!too_long(ex_str)) {
				"let " + var + " = " + ex_str + ";\n" + ruScExp2s(scope);
			} else {
				"let " + var + " = \n" + strIndent(ex_str) + "\n;\n" + ruScExp2s(scope);
			}
		}
		ScIndex(ex, ind): {
			ruScExp2s(ex) + "[" + ruScExp2s(ind) + "]";
		}
		ScLambda(args, body): {
			body_str = ruScExp2s(body);
			if (!too_long(body_str)) {
				"\\" + strGlue(args, ", ") + " -> " + ruScExp2s(body);
			} else {
				"\\" + strGlue(args, ", ") + " ->\n" + strIndent(ruScExp2s(body));
			}
		}
		ScArray(arr): {
			arr_strs = map(arr, ruScExp2s);
			short = strGlue(arr_strs,  ", ");
			if (!too_long(short)) {
				"[" + superglue(arr, ruScExp2s, ", ") + "]";
			} else {
				"[\n" + strIndent(superglue(arr, ruScExp2s, ",\n")) + "\n]";
			}
		}
		ScField(ex, field): 
			ruScExp2s(ex) + "." + field;
		ScStruct(name, args): {
			arg_strs = map(args, ruScExp2s);
			short_args = strGlue(map(args, ruScExp2s),", ");
			if (!too_long(short_args)) {
				name + "(" + short_args + ")";
			} else {
				name + "(\n" + strIndent(strGlue(map(args, ruScExp2s),",\n")) + "\n)";
			}
		}
		ScQuote(ex): {
			ex_str = ruScExp2s(ex);
			if (!too_long(ex_str)) {
				"quote(" + ruScExp2s(ex) + ")";
			} else {
				"quote(\n" + strIndent(ruScExp2s(ex)) + "\n)";
			}
		}
		ScEval(ex): {
			ex_str = ruScExp2s(ex);
			if (!too_long(ex_str)) {
				"eval(" + ruScExp2s(ex) + ")";
			} else {
				"eval(\n" + strIndent(ruScExp2s(ex)) + "\n)";
			}
		}
		ScMap(pairs): {
			pairs_str = superglue(pairs, \p -> ruScExp2s(p.first) + "=" + ruScExp2s(p.second), ", ");
			if (!too_long(pairs_str)) {
				"{" + pairs_str + "}";
			} else {
				"{\n" + strIndent(superglue(pairs, \p -> ruScExp2s(p.first) + "=" + ruScExp2s(p.second), ",\n")) + "\n}";
			}
		}
		ScUndef():     "undef";
		ScBool(val):   b2s(val);
		ScInt(val):    i2s(val);
		ScDouble(val): d2s(val);
		ScString(val): "\"" + val + "\"";
		ScVar(var, access): var + ruScAccess2s(access);
		ScExpSeq(seq): {
			"{\n" + strIndent(strGlue(map(seq, ruScExp2s),";\n")) + "\n}";
		}
	}
}

ruScCommTasks(s : ScComm) -> [ScTask] {
	ruDoScCommTasks([], s);
}

ruDoScCommTasks(acc : [ScTask], s : ScComm) -> [ScTask] {
	switch (s) {
		ScCommSeq(seq):               fold(seq, acc, ruDoScCommTasks);
		ScAssign(__,__):          acc;
		ScIf(cond, pos, mneg):    {
			switch (mneg) {
				None():           ruDoScCommTasks(acc, pos);
				Some(neg):        ruDoScCommTasks(ruDoScCommTasks(acc, pos), neg);
			}
		}
		ScWhile(cond, script):    ruDoScCommTasks(acc, script);
		ScOutput(__,__):          acc;
		ScTask(comm, args):       concat(acc, [s]);
		ScAction(__,__):          acc;
	}
}

ruScCommSetTasksFile(script : ScComm, file : string) -> ScComm {
	set_file = \s -> ruScCommSetTasksFile(s, file);
	switch (script) {
		ScCommSeq(seq):           ScCommSeq(map(seq, set_file));
		ScAssign(__,__):          script;
		ScIf(cond, pos, neg):     ScIf(cond, set_file(pos), maybeMap(neg, set_file));
		ScWhile(cond, s):         ScWhile(cond, set_file(s));
		ScOutput(__,__):          script;
		ScTask(comm, args):       ScTask(comm, concat(args, [ScTaskArg("file", ScString(file))]));
		ScAction(__,__):          script;
	}
}

ruSetScCommTaskArg(script : ScComm, key : string, val : string) -> ScComm {
	rec_set = \s -> ruSetScCommTaskArg(s, key, val);
	switch (script) {
		ScCommSeq(seq):            ScCommSeq(map(seq, rec_set));
		ScAssign(__,__):       script;
		ScIf(cond, pos, neg):  ScIf(cond, rec_set(pos), maybeMap(neg, rec_set));
		ScWhile(cond, s):      ScWhile(cond, rec_set(s));
		ScOutput(__,__):       script;
		ScTask(comm, args):    ScTask(comm, ruScTaskSetArg(args, key, ScString(val)));
		ScAction(__,__):       script;
	}
}

ruScExpVars(acc : Set<string>, e : ScExp) -> Set<string> {
	switch (e) {
		ScInfixOp(ex, args): 
			fold(args, ruScExpVars(acc, ex), \ac, arg -> ruScExpVars(ac, arg.exp));
		ScPrefixOp(op, ex): ruScExpVars(acc, ex);
		ScCall(fn, args): 
			fold(args, ruScExpVars(acc, fn), ruScExpVars);
		ScCond(cond, pos, neg): 
			fold([cond, pos, neg], acc, ruScExpVars);
		ScLet(var, ex, scope):
			removeSet(ruScExpVars(acc, scope), var);
		ScIndex(ex, ind):
			ruScExpVars(ruScExpVars(acc, ex), ind);
		ScLambda(args, body):
			filterSet(ruScExpVars(acc, body), \v -> findiDef(args, \arg -> arg == v, -1) == -1);
		ScArray(arr):
			fold(arr, acc ,ruScExpVars);
		ScMap(pairs):
			fold(pairs, acc, \ac, p -> ruScExpVars(ruScExpVars(ac, p.first), p.second));
		ScField(ex, __):
			ruScExpVars(acc, ex);
		ScStruct(name, args): 
			fold(args, acc, ruScExpVars);
		ScQuote(ex):
			ruScExpVars(acc, ex);
		ScEval(ex):
			ruScExpVars(acc, ex);
		ScUndef():     acc;
		ScBool(val):   acc;
		ScInt(val):    acc;
		ScDouble(val): acc;
		ScString(val): acc;
		ScVar(var,__):      insertSet(acc, var);
		ScExpSeq(seq):      fold(seq, acc ,ruScExpVars);
	}
}

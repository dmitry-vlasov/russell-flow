import lingo/pegcode/driver;
import base/util/parse;
import base/util/str;
import script/types/type_gens;

export {
	ScCommWDocs(comm : ScComm, docs : string);

	ScComm ::= ScSeq, ScAssign, ScDefine, ScIf, ScWhile, ScOutput, ScTask, ScAction;
		ScSeq(seq : [ScComm]);
		ScDefine(var : string, type : ScType, exp : ScExp);
		ScAssign(var : string, exp : ScExp);
		ScIf(cond : ScExp, pos : ScComm, neg : Maybe<ScComm>);
		ScWhile(cond : ScExp, script : ScComm);
		ScOutput(mode : string, exp : ScExp);
		ScTask(command : string, args : Tree<string, string>);
		ScAction(action : string);

	ScExp ::= ScInfixOp, ScPrefixOp, ScCall, ScCond, ScIndex, ScLambda, 
		ScUndefConst, ScBoolConst, ScIntConst, ScDoubleConst, ScStringConst, ScVar;
		ScInfixOp(exp : ScExp, args : [ScInfixArg]);
			ScInfixArg(op : string, exp : ScExp);
		ScPrefixOp(op : string, exp : ScExp);
		ScCall(fn : ScExp, args : [ScExp]);
		ScCond(cond : ScExp, pos : ScExp, neg : ScExp);
		ScIndex(ex : ScExp, ind : ScExp);
		ScLambda(args : [ScVar], body : ScExp);
	
		ScUndefConst();
		ScBoolConst(val : bool);
		ScIntConst(val : int);
		ScDoubleConst(val : double);
		ScStringConst(val : string);
		ScVar(var : string);

	ruParseScComm(str : string) -> Maybe<ScCommWDocs>;
	ruScComm2Json(script : ScComm) -> Json;
	ruJson2ScComm(json : Json) -> Maybe<ScComm>;

	ruScComm2s(script : ScComm) -> string;
	ruScExp2s(e : ScExp) -> string;
	ruScCommTasks(script : ScComm) -> [ScTask];
	ruScCommSetTasksFile(script : ScComm, file : string) -> ScComm;

	ruTask2s(task : ScTask) -> string;
	ruTask2Json(task : ScTask) -> Json;
	ruJson2Task(json : Json) -> Maybe<ScTask>;
	ruSetNoLogging(task : ScTask) -> ScTask;

	ruSetScCommTaskArg(script : ScComm, key : string, val : string) -> ScComm;

	ruScExpVars(acc : Set<string>, e : ScExp) -> Set<string>;
}

ruMakeScTask(as : [flow]) -> ScTask {
	ScTask(as[0], 
		pairs2tree(map(
			filtermap(
				ruSplitTaskArgs(flow2s(as[1]), 0, RuSplitTaskArgsAcc([], "", false)), 
				\s0 -> {
					s = trim2(s0, " \n\t\r");
					if (s == "" || s == "do_not_log_this") None() else Some(s);
				}
			),
			\s -> {
				sp = strSplit(s, "=");
				if (length(sp) == 1) Pair(s, "") else Pair(sp[0], sp[1]);
			}
		))
	);
}

RuSplitTaskArgsAcc(
	args : [string],
	curr : string,
	inString : bool
);

ruSplitTaskArgs(args : string, i : int, acc : RuSplitTaskArgsAcc) -> [string] {
	if (i == strlen(args)) {
		if (acc.curr == "") acc.args else concat(acc.args, [acc.curr]);
	} else {
		ch = getCharAt(args, i);
		if (acc.inString) {
			if (ch == "\"" && (i == 0 || (i > 0 && getCharAt(args, i - 1) != "\\"))) {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with inString = false, curr = acc.curr + ch)
				);
			} else {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with curr = acc.curr + ch)
				);
			}
		} else {
			if (ch == "\"") {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with inString = true, curr = acc.curr + ch)
				);
			} else if (ch == " " || ch == "\t" || ch == "\n" || ch == "\r") {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with args = concat(acc.args, [acc.curr]), curr = "")
				);
			} else {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with curr = acc.curr + ch)
				);
			}
		}
	}
}

ruMakeScComm(as : [flow]) -> ScComm {
	s1 = cast(as[0] : flow -> ScComm);
	s2 = cast(as[1] : flow -> ScSeq);
	if (length(s2.seq) == 0) s1 else { 
		ScSeq(concat([s1], s2.seq));
	}
}

ru_script_parser = compilePegGrammar("#include script/script.lingo");
ru_script_actions = SemanticActions(mergeTree(defaultPegActions.t, 
	pairs2tree([
		Pair("makeScTask", ruMakeScTask),
		Pair("makeScComm", ruMakeScComm),
		Pair("makeScIf", \s -> ScIf(s[0], s[1], None())),
		Pair("makeScIfElse", \s -> ScIf(s[0], s[1], Some(s[2]))),
		Pair("makeScOutput", \s -> ScOutput("output", s[0])),
		Pair("makeScPrint", \s -> ScOutput("print", s[0])),
		Pair("makeScBoolConst", \s -> ScBoolConst(s[0] == "true")),
		Pair("makeEmptySeq",  \__ -> ScSeq([])),
		Pair("makeTypeConst", \s -> scConstType(flow2s(s[0]))),
		Pair("makeTypeArray", \s -> scArrayType(s[0])),
		Pair("makeTypeFn",    \s -> scFuncType(s[0], s[1])),
		Pair("makeTypeInfix", \s ->
			ScTypeGen(s[0], concat([s[1], s[2]], cast(s[3] : flow -> [flow])))
		),
		Pair("makeTypePrefix", \s -> ScTypeGen(s[0], s[1]))
	])
));

ruParseScComm(str : string) -> Maybe<ScCommWDocs> {
	comms = ref [];
	actions = SemanticActions(
		setTree(ru_script_actions.t, "makeDocComment", \s -> { refArrayPush(comms, s[0]); 0})
	);
	ret1 = ruParsic(ru_script_parser, str, actions);
	if (ret1 == "PARSING FAILED") {
		ret2 = ruParsic(ru_script_parser, str + ";", actions);
		if (ret2 == "PARSING FAILED") {
			None();
		} else {
			Some(ScCommWDocs(ret2, concatStrings(^comms)));
		}
	} else {
		//println("PARSED SCRIPT:\n" + ruScComm2s(ret1));
		Some(ScCommWDocs(ret1, concatStrings(^comms)));
	}
}

ruScComm2Json(j : ScComm) -> Json {
	switch (j) {
		ScSeq(seq): {
			JsonObject([
				Pair("struct", JsonString("ScSeq")),
				Pair("seq", JsonArray(map(seq, ruScComm2Json)))
			]);
		}
		ScAssign(var, val): {
			JsonObject([
				Pair("struct", JsonString("ScAssign")),
				Pair("var", JsonString(var)),
				Pair("exp", ruScExp2Json(val))
			]);
		}
		ScDefine(var, type, val): {
			JsonObject([
				Pair("struct", JsonString("ScDefine")),
				Pair("var", JsonString(var)),
				Pair("type", scType2Json(type)),
				Pair("exp", ruScExp2Json(val))
			]);
		}
		ScIf(cond, pos, mneg): {
			JsonObject(filtermap([
				Some(Pair("struct", JsonString("ScIf"))),
				Some(Pair("cond", ruScExp2Json(cond))),
				Some(Pair("pos", ruScComm2Json(pos))),
				maybeMap(mneg, \neg -> Pair("neg", ruScComm2Json(neg)))
			], idfn));
		}
		ScWhile(cond, script): {
			JsonObject([
				Pair("struct", JsonString("ScWhile")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("script", ruScComm2Json(script)),
			]);
		}
		ScOutput(mode, ex): {
			JsonObject([
				Pair("struct", JsonString("ScOutput")),
				Pair("mode", JsonString(mode)),
				Pair("exp", ruScExp2Json(ex)),
			]);
		}
		ScTask(comm, args): {
			JsonObject([
				Pair("struct", JsonString("ScTask")),
				Pair("command", JsonString(comm)),
				Pair("args", JsonArray(map(tree2pairs(args), 
					\arg -> JsonObject([
						Pair("var", JsonString(arg.first)),
						Pair("value", JsonString(arg.second))
					])
				)))
			]);
		}
		ScAction(action): {
			JsonObject([
				Pair("struct", JsonString("ScAction")),
				Pair("action", JsonString(action)),
			]);
		}
	}
}

ruScExp2Json(e : ScExp) -> Json {
	switch (e) {
		ScInfixOp(ex, args): {
			JsonObject([
				Pair("struct", JsonString("ScInfixOp")),
				Pair("exp", ruScExp2Json(ex)),
				Pair("args", JsonArray(map(args, \arg -> 
					JsonObject([
						Pair("op", JsonString(arg.op)),
						Pair("exp", ruScExp2Json(arg.exp))
					])
				)))
			]);
		}
		ScPrefixOp(op, ex): {
			JsonObject([
				Pair("struct", JsonString("ScPrefixOp")),
				Pair("op", JsonString(op)),
				Pair("exp", ruScExp2Json(ex))
			]);
		}
		ScCall(fn, args): {
			JsonObject([
				Pair("struct", JsonString("ScCall")),
				Pair("fn", ruScExp2Json(fn)),
				Pair("args", JsonArray(map(args, ruScExp2Json)))
			]);
		}
		ScCond(cond, pos, neg): {
			JsonObject([
				Pair("struct", JsonString("ScCond")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("pos", ruScExp2Json(pos)),
				Pair("neg", ruScExp2Json(neg))
			]);
		}
		ScIndex(ex, ind): {
			JsonObject([
				Pair("struct", JsonString("ScIndex")),
				Pair("ex", ruScExp2Json(ex)),
				Pair("ind", ruScExp2Json(ind))
			]);
		}
		ScLambda(args, body): {
			JsonObject([
				Pair("struct", JsonString("ScLambda")),
				Pair("args", JsonArray(map(args, ruScExp2Json))),
				Pair("body", ruScExp2Json(body))
			]);
		}
		ScUndefConst(): {
			JsonObject([
				Pair("struct", JsonString("ScUndefConst"))
			]);
		}
		ScBoolConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScBoolConst")),
				Pair("val", JsonBool(val))
			]);
		}
		ScIntConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScIntConst")),
				Pair("val", JsonDouble(i2d(val)))
			]);
		}
		ScDoubleConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScIntConst")),
				Pair("val", JsonDouble(val))
			]);
		}
		ScStringConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScStringConst")),
				Pair("val", JsonString(val))
			]);
		}
		ScVar(var): {
			JsonObject([
				Pair("struct", JsonString("ScVar")),
				Pair("var", JsonString(var))
			]);
		}
	}
}

ruJson2ScComm(json : Json) -> Maybe<ScComm> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScSeq") {
		json_seq = getJsonArrayField(json, "seq");
		seq = filtermap(json_seq, ruJson2ScComm);
		if (length(json_seq) == length(seq)) {
			Some(ScSeq(seq));
		} else {
			None();
		}
	} else 
	if (struct == "ScAssign") {
		var = getJsonStringField(json, "var", "");
		if (var == "") None() else {
			json_val = getJsonFieldValue(json, "exp", JsonNull());
			maybeMap(
				ruJson2ScExp(json_val),
				\val -> ScAssign(var, val)
			);
		}
	} else 
	if (struct == "ScDefine") {
		var = getJsonStringField(json, "var", "");
		if (var == "") None() else {
			json_type = getJsonFieldValue(json, "type", JsonNull());
			json_val = getJsonFieldValue(json, "exp", JsonNull());
			maybeMap2(\type, val -> ScDefine(var, type, val))(
				ruJson2ScType(json_type),
				ruJson2ScExp(json_val)
			);
		}
	} else
	if (struct == "ScIf") {
		neg = if (!jsonObjectHasField(json, "neg")) None() else {
			ruJson2ScComm(getJsonFieldValue(json, "neg", JsonNull()));
		}
		maybeMap2(\cond, pos -> ScIf(cond, pos, neg))(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			ruJson2ScComm(getJsonFieldValue(json, "pos", JsonNull()))
		);
	} else 
	if (struct == "ScWhile") {
		maybeMap2(\cond, script -> ScWhile(cond, script))(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			ruJson2ScComm(getJsonFieldValue(json, "script", JsonNull()))
		);
	} else 
	if (struct == "ScOutput") {
		mode = getJsonStringField(json, "mode", "");
		if (mode == "") None() else {
			maybeMap(
				ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
				\ex -> ScOutput(mode, ex)
			);
		}
	} else 
	if (struct == "ScTask") {
		comm = getJsonStringField(json, "command", "");
		if (comm == "") None() else {
			json_args = getJsonArrayField(json, "args");
			args = filtermap(getJsonArrayField(json, "args"), \opt -> {
				var = getJsonStringField(opt, "var", "");
				if (var == "") None() else {
					Some(Pair(var, getJsonStringField(opt, "value", "")))
				}
			});
			if (length(json_args) != length(args)) None() else {
				Some(ScTask(comm, pairs2tree(args)));
			}
		}
	} else if (struct == "ScAction") {
		action = getJsonStringField(json, "action", "");
		if (action == "") None() else {
			Some(ScAction(action));
		}
	} else {
		None();
	}
}

ruJson2ScExp(json : Json) -> Maybe<ScExp> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScInfixOp") {
		maybeBind(
			ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\exp -> {
				json_args = getJsonArrayField(json, "args");
				if (json_args == []) None() else {
					args = filtermap(json_args, \arg -> {
						op = getJsonStringField(arg, "op", "");
						if (op == "") None() else {
							maybeMap(
								ruJson2ScExp(getJsonFieldValue(arg, "exp", JsonNull())),
								\ex -> ScInfixArg(op, ex)
							);
						}
					});
					if (length(args) != length(json_args)) None() else {
						Some(ScInfixOp(exp, args));
					}
				}
			}
		);
	} else 
	if (struct == "ScPrefixOp") {
		op = getJsonStringField(json, "op", "");
		if (op == "") None() else {
			maybeMap(
				ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())), 
				\ex -> ScPrefixOp(op, ex)
			);
		} 
	} else 
	if (struct == "ScCall") {
		fn_json = getJsonFieldValue(json, "fn", JsonNull());
		if (fn_json == JsonNull()) None() else {
			maybeBind(ruJson2ScExp(fn_json), 
				\fn -> if (!jsonObjectHasField(json, "args")) None() else {
					json_args = getJsonArrayField(json, "args");
					args = filtermap(json_args, ruJson2ScExp);
					if (length(args) != length(json_args)) None() else {
						Some(ScCall(fn, args));
					}
				}
			);
		}
	} else 
	if (struct == "ScCond") {
		cond_json = getJsonFieldValue(json, "cond", JsonNull());
		pos_json = getJsonFieldValue(json, "pos", JsonNull());
		neg_json = getJsonFieldValue(json, "neg", JsonNull());
		if (cond_json == JsonNull() || pos_json == JsonNull() || neg_json == JsonNull()) None() else {
			maybeBind(ruJson2ScExp(cond_json), 
				\cond -> maybeMap2(\pos, neg -> ScCond(cond, pos, neg))
				(ruJson2ScExp(pos_json), ruJson2ScExp(neg_json))
			);
		}
	} else 
	if (struct == "ScIndex") {
		ex = getJsonFieldValue(json, "ex", JsonNull());
		if (ex == JsonNull()) None() else {
			if (!jsonObjectHasField(json, "ind")) None() else {
				ind = getJsonFieldValue(json, "ind", JsonNull());
				maybeMap2(\e, i -> ScIndex(e, i))(ruJson2ScExp(ex), ruJson2ScExp(ind));
			}
		}
	} else 
	if (struct == "ScLambda") {
		body_json = getJsonFieldValue(json, "body", JsonNull());
		if (body_json == JsonNull()) None() else {
			if (!jsonObjectHasField(json, "args")) None() else {
				args_json = getJsonArrayField(json, "args");
				args = filtermap(args_json, \arg_json -> 
					maybeBind(ruJson2ScExp(arg_json), \arg -> 
						switch (arg) {
							ScVar(__): Some(arg);
							default: None();
						}
					)
				);
				if (length(args) != length(args_json)) None() else {
					maybeMap(ruJson2ScExp(body_json), \body -> ScLambda(args, body));
				}
			}
		}
	} else 
	if (struct == "ScUndefConst") {
		Some(ScUndefConst());
	} else 
	if (struct == "ScBoolConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonBoolField(json, "val", false);
			Some(ScBoolConst(val));
		} 
	} else 
	if (struct == "ScIntConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonDoubleField(json, "val", 0.0);
			Some(ScIntConst(round(val)));
		} 
	} else 
	if (struct == "ScDoubleConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonDoubleField(json, "val", 0.0);
			Some(ScDoubleConst(val));
		} 
	} else 
	if (struct == "ScStringConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonStringField(json, "val", "");
			Some(ScStringConst(val));
		} 
	} else 
	if (struct == "ScVar") {
		if (!jsonObjectHasField(json, "var")) None() else {
			var = getJsonStringField(json, "var", "");
			Some(ScVar(var));
		} 
	} else {
		None();
	}
}

ruScComm2s(s : ScComm) -> string {
	switch (s) {
		ScSeq(seq): 
			strGlue(map(seq, ruScComm2s), "\n");
		ScDefine(var, type, val): 
			var + " : " + scType2s(type) + " = " + ruScExp2s(val) + ";";
		ScAssign(var, val): 
			var + " := " + ruScExp2s(val) + ";";
		ScIf(cond, pos, mneg): {
			"if " + ruScExp2s(cond) + " {\n" + strIndent(ruScComm2s(pos)) + "\n}" + 
			eitherMap(mneg, \neg -> " else {\n" + strIndent(ruScComm2s(neg)) + "\n}", "");
		}
		ScWhile(cond, script): 
			"while " + ruScExp2s(cond) + " {\n" + strIndent(ruScComm2s(script)) + "\n}";
		ScOutput(mode, ex): 
			mode + " " + ruScExp2s(ex) + ";";
		ScTask(comm, args): 
			ruTask2s(s);
		ScAction(action): 
			action;
	}
}

ruScExp2s(e : ScExp) -> string {
	switch (e) {
		ScInfixOp(ex, args): 
			"(" + ruScExp2s(ex) + concatStrings(map(args, \arg -> " " + arg.op + " " + ruScExp2s(arg.exp))) + ")";
		ScPrefixOp(op, ex): op + ruScExp2s(ex);
		ScCall(fn, args): 
			ruScExp2s(fn) + "(" + strGlue(map(args, ruScExp2s),", ") + ")";
		ScCond(cond, pos, neg): 
			"(" + ruScExp2s(cond) + "?" + ruScExp2s(pos) + ":" + ruScExp2s(neg) + ")";
		ScIndex(ex, ind): 
			ruScExp2s(ex) + "[" + ruScExp2s(ind) + "]";
		ScLambda(args, body): 
			"\\" + superglue(args, ruScExp2s, ", ") + "->" + ruScExp2s(body);
		ScUndefConst():     "undef";
		ScBoolConst(val):   b2s(val);
		ScIntConst(val):    i2s(val);
		ScDoubleConst(val): d2s(val);
		ScStringConst(val): "\"" + val + "\"";
		ScVar(var):         var;
	}
}

ruScCommTasks(s : ScComm) -> [ScTask] {
	ruDoScCommTasks([], s);
}

ruDoScCommTasks(acc : [ScTask], s : ScComm) -> [ScTask] {
	switch (s) {
		ScSeq(seq):               fold(seq, acc, ruDoScCommTasks);
		ScAssign(__,__):          acc;
		ScDefine(__,__,__):       acc;
		ScIf(cond, pos, mneg):    {
			switch (mneg) {
				None():           ruDoScCommTasks(acc, pos);
				Some(neg):        ruDoScCommTasks(ruDoScCommTasks(acc, pos), neg);
			}
		}
		ScWhile(cond, script):    ruDoScCommTasks(acc, script);
		ScOutput(__,__):          acc;
		ScTask(comm, args):       concat(acc, [s]);
		ScAction(__):             acc;
	}
}

ruScCommSetTasksFile(script : ScComm, file : string) -> ScComm {
	set_file = \s -> ruScCommSetTasksFile(s, file);
	switch (script) {
		ScSeq(seq):               ScSeq(map(seq, set_file));
		ScAssign(__,__):          script;
		ScDefine(__,__,__):       script;
		ScIf(cond, pos, neg):     ScIf(cond, set_file(pos), maybeMap(neg, set_file));
		ScWhile(cond, s):         ScWhile(cond, set_file(s));
		ScOutput(__,__):          script;
		ScTask(comm, args):       ScTask(comm, setTree(args, "file", file));
		ScAction(__):             script;
	}
}


ruTask2Json(task : ScTask) -> Json {
	JsonObject([
		Pair("command", JsonString(task.command)),
		Pair("args", JsonArray(map(tree2pairs(task.args), 
			\arg -> JsonObject([
				Pair("key", JsonString(arg.first)),
				Pair("value", JsonString(arg.second))
			])
		)))
	]);
}

ruJson2Task(json : Json) -> Maybe<ScTask> {
	if (exists(["command", "args"], \field -> !jsonObjectHasField(json, field))) None() else {
		Some(ScTask(
			getJsonStringField(json, "command", ""),
			pairs2tree(map(getJsonArrayField(json, "args"), 
				\opt -> Pair(getJsonStringField(opt, "key", ""), getJsonStringField(opt, "value", ""))
			))
		));
	}
}

ruTask2s(task : ScTask) -> string {
	task.command + " " + 
	strGlue(map(tree2pairs(task.args), \p -> 
		if (p.second == "") p.first else p.first + "=" + ruCutLongStringUpTo(p.second, 256)
	), " ") + ";";
}

ruSetNoLogging(task : ScTask) -> ScTask {
	ScTask(task with args = setTree(task.args, "do_not_log_this", ""));
}

ruSetScCommTaskArg(script : ScComm, key : string, val : string) -> ScComm {
	rec_set = \s -> ruSetScCommTaskArg(s, key, val);
	switch (script) {
		ScSeq(seq): 
			ScSeq(map(seq, rec_set));
		ScAssign(__,__): 
			script;
		ScDefine(__,__,__): 
			script;
		ScIf(cond, pos, neg): 
			ScIf(cond, rec_set(pos), maybeMap(neg, rec_set));
		ScWhile(cond, s):
			ScWhile(cond, rec_set(s));
		ScOutput(__,__):
			script;
		ScTask(comm, args): 
			ScTask(comm, setTree(args, key, val));
		ScAction(__):
			script;
	}
}

ruScExpVars(acc : Set<string>, e : ScExp) -> Set<string> {
	switch (e) {
		ScInfixOp(ex, args): 
			fold(args, ruScExpVars(acc, ex), \ac, arg -> ruScExpVars(ac, arg.exp));
		ScPrefixOp(op, ex): ruScExpVars(acc, ex);
		ScCall(fn, args): 
			fold(args, ruScExpVars(acc, fn), ruScExpVars);
		ScCond(cond, pos, neg): 
			fold([cond, pos, neg], acc, ruScExpVars);
		ScIndex(ex, ind):
			ruScExpVars(ruScExpVars(acc, ex), ind);
		ScLambda(args, body): {
			filterSet(ruScExpVars(acc, body), \v -> findiDef(args, \arg -> arg.var == v, -1) == -1);
		}
		ScUndefConst():     acc;
		ScBoolConst(val):   acc;
		ScIntConst(val):    acc;
		ScDoubleConst(val): acc;
		ScStringConst(val): acc;
		ScVar(var):         insertSet(acc, var);
	}
}
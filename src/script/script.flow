import lingo/pegcode/driver;
import base/util/parse;
import base/util/str;


export {
	ScScriptWDocs(script : ScScript, docs : string);

	ScScript ::= ScSeq, ScAssign, ScIf, ScIfElse, ScWhile, ScPrint, ScTask, ScExit;
		ScSeq(seq : [ScScript]);
		ScAssign(var : string, exp : ScExp);
		ScIf(cond : ScExp, script : ScScript);
		ScIfElse(cond : ScExp, pos : ScScript, neg : ScScript);
		ScWhile(cond : ScExp, script : ScScript);
		ScPrint(exp : ScExp);
		ScTask(command : string, args : Tree<string, string>);
		ScExit();

	ScExp ::= ScInfixOp, ScPrefixOp, ScFunc, ScIndex, ScUndefConst,
		ScBoolConst, ScIntConst, ScDoubleConst, ScStringConst, ScVar;
		ScInfixOp(exp : ScExp, args : [ScInfixArg]);
			ScInfixArg(op : string, exp : ScExp);
		ScPrefixOp(op : string, exp : ScExp);
		ScFunc(fn : string, args : [ScExp]);
		ScIndex(ex : ScExp, ind : ScExp);
	
		ScUndefConst();
		ScBoolConst(val : bool);
		ScIntConst(val : int);
		ScDoubleConst(val : double);
		ScStringConst(val : string);
		ScVar(var : string);

	ruParseScript(str : string) -> Maybe<ScScriptWDocs>;
	ruScript2Json(script : ScScript) -> Json;
	ruJson2Script(json : Json) -> Maybe<ScScript>;

	ruScript2s(script : ScScript) -> string;
	ruScExp2s(e : ScExp) -> string;
	ruScriptTasks(script : ScScript) -> [ScTask];
	ruScriptSetTasksFile(script : ScScript, file : string) -> ScScript;

	ruTask2s(task : ScTask) -> string;
	ruTask2Json(task : ScTask) -> Json;
	ruJson2Task(json : Json) -> Maybe<ScTask>;
	ruSetNoLogging(task : ScTask) -> ScTask;

	ruSetScriptTaskArg(script : ScScript, key : string, val : string) -> ScScript;
}

ruMakeScTask(as : [flow]) -> ScTask {
	ScTask(as[0], 
		pairs2tree(map(
			filtermap(
				ruSplitTaskArgs(flow2s(as[1]), 0, RuSplitTaskArgsAcc([], "", false)), 
				\s0 -> {
					s = trim2(s0, " \n\t\r");
					if (s == "" || s == "do_not_log_this") None() else Some(s);
				}
			),
			\s -> {
				sp = strSplit(s, "=");
				if (length(sp) == 1) Pair(s, "") else Pair(sp[0], sp[1]);
			}
		))
	);
}

RuSplitTaskArgsAcc(
	args : [string],
	curr : string,
	inString : bool
);

ruSplitTaskArgs(args : string, i : int, acc : RuSplitTaskArgsAcc) -> [string] {
	if (i == strlen(args)) {
		if (acc.curr == "") acc.args else concat(acc.args, [acc.curr]);
	} else {
		ch = getCharAt(args, i);
		if (acc.inString) {
			if (ch == "\"" && (i == 0 || (i > 0 && getCharAt(args, i - 1) != "\\"))) {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with inString = false, curr = acc.curr + ch)
				);
			} else {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with curr = acc.curr + ch)
				);
			}
		} else {
			if (ch == "\"") {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with inString = true, curr = acc.curr + ch)
				);
			} else if (ch == " " || ch == "\t" || ch == "\n" || ch == "\r") {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with args = concat(acc.args, [acc.curr]), curr = "")
				);
			} else {
				ruSplitTaskArgs(args, i + 1, 
					RuSplitTaskArgsAcc(acc with curr = acc.curr + ch)
				);
			}
		}
	}
}

ruMakeScScript(as : [flow]) -> ScScript {
	s1 = cast(as[0] : flow -> ScScript);
	s2 = cast(as[1] : flow -> ScSeq);
	if (length(s2.seq) == 0) s1 else { 
		ScSeq(concat([s1], s2.seq));
	}
}

ru_script_parser = compilePegGrammar("#include script/script.lingo");
ru_script_actions = SemanticActions(mergeTree(defaultPegActions.t, 
	pairs2tree([
		Pair("makeScTask", ruMakeScTask),
		Pair("makeScScript", ruMakeScScript),
		Pair("makeScBoolConst", \s -> ScBoolConst(s[0] == "true")),
		Pair("makeEmptySeq", \__ -> ScSeq([]))
	])
));

ruParseScript(str : string) -> Maybe<ScScriptWDocs> {
	comms = ref [];
	actions = SemanticActions(
		setTree(ru_script_actions.t, "makeDocComment", \s -> { refArrayPush(comms, s[0]); 0})
	);
	ret1 = ruParsic(ru_script_parser, str, actions);
	if (ret1 == "PARSING FAILED") {
		ret2 = ruParsic(ru_script_parser, str + ";", actions);
		if (ret2 == "PARSING FAILED") {
			None();
		} else {
			Some(ScScriptWDocs(ret2, concatStrings(^comms)));
		}
	} else {
		Some(ScScriptWDocs(ret1, concatStrings(^comms)));
	}
}

ruScript2Json(j : ScScript) -> Json {
	switch (j) {
		ScSeq(seq): {
			JsonObject([
				Pair("struct", JsonString("ScSeq")),
				Pair("seq", JsonArray(map(seq, ruScript2Json)))
			]);
		}
		ScAssign(var, val): {
			JsonObject([
				Pair("struct", JsonString("ScAssign")),
				Pair("var", JsonString(var)),
				Pair("exp", ruScExp2Json(val))
			]);
		}
		ScIf(cond, script): {
			JsonObject([
				Pair("struct", JsonString("ScIf")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("pos", ruScript2Json(script)),
			]);
		}
		ScIfElse(cond, pos, neg): {
			JsonObject([
				Pair("struct", JsonString("ScIf")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("pos", ruScript2Json(pos)),
				Pair("neg", ruScript2Json(neg)),
			]);
		}
		ScWhile(cond, script): {
			JsonObject([
				Pair("struct", JsonString("ScWhile")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("script", ruScript2Json(script)),
			]);
		}
		ScPrint(ex): {
			JsonObject([
				Pair("struct", JsonString("ScPrint")),
				Pair("exp", ruScExp2Json(ex)),
			]);
		}
		ScTask(comm, args): {
			JsonObject([
				Pair("struct", JsonString("ScTask")),
				Pair("command", JsonString(comm)),
				Pair("args", JsonArray(map(tree2pairs(args), 
					\arg -> JsonObject([
						Pair("var", JsonString(arg.first)),
						Pair("value", JsonString(arg.second))
					])
				)))
			]);
		}
		ScExit(): {
			JsonObject([
				Pair("struct", JsonString("ScExit")),
			]);
		}
	}
}

ruScExp2Json(e : ScExp) -> Json {
	switch (e) {
		ScInfixOp(ex, args): {
			JsonObject([
				Pair("struct", JsonString("ScInfixOp")),
				Pair("exp", ruScExp2Json(ex)),
				Pair("args", JsonArray(map(args, \arg -> 
					JsonObject([
						Pair("op", JsonString(arg.op)),
						Pair("exp", ruScExp2Json(arg.exp))
					])
				)))
			]);
		}
		ScPrefixOp(op, ex): {
			JsonObject([
				Pair("struct", JsonString("ScPrefixOp")),
				Pair("op", JsonString(op)),
				Pair("exp", ruScExp2Json(ex))
			]);
		}
		ScFunc(fn, args): {
			JsonObject([
				Pair("struct", JsonString("ScFunc")),
				Pair("fn", JsonString(fn)),
				Pair("args", JsonArray(map(args, ruScExp2Json)))
			]);
		}
		ScIndex(ex, ind): {
			JsonObject([
				Pair("struct", JsonString("ScIndex")),
				Pair("ex", ruScExp2Json(ex)),
				Pair("ind", ruScExp2Json(ind))
			]);
		}
		ScUndefConst(): {
			JsonObject([
				Pair("struct", JsonString("ScUndefConst"))
			]);
		}
		ScBoolConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScBoolConst")),
				Pair("val", JsonBool(val))
			]);
		}
		ScIntConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScIntConst")),
				Pair("val", JsonDouble(i2d(val)))
			]);
		}
		ScDoubleConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScIntConst")),
				Pair("val", JsonDouble(val))
			]);
		}
		ScStringConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScStringConst")),
				Pair("val", JsonString(val))
			]);
		}
		ScVar(var): {
			JsonObject([
				Pair("struct", JsonString("ScVar")),
				Pair("var", JsonString(var))
			]);
		}
	}
}

ruJson2Script(json : Json) -> Maybe<ScScript> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScSeq") {
		json_seq = getJsonArrayField(json, "seq");
		seq = filtermap(getJsonArrayField(json, "seq"), ruJson2Script);
		if (length(json_seq) == length(seq)) {
			Some(ScSeq(seq));
		} else {
			None();
		}
	} else 
	if (struct == "ScAssign") {
		var = getJsonStringField(json, "var", "");
		if (var == "") None() else {
			json_val = getJsonFieldValue(json, "exp", JsonNull());
			maybeMap(
				ruJson2ScExp(json_val),
				\val -> ScAssign(var, val)
			);
		}
	} else 
	if (struct == "ScIf") {
		maybeMap2(\cond, script -> ScIf(cond, script))(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			ruJson2Script(getJsonFieldValue(json, "script", JsonNull()))
		);
	} else 
	if (struct == "ScIfElse") {
		maybeBind(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			\cond -> maybeMap2(\pos, neg -> ScIfElse(cond, pos, neg))
			(
				ruJson2Script(getJsonFieldValue(json, "pos", JsonNull())),
				ruJson2Script(getJsonFieldValue(json, "neg", JsonNull()))
			)
		);
	} else 
	if (struct == "ScWhile") {
		maybeMap2(\cond, script -> ScWhile(cond, script))(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			ruJson2Script(getJsonFieldValue(json, "script", JsonNull()))
		);
	} else 
	if (struct == "ScPrint") {
		maybeMap(
			ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\ex -> ScPrint(ex)
		);
	} else 
	if (struct == "ScTask") {
		comm = getJsonStringField(json, "command", "");
		if (comm == "") None() else {
			json_args = getJsonArrayField(json, "args");
			args = filtermap(getJsonArrayField(json, "args"), \opt -> {
				var = getJsonStringField(opt, "var", "");
				if (var == "") None() else {
					Some(Pair(var, getJsonStringField(opt, "value", "")))
				}
			});
			if (length(json_args) != length(args)) None() else {
				Some(ScTask(comm, pairs2tree(args)));
			}
		}
	} else if (struct == "ScExit") {
		Some(ScExit());
	} else {
		None();
	}
}

ruJson2ScExp(json : Json) -> Maybe<ScExp> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScInfixOp") {
		maybeBind(
			ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\exp -> {
				json_args = getJsonArrayField(json, "args");
				if (json_args == []) None() else {
					args = filtermap(json_args, \arg -> {
						op = getJsonStringField(arg, "op", "");
						if (op == "") None() else {
							maybeMap(
								ruJson2ScExp(getJsonFieldValue(arg, "exp", JsonNull())),
								\ex -> ScInfixArg(op, ex)
							);
						}
					});
					if (length(args) != length(json_args)) None() else {
						Some(ScInfixOp(exp, args));
					}
				}
			}
		);
	} else 
	if (struct == "ScPrefixOp") {
		op = getJsonStringField(json, "op", "");
		if (op == "") None() else {
			maybeMap(
				ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())), 
				\ex -> ScPrefixOp(op, ex)
			);
		} 
	} else 
	if (struct == "ScFunc") {
		fn = getJsonStringField(json, "fn", "");
		if (fn == "") None() else {
			if (!jsonObjectHasField(json, "args")) None() else {
				json_args = getJsonArrayField(json, "args");
				args = filtermap(json_args, ruJson2ScExp);
				if (length(args) != length(json_args)) None() else {
					Some(ScFunc(fn, args));
				}
			}
		}
	} else 
	if (struct == "ScIndex") {
		ex = getJsonFieldValue(json, "ex", JsonNull());
		if (ex == JsonNull()) None() else {
			if (!jsonObjectHasField(json, "ind")) None() else {
				ind = getJsonFieldValue(json, "ind", JsonNull());
				maybeMap2(\e, i -> ScIndex(e, i))(ruJson2ScExp(ex), ruJson2ScExp(ind));
			}
		}
	} else 
	if (struct == "ScUndefConst") {
		Some(ScUndefConst());
	} else 
	if (struct == "ScBoolConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonBoolField(json, "val", false);
			Some(ScBoolConst(val));
		} 
	} else 
	if (struct == "ScIntConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonDoubleField(json, "val", 0.0);
			Some(ScIntConst(round(val)));
		} 
	} else 
	if (struct == "ScDoubleConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonDoubleField(json, "val", 0.0);
			Some(ScDoubleConst(val));
		} 
	} else 
	if (struct == "ScStringConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonStringField(json, "val", "");
			Some(ScStringConst(val));
		} 
	} else 
	if (struct == "ScVar") {
		if (!jsonObjectHasField(json, "var")) None() else {
			var = getJsonStringField(json, "var", "");
			Some(ScVar(var));
		} 
	} else {
		None();
	}
}

ruScript2s(s : ScScript) -> string {
	switch (s) {
		ScSeq(seq): 
			strGlue(map(seq, ruScript2s), "\n");
		ScAssign(var, val): 
			var + " = " + ruScExp2s(val) + ";";
		ScIf(cond, script): 
			"if " + ruScExp2s(cond) + " {\n" + 
				strIndent(ruScript2s(script)) + 
			"\n}";
		ScIfElse(cond, pos, neg): 
			"if " + ruScExp2s(cond) + " {\n" + 
				strIndent(ruScript2s(pos)) + 
			"\n} else {\n" + 
				strIndent(ruScript2s(neg)) + 
			"\n}";
		ScWhile(cond, script): 
			"while " + ruScExp2s(cond) + " {\n" + 
				strIndent(ruScript2s(script)) + 
			"\n}";
		ScPrint(ex): 
			"print " + ruScExp2s(ex) + ";";
		ScTask(comm, args): 
			ruTask2s(s);
		ScExit(): 
			"exit;";
	}
}

ruScExp2s(e : ScExp) -> string {
	switch (e) {
		ScInfixOp(ex, args): 
			"(" + ruScExp2s(ex) + concatStrings(map(args, \arg -> " " + arg.op + " " + ruScExp2s(arg.exp))) + ")";
		ScPrefixOp(op, ex): op + ruScExp2s(ex);
		ScFunc(fn, args): 
			fn + "(" + strGlue(map(args, ruScExp2s),", ") + ")";
		ScIndex(ex, ind): 
			ruScExp2s(ex) + "[" + ruScExp2s(ind) + "]";
		ScUndefConst():     "undef";
		ScBoolConst(val):   b2s(val);
		ScIntConst(val):    i2s(val);
		ScDoubleConst(val): d2s(val);
		ScStringConst(val): "\"" + val + "\"";
		ScVar(var):         var;
	}
}

ruScriptTasks(s : ScScript) -> [ScTask] {
	ruDoScScriptTasks([], s);
}

ruDoScScriptTasks(acc : [ScTask], s : ScScript) -> [ScTask] {
	switch (s) {
		ScSeq(seq):               fold(seq, acc, ruDoScScriptTasks);
		ScAssign(__,__):          acc;
		ScIf(cond, script):       ruDoScScriptTasks(acc, script);
		ScIfElse(cond, pos, neg): ruDoScScriptTasks(ruDoScScriptTasks(acc, pos), neg);
		ScWhile(cond, script):    ruDoScScriptTasks(acc, script);
		ScPrint(__):              acc;
		ScTask(comm, args):       concat(acc, [s]);
		ScExit():                 acc;
	}
}

ruScriptSetTasksFile(script : ScScript, file : string) -> ScScript {
	set_file = \s -> ruScriptSetTasksFile(s, file);
	switch (script) {
		ScSeq(seq):               ScSeq(map(seq, set_file));
		ScAssign(__,__):          script;
		ScIf(cond, s):            ScIf(cond, set_file(s));
		ScIfElse(cond, pos, neg): ScIfElse(cond, set_file(pos), set_file(neg));
		ScWhile(cond, s):         ScWhile(cond, set_file(s));
		ScPrint(__):              script;
		ScTask(comm, args):       ScTask(comm, setTree(args, "file", file));
		ScExit():                 script;
	}
}


ruTask2Json(task : ScTask) -> Json {
	JsonObject([
		Pair("command", JsonString(task.command)),
		Pair("args", JsonArray(map(tree2pairs(task.args), 
			\arg -> JsonObject([
				Pair("key", JsonString(arg.first)),
				Pair("value", JsonString(arg.second))
			])
		)))
	]);
}

ruJson2Task(json : Json) -> Maybe<ScTask> {
	if (exists(["command", "args"], \field -> !jsonObjectHasField(json, field))) None() else {
		Some(ScTask(
			getJsonStringField(json, "command", ""),
			pairs2tree(map(getJsonArrayField(json, "args"), 
				\opt -> Pair(getJsonStringField(opt, "key", ""), getJsonStringField(opt, "value", ""))
			))
		));
	}
}

ruTask2s(task : ScTask) -> string {
	task.command + " " + 
	strGlue(map(tree2pairs(task.args), \p -> 
		if (p.second == "") p.first else p.first + "=" + ruCutLongStringUpTo(p.second, 256)
	), " ") + ";";
}

ruSetNoLogging(task : ScTask) -> ScTask {
	ScTask(task with args = setTree(task.args, "do_not_log_this", ""));
}

ruSetScriptTaskArg(script : ScScript, key : string, val : string) -> ScScript {
	rec_set = \s -> ruSetScriptTaskArg(s, key, val);
	switch (script) {
		ScSeq(seq): 
			ScSeq(map(seq, rec_set));
		ScAssign(__,__): 
			script;
		ScIf(cond, s): 
			ScIf(cond, rec_set(s));
		ScIfElse(cond, pos, neg): 
			ScIfElse(cond, rec_set(pos), rec_set(neg));
		ScWhile(cond, s):
			ScWhile(cond, rec_set(s));
		ScPrint(__):
			script;
		ScTask(comm, args): 
			ScTask(comm, setTree(args, key, val));
		ScExit(): 
			script;
	}
}
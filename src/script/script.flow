import lingo/pegcode/driver;
import base/task;
import base/conf;

export {
	ScScript ::= ScSeq, ScAssign, ScIf, ScWhile, ScPrint, RuTask;
		ScSeq(seq : [ScScript]);
		ScAssign(var : string, exp : ScExp);
		ScIf(cond : ScExp, pos : ScScript);
		ScWhile(cond : ScExp, script : ScScript);
		ScPrint(exp : ScExp);

	ScExp ::= ScInfixOp, ScPrefixOp, ScFunc, ScBoolConst, ScIntConst, ScDoubleConst, ScStringConst, ScVar;
		ScInfixOp(exp : ScExp, args : [ScInfixArg]);
			ScInfixArg(op : string, exp : ScExp);
		ScPrefixOp(op : string, exp : ScExp);
		ScFunc(fn : string, args : [ScExp]);
		ScBoolConst(val : bool);
		ScIntConst(val : int);
		ScDoubleConst(val : double);
		ScStringConst(val : string);
		ScVar(var : string);

	ruParseScScript(str : string) -> Maybe<ScScript>;
	ruScScript2Json(script : ScScript) -> Json;
	ruJson2ScScript(json : Json) -> Maybe<ScScript>;

	ruScScript2s(script : ScScript) -> string;
	ruScExp2s(e : ScExp) -> string;
	ruScScriptTasks(script : ScScript) -> [RuTask];
}

ruMakeScTask(as : [flow]) -> RuTask {
	RuTask(as[0], 
		pairs2tree(map(
			filtermap(strSplit(flow2s(as[1]), " "), \s0 -> {
				s = trim2(s0, " \n\t\r");
				if (s == "") None() else Some(s);
			}),
			\s -> {
				sp = strSplit(s, "=");
				if (length(sp) == 1) Pair(s, "") else Pair(sp[0], sp[1]);
			}
		))
	);
}

ruMakeScScript(as : [flow]) -> ScScript {
	s1 = cast(as[0] : flow -> ScScript);
	s2 = cast(as[1] : flow -> ScSeq);
	if (length(s2.seq) == 0) s1 else { 
		ScSeq(concat([s1], s2.seq));
	}
}

ru_script_parser = compilePegGrammar("#include script/script.lingo");
ru_script_actions = SemanticActions(mergeTree(defaultPegActions.t, 
	pairs2tree([
		Pair("makeScTask", ruMakeScTask),
		Pair("makeScScript", ruMakeScScript),
		Pair("makeScBoolConst", \s -> ScBoolConst(s[0] == "true")),
		Pair("makeEmptySeq", \__ -> ScSeq([]))
	])
));

ruParseScScript(str : string) -> Maybe<ScScript> {
	ret = parsic(ru_script_parser, str, ru_script_actions);
	if (ret == "PARSING FAILED") {
		None();
	} else {
		Some(ret);
	}
}

ruScScript2Json(j : ScScript) -> Json {
	switch (j) {
		ScSeq(seq): {
			JsonObject([
				Pair("struct", JsonString("ScSeq")),
				Pair("seq", JsonArray(map(seq, ruScScript2Json)))
			]);
		}
		ScAssign(var, val): {
			JsonObject([
				Pair("struct", JsonString("ScAssign")),
				Pair("var", JsonString(var)),
				Pair("exp", ruScExp2Json(val))
			]);
		}
		ScIf(cond, script): {
			JsonObject([
				Pair("struct", JsonString("ScIf")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("script", ruScScript2Json(script)),
			]);
		}
		ScWhile(cond, script): {
			JsonObject([
				Pair("struct", JsonString("ScWhile")),
				Pair("cond", ruScExp2Json(cond)),
				Pair("script", ruScScript2Json(script)),
			]);
		}
		ScPrint(ex): {
			JsonObject([
				Pair("struct", JsonString("ScPrint")),
				Pair("exp", ruScExp2Json(ex)),
			]);
		}
		RuTask(comm, args): {
			JsonObject([
				Pair("struct", JsonString("RuTask")),
				Pair("command", JsonString(comm)),
				Pair("args", JsonArray(map(tree2pairs(args), 
					\arg -> JsonObject([
						Pair("var", JsonString(arg.first)),
						Pair("value", JsonString(arg.second))
					])
				)))
			]);
		}
	}
}

ruScExp2Json(e : ScExp) -> Json {
	switch (e) {
		ScInfixOp(ex, args): {
			JsonObject([
				Pair("struct", JsonString("ScInfixOp")),
				Pair("exp", ruScExp2Json(ex)),
				Pair("args", JsonArray(map(args, \arg -> 
					JsonObject([
						Pair("op", JsonString(arg.op)),
						Pair("exp", ruScExp2Json(arg.exp))
					])
				)))
			]);
		}
		ScPrefixOp(op, ex): {
			JsonObject([
				Pair("struct", JsonString("ScPrefixOp")),
				Pair("op", JsonString(op)),
				Pair("exp", ruScExp2Json(ex))
			]);
		}
		ScFunc(fn, args): {
			JsonObject([
				Pair("struct", JsonString("ScFunc")),
				Pair("fn", JsonString(fn)),
				Pair("args", JsonArray(map(args, ruScExp2Json)))
			]);
		}
		ScBoolConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScBoolConst")),
				Pair("val", JsonBool(val))
			]);
		}
		ScIntConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScIntConst")),
				Pair("val", JsonDouble(i2d(val)))
			]);
		}
		ScDoubleConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScIntConst")),
				Pair("val", JsonDouble(val))
			]);
		}
		ScStringConst(val): {
			JsonObject([
				Pair("struct", JsonString("ScStringConst")),
				Pair("val", JsonString(val))
			]);
		}
		ScVar(var): {
			JsonObject([
				Pair("struct", JsonString("ScVar")),
				Pair("var", JsonString(var))
			]);
		}
	}
}

ruJson2ScScript(json : Json) -> Maybe<ScScript> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScSeq") {
		json_seq = getJsonArrayField(json, "seq");
		seq = filtermap(getJsonArrayField(json, "seq"), ruJson2ScScript);
		if (length(json_seq) == length(seq)) {
			Some(ScSeq(seq));
		} else {
			None();
		}
	} else 
	if (struct == "ScAssign") {
		var = getJsonStringField(json, "var", "");
		if (var == "") None() else {
			json_val = getJsonFieldValue(json, "exp", JsonNull());
			maybeMap(
				ruJson2ScExp(json_val),
				\val -> ScAssign(var, val)
			);
		}
	} else 
	if (struct == "ScIf") {
		maybeMap2(\cond, script -> ScIf(cond, script))(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			ruJson2ScScript(getJsonFieldValue(json, "script", JsonNull()))
		);
	} else 
	if (struct == "ScWhile") {
		maybeMap2(\cond, script -> ScWhile(cond, script))(
			ruJson2ScExp(getJsonFieldValue(json, "cond", JsonNull())),
			ruJson2ScScript(getJsonFieldValue(json, "script", JsonNull()))
		);
	} else 
	if (struct == "ScPrint") {
		maybeMap(
			ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\ex -> ScPrint(ex)
		);
	} else 
	if (struct == "RuTask") {
		comm = getJsonStringField(json, "command", "");
		if (comm == "") None() else {
			json_args = getJsonArrayField(json, "args");
			args = filtermap(getJsonArrayField(json, "args"), \opt -> {
				var = getJsonStringField(opt, "var", "");
				if (var == "") None() else {
					Some(Pair(var, getJsonStringField(opt, "value", "")))
				}
			});
			if (length(json_args) != length(args)) None() else {
				Some(RuTask(comm, pairs2tree(args)));
			}
		}
	} else {
		None();
	}
}

ruJson2ScExp(json : Json) -> Maybe<ScExp> {
	struct = getJsonStringField(json, "struct", "");
	if (struct == "") None() else
	if (struct == "ScInfixOp") {
		maybeBind(
			ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())),
			\exp -> {
				json_args = getJsonArrayField(json, "args");
				if (json_args == []) None() else {
					args = filtermap(json_args, \arg -> {
						op = getJsonStringField(arg, "op", "");
						if (op == "") None() else {
							maybeMap(
								ruJson2ScExp(getJsonFieldValue(arg, "exp", JsonNull())),
								\ex -> ScInfixArg(op, ex)
							);
						}
					});
					if (length(args) != length(json_args)) None() else {
						Some(ScInfixOp(exp, args));
					}
				}
			}
		);
	} else 
	if (struct == "ScPrefixOp") {
		op = getJsonStringField(json, "op", "");
		if (op == "") None() else {
			maybeMap(
				ruJson2ScExp(getJsonFieldValue(json, "exp", JsonNull())), 
				\ex -> ScPrefixOp(op, ex)
			);
		} 
	} else 
	if (struct == "ScFunc") {
		fn = getJsonStringField(json, "fn", "");
		if (fn == "") None() else {
			if (!jsonObjectHasField(json, "args")) None() else {
				json_args = getJsonArrayField(json, "args");
				args = filtermap(json_args, ruJson2ScExp);
				if (length(args) != length(json_args)) None() else {
					Some(ScFunc(fn, args));
				}
			}
		}
	} else 
	if (struct == "ScBoolConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonBoolField(json, "val", false);
			Some(ScBoolConst(val));
		} 
	} else 
	if (struct == "ScIntConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonDoubleField(json, "val", 0.0);
			Some(ScIntConst(round(val)));
		} 
	} else 
	if (struct == "ScDoubleConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonDoubleField(json, "val", 0.0);
			Some(ScDoubleConst(val));
		} 
	} else 
	if (struct == "ScStringConst") {
		if (!jsonObjectHasField(json, "val")) None() else {
			val = getJsonStringField(json, "val", "");
			Some(ScStringConst(val));
		} 
	} else 
	if (struct == "ScVar") {
		if (!jsonObjectHasField(json, "var")) None() else {
			var = getJsonStringField(json, "var", "");
			Some(ScVar(var));
		} 
	} else {
		None();
	}
}

ruScScript2s(s : ScScript) -> string {
	switch (s) {
		ScSeq(seq):            strGlue(map(seq, ruScScript2s), "\n");
		ScAssign(var, val):    var + " = " + ruScExp2s(val) + ";";
		ScIf(cond, script):    "if " + ruScExp2s(cond) + " {\n" + strIndent(ruScScript2s(script)) + "\n}";
		ScWhile(cond, script): "while " + ruScExp2s(cond) + " {\n" + strIndent(ruScScript2s(script)) + "\n}";
		ScPrint(ex):           "print " + ruScExp2s(ex) + ";";
		RuTask(comm, args):    ruTask2s(s);
	}
}

ruScExp2s(e : ScExp) -> string {
	switch (e) {
		ScInfixOp(ex, args): 
			"(" + ruScExp2s(ex) + concatStrings(map(args, \arg -> " " + arg.op + " " + ruScExp2s(arg.exp))) + ")";
		ScPrefixOp(op, ex): op + ruScExp2s(ex);
		ScFunc(fn, args): 
			fn + "(" + strGlue(map(args, ruScExp2s),", ") + ")";
		ScBoolConst(val):   b2s(val);
		ScIntConst(val):    i2s(val);
		ScDoubleConst(val): d2s(val);
		ScStringConst(val): "\"" + val + "\"";
		ScVar(var):         var;
	}
}

ruScScriptTasks(s : ScScript) -> [RuTask] {
	ruDoScScriptTasks([], s);
}

ruDoScScriptTasks(acc : [RuTask], s : ScScript) -> [RuTask] {
	switch (s) {
		ScSeq(seq):            fold(seq, acc, ruDoScScriptTasks);
		ScAssign(__,__):       acc;
		ScIf(cond, script):    ruDoScScriptTasks(acc, script);
		ScWhile(cond, script): ruDoScScriptTasks(acc, script);
		ScPrint(__):           acc;
		RuTask(comm, args):    concat(acc, [s]);
	}
}

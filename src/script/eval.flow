import comm;

import script/funcs/boolean;
import script/funcs/compare;
import script/funcs/numeric;
import script/funcs/time;
import script/funcs/util;

export {
	ruEval(ex : ScExp, state : RuState, out : RuOut) -> Maybe<ValValue>;
}

ru_script_fns : ref Maybe<Tree<string, ScriptFn>> = ref None();

ruScriptFns() -> Tree<string, ScriptFn> {
	onlyOnce(ru_script_fns, 
		\-> pairs2tree(concatA([
			ruScriptBooleanFuncs(),
			ruScriptCompareFuncs(),
			ruScriptNumericFuncs(),
			ruScriptTimeFuncs(),
			ruScriptUtilFuncs()
		]))
	);
}

ruEval(ex : ScExp, state : RuState, out : RuOut) -> Maybe<ValValue> {
	conf = state.conf;
	switch (ex) {
		ScInfixOp(e, args): {
			vals = filtermap(
				concat([e], map(args, \arg -> arg.exp)), 
				\arg -> ruEval(arg, state, out)
			);
			if (length(vals) != length(args) + 1) None() else {
				maybeBind(
					lookupTree(ruScriptFns(), args[0].op),
					\func -> func.fn(vals, state, out)
				);
			}
		}
		ScPrefixOp(op, e): {
			maybeBind2(\func, val -> func.fn([val], state, out))
			(
				lookupTree(ruScriptFns(), op),
				ruEval(e, state, out)
			);
		}
		ScFunc(fn, args): {
			vals = filtermap(args, \arg -> ruEval(arg, state, out));
			if (length(vals) != length(args)) None() else {
				maybeBind(
					lookupTree(ruScriptFns(), fn),
					\func -> func.fn(vals, state, out)
				);
			}
		}
		ScIndex(e, i): {
			maybeBind2(\ev, val -> 
				switch (ev) {
					ValMap(mapping): {
						key = ruValue2s(val);
						switch (lookupTree(mapping, key)) {
							Some(v): Some(v);
							None():  Some(ValUndef());
						}
					}
					ValArray(arr): {
						switch (val) {
							ValInt(ind): {
								if (0 <= ind && ind < length(arr)) {
									Some(arr[ind]);
								} else {
									Some(ValUndef());
								}
							}
							default: Some(ValUndef());
						}
					}
					default: None();
				}
			)(ruEval(e, state, out), ruEval(i, state, out));
		}
		ScUndefConst():     Some(ValUndef());
		ScBoolConst(val):   Some(ValBool(val));
		ScIntConst(val):    Some(ValInt(val));
		ScDoubleConst(val): Some(ValDouble(val));
		ScStringConst(val): Some(ValString(val));
		ScVar(var):         ruEvalVar(var, state, out);
	}
}

ruEvalVar(var : string, state : RuState, out : RuOut) -> Maybe<ValValue> {
	conf = state.conf;
	switch (lookupTree(state.vars, var)) {
		Some(val): Some(val);
		None(): {
			if (startsWith(var, "conf.")) {
				opt = strRight(var, 5);
				switch (lookupTree(conf.opts, opt)) {
					Some(val): Some(ValString(val));
					None(): {
						if (opt == "working-dir") {
							Some(ValString(conf.workingDir));
						} else if (opt == "verbose") {
							Some(ValInt(conf.verbose));
						} else if (opt == "import-roots") {
							Some(ValArray(map(conf.importRoots, \r -> ValString(r))));
						} else if (opt == "project-roots") {
							Some(ValArray(map(conf.projectRoots, \r -> ValString(r))));
						} else {
							Some(ValUndef());
						}
					}
				}
			} else if (var == "sources") {
				Some(ValMap(foldTree(state.ru, makeTree(), \id, src, acc -> 
					setTree(acc, id2s(id), ValData("RuSource", src))
				)));
			} else if (var == "math") {
				math = ruMakeMathFromSources(state.ru, RuEnv(conf, out));
				Some(ValMap(pairs2tree([
					Pair("sources", ValMap(foldTree(math.sources, makeTree(), \id, src, acc -> 
						setTree(acc, id2s(id), ValData("RuSource", src))
					))),
					Pair("consts", ValMap(foldTree(math.consts, makeTree(), \id, const, acc -> 
						setTree(acc, id2s(id), ValData("RuConst", const))
					))),
					Pair("types", ValMap(foldTree(math.types, makeTree(), \id, type, acc -> 
						setTree(acc, id2s(id), ValData("RuType", type))
					))),
					Pair("rules", ValMap(foldTree(math.rules, makeTree(), \id, rule, acc -> 
						setTree(acc, id2s(id), ValData("RuRule", rule))
					))),
					Pair("assertions", ValMap(foldTree(math.assertions, makeTree(), \id, assertion, acc -> 
						setTree(acc, id2s(id), ValData("RuAssertion", assertion))
					))),
				])));
			} else {
				Some(ValUndef());
			}
		}
	}
}
import script/types_1/type_gens;

export {
    // Unify a left with a type: try to instantiate type variables properly
    scUnifyType(left : ScType, right : ScType, ac : Tree<string, ScType>) -> Maybe<Tree<string, ScType>>;

    // Unification of a left with respect to variadic type 
    scUnifyTypes(left : [ScType], right : [ScType], ac : Tree<string, ScType>) -> Maybe<Tree<string, ScType>>;
}

sc_unify_types_depth_counter = ref 0;

scUnifyType(left : ScType, right0 : ScType, ac : Tree<string, ScType>) -> Maybe<Tree<string, ScType>> {
	sc_unify_types_depth_counter := 0;
	right = scMakeVarsDisjointed(left, right0);
	scDoUnifyType(left, right, ac);
}

scDoUnifyType(left0 : ScType, right0 : ScType, ac : Tree<string, ScType>) -> Maybe<Tree<string, ScType>> {
	left = scInstantiateType(left0, ac);
	right = scInstantiateType(right0, ac);
	sc_unify_types_depth_counter := ^sc_unify_types_depth_counter + 1;

	/*if (^unify_depth_counter > 128) {
		print ln("unifying types: \n" +
			scType2s(left) + "\n" + 
			scType2s(right) + "\n" + 
		);
	}*/

	unify_with_var = \var : string, type : ScType -> {
		if (scTypeContainsVar(type, var)) None() else {
			switch (lookupTree(ac, var)) {
				Some(type1): {
					maybeBind(scDoUnifyType(type1, type, ac), 
						\ac1 -> {
							resolved = scInstantiateType(type, ac1);
							//if (typeContainsVar(resolved, var)) None() else
							Some(setTree(ac1, var, resolved));
						}
					);
				}
				None(): {
					//if (typeContainsVar(type, var)) None() else
					Some(setTree(ac, var, type));
				}
			}
		}
	}
    ret = if (left == right) Some(ac) else {
		switch (left) {
			ScTypeVar(left_v): {
				unify_with_var(left_v, right);
			}
			ScTypeGen(left_name, left_args): {
				switch (right) {
					ScTypeVar(right_v): {
						unify_with_var(right_v, left);
					}
					ScTypeGen(right_name, right_args): {
						if (left_name == right_name) {
							scUnifyTypes(left_args, right_args, ac);
						} else if (left_name == "any" || right_name == "any") {
							// any is a universal type
							Some(ac);
						} else {
							None();
						}
					}
				}
			}
		}
	}
    /*print ln(
        "(A) unifying: " + scType2s(left) + 
        " with: " + scType2s(right) + 
        " ret: " + toString(ret)
    );*/
    ret;
}

scUnifyTypes(lefts : [ScType], rights : [ScType], acc : Tree<string, ScType>) -> Maybe<Tree<string, ScType>> {

    ret = if (length(lefts) == 0) {
        if (length(rights) == 0) {
            Some(acc);
        } else {
            None();
        }
    } else {
		variadic_left = scUnwrapVariadicType(lefts[0]);
		if (variadic_left == scUndefType) {
			if (length(lefts) == length(rights)) {
				maybeBind(
					scUnifyType(lefts[0], rights[0], acc),
					\sub -> scUnifyTypes(tail(lefts), tail(rights), sub)
				);
			} else {
				None();
			}
		} else {
			if (length(rights) == 0) {
				if (lefts[0].name == "..") Some(acc) else None();
			} else {
				//print ln("variafic left: " + scType2s(variadic_left));
				maybeBind(
					scUnifyType(variadic_left, rights[0], acc),
					\sub -> {
						variadic_type = scInstantiateType(variadic_left, sub);
						//print ln("variadic_type: " + scType2s(variadic_type));
						scUnifyVariadicTypes(variadic_type, tail(lefts), tail(rights), sub);
					}
				);
			}
		}
    }
    /*print ln(
        "(B) unifying: " + strGlue(map(lefts, scType2s), ", ") + 
        " with: " + strGlue(map(rights, scType2s), ", ") + 
        " ret: " + toString(ret)
    );*/
    ret;
}

scUnifyVariadicTypes(variadic : ScType, lefts : [ScType], rights : [ScType], acc : Tree<string, ScType>) -> Maybe<Tree<string, ScType>> {
    if (length(rights) == 0) {
        Some(acc);
    } else {
        if (rights[0] == variadic) {
            scUnifyVariadicTypes(variadic, lefts, tail(rights), acc);
        } else {
            scUnifyTypes(lefts, rights, acc);
        }
    }
}

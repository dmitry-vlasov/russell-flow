import script/types_1/type_consts;

export {
    scType2s(type : ScType) -> string;

    // Array (sequence) type: [type]
    scArrayType(type : ScType) -> ScTypeGen;

    // Functional type: (arg_1, ... , arg_k) -> val
    scFuncType(args : [ScType], val : ScType) -> ScTypeGen;

    // Union type: (type_1 U type_2 U ... U type_k)
    scUnionType(args : [ScType]) -> ScTypeGen;

    // Product type: (type_1 x type_2 x ... x type_k)
    scProdType(args : [ScType]) -> ScTypeGen;

    // Variadic type, which admits zero args: () or (type) or (type, type) or ... (type, ... , type)
    scVariadicStarType(arg : ScType) -> ScTypeGen;

	// Variadic type, with > 0 number of args: (type) or (type, type) or ... (type, ... , type)
    scVariadicPlusType(arg : ScType) -> ScTypeGen;

	scMapType(from : ScType, to : ScType) -> ScTypeGen;

	// Just a value wrapper to a type
    //scWrapValueType(arg : ScType) -> ScTypeGen;

	// Make an n-ary function over a type 
    scMakeFuncType(n : int, type : ScType) -> ScTypeGen;

    // un-Function type: args and value
    scUnwrapFuncArgTypes(fn : ScType) -> [ScType];
    scUnwrapFuncValType(fn : ScType) -> ScType;

    // un-array type
    scUnwrapArrayType(type : ScType) -> ScType;

	// un-variadic type
	scUnwrapVariadicType(type : ScType) -> ScType;

	// un-map type
    scUnwrapMapKey(type : ScType) -> ScType;
	scUnwrapMapVal(type : ScType) -> ScType;

	//scUnwrapValueType(arg : ScTypeGen) -> ScType;
}

scType2s(type : ScType) -> string {
    switch (type) {
        ScTypeVar(name): name;
        ScTypeGen(name, args): {
            if (name == "array")   "[" + (if (length(args) == 0) "" else scType2s(args[0])) + "]" else 
            if (name == "func")   "(" + strGlue(map(tail(args), scType2s), ", ") + ") -> " + (if (length(args) == 0) "" else scType2s(args[0])) else
            if (name == "union")    "(" + strGlue(map(args, scType2s), "U") + ")" else
            if (name == "product")    "(" + strGlue(map(args, scType2s), "x") + ")" else
			if (name == "map")  "(" + scType2s(args[0]) + " => " + scType2s(args[0]) + ")" else
			//if (name == "tp") "(" + strGlue(map(args, scType2s), ", ") + ")" else
            if (name == "...") { if (length(args) == 0) "..." else scType2s(args[0]) + ", ... ," + scType2s(args[0]) } else 
			if (name == "..")  { if (length(args) == 0) ".."  else scType2s(args[0]) + ", .. ,"  + scType2s(args[0]) } else 
			name + (if (length(args) == 0) "" else "(" + strGlue(map(args, scType2s), ", ") + ")");
        }
    }
}

scArrayType(type : ScType) -> ScTypeGen {
    ScTypeGen("array", [type]);
}

scFuncType(args : [ScType], val : ScType) -> ScTypeGen {
    ScTypeGen("func", concat([val], args));
}

scUnionType(args : [ScType]) -> ScTypeGen {
    ScTypeGen("union", args);
}

scProdType(args : [ScType]) -> ScTypeGen {
    ScTypeGen("product", args);
}

scVariadicStarType(arg : ScType) -> ScTypeGen {
    ScTypeGen("..", [arg]);
}

scVariadicPlusType(arg : ScType) -> ScTypeGen {
    ScTypeGen("...", [arg]);
}

scMapType(from : ScType, to : ScType) -> ScTypeGen {
	ScTypeGen("map", [from, to]);
}

//scWrapValueType(arg : ScType) -> ScTypeGen {
//	ScTypeGen("value", [arg]);
//}

scUnwrapFuncArgTypes(type : ScType) -> [ScType] {
    switch (type) {
        ScTypeVar(__): [scUndefType];
        ScTypeGen(name, args): {
            if (name != "func") [scUndefType] else tail(args);
        }
    }
}

scUnwrapFuncValType(type : ScType) -> ScType {
    switch (type) {
        ScTypeVar(__): scUndefType;
        ScTypeGen(name, args): {
            if (name != "func") scUndefType else args[0];
        }
    }
}

scMakeFuncType(n : int, type : ScType) -> ScTypeGen {
    scFuncType(map(enumFromTo(0, n - 1), \__ -> type), type);
}

scUnwrapArrayType(type : ScType) -> ScType {
    switch (type) {
        ScTypeVar(__): scUndefType;
        ScTypeGen(name, args): {
            if (name == "array" && length(args) == 1) args[0] else scUndefType;
        }
    }
}

scUnwrapVariadicType(type : ScType) -> ScType {
    switch (type) {
        ScTypeVar(__): scUndefType;
        ScTypeGen(name, args): {
            if ((name == "..." || name == "..") && length(args) == 1) {
                args[0];
            } else {
                scUndefType;
            }
        }
    }
}

/*scUnwrapValueType(type : ScTypeGen) -> ScType {
	switch (type) {
        ScTypeVar(__): scUndefType;
        ScTypeGen(name, args): {
            if (name == "value" && length(args) == 1) args[0] else scUndefType;
        }
    }
}*/

scUnwrapMapKey(type : ScType) -> ScType {
    switch (type) {
        ScTypeVar(__): scUndefType;
        ScTypeGen(name, args): {
	        if (name != "map") scUndefType else args[0];
        }
    }
}

scUnwrapMapVal(type : ScType) -> ScType {
	switch (type) {
        ScTypeVar(__): scUndefType;
        ScTypeGen(name, args): {
	        if (name != "map") scUndefType else args[1];
        }
    }
}

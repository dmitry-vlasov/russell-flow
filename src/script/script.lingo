script1 = ws (script | empty_seq);
non_seq = if_else | if | exit | stop | while | print | data | let | assign | task ;

script = non_seq:ns script2:j { makeScComm(:ns, :j) };
	script2 = seq | empty_seq;
	empty_seq = '' { makeEmptySeq() };
	seq  = script+ :js { ScSeq(:js) };

	if_else  = "if" ws exp:c '{' ws script:p '}' ws "else" ws '{' ws script:n '}' ws { makeScIfElse(:c, :p, :n) };
	if       = "if" ws exp:c '{' ws script:j '}' ws    { makeScIf(:c, :j) };
	while    = "while" ws exp:c '{' ws script:j '}' ws { ScWhile(:c, :j) };
	print    = "print" ws exp:e ';' ws                 { makeScPrint(:e) };
	data     = "output" ws exp:e ';' ws                { makeScOutput(:e) };
	let      = "let" ws id:v '=' ws exp:e ';' ws script:s { ScLet(:v, :e, :s) };
	assign   = id:v ':=' ws exp:e ';' ws               { ScAssign(:v, :e) };
	task     = id:i task_args:as ';' ws                { makeScTask(:i, :as) };
	exit     = "exit" ws ';' ws                        { ScAction("exit") };
	stop     = "stop" ws ';' ws                        { ScAction("stop") };

type = type_arr | type_fn | type_infix | type_prefix | type_const ;
	type_arr     = "[" ws type:t "]" ws                                           { makeTypeArray(:t) } ;
	type_fn      = "(" ws (type_fn_arg)*:as ")" ws "->" ws type:v                 { makeTypeFn(:as, :v) };
	type_infix   = "(" ws type:t1 type_id:op ws type:t2 (type_inf_arg)*:as ")" ws { makeTypeInfix(:op, :t1, :t2, :as) };
	type_prefix  = type_id:op ws "(" ws (type_fn_arg)*:as ")" ws                  { makeTypePrefix(:op, :as) };
	type_const   = type_id:op ws                                                  { makeTypeConst(:op) };
	type_fn_arg  = type:t (',' ws)?  { :t };
	type_inf_arg = type_id ws type:t { :t };
	type_id   = (!bad_type_id_char any)+ $id { $id };
	bad_type_id_char = ws_ | '(' | ')' | '[' | ']' | '{' | '}' | ',';

exp = undef_const | cond_exp | infix_op | index | pref_op | call_exp | call_name | lambda | 
	bool_const | double_const | int_const | string_const | var;

	cond_exp     = '(' ws exp:c '?' ws exp:p ':' ws exp:n ')' ws { ScCond(:c, :p, :n) };
	infix_op     = '(' ws exp:e infix_arg+:as ')' ws { ScInfixOp(:e, :as) };
	infix_arg    = op:o exp:v                        { ScInfixArg(:o, :v) };
	pref_op      = op:o exp:v                        { ScPrefixOp(:o, :v) };
	call_name    = var:fn '(' ws call_arg*:as ')' ws { ScCall(:fn, :as) };
	call_exp     = '(' ws exp:fn ')' ws '(' ws call_arg*:as ')' ws { ScCall(:fn, :as) };
	call_arg     = exp:arg (',' ws)?                 { :arg };
	index        = '[' ws exp:m ':' ws exp :i ']' ws { ScIndex(:m, :i) };
	lambda       = '\\' ws lam_arg*:as "->" ws exp:b { ScLambda(:as, :b) };
	lam_arg     =  var:v (',' ws)?                   { :v };

	double_const = (digit+ '.' digit+) $s ws         { ScDoubleConst(s2d(:s)) };
	string_const = '"' (!'"' any)* $s '"' ws         { ScStringConst(:s) };
	int_const    = num:n                             { ScIntConst(s2i(:n)) };
	var          = id:i                              { ScVar(:i) };
	bool_const   = ("true" | "false") $s ws          { makeScBoolConst(:s) };
	undef_const  = "undef" ws                        { ScUndefConst() };

num  = digit+ $s ws { :s };
id   = (id_start id_symb*) $s ws { :s };
str  = (!space any)+ $s ws { :s };
op   = (!n_op any)+ $s ws { :s };
n_op = space | '(' | ')' | '"' | '[' | ']' | ',' | ':' | id_start | digit | '\\' | '/';
task_args = (!';' any)* $s ws { :s };

digit    = '0'-'9';
id_symb  = 'a'-'z' | 'A'-'Z' | '0'-'9' | '-' | '_' | '.';
id_start = 'a'-'z' | 'A'-'Z';

space = ' ' | '\t' | '\n' | '\r';
ws_ = space | comment1 | comment2 | comment3 | comment4;
ws = ws_*;
comment1 = "//" (!'\n' any)* '\n';
comment2 = "#" (!'\n' any)* '\n';
comment3 = "/**" (!"*/" any)* $s "*/" { makeDocComment(:s) };
comment4 = "/*" (!"*/" any)* "*/";

any = '\u0000'-'\uFFFF';

script = ws command*:cs last_line_comment? { makeScript(:cs) };
command = if_else | if | exit | stop | assert | while | print | output | assign | task ;

	if_else  = "if" ws exp:c '{' ws script:p '}' ws "else" ws '{' ws script:n '}' ws { ScIf(:c, :p, Some(:n)) };
	if       = "if" ws exp:c '{' ws script:p '}' ws    { ScIf(:c, :p, None()) };
	while    = "while" ws exp:c '{' ws script:s '}' ws { ScWhile(:c, :s) };
	print    = "print" ws exp:e ';' ws                 { ScOutput("print", :e) };
	output   = "output" ws exp:e ';' ws                { ScOutput("output", :e) };
	exit     = "exit" ws ';' ws                        { ScAction("exit", emptyArray()) };
	stop     = "stop" ws ';' ws                        { ScAction("stop", emptyArray()) };
	assert   = "assert" ws exp:a ';' ws                { ScAction("assert", array(:a)) };
	assign   = var:v ':=' ws exp:e ';' ws              { ScAssign(:v, :e) };
	task     = task_id:i task_args:as ';' ws           { makeScTask(:i, :as) };

type = type_arr | type_fn | type_infix | type_prefix | type_const ;
	type_arr     = "[" ws type:t "]" ws                                           { makeTypeArray(:t) } ;
	type_fn      = "(" ws (type_fn_arg)*:as ")" ws "->" ws type:v                 { makeTypeFn(:as, :v) };
	type_infix   = "(" ws type:t1 type_id:op ws type:t2 (type_inf_arg)*:as ")" ws { makeTypeInfix(:op, :t1, :t2, :as) };
	type_prefix  = type_id:op ws "(" ws (type_fn_arg)*:as ")" ws                  { makeTypePrefix(:op, :as) };
	type_const   = type_id:op ws                                                  { makeTypeConst(:op) };
	type_fn_arg  = type:t (',' ws)?  { :t };
	type_inf_arg = type_id ws type:t { :t };
	type_id   = (!bad_type_id_char any)+ $id { $id };
	bad_type_id_char = ws_ | '(' | ')' | '[' | ']' | '{' | '}' | ',';

exp = undef_const | bool_true | bool_false | double_const | int_const | string_const | 
	quote | eval | cond_exp | let | infix_op | index1 | index2 | get1 | get2 | map | exp_seq | 
	array | pref_op | call_exp | call_name | struct | lambda | wrapped_exp | var;

	cond_exp     = '(' ws exp:c '?' ws exp:p ':' ws exp:n ')' ws { ScCond(:c, :p, :n) };
	let          = "let" ws id:v '=' ws exp:e ';' ws exp:s       { ScLet(:v, :e, :s) };
	infix_op     = '(' ws exp:e infix_arg+:as ')' ws { ScInfixOp(:e, :as) };
	infix_arg    = op:o exp:v                        { ScInfixArg(:o, :v) };
	pref_op      = op:o exp:v                        { ScPrefixOp(:o, :v) };
	call_name    = var:fn call_args:as               { ScCall(:fn, :as) };
	call_exp     = '(' ws exp:fn ')' ws call_args:as { ScCall(:fn, :as) };
		call_args = zeroary_args | unary_args | nary_args;
			zeroary_args = '(' ws ')' ws                      { emptyArray() };
			unary_args = '(' ws exp:a ')' ws                 { array(:a) };
			nary_args =  '(' ws exp:a0 call_arg*:as ')' ws    { consArray(:a0, :as) };
				call_arg  = ',' ws exp:arg                    { :arg };

	index1       = var:m '[' ws exp :i ']' ws               { ScIndex(:m, :i) };
	index2       = '(' ws exp:m ')' ws '[' ws exp :i ']' ws { ScIndex(:m, :i) };
	lambda       = '\\' ws lam_args:as "->" ws exp:b         { ScLambda(:as, :b) };
		lam_args = nary_lamargs | unary_lamargs | zeroary_lamargs;
			zeroary_lamargs = ws                                        { emptyArray() };
			unary_lamargs = id:v ws                                     { array(:v) };
			nary_lamargs =  id:v0 lam_arg*:vs                           { consArray(:v0, :vs) };
				lam_arg  = ',' ws id:v                                  { :v };

	array        = empty_array | unary_array | arbitrary_array;
		empty_array = '[' ws  ']' ws { ScArray(emptyArray()) };
		unary_array = '[' ws exp:e  ']' ws { ScArray(array(:e)) };
		arbitrary_array = '[' ws exp:f array_arg+:as  ']' ws { ScArray(consArray(:f, :as)) };
			array_arg = ',' ws exp:e { :e };
	
	get1        = var:m '.' ws id :f                { ScField(:m, :f) };
	get2        = '(' ws exp:m ')' ws '.' ws id:f   { ScField(:m, :f) };
	struct      = id_st:st call_args:as             { ScStruct(:st, :as) };

	map         = empty_map | unary_map1 | arbitrary_map1 | unary_map2 | arbitrary_map2;
		empty_map = '{' ws  '}' ws { ScMap(emptyArray()) };
		unary_map1 = '{' ws id:k '=' ws exp:v  '}' ws { ScMap(array(Pair(ScString(:k), :v))) };
		arbitrary_map1 = '{' ws id:k '=' ws exp:v map_arg1+:as  '}' ws { ScMap(consArray(Pair(ScString(:k), :v), :as)) };
			map_arg1 = ',' ws id:k '=' ws exp:v { Pair(ScString(:k), :v) };
		unary_map2 = '{' ws exp:k '=' ws exp:v  '}' ws { ScMap(array(Pair(:k, :v))) };
		arbitrary_map2 = '{' ws exp:k '=' ws exp:v map_arg2+:as  '}' ws { ScMap(consArray(Pair(:k, :v), :as)) };
			map_arg2 = ',' ws exp:k '=' ws exp:v { Pair(:k, :v) };

	quote = 'quote' ws '(' ws exp:e ')' ws { ScQuote(:e) };
	eval  = 'eval'  ws '(' ws exp:e ')' ws { ScEval(:e) };

	double_const = (digit+ '.' digit+) $s ws          { ScDouble(s2d(:s)) };
	string_const = '"' ("\\\"" | !'"' any)* $s '"' ws { ScString(unescapeStr(:s)) };
	int_const    = num:n                              { ScInt(s2i(:n)) };
	var          = id:i access:a                      { ScVar(:i, :a) };
	bool_true    = "true" ws                          { ScBool(true()) };
	bool_false   = "false" ws                         { ScBool(false()) };
	undef_const  = "undef" ws                         { ScUndef() };
	wrapped_exp  = '(' ws exp:e ')' ws                { :e };
	exp_seq      = '{' ws exp_seq_arg+:as '}' ws      { ScExpSeq(:as) };
		exp_seq_arg = exp:e ';' ws { :e };

access = access_field | access_array | access_call | access_call0 | access_direct ;
	access_field = '.' ws id:f access:n { ScFieldAccess(:f, :n) };
	access_array = '[' ws exp:i ']' ws access:n { ScIndexAccess(:i, :n) };
	access_call0 = '(' ws ')' ws access:n { ScCallAccess(emptyArray(), :n) };
	access_call  = '(' ws exp:a0 call_arg*:as ')' ws access:n { ScCallAccess(consArray(:a0, :as), :n) };
	access_direct = '' ws { ScDirectAccess() };

num     = digit+ $s ws { :s };
task_id = (letter id_symb*) $s ws { :s };
id      = ('a'-'z' id_symb*) $s ws { :s };
id_st   = ('A'-'Z' id_symb*) $s ws { :s };
op      = (!n_op any)+ $s ws { :s };
n_op    = space | '(' | ')' | '"' | '[' | ']' | ',' | ':' | '.' | 'a'-'z' | 'A'-'Z' | '@' | digit | '\\' | '/';
task_args = (!';' any)* $s ws { :s };

digit    = '0'-'9';
id_symb  = 'a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '-';
task_id_symb = id_symb | '-';
capital   = 'A'-'Z';
lowercase = 'a'-'z';
letter    = capital | lowercase;

space = ' ' | '\t' | '\n' | '\r';
ws_ = space | comment1 | comment2 | comment3 | comment4;
ws = ws_*;
comment1 = "//" (!'\n' any)* '\n';
comment2 = "#" (!'\n' any)* '\n';
comment3 = "/**" (!"*/" any)* $s "*/" { makeDocComment(:s) };
comment4 = "/*" (!"*/" any)* "*/";

last_line_comment = "//" (!'\n' any)*;

any = '\u0000'-'\uFFFF';

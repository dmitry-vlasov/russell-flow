script1 = ws (script | empty_seq);
non_seq = if_else | if | exit | while | print | assign | task ;
script = non_seq:ns script2:j { makeScScript(:ns, :j) };
	script2 = seq | empty_seq;
	empty_seq = '' { makeEmptySeq() };
	seq  = script+ :js { ScSeq(:js) };

	if_else  = "if" ws exp:c '{' ws script:p '}' ws "else" ws '{' ws script:n '}' ws { ScIfElse(:c, :p, :n) };
	if       = "if" ws exp:c '{' ws script:j '}' ws    { ScIf(:c, :j) };
	while    = "while" ws exp:c '{' ws script:j '}' ws { ScWhile(:c, :j) };
	print    = "print" ws exp:e ';' ws                 { ScPrint(:e) };
	assign   = id:i '=' ws exp:v ';' ws                { ScAssign(:i, :v) };
	task     = id:i args:as ';' ws                     { makeScTask(:i, :as) };
	exit     = "exit" ws ';' ws                        { ScExit() };

exp = undef_const |infix_op | index | pref_op | func | 
	bool_const | double_const | int_const | string_const | var;

	infix_op     = '(' ws exp:e infix_arg+:as ')' ws { ScInfixOp(:e, :as) };
	infix_arg    = op:o exp:v                        { ScInfixArg(:o, :v) };
	pref_op      = op:o exp:v                        { ScPrefixOp(:o, :v) };
	func         = id:fn '(' ws func_arg*:as ')' ws  { ScFunc(:fn, :as) };
	func_arg     = exp:arg (',' ws)?                 { :arg };
	index        = '[' ws exp:m ':' ws exp :i ']' ws { ScIndex(:m, :i) };

	double_const = (digit+ '.' digit+) $s ws         { ScDoubleConst(s2d(:s)) };
	string_const = '"' (!'"' any)* $s '"' ws         { ScStringConst(:s) };
	int_const    = num:n                             { ScIntConst(s2i(:n)) };
	var          = id:i                              { ScVar(:i) };
	bool_const   = ("true" | "false") $s ws          { makeScBoolConst(:s) };
	undef_const  = "undef" ws                        { ScUndefConst() };

num  = digit+ $s ws { :s };
id   = (id_start id_symb*) $s ws { :s };
str  = (!space any)+ $s ws { :s };
op   = (!n_op any)+ $s ws { :s };
n_op = space | '(' | ')' | '"' | '[' | ']' | ',' | ':' | id_start | digit;
args = (!';' any)* $s ws { :s };

digit    = '0'-'9';
id_symb  = 'a'-'z' | 'A'-'Z' | '0'-'9' | '-' | '_' | '.';
id_start = 'a'-'z' | 'A'-'Z';

space = ' ' | '\t' | '\n' | '\r';
ws = (space | comment1 | comment2 | comment3 | comment4)*;
comment1 = "//" (!'\n' any)* '\n';
comment2 = "#" (!'\n' any)* '\n';
comment3 = "/**" (!"*/" any)* $s "*/" { makeDocComment(:s) };
comment4 = "/*" (!"*/" any)* "*/";

any = '\u0000'-'\uFFFF';

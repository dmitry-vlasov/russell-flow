import script/func;
import base/util/timer;
import script/util;

export {
	ruScriptTimeFuncs() -> [ScriptFn];
}

ruScriptTimeFuncs() -> [ScriptFn] {
	[
		ScriptFn("time2s", \args, state, out -> 
			ruEvalDoubleFn(args, \as -> Some(ScString(ruTime2s(as[0]))),  "time2s", 1)
		),
		ScriptFn("time", \args, state, out -> 
			ruEvalValueFn(args, \as -> Some(ScDouble(ruTime())),  "time", 0)
		),
		ScriptFn("timer", \args, state, out -> 
			ruEvalDoubleFn(args, 
				\as -> {
					if (length(as) == 0) Some(ScData("RuTimer", ruMakeTimer())) else 
					if (length(as) == 1) Some(ScData("RuTimer", ruMakeLimitedTimer(as[0]))) else None();
				}, 
				"time", -1
			)
		),
		ScriptFn("timePassed", \args, state, out ->
			ruEvalValueFn(args, 
				\as -> {
					switch (as[0]) {
						ScDouble(time): Some(ScDouble(ruTime() - time));
						ScData(type, data): {
							if (type != "RuTimer") None() else {
								timer = cast(data : flow -> RuTimer);
								Some(ScDouble(ruTimePassed(timer)));
							}
						}
						default: None();
					}
				}, 
				"timePassed", 1
			)
		),
		ScriptFn("timePassed2s", \args, state, out ->
			ruEvalValueFn(args, 
				\as -> {
					switch (as[0]) {
						ScDouble(time): Some(ScString(ruTime2s(ruTime() - time)));
						ScData(type, data): {
							if (type != "RuTimer") None() else {
								timer = cast(data : flow -> RuTimer);
								Some(ScString(ruTimePassed2s(timer)));
							}
						}
						default: None();
					}
				}, 
				"timePassed2s", 1
			)
		),
		ScriptFn("timeLeft", \args, state, out ->
			ruEvalValueFn(args, 
				\as -> {
					switch (as[0]) {
						ScData(type, data): {
							if (type != "RuTimer") None() else {
								timer = cast(data : flow -> RuTimer);
								Some(ScDouble(ruTimeLeft(timer)));
							}
						}
						default: None();
					}
				}, "timeLeft", 1
			)
		),
	]
}
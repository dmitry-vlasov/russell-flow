import script/func;
import base/util/timer;
import script/util;

export {
	ruScriptTimeFuncs() -> [ScriptFn];
}

ruScriptTimeFuncs() -> [ScriptFn] {
	[
		ScriptFn("time2s", \args -> 
			ruEvalDoubleFn(args, \as -> Some(ruTime2s(as[0])),  "time2s", 1)
		),
		ScriptFn("time", \args -> 
			ruEvalValueFn(args, \as -> Some(ruTime()),  "time", 0)
		),
		ScriptFn("timer", \args -> 
			ruEvalDoubleFn(args, 
				\as -> {
					if (length(as) == 0) Some(ruMakeTimer()) else 
					if (length(as) == 1) Some(ruMakeLimitedTimer(as[0])) else None();
				}, 
				"time", -1
			)
		),
		ScriptFn("timePassed", \args ->
			ruEvalValueFn(args, 
				\as -> {
					arg = as[0];
					type = runtimeValueType(arg);
					if (runtimeValueType(arg) == "RuTimer") {
						timer = cast(arg : flow -> RuTimer);
						Some(ruTimePassed(timer));
					} else if (runtimeValueType(arg) == "double") {
						time = cast(arg : flow -> double);
						Some(ruTime() - time);
					} else {
						None();
					}
				}, 
				"timePassed", 1
			)
		),
		ScriptFn("timePassed2s", \args ->
			ruEvalValueFn(args, 
				\as -> {
					arg = as[0];
					type = runtimeValueType(arg);
					if (runtimeValueType(arg) == "RuTimer") {
						timer = cast(arg : flow -> RuTimer);
						Some(ruTimePassed2s(timer));
					} else if (runtimeValueType(arg) == "double") {
						time = cast(arg : flow -> double);
						Some(ruTime2s(ruTime() - time));
					} else {
						None();
					}
				}, 
				"timePassed2s", 1
			)
		),
		ScriptFn("timeLeft", \args ->
			ruEvalValueFn(args, 
				\as -> {
					arg = as[0];
					type = runtimeValueType(arg);
					if (runtimeValueType(arg) == "RuTimer") {
						timer = cast(arg : flow -> RuTimer);
						Some(ruTimeLeft(timer));
					} else {
						None();
					}
				}, "timeLeft", 1
			)
		),
	]
}
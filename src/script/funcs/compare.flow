import script/func;
import script/util;

export {
	ruScriptCompareFuncs() -> [ScriptFn];
}

ruScriptCompareFuncs() -> [ScriptFn] {
	[
		ScriptFn("==", \args -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(as[0] == as[1]), "==", 2);
			} else {
				if (!ruAllArgsAreOfSameType(args)) {
					RuRuntimeError(["comparing values of different types: " + ruScValues2s(args)]);
				} else {
					first_arg_type = runtimeValueType(args[0]);
					if (first_arg_type == "bool")   ruEvalBoolFn(args,   \as -> Some(as[0] == as[1]), "==", 2) else 
					if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] == as[1]), "==", 2) else 
					if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] == as[1]), "==", 2) else 
					if (first_arg_type == "array")  ruEvalArrayFn(args,  \as -> Some(as[0] == as[1]), "==", 2) else 
					if (first_arg_type == "map")    ruEvalTreeFn(args,   \as -> Some(as[0] == as[1]), "==", 2) else
					RuRuntimeError(["operator == is undefined on arguments: " + ruScValues2s(args)]);
				}
			}
		}),
		ScriptFn("!=", \args -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(as[0] != as[1]), "!=", 2);
			} else {
				if (!ruAllArgsAreOfSameType(args)) {
					RuRuntimeError(["comparing values of different types: " + ruScValues2s(args)]);
				} else {
					first_arg_type = runtimeValueType(args[0]);
					if (first_arg_type == "bool")   ruEvalBoolFn(args,   \as -> Some(as[0] != as[1]), "!=", 2) else 
					if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] != as[1]), "!=", 2) else 
					if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] != as[1]), "!=", 2) else 
					if (first_arg_type == "array")  ruEvalArrayFn(args,  \as -> Some(as[0] != as[1]), "!=", 2) else 
					if (first_arg_type == "map")    ruEvalTreeFn(args,   \as -> Some(as[0] != as[1]), "!=", 2) else
					RuRuntimeError(["operator != is undefined on arguments: " + ruScValues2s(args)]);
				}
			}
		}),
		ScriptFn("<=", \args -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(as[0] <= as[1]), "<=", 2);
			} else {
				first_arg_type = runtimeValueType(args[0]);
				if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] <= as[1]), "<=", 2) else 
				if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] <= as[1]), "<=", 2) else 
				RuRuntimeError(["operator <= is undefined on arguments: " + ruScValues2s(args)]);
			}
		}),
		ScriptFn(">=", \args -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(as[0] >= as[1]), ">=", 2);
			} else {
				first_arg_type = runtimeValueType(args[0]);
				if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] >= as[1]), ">=", 2) else 
				if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] >= as[1]), ">=", 2) else 
				RuRuntimeError(["operator >= is undefined on arguments: " + ruScValues2s(args)]);
			}
		}),
		ScriptFn("<", \args -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(as[0] < as[1]), "<", 2);
			} else {
				first_arg_type = runtimeValueType(args[0]);
				if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] < as[1]), "<", 2) else 
				if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] < as[1]), "<", 2) else 
				RuRuntimeError(["operator < is undefined on arguments: " + ruScValues2s(args)]);
			}
		}),
		ScriptFn(">", \args -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(as[0] > as[1]), ">", 2);
			} else {
				first_arg_type = runtimeValueType(args[0]);
				if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] > as[1]), ">", 2) else 
				if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] > as[1]), ">", 2) else 
				RuRuntimeError(["operator > is undefined on arguments: " + ruScValues2s(args)]);
			}
		}),
	]
}

import script/value;

export {
	ruScriptCompareFuncs() -> [Pair<string, ScriptFn>];
}

ruScriptCompareFuncs() -> [Pair<string, ScriptFn>] {
	[
		Pair("==", ScriptFn(\args, conf -> {
			if (ruHasStringArg(args)) {
				ruEvalStringPred(args, \as -> if (length(as) != 2) None() else Some(as[0] == as[1]));
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntPred(args,    \as -> if (length(as) != 2) None() else Some(as[0] == as[1]));
					ValDouble(__): ruEvalDoublePred(args, \as -> if (length(as) != 2) None() else Some(as[0] == as[1]));
					default: None();
				}
			}
		})),
		Pair("!=", ScriptFn(\args, conf -> {
			if (ruHasStringArg(args)) {
				ruEvalStringPred(args, \as -> if (length(as) != 2) None() else Some(as[0] != as[1]));
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntPred(args,    \as -> if (length(as) != 2) None() else Some(as[0] != as[1]));
					ValDouble(__): ruEvalDoublePred(args, \as -> if (length(as) != 2) None() else Some(as[0] != as[1]));
					default: None();
				}
			}
		})),
		Pair("<=", ScriptFn(\args, conf -> {
			if (ruHasStringArg(args)) {
				ruEvalStringPred(args, \as -> if (length(as) != 2) None() else Some(as[0] <= as[1]));
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntPred(args,    \as -> if (length(as) != 2) None() else Some(as[0] <= as[1]));
					ValDouble(__): ruEvalDoublePred(args, \as -> if (length(as) != 2) None() else Some(as[0] <= as[1]));
					default: None();
				}
			}
		})),
		Pair(">=", ScriptFn(\args, conf -> {
			if (ruHasStringArg(args)) {
				ruEvalStringPred(args, \as -> if (length(as) != 2) None() else Some(as[0] >= as[1]));
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntPred(args,    \as -> if (length(as) != 2) None() else Some(as[0] >= as[1]));
					ValDouble(__): ruEvalDoublePred(args, \as -> if (length(as) != 2) None() else Some(as[0] >= as[1]));
					default: None();
				}
			}
		})),
		Pair("<", ScriptFn(\args, conf -> {
			if (ruHasStringArg(args)) {
				ruEvalStringPred(args, \as -> if (length(as) != 2) None() else Some(as[0] < as[1]));
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntPred(args,    \as -> if (length(as) != 2) None() else Some(as[0] < as[1]));
					ValDouble(__): ruEvalDoublePred(args, \as -> if (length(as) != 2) None() else Some(as[0] < as[1]));
					default: None();
				}
			}
		})),
		Pair(">", ScriptFn(\args, conf -> {
			if (ruHasStringArg(args)) {
				ruEvalStringPred(args, \as -> if (length(as) != 2) None() else Some(as[0] > as[1]));
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntPred(args,    \as -> if (length(as) != 2) None() else Some(as[0] > as[1]));
					ValDouble(__): ruEvalDoublePred(args, \as -> if (length(as) != 2) None() else Some(as[0] > as[1]));
					default: None();
				}
			}
		})),
	]
}
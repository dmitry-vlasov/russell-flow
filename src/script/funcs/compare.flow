import script/func;
import script/util;

export {
	ruScriptCompareFuncs() -> [ScriptFn];
}

ruScriptCompareFuncs() -> [ScriptFn] {
	[
		ScriptFn("==", \args, state, out -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(ValBool(as[0] == as[1])), "==", 2);
			} else {
				if (!ruAllArgsAreOfSameType(args)) {
					ValError(["comparing values of different types: " + ruValues2s(args)]);
				} else {
					switch (args[0]) {
						ValBool(__):    ruEvalBoolFn(args,   \as -> Some(ValBool(as[0] == as[1])), "==", 2);
						ValInt(__):     ruEvalIntFn(args,    \as -> Some(ValBool(as[0] == as[1])), "==", 2);
						ValDouble(__):  ruEvalDoubleFn(args, \as -> Some(ValBool(as[0] == as[1])), "==", 2);
						ValArray(__):   ruEvalArrayFn(args,  \as -> Some(ValBool(as[0] == as[1])), "==", 2);
						ValMap(__):     ruEvalTreeFn(args,   \as -> Some(ValBool(as[0] == as[1])), "==", 2);
						ValData(__,__): ruEvalDataFn(args,   \as -> Some(ValBool(as[0] == as[1])), "==", 2);
						default: ValError(["operator == is undefined on arguments: " + ruValues2s(args)]);
					}
				}
			}
		}),
		ScriptFn("!=", \args, state, out -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(ValBool(as[0] != as[1])), "!=", 2);
			} else {
				if (!ruAllArgsAreOfSameType(args)) {
					ValError(["comparing values of different types: " + ruValues2s(args)]);
				} else {
					switch (args[0]) {
						ValBool(__):    ruEvalBoolFn(args,   \as -> Some(ValBool(as[0] != as[1])), "!=", 2);
						ValInt(__):     ruEvalIntFn(args,    \as -> Some(ValBool(as[0] != as[1])), "!=", 2);
						ValDouble(__):  ruEvalDoubleFn(args, \as -> Some(ValBool(as[0] != as[1])), "!=", 2);
						ValArray(__):   ruEvalArrayFn(args,  \as -> Some(ValBool(as[0] != as[1])), "!=", 2);
						ValMap(__):     ruEvalTreeFn(args,   \as -> Some(ValBool(as[0] != as[1])), "!=", 2);
						ValData(__,__): ruEvalDataFn(args,   \as -> Some(ValBool(as[0] != as[1])), "!=", 2);
						default: ValError(["operator != is undefined on arguments: " + ruValues2s(args)]);
					}
				}
			}
		}),
		ScriptFn("<=", \args, state, out -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(ValBool(as[0] <= as[1])), "<=", 2);
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntFn(args,    \as -> Some(ValBool(as[0] <= as[1])), "<=", 2);
					ValDouble(__): ruEvalDoubleFn(args, \as -> Some(ValBool(as[0] <= as[1])), "<=", 2);
					default: ValError(["operator <= is undefined on arguments: " + ruValues2s(args)]);
				}
			}
		}),
		ScriptFn(">=", \args, state, out -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(ValBool(as[0] >= as[1])), ">=", 2);
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntFn(args,    \as -> Some(ValBool(as[0] >= as[1])), ">=", 2);
					ValDouble(__): ruEvalDoubleFn(args, \as -> Some(ValBool(as[0] >= as[1])), ">=", 2);
					default: ValError(["operator >= is undefined on arguments: " + ruValues2s(args)]);
				}
			}
		}),
		ScriptFn("<", \args, state, out -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(ValBool(as[0] < as[1])), "<", 2);
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntFn(args,    \as -> Some(ValBool(as[0] < as[1])), "<", 2);
					ValDouble(__): ruEvalDoubleFn(args, \as -> Some(ValBool(as[0] < as[1])), "<", 2);
					default: ValError(["operator < is undefined on arguments: " + ruValues2s(args)]);
				}
			}
		}),
		ScriptFn(">", \args, state, out -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(ValBool(as[0] > as[1])), ">", 2);
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntFn(args,    \as -> Some(ValBool(as[0] > as[1])), ">", 2);
					ValDouble(__): ruEvalDoubleFn(args, \as -> Some(ValBool(as[0] > as[1])), ">", 2);
					default: ValError(["operator > is undefined on arguments: " + ruValues2s(args)]);
				}
			}
		}),
	]
}

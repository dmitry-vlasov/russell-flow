import script/value;

export {
	ruScriptNumericFuncs() -> [Pair<string, ScriptFn>];
}

ruScriptNumericFuncs() -> [Pair<string, ScriptFn>] {
	[
		Pair("+", ScriptFn(\args, conf -> {
			if (ruHasStringArg(args)) {
				ruEvalStringFn(args, \as -> Some(fold(as, "",  \acc, a -> acc + a)));
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntFn(args,   \as -> Some(fold(as, 0,    \acc, a -> acc + a)));
					ValDouble(__): ruEvalDoubleFn(args, \as -> Some(fold(as, 0.0, \acc, a -> acc + a)));
					default: None();
				}
			}
		})),
		Pair("*", ScriptFn(\args, conf -> 
			switch (args[0]) {
				ValInt(__):    ruEvalIntFn(args,    \as -> Some(fold(as, 1,   \acc, a -> acc * a)));
				ValDouble(__): ruEvalDoubleFn(args, \as -> Some(fold(as, 1.0, \acc, a -> acc * a)));
				default: None();
			}
		)),
		Pair("-", ScriptFn(\args, conf -> 
			switch (args[0]) {
				ValInt(v):  {
					if (length(args) == 1) Some(ValInt(-v)) else
					ruEvalIntFn(args,    \as -> if (length(as) != 2) None() else Some(as[0] - as[1]));
				}
				ValDouble(v): {
					if (length(args) == 1) Some(ValDouble(-v)) else
					ruEvalDoubleFn(args, \as -> if (length(as) != 2) None() else Some(as[0] - as[1]));
				}
				default: None();
			}
		)),
		Pair("/", ScriptFn(\args, conf -> 
			switch (args[0]) {
				ValInt(v): 
					ruEvalIntFn(args, \as -> if (length(as) != 2 || as[1] == 0) None() else Some(as[0] / as[1]));
				ValDouble(v):
					ruEvalDoubleFn(args, \as -> if (length(as) != 2 || as[1] == 0.0) None() else Some(as[0] / as[1]));
				default: None();
			}
		)),
		Pair("%", ScriptFn(\args, conf -> 
			switch (args[0]) {
				ValInt(v): 
					ruEvalIntFn(args, \as -> if (length(as) != 2 || as[1] == 0) None() else Some(as[0] % as[1]));
				ValDouble(v):
					ruEvalDoubleFn(args, \as -> if (length(as) != 2 || as[1] == 0.0) None() else Some(as[0] % as[1]));
				default: None();
			}
		)),
	]
}

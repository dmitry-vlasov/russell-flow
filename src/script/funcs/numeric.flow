import script/func;
import script/util;

export {
	ruScriptNumericFuncs() -> [ScriptFn];
}

ruScriptNumericFuncs() -> [ScriptFn] {
	[
		ScriptFn("+", \args, state, out -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(ValString(fold(as, "",  \acc, a -> acc + a))), "+", -1);
			} else {
				switch (args[0]) {
					ValInt(__):    ruEvalIntFn(args,    \as -> Some(ValInt(fold(as, 0,    \acc, a -> acc + a))), "+", -1);
					ValDouble(__): ruEvalDoubleFn(args, \as -> Some(ValDouble(fold(as, 0.0, \acc, a -> acc + a))), "+", -1);
					ValArray(__):  ruEvalArrayFn(args,  \as -> Some(ValArray(concatA(as))), "+", -1);
					ValMap(__):    ruEvalTreeFn(args,   \as -> Some(ValMap(fold(tail(as), as[0], \acc, t -> mergeTree(acc, t)))), "+", -1);
					default: ValError(["operator + is undefined on arguments: " + ruValues2s(args)]);
				}
			}
		}),
		ScriptFn("*", \args, state, out -> 
			switch (args[0]) {
				ValInt(__):    ruEvalIntFn(args,    \as -> Some(ValInt(fold(as, 1,   \acc, a -> acc * a))), "*", -1);
				ValDouble(__): ruEvalDoubleFn(args, \as -> Some(ValDouble(fold(as, 1.0, \acc, a -> acc * a))), "*", -1);
				default: ValError(["operator * is undefined on arguments: " + ruValues2s(args)]);
			}
		),
		ScriptFn("-", \args, state, out -> 
			if (length(args) == 1) {
				switch (args[0]) {
					ValInt(v):    ValInt(-v);
					ValDouble(v): ValDouble(-v);
					default: ValError(["operator - is undefined on arguments: " + ruValues2s(args)]);
				}
			} else {
				switch (args[0]) {
					ValInt(v):    ruEvalIntFn(args,    \as -> Some(ValInt(as[0] - as[1])), "-", 2);
					ValDouble(v): ruEvalDoubleFn(args, \as -> Some(ValDouble(as[0] - as[1])), "-", 2);
					default: ValError(["operator - is undefined on arguments: " + ruValues2s(args)]);
				}
			}
		),
		ScriptFn("/", \args, state, out -> 
			switch (args[0]) {
				ValInt(v):    ruEvalIntFn(args, \as -> if (as[1] == 0) None() else Some(ValInt(as[0] / as[1])), "/", 2);
				ValDouble(v): ruEvalDoubleFn(args, \as -> if (as[1] == 0.0) None() else Some(ValDouble(as[0] / as[1])), "/", 2);
				default:  ValError(["operator / is undefined on arguments: " + ruValues2s(args)]);
			}
		),
		ScriptFn("%", \args, state, out -> 
			switch (args[0]) {
				ValInt(v):    ruEvalIntFn(args, \as -> if (as[1] == 0) None() else Some(ValInt(as[0] % as[1])), "%", 2);
				ValDouble(v): ruEvalDoubleFn(args, \as -> if (as[1] == 0.0) None() else Some(ValDouble(as[0] % as[1])), "%", 2);
				default: ValError(["operator % is undefined on arguments: " + ruValues2s(args)]);
			}
		),
	]
}

import script/func;
import script/util;

export {
	ruScriptNumericFuncs() -> [ScriptFn];
}

ruScriptNumericFuncs() -> [ScriptFn] {
	[
		ScriptFn("+", \args -> {
			if (ruHasStringArg(args)) {
				ruEvalToStringFn(args, \as -> Some(fold(as, "",  \acc, a -> acc + a)), "+", -1);
			} else {
				arg = args[0];
				arg_type = runtimeValueType(arg);
				if (arg_type == "int")    ruEvalIntFn(args,    \as -> Some(fold(as, 0,    \acc, a -> acc + a)), "+", -1) else
				if (arg_type == "double") ruEvalDoubleFn(args, \as -> Some(fold(as, 0.0, \acc, a -> acc + a)), "+", -1) else
				if (arg_type == "array")  ruEvalArrayFn(args,  \as -> Some(concatA(as)), "+", -1) else
				if (arg_type == "map")    ruEvalTreeFn(args,   \as -> Some(fold(tail(as), as[0], \acc, t -> mergeTree(acc, t))), "+", -1) else
				RuRuntimeError(["operator + is undefined on arguments: " + ruScValues2s(args)]);
			}
		}),
		ScriptFn("*", \args -> {
			first_arg_type = runtimeValueType(args[0]);
			if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(fold(as, 1,   \acc, a -> acc * a)), "*", -1) else 
			if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(fold(as, 1.0, \acc, a -> acc * a)), "*", -1) else 
			RuRuntimeError(["operator * is undefined on arguments: " + ruScValues2s(args)]);
		}),
		ScriptFn("-", \args -> 
			if (length(args) == 1) {
				first_arg_type = runtimeValueType(args[0]);
				if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(-as[0]), "-", 1) else 
				if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(-as[0]), "-", 1) else 
				RuRuntimeError(["operator - is undefined on arguments: " + ruScValues2s(args)]);
			} else {
				first_arg_type = runtimeValueType(args[0]);
				if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] - as[1]), "-", 2) else 
				if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] - as[1]), "-", 2) else 
				RuRuntimeError(["operator - is undefined on arguments: " + ruScValues2s(args)]);
			}
		),
		ScriptFn("/", \args -> {
			first_arg_type = runtimeValueType(args[0]);
			if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] / as[1]), "/", 2) else 
			if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] / as[1]), "/", 2) else 
			RuRuntimeError(["operator / is undefined on arguments: " + ruScValues2s(args)]);
		}),
		ScriptFn("%", \args -> {
			first_arg_type = runtimeValueType(args[0]);
			if (first_arg_type == "int")    ruEvalIntFn(args,    \as -> Some(as[0] % as[1]), "%", 2) else 
			if (first_arg_type == "double") ruEvalDoubleFn(args, \as -> Some(as[0] % as[1]), "%", 2) else
			RuRuntimeError(["operator % is undefined on arguments: " + ruScValues2s(args)]);
		}),
	]
}

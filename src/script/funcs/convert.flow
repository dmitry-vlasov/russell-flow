import script/func;
import script/util;

export {
	ruScriptConvertFuncs() -> [ScriptFn];
}

ruScriptConvertFuncs() -> [ScriptFn] {
	[
		ScriptFn("a2i", \args -> 
			ruEvalValueFn(args, \as -> {
					arg = as[0];
					arg_type = runtimeValueType(arg);
					if (arg_type == "int")    Some(flow(arg)) else
					if (arg_type == "double") Some(flow(round(cast(arg : flow -> double)))) else
					if (arg_type == "string") Some(flow(s2i(cast(arg : flow -> string)))) else
					if (arg_type == "bool")   Some(flow(if (cast(arg : flow -> bool)) 1 else 0)) else
					None();
				}, "a2i", 1
			)
		),
		ScriptFn("a2d", \args -> 
			ruEvalValueFn(args, \as -> {
					arg = as[0];
					arg_type = runtimeValueType(arg);
					if (arg_type == "int")    Some(flow(i2d(cast(arg : flow -> int)))) else
					if (arg_type == "double") Some(flow(arg)) else
					if (arg_type == "string") Some(flow(s2d(cast(arg : flow -> string)))) else
					if (arg_type == "bool")   Some(flow(if (cast(arg : flow -> bool)) 1.0 else 0.0)) else
					None();
				}, "a2d", 1
			)
		),
		ScriptFn("a2s", \args ->
			ruEvalValueFn(args, \as -> {
					arg = as[0];
					arg_type = runtimeValueType(arg);
					if (arg_type == "int")    Some(flow(i2s(cast(arg : flow -> int)))) else
					if (arg_type == "double") Some(flow(d2s(cast(arg : flow -> double)))) else
					if (arg_type == "string") Some(flow(arg)) else
					if (arg_type == "bool")   Some(flow(if (cast(arg : flow -> bool)) "true" else "false")) else
					None();
				}, 
				"a2s", 1
			)
		),
		ScriptFn("a2b", \args -> 
			ruEvalValueFn(args, \as -> {
					arg = as[0];
					arg_type = runtimeValueType(arg);
					if (arg_type == "int")    Some(flow(cast(arg : flow -> int) != 0)) else
					if (arg_type == "double") Some(flow(cast(arg : flow -> double) != 0.0)) else
					if (arg_type == "string") Some(flow(cast(arg : flow -> string) != "false")) else
					if (arg_type == "bool")   Some(flow(arg)) else
					None();
				}, "a2b", 1
			)
		),
	]
}

import script/func;

export {
	ruScriptUtilFuncs() -> [Pair<string, ScriptFn>];
}

ruScriptUtilFuncs() -> [Pair<string, ScriptFn>] {
	[
		Pair("cwd", ScriptFn(\args, state, out ->
			if (length(args) != 0) None() else {
				Some(ValString(ruCurrentWorkingDir()))
			}
		)),
		Pair("isdef", ScriptFn(\args, state, out ->
			if (length(args) != 1) None() else {
				switch (args[0]) {
					ValUndef(): Some(ValBool(false));
					default: Some(ValBool(true));
				}
			}
		)),
		Pair("mem2s", ScriptFn(\args, state, out ->
			if (length(args) != 1) None() else {
				switch (args[0]) {
					ValDouble(mem): Some(ValString(memory2s(mem)));
					default: Some(ValUndef());
				}
			}
		)),
		Pair("ass2s", ScriptFn(\args, state, out ->
			if (length(args) != 1) None() else {
				switch (args[0]) {
					ValData(type, data): {
						if (!contains(["RuAssertion", "RuAxiom", "RuDef", "RuTheorem"], type)) None() else {
							ass = cast(data : flow -> RuAssertion);
							math = ruMakeMathFromSources(state.ru, RuEnv(state.conf, out));
							Some(ValString(ru2s(ass, math)));
						}
					}
					ValString(name): {
						math = ruMakeMathFromSources(state.ru, RuEnv(state.conf, out));
						switch (lookupTree(math.assertions, s2id(name))) {
							Some(ass): Some(ValString(ru2s(ass, math)));
							None(): Some(ValUndef());
						}
					}
					default: Some(ValUndef());
				}
			}
		)),
	]
}

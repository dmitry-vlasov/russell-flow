import base/conf;

export {
	ScValue ::= ScScalar, ScArray, ScMap, ScUndef, ScData, ScError;
		ScUndef();
		ScArray(arr : [ScValue]);
		ScMap(map : Tree<ScValue, ScValue>);
		ScData(type : string, data : flow);
		ScError(errs : [string]);

	ScScalar ::= ScVoid, ScBool, ScInt, ScDouble, ScString;
		ScVoid();
		ScBool(val : bool);
		ScInt(val : int);
		ScDouble(val : double);
		ScString(val : string);
	
	ruScValue2s(v : ScValue) -> string;
	ruScValues2s(vs : [ScValue]) -> string;
	ruScriptDepth(vals : Tree<string, ScValue>) -> int;
	ruScueType(v : ScValue) -> string;

	ruScueIsVoid(v : ScValue) -> bool;
	ruScueIsBool(v : ScValue) -> bool;
	ruScueIsInt(v : ScValue) -> bool;
	ruScueIsDouble(v : ScValue) -> bool;
	ruScueIsString(v : ScValue) -> bool;
	ruScueIsUndef(v : ScValue) -> bool;
	ruScueIsArray(v : ScValue) -> bool;
	ruScueIsMap(v : ScValue) -> bool;
	ruScueIsData(v : ScValue) -> bool;
	ruScueIsError(v : ScValue) -> bool;

	ruHasStringArg(args : [ScValue]) -> bool;
	ruHasUndefArg(args : [ScValue]) -> bool;
	ruErrorArgs(args : [ScValue]) -> [string];

	ruAllArgsAreVoid(args : [ScValue]) -> bool;
	ruAllArgsAreUndef(args : [ScValue]) -> bool;
	ruAllArgsAreArrays(args : [ScValue]) -> bool;
	ruAllArgsAreMaps(args : [ScValue]) -> bool;
	ruAllArgsAreOfSameType(args : [ScValue]) -> bool;

	ruFilterBoolArgs(args : [ScValue]) -> Maybe<[bool]>;
	ruFilterIntArgs(args : [ScValue]) -> Maybe<[int]>;
	ruFilterDoubleArgs(args : [ScValue]) -> Maybe<[double]>;
	ruFilterStringArgs(args : [ScValue]) -> Maybe<[string]>;
	ruFilterArrayArgs(args : [ScValue]) -> Maybe<[[ScValue]]>;
	ruFilterMapArgs(args : [ScValue]) -> Maybe<[Tree<ScValue, ScValue>]>;
	ruFilterDataArgs(args : [ScValue]) -> Maybe<[ScData]>;

	ruEvalArityError(args : [ScValue], sign : string, arity : int) -> ScError;
	ruEvalComputeError(args : [ScValue], sign : string) -> ScError;
	ruEvalArgTypeError(args : [ScValue], sign : string, type : string) -> ScError;
}

ruScValue2s(v : ScValue) -> string {
	switch (v) {
		ScArray(arr) : {
			arr_s = map(arr, ruScValue2s);
			has_newlines = exists(arr_s, \s -> strContains(s, "\n"));
			length = fold(arr_s, 0, \acc, s -> acc + strlen(s) + 2);
			if (has_newlines || length > 80) {
				"[\n" + strIndent(strGlue(arr_s, "\n")) + "\n]";
			} else {
				"[" + strGlue(arr_s, ", ") + "]";
			}
		}
		ScMap(m): {
			keys = map(getTreeKeys(m), ruScValue2s);
			vals = map(getTreeValues(m), ruScValue2s);
			has_newlines = exists(vals, \s -> strContains(s, "\n"));
			length = 
				fold(keys, 0, \acc, key -> acc + strlen(key) + 1) + 
				fold(vals, 0, \acc, val -> acc + strlen(val) + 2);
			if (has_newlines || length > 80) {
				"[\n" + strIndent(strGlue(map(tree2pairs(m), \p -> ruScValue2s(p.first) + "=" + ruScValue2s(p.second)), "\n")) + "\n]";
			} else {
				"[" + strGlue(map(tree2pairs(m), \p -> ruScValue2s(p.first) + "=" + ruScValue2s(p.second)), ", ") + "]";
			}
		}
		ScData(type, data): type + ": " + toString(data);
		ScUndef():    "undef";
		ScVoid():     "void";
		ScBool(val):   b2s(val);
		ScInt(val):    i2s(val);
		ScDouble(val): d2s(val);
		ScString(val): val;
		ScError(errs): 
			if (length(errs) == 0) "error" else 
			if (length(errs) == 1) "error: " + errs[0] else 
			"errors:\n" + strIndent(strGlue(errs, "\n"));
	}
}

ruScValues2s(vs : [ScValue]) -> string {
	strGlue(map(vs, ruScValue2s), ", ");
}

ruScriptDepth(vals : Tree<string, ScValue>) -> int {
	switch(lookupTreeDef(vals, "script.depth", ScInt(0))) {
		ScInt(n): n;
		default: 0;
	};
}

ruScueType(v : ScValue) -> string {
	switch (v) {
		ScArray(__):      "array";
		ScMap(m):         "map";
		ScData(type, __): type;
		ScUndef():        "undef";
		ScVoid():         "void";
		ScBool(val):      "bool";
		ScInt(val):       "int";
		ScDouble(val):    "double";
		ScString(val):    "string";
		ScError(err):     "error";
	}
}

ruScueIsVoid(v : ScValue) -> bool {
	switch (v) {
		ScVoid(): true;
		default: false;
	}
}

ruScueIsBool(v : ScValue) -> bool {
	switch (v) {
		ScBool(__): true;
		default: false;
	}
}

ruScueIsInt(v : ScValue) -> bool {
	switch (v) {
		ScInt(__): true;
		default: false;
	}
}

ruScueIsDouble(v : ScValue) -> bool {
	switch (v) {
		ScDouble(__): true;
		default: false;
	}
}

ruScueIsString(v : ScValue) -> bool {
	switch (v) {
		ScString(__): true;
		default: false;
	}
}

ruScueIsUndef(v : ScValue) -> bool {
	switch (v) {
		ScUndef(): true;
		default: false;
	}
}

ruScueIsArray(v : ScValue) -> bool {
	switch (v) {
		ScArray(__): true;
		default: false;
	}
}

ruScueIsMap(v : ScValue) -> bool {
	switch (v) {
		ScMap(__): true;
		default: false;
	}
}

ruScueIsData(v : ScValue) -> bool {
	switch (v) {
		ScData(__,__): true;
		default: false;
	}
}

ruScueIsError(v : ScValue) -> bool {
	switch (v) {
		ScError(__): true;
		default: false;
	}
}

ruHasStringArg(args : [ScValue]) -> bool {
	exists(args, ruScueIsString);
}

ruHasUndefArg(args : [ScValue]) -> bool {
	exists(args, ruScueIsUndef);
}

ruErrorArgs(args : [ScValue]) -> [string] {
	concatA(filtermap(args, \arg -> 
		switch (arg) {
			ScError(err): Some(err);
			default: None();
		}
	));
}

ruAllArgsAreVoid(args : [ScValue]) -> bool {
	forall(args, ruScueIsVoid);
}

ruAllArgsAreUndef(args : [ScValue]) -> bool {
	forall(args, ruScueIsUndef);
}

ruAllArgsAreArrays(args : [ScValue]) -> bool {
	forall(args, ruScueIsArray);
}

ruAllArgsAreMaps(args : [ScValue]) -> bool {
	forall(args, ruScueIsMap);
}

ruAllArgsAreOfSameType(args : [ScValue]) -> bool {
	if (length(args) == 0) true else {
		switch (args[0]) {
			ScArray(__) :  forall(args, ruScueIsArray);
			ScMap(__):     forall(args, ruScueIsMap);
			ScData(__,__): forall(args, ruScueIsData);
			ScUndef():     forall(args, ruScueIsUndef);
			ScVoid():      forall(args, ruScueIsVoid);
			ScBool(__):    forall(args, ruScueIsBool);
			ScInt(__):     forall(args, ruScueIsInt);
			ScDouble(__):  forall(args, ruScueIsDouble);
			ScString(__):  forall(args, ruScueIsString);
			ScError(__):   forall(args, ruScueIsError);
		}
	}
}

ruFilterBoolArgs(args : [ScValue]) -> Maybe<[bool]> {
	bool_args = filtermap(args, \arg -> 
		switch (arg) {
			ScBool(v): Some(v);
			default: None();
		}
	);
	if (length(args) != length(bool_args)) None() else Some(bool_args);
}

ruFilterIntArgs(args : [ScValue]) -> Maybe<[int]> {
	int_args = filtermap(args, \arg -> 
		switch (arg) {
			ScInt(v): Some(v);
			default: None();
		}
	);
	if (length(args) != length(int_args)) None() else Some(int_args);
}

ruFilterDoubleArgs(args : [ScValue]) -> Maybe<[double]> {
	double_args = filtermap(args, \arg -> 
		switch (arg) {
			ScDouble(v): Some(v);
			default: None();
		}
	);
	if (length(args) != length(double_args)) None() else Some(double_args);
}

ruFilterStringArgs(args : [ScValue]) -> Maybe<[string]> {
	str_args = filtermap(args, \arg -> 
		switch (arg) {
			ScString(s): Some(s);
			default: None();
		}
	);
	if (length(args) != length(str_args)) None() else Some(str_args);
}

ruFilterArrayArgs(args : [ScValue]) -> Maybe<[[ScValue]]> {
	arr_args = filtermap(args, \arg -> 
		switch (arg) {
			ScArray(a): Some(a);
			default: None();
		}
	);
	if (length(args) != length(arr_args)) None() else Some(arr_args);
}

ruFilterMapArgs(args : [ScValue]) -> Maybe<[Tree<ScValue, ScValue>]> {
	map_args = filtermap(args, \arg -> 
		switch (arg) {
			ScMap(m): Some(m);
			default: None();
		}
	);
	if (length(args) != length(map_args)) None() else Some(map_args);
}

ruFilterDataArgs(args : [ScValue]) -> Maybe<[ScData]> {
	data_args = filtermap(args, \arg -> 
		switch (arg) {
			ScData(__,__): Some(arg);
			default: None();
		}
	);
	if (length(args) != length(data_args)) None() else Some(data_args);
}

ruEvalArityError(args : [ScValue], sign : string, arity : int) -> ScError {
	ScError(["function '" + sign + "' must take exactly " + i2s(arity) + " arguments, actual number of arguments: " + i2s(length(args))]); 
}

ruEvalComputeError(args : [ScValue], sign : string) -> ScError {
	ScError(["error while computing '" + sign + "' on arguments: " + ruScValues2s(args)]); 
}

ruEvalArgTypeError(args : [ScValue], sign : string, type : string) -> ScError {
	ScError(["function '" + sign + "' must take only '" + type + "' arguments, actual arguments: " + ruScValues2s(args)]); 
}

import base/conf;

export {
	RuRuntimeError(
		errs : [string]
	);
	RuUndefVal();

	ruScValue2s(v : flow) -> string;
	ruScValues2s(vs : [flow]) -> string;
	ruScriptDepth(vals : Tree<string, flow>) -> int;

	ruHasStringArg(args : [flow]) -> bool;
	ruHasUndefArg(args : [flow]) -> bool;
	ruErrorArgs(args : [flow]) -> [string];

	ruAllArgsAreVoid(args : [flow]) -> bool;
	ruAllArgsAreUndef(args : [flow]) -> bool;
	ruAllArgsAreArrays(args : [flow]) -> bool;
	ruAllArgsAreMaps(args : [flow]) -> bool;
	ruAllArgsAreOfSameType(args : [flow]) -> bool;

	ruFilterBoolArgs(args : [flow]) -> Maybe<[bool]>;
	ruFilterIntArgs(args : [flow]) -> Maybe<[int]>;
	ruFilterDoubleArgs(args : [flow]) -> Maybe<[double]>;
	ruFilterStringArgs(args : [flow]) -> Maybe<[string]>;
	ruFilterArrayArgs(args : [flow]) -> Maybe<[[?]]>;
	ruFilterMapArgs(args : [flow]) -> Maybe<[Tree<?, ??>]>;

	ruEvalArityError(args : [flow], sign : string, arity : int) -> flow;
	ruEvalComputeError(args : [flow], sign : string) -> flow;
	ruEvalArgTypeError(args : [flow], sign : string, type : string) -> flow;

	ruScValue2json(v : flow) -> Maybe<Json>;
}

ruScValue2s(v : flow) -> string {
	type = runtimeValueType(v);
	if (type == "array") {
		arr = cast(v : flow -> [flow]);
		arr_s = map(arr, ruScValue2s);
		has_newlines = exists(arr_s, \s -> strContains(s, "\n"));
		length = fold(arr_s, 0, \acc, s -> acc + strlen(s) + 2);
		if (has_newlines || length > 80) {
			"[\n" + strIndent(strGlue(arr_s, "\n")) + "\n]";
		} else {
			"[" + strGlue(arr_s, ", ") + "]";
		}
	} else if (type == "TreeNode" || type == "TreeEmpty") {
		m = cast(v : flow -> Tree<flow, flow>);
		keys = map(getTreeKeys(m), ruScValue2s);
		vals = map(getTreeValues(m), ruScValue2s);
		has_newlines = exists(vals, \s -> strContains(s, "\n"));
		length = 
			fold(keys, 0, \acc, key -> acc + strlen(key) + 1) + 
			fold(vals, 0, \acc, val -> acc + strlen(val) + 2);
		if (has_newlines || length > 80) {
			"{\n" + 
				strIndent(strGlue(map(tree2pairs(m), \p -> 
					ruScValue2s(p.first) + "=" + ruScValue2s(p.second)
				), 
				"\n")) + 
			"\n}";
		} else {
			"{" + 
				strGlue(map(tree2pairs(m), \p -> 
					ruScValue2s(p.first) + "=" + ruScValue2s(p.second)
				), 
				", ") + 
			"}";
		}
	} else if (type == "int") {
		i2s(cast(v : flow -> int));
	} else if (type == "bool") {
		b2s(cast(v : flow -> bool));
	} else if (type == "double") {
		d2s(cast(v : flow -> double));
	} else if (type == "string") {
		cast(v : flow -> string);
	} else if (type == "flow") {
		toString(v);
	} else if (type == "ref") {
		rv = cast(v : flow -> ref flow);
		"ref " + ruScValue2s(^rv);
	} else if (type == "void") {
		"void";
	} else if (type == "function") {
		"function";
	} else if (isStructName(type)) {
		args = extractStructArguments(v);
		type + "(" + superglue(args, \arg -> ruScValue2s(arg), ", ") + ")";
	} else if (type == "RuRuntimeError") {
		e = cast(v : flow -> RuRuntimeError);
		if (length(e.errs) == 0) "error" else 
		if (length(e.errs) == 1) "error: " + e.errs[0] else 
		"errors:\n" + strIndent(strGlue(e.errs, "\n"));
	} else {
		"undef";
	}
}

ruScValues2s(vs : [flow]) -> string {
	strGlue(map(vs, ruScValue2s), ", ");
}

ruScriptDepth(vals : Tree<string, flow>) -> int {
	v = lookupTreeDef(vals, "script.depth", 0);
	if (runtimeValueType(v) == "int") cast(v : flow -> int) else 0;
}

ruHasStringArg(args : [flow]) -> bool {
	exists(args, \arg -> runtimeValueType(arg) == "string");
}

ruHasUndefArg(args : [flow]) -> bool {
	exists(args, \arg -> runtimeValueType(arg) == "undef");
}

ruErrorArgs(args : [flow]) -> [string] {
	concatA(filtermap(args, \arg -> 
		if (runtimeValueType(arg) == "error") Some(cast(arg : flow -> [string])) else None()
	));
}

ruAllArgsAreVoid(args : [flow]) -> bool {
	forall(args, \arg -> runtimeValueType(arg) == "void");
}

ruAllArgsAreUndef(args : [flow]) -> bool {
	forall(args, \arg -> runtimeValueType(arg) == "undef");
}

ruAllArgsAreArrays(args : [flow]) -> bool {
	forall(args, \arg -> runtimeValueType(arg) == "array");
}

ruAllArgsAreMaps(args : [flow]) -> bool {
	forall(args, \arg -> runtimeValueType(arg) == "map");
}

ruAllArgsAreOfSameType(args : [flow]) -> bool {
	if (length(args) == 0) true else {
		type = runtimeValueType(args[0]);
		forall(args, \arg -> runtimeValueType(arg) == type);
	}
}

ruFilterBoolArgs(args : [flow]) -> Maybe<[bool]> {
	bool_args = filtermap(args, \arg -> 
		if (runtimeValueType(arg) == "bool") Some(cast(arg : flow -> bool)) else None()
	);
	if (length(args) != length(bool_args)) None() else Some(bool_args);
}

ruFilterIntArgs(args : [flow]) -> Maybe<[int]> {
	int_args = filtermap(args, \arg -> 
		if (runtimeValueType(arg) == "int") Some(cast(arg : flow -> int)) else None()
	);
	if (length(args) != length(int_args)) None() else Some(int_args);
}

ruFilterDoubleArgs(args : [flow]) -> Maybe<[double]> {
	double_args = filtermap(args, \arg -> 
		if (runtimeValueType(arg) == "double") Some(cast(arg : flow -> double)) else None()
	);
	if (length(args) != length(double_args)) None() else Some(double_args);
}

ruFilterStringArgs(args : [flow]) -> Maybe<[string]> {
	str_args = filtermap(args, \arg -> 
		if (runtimeValueType(arg) == "string") Some(cast(arg : flow -> string)) else None()
	);
	if (length(args) != length(str_args)) None() else Some(str_args);
}

ruFilterArrayArgs(args : [flow]) -> Maybe<[[?]]> {
	arr_args = filtermap(args, \arg -> 
		if (runtimeValueType(arg) == "array") Some(cast(arg : flow -> [?])) else None()
	);
	if (length(args) != length(arr_args)) None() else Some(arr_args);
}

ruFilterMapArgs(args : [flow]) -> Maybe<[Tree<?, ??>]> {
	map_args = filtermap(args, \arg -> 
		if (runtimeValueType(arg) == "map") Some(cast(arg : flow -> Tree<?, ??>)) else None()
	);
	if (length(args) != length(map_args)) None() else Some(map_args);
}

ruEvalArityError(args : [flow], sign : string, arity : int) -> flow {
	RuRuntimeError(["function '" + sign + "' must take exactly " + i2s(arity) + " arguments, actual number of arguments: " + i2s(length(args))]);
}

ruEvalComputeError(args : [flow], sign : string) -> flow {
	RuRuntimeError(["error while computing '" + sign + "' on arguments: " + ruScValues2s(args)]);
}

ruEvalArgTypeError(args : [flow], sign : string, type : string) -> flow {
	RuRuntimeError(["function '" + sign + "' must take only '" + type + "' arguments, actual arguments: " + ruScValues2s(args)]);
}

ruScValue2json(v : flow) -> Maybe<Json> {
	type = runtimeValueType(v);
	if (type == "array") {
		arr = cast(v : flow -> [flow]);
		Some(JsonArray(filtermap(arr, ruScValue2json)));
	} else if (type == "TreeNode" || type == "TreeEmpty") {
		m = cast(v : flow -> Tree<flow, flow>);
		pairs = tree2pairs(m);
		Some(JsonObject(filtermap(pairs, \pair -> {
			if (runtimeValueType(pair.first) != "string") None() else {
				field = cast(pair.first : flow -> string);
				maybeMap(ruScValue2json(pair.second), \value -> Pair(field, value));
			}
		})));
	} else if (type == "int") {
		Some(JsonDouble(i2d(cast(v : flow -> int))));
	} else if (type == "bool") {
		Some(JsonBool(cast(v : flow -> bool)));
	} else if (type == "double") {
		Some(JsonDouble(cast(v : flow -> double)));
	} else if (type == "string") {
		Some(JsonString(cast(v : flow -> string)));
	} else if (type == "ref") {
		rv = cast(v : flow -> ref flow);
		ruScValue2json(^rv);
	} else if (type == "void") {
		Some(JsonNull());
	} else if (isStructName(type)) {
		struct = extractStructName(v);
		args = extractStructArguments(v);
		fields = structFieldNames(struct);
		Some(JsonObject(filtermapi(args, \i, arg -> 
			maybeMap(ruScValue2json(arg), \value -> Pair(fields[i], value))
		)));
	} else {
		None();
	}
}

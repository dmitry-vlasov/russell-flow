import base/conf;

export {
	ValValue ::= ValScalar, ValArray, ValMap, ValUndef, ValData, ValError;
		ValUndef();
		ValArray(arr : [ValValue]);
		ValMap(map : Tree<ValValue, ValValue>);
		ValData(type : string, data : flow);
		ValError(errs : [string]);

	ValScalar ::= ValVoid, ValBool, ValInt, ValDouble, ValString;
		ValVoid();
		ValBool(val : bool);
		ValInt(val : int);
		ValDouble(val : double);
		ValString(val : string);
	
	ruValue2s(v : ValValue) -> string;
	ruValues2s(vs : [ValValue]) -> string;
	ruScriptDepth(vals : Tree<string, ValValue>) -> int;
	ruValueType(v : ValValue) -> string;

	ruValueIsVoid(v : ValValue) -> bool;
	ruValueIsBool(v : ValValue) -> bool;
	ruValueIsInt(v : ValValue) -> bool;
	ruValueIsDouble(v : ValValue) -> bool;
	ruValueIsString(v : ValValue) -> bool;
	ruValueIsUndef(v : ValValue) -> bool;
	ruValueIsArray(v : ValValue) -> bool;
	ruValueIsMap(v : ValValue) -> bool;
	ruValueIsData(v : ValValue) -> bool;
	ruValueIsError(v : ValValue) -> bool;

	ruHasStringArg(args : [ValValue]) -> bool;
	ruHasUndefArg(args : [ValValue]) -> bool;
	ruErrorArgs(args : [ValValue]) -> [string];

	ruAllArgsAreVoid(args : [ValValue]) -> bool;
	ruAllArgsAreUndef(args : [ValValue]) -> bool;
	ruAllArgsAreArrays(args : [ValValue]) -> bool;
	ruAllArgsAreMaps(args : [ValValue]) -> bool;
	ruAllArgsAreOfSameType(args : [ValValue]) -> bool;

	ruFilterBoolArgs(args : [ValValue]) -> Maybe<[bool]>;
	ruFilterIntArgs(args : [ValValue]) -> Maybe<[int]>;
	ruFilterDoubleArgs(args : [ValValue]) -> Maybe<[double]>;
	ruFilterStringArgs(args : [ValValue]) -> Maybe<[string]>;
	ruFilterArrayArgs(args : [ValValue]) -> Maybe<[[ValValue]]>;
	ruFilterMapArgs(args : [ValValue]) -> Maybe<[Tree<ValValue, ValValue>]>;
	ruFilterDataArgs(args : [ValValue]) -> Maybe<[ValData]>;

	ruEvalArityError(args : [ValValue], sign : string, arity : int) -> ValError;
	ruEvalComputeError(args : [ValValue], sign : string) -> ValError;
	ruEvalArgTypeError(args : [ValValue], sign : string, type : string) -> ValError;
}

ruValue2s(v : ValValue) -> string {
	switch (v) {
		ValArray(arr) : {
			arr_s = map(arr, ruValue2s);
			has_newlines = exists(arr_s, \s -> strContains(s, "\n"));
			length = fold(arr_s, 0, \acc, s -> acc + strlen(s) + 2);
			if (has_newlines || length > 80) {
				"[\n" + strIndent(strGlue(arr_s, "\n")) + "\n]";
			} else {
				"[" + strGlue(arr_s, ", ") + "]";
			}
		}
		ValMap(m): {
			keys = map(getTreeKeys(m), ruValue2s);
			vals = map(getTreeValues(m), ruValue2s);
			has_newlines = exists(vals, \s -> strContains(s, "\n"));
			length = 
				fold(keys, 0, \acc, key -> acc + strlen(key) + 1) + 
				fold(vals, 0, \acc, val -> acc + strlen(val) + 2);
			if (has_newlines || length > 80) {
				"[\n" + strIndent(strGlue(map(tree2pairs(m), \p -> ruValue2s(p.first) + "=" + ruValue2s(p.second)), "\n")) + "\n]";
			} else {
				"[" + strGlue(map(tree2pairs(m), \p -> ruValue2s(p.first) + "=" + ruValue2s(p.second)), ", ") + "]";
			}
		}
		ValData(type, data): type + ": " + toString(data);
		ValUndef():    "undef";
		ValVoid():     "void";
		ValBool(val):   b2s(val);
		ValInt(val):    i2s(val);
		ValDouble(val): d2s(val);
		ValString(val): val;
		ValError(errs): 
			if (length(errs) == 0) "error" else 
			if (length(errs) == 1) "error: " + errs[0] else 
			"errors:\n" + strIndent(strGlue(errs, "\n"));
	}
}

ruValues2s(vs : [ValValue]) -> string {
	strGlue(map(vs, ruValue2s), ", ");
}

ruScriptDepth(vals : Tree<string, ValValue>) -> int {
	switch(lookupTreeDef(vals, "script.depth", ValInt(0))) {
		ValInt(n): n;
		default: 0;
	};
}

ruValueType(v : ValValue) -> string {
	switch (v) {
		ValArray(__):      "array";
		ValMap(m):         "map";
		ValData(type, __): type;
		ValUndef():        "undef";
		ValVoid():         "void";
		ValBool(val):      "bool";
		ValInt(val):       "int";
		ValDouble(val):    "double";
		ValString(val):    "string";
		ValError(err):     "error";
	}
}

ruValueIsVoid(v : ValValue) -> bool {
	switch (v) {
		ValVoid(): true;
		default: false;
	}
}

ruValueIsBool(v : ValValue) -> bool {
	switch (v) {
		ValBool(__): true;
		default: false;
	}
}

ruValueIsInt(v : ValValue) -> bool {
	switch (v) {
		ValInt(__): true;
		default: false;
	}
}

ruValueIsDouble(v : ValValue) -> bool {
	switch (v) {
		ValDouble(__): true;
		default: false;
	}
}

ruValueIsString(v : ValValue) -> bool {
	switch (v) {
		ValString(__): true;
		default: false;
	}
}

ruValueIsUndef(v : ValValue) -> bool {
	switch (v) {
		ValUndef(): true;
		default: false;
	}
}

ruValueIsArray(v : ValValue) -> bool {
	switch (v) {
		ValArray(__): true;
		default: false;
	}
}

ruValueIsMap(v : ValValue) -> bool {
	switch (v) {
		ValMap(__): true;
		default: false;
	}
}

ruValueIsData(v : ValValue) -> bool {
	switch (v) {
		ValData(__,__): true;
		default: false;
	}
}

ruValueIsError(v : ValValue) -> bool {
	switch (v) {
		ValError(__): true;
		default: false;
	}
}

ruHasStringArg(args : [ValValue]) -> bool {
	exists(args, ruValueIsString);
}

ruHasUndefArg(args : [ValValue]) -> bool {
	exists(args, ruValueIsUndef);
}

ruErrorArgs(args : [ValValue]) -> [string] {
	concatA(filtermap(args, \arg -> 
		switch (arg) {
			ValError(err): Some(err);
			default: None();
		}
	));
}

ruAllArgsAreVoid(args : [ValValue]) -> bool {
	forall(args, ruValueIsVoid);
}

ruAllArgsAreUndef(args : [ValValue]) -> bool {
	forall(args, ruValueIsUndef);
}

ruAllArgsAreArrays(args : [ValValue]) -> bool {
	forall(args, ruValueIsArray);
}

ruAllArgsAreMaps(args : [ValValue]) -> bool {
	forall(args, ruValueIsMap);
}

ruAllArgsAreOfSameType(args : [ValValue]) -> bool {
	if (length(args) == 0) true else {
		switch (args[0]) {
			ValArray(__) :  forall(args, ruValueIsArray);
			ValMap(__):     forall(args, ruValueIsMap);
			ValData(__,__): forall(args, ruValueIsData);
			ValUndef():     forall(args, ruValueIsUndef);
			ValVoid():      forall(args, ruValueIsVoid);
			ValBool(__):    forall(args, ruValueIsBool);
			ValInt(__):     forall(args, ruValueIsInt);
			ValDouble(__):  forall(args, ruValueIsDouble);
			ValString(__):  forall(args, ruValueIsString);
			ValError(__):   forall(args, ruValueIsError);
		}
	}
}

ruFilterBoolArgs(args : [ValValue]) -> Maybe<[bool]> {
	bool_args = filtermap(args, \arg -> 
		switch (arg) {
			ValBool(v): Some(v);
			default: None();
		}
	);
	if (length(args) != length(bool_args)) None() else Some(bool_args);
}

ruFilterIntArgs(args : [ValValue]) -> Maybe<[int]> {
	int_args = filtermap(args, \arg -> 
		switch (arg) {
			ValInt(v): Some(v);
			default: None();
		}
	);
	if (length(args) != length(int_args)) None() else Some(int_args);
}

ruFilterDoubleArgs(args : [ValValue]) -> Maybe<[double]> {
	double_args = filtermap(args, \arg -> 
		switch (arg) {
			ValDouble(v): Some(v);
			default: None();
		}
	);
	if (length(args) != length(double_args)) None() else Some(double_args);
}

ruFilterStringArgs(args : [ValValue]) -> Maybe<[string]> {
	str_args = filtermap(args, \arg -> 
		switch (arg) {
			ValString(s): Some(s);
			default: None();
		}
	);
	if (length(args) != length(str_args)) None() else Some(str_args);
}

ruFilterArrayArgs(args : [ValValue]) -> Maybe<[[ValValue]]> {
	arr_args = filtermap(args, \arg -> 
		switch (arg) {
			ValArray(a): Some(a);
			default: None();
		}
	);
	if (length(args) != length(arr_args)) None() else Some(arr_args);
}

ruFilterMapArgs(args : [ValValue]) -> Maybe<[Tree<ValValue, ValValue>]> {
	map_args = filtermap(args, \arg -> 
		switch (arg) {
			ValMap(m): Some(m);
			default: None();
		}
	);
	if (length(args) != length(map_args)) None() else Some(map_args);
}

ruFilterDataArgs(args : [ValValue]) -> Maybe<[ValData]> {
	data_args = filtermap(args, \arg -> 
		switch (arg) {
			ValData(__,__): Some(arg);
			default: None();
		}
	);
	if (length(args) != length(data_args)) None() else Some(data_args);
}

ruEvalArityError(args : [ValValue], sign : string, arity : int) -> ValError {
	ValError(["function '" + sign + "' must take exactly " + i2s(arity) + " arguments, actual number of arguments: " + i2s(length(args))]); 
}

ruEvalComputeError(args : [ValValue], sign : string) -> ValError {
	ValError(["error while computing '" + sign + "' on arguments: " + ruValues2s(args)]); 
}

ruEvalArgTypeError(args : [ValValue], sign : string, type : string) -> ValError {
	ValError(["function '" + sign + "' must take only '" + type + "' arguments, actual arguments: " + ruValues2s(args)]); 
}

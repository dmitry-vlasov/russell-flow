import string;
import ds/tree;

export {
	ValValue ::= ValScalar, ValArray, ValMap;
		ValArray(arr : [ValValue]);
		ValMap(map : Tree<string, ValValue>);

	ValScalar ::= ValVoid, ValBool, ValInt, ValDouble, ValString;
		ValVoid();
		ValBool(val : bool);
		ValInt(val : int);
		ValDouble(val : double);
		ValString(val : string);
	
	ruValue2s(v : ValValue) -> string;
}

ruValue2s(v : ValValue) -> string {
	switch (v) {
		ValArray(arr) : 
			"[" + strGlue(map(arr, ruValue2s), ", ") + "]";
		ValMap(m):
			"[" + strGlue(map(tree2pairs(m), \p -> p.first + "=" + ruValue2s(p.second)), ", ") + "]";
		ValVoid(): "VOID";
		ValBool(val): b2s(val);
		ValInt(val): i2s(val);
		ValDouble(val): d2s(val);
		ValString(val): val;
	}
}

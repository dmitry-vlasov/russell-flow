import script/script;
import comm;

export {
	ruApplyScriptVars(s : string, vars : Tree<string, flow>, conf : RuConf) -> string;
	ruRun(unit : RuUnit, run : (RuUnit) -> RuState, info : RuCommInfo) -> RuState;
}

ruUpdateStateConf(state : RuState, file : string) -> RuState {
	conf = state.conf;
	upd_conf = if (file == "") conf else {
		conf_dir = ruFindConfDir(file);
		if (conf_dir == "") conf else {
			file_conf = ruReadConfFromDir(conf_dir);
			missed = filterTree(file_conf, \opt, __ -> 
				!(containsKeyTree(conf.opts, opt) || contains(ru_conf_fields, opt))
			);
			ruSetConf(conf, missed);
		}
	} 
	RuState(state with conf = upd_conf);
}

ruApplyScriptVars(s : string, vars : Tree<string, flow>, conf : RuConf) -> string {
	vars_subst = fold(tree2pairs(vars), [], \acc, kv -> 
		concat(acc, ["$" + kv.first, ruScValue2s(kv.second)])
	);
	conf_subst = foldTree(ruConf2Tree(conf), vars_subst, \k, v, acc -> 
		concat(acc, ["$" + k, v])
	);
	strReplaces(s, conf_subst);
}

ruCheckCommandArgs(task : ScTask, command : RuCommInfo, out : RuOut) -> bool {
	forall(command.args, \arg ->
		if (arg.optional || ruHasTaskArg(task.args, arg.name)) true else {
			out.onMessage("Obligatory argument '" + arg.name + "' of the command '" + task.command + "' is missing");
			false;
		}
	);
}

ruAddCommandDefaults(task : ScTask, command : RuCommInfo, conf : RuConf) -> ScTask {
	args_w_defargs = map(task.args, \arg ->
		if (command.defarg == "" || arg.value != "" || arg.name == command.defarg) {
			arg;
		} else {
			ScTaskArg(command.defarg, arg.name);
		}
	);
	args_w_defvals = fold(command.args, args_w_defargs, \acc, arg ->
		if (arg.defval == "") acc else {
			if (ruHasTaskArg(acc, arg.name)) {
				acc;
			} else {
				concat(acc, [ScTaskArg(arg.name, arg.defval)]);
			}
		}
	);
	ScTask(task with args = args_w_defvals);
}

ruEvalTaskArgs(task : ScTask, state : RuState) -> ScTask {
	conf = state.conf;
	args_evaled_1 = map(task.args, \arg -> 
		ScTaskArg(
			ruApplyScriptVars(arg.name, state.vars, conf), 
			ruApplyScriptVars(arg.value, state.vars, conf)
		)
	);
	all_vars = mergeTree(state.vars, ruTaskArgs2Tree(args_evaled_1));
	args_evaled_2 = map(args_evaled_1, \arg -> 
		ScTaskArg(
			ruApplyScriptVars(arg.name, all_vars, conf), 
			ruApplyScriptVars(arg.value, all_vars, conf)
		)
	);
	ScTask(task with args = args_evaled_2);
}

ruMakeAutofileTasks(task : ScTask, comm : RuCommInfo, conf : RuConf) -> [ScTask] {
	if (ruHasTaskArg(task.args, "file") || conf.projectRoots == [] || !comm.autofile) {
		[task];
	} else {
		map(conf.projectRoots, \root -> 
			ScTask(task with args = ruSetTaskArg(task.args, "file", root))
		);
	}
}

ruRun(unit : RuUnit, run : (RuUnit) -> RuState, info : RuCommInfo) -> RuState {
	out = if (!info.autoindent) unit.out else ruIndentOut(unit.out);
	state = unit.state;
	conf = state.conf;
	t0 = ruAddCommandDefaults(unit.task, info, conf);
	fold(ruMakeAutofileTasks(t0, info, conf), state,  \s0, t1 -> {
			t = ruEvalTaskArgs(t1, s0);
			s = RuState(s0 with 
				vars = mergeTree(s0.vars, 
					mapTree(ruTaskArgs2Tree(t.args), \str -> 
						ruApplyScriptVars(str, s0.vars, s0.conf)
					)
				)
			);
			if (!ruCheckCommandArgs(t, info, out)) s else {
				timer = ruMakeTimer();
				log_task = ruTaskIsLogging(t);
				task_src = ruTask2s(t);
				uuid = ruMakeUuid();
				if (log_task) {
					ruScriptLog("<" + uuid + "> Task started:    " + task_src + " ... ", conf);
				}
				ret = run(RuUnit(t, ruUpdateStateConf(s, ruGetTaskArg(t.args, "file", "")), out));
				if (log_task) {
					ruScriptLog(
						"<" + uuid + "> Task finished:   " +
						"in " + ruTimePassed2s(timer), conf
					);
				}
				ret;
			}
		}
	);
}

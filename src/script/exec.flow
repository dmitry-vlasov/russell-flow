import math/uuid;
import script/eval;
import script/load;
import script/util;
import command;

export {
	ruExecScript(s : ScScript, commands : Tree<string, RuComm>, onMessage : (string) -> void, env : RuState) -> Maybe<RuState>;
}

ruExecScript(script : ScScript, commands : Tree<string, RuComm>, onMessage : (string) -> void, env : RuState) -> Maybe<RuState> {
	timer = ruMakeTimer();
	log_script = exists(ruScriptTasks(script), \task -> !existsTree(task.args, \arg, __ -> arg == "do_not_log_this"));
	script_src = ruScript2s(script);
	uuid = ruMakeUuid();
	if (log_script) {
		ruScriptLog("<" + uuid + "> Script started:  " + ruServerEscapeString(script_src), env.conf);
	}
	err = ref false;
	ret = ruDoExecScript(script, RuExecEnv(commands, onMessage, env, err));
	if (log_script) {
		ruScriptLog(
			"<" + uuid + "> Script finished: " +
			(if (isSome(ret)) "Ok " else "Fail ") + 
			"in " + ruTimePassed2s(timer), env.conf
		);
	}
	ret
}

RuExecEnv(
	commands : Tree<string, RuComm>, 
	onMessage : (string) -> void, 
	state : RuState, 
	err : ref bool
);

ruDoExecScript(script : ScScript, env : RuExecEnv) -> Maybe<RuState> {
	ret = switch (script) {
		ScSeq(seq):
			ruExecSeq(seq, env);
		ScAssign(var, ex): 
			ruExecAssign(var, ex, env);
		ScIf(cond, s): 
			ruExecIf(cond, s, env);
		ScIfElse(cond, pos, neg): 
			ruExecIfElse(cond, pos, neg, env);
		ScWhile(cond, s): 
			ruExecWhile(cond, s, env);
		ScPrint(ex): 
			ruExecPrint(ex, env);
		ScTask(comm, args): 
			ruExecTask(script, env);
		ScExit(): 
			None();
	}
	if (isNone(ret) && !^(env.err)) {
		if (script != ScExit()) {
			env.onMessage("error at evaluation of <<<\n" + ruScript2s(script) + "\n>>>");
		}
		env.err := true;
	}
	ret;
}

ruExecSeq(seq : [ScScript], env : RuExecEnv) -> Maybe<RuState> {
	fold(seq, Some(env.state), \acc, s -> 
		maybeBind(acc, \state -> ruDoExecScript(s, RuExecEnv(env with state = state)))
	);
}

ruExecAssign(var : string, ex : ScExp, env : RuExecEnv) -> Maybe<RuState> {
	maybeMap(ruEval(ex, env.state.vars, env.state.conf), \val -> 
		RuState(env.state with vars = setTree(env.state.vars, var, val))
	);
}

ruExecIf(cond : ScExp, script : ScScript, env : RuExecEnv) -> Maybe<RuState> {
	maybeBind(ruEval(cond, env.state.vars, env.state.conf), \val -> 
		switch (val) {
			ValBool(c): {
				if (c) {
					ruDoExecScript(script, env);
				} else {
					Some(env.state);
				}
			}
			default: {
				env.onMessage("'if' condition must return boolean value " + ruScExp2s(cond));
				None();
			}
		}
	);
}

ruExecIfElse(cond : ScExp, pos : ScScript, neg : ScScript, env : RuExecEnv) -> Maybe<RuState> {
	maybeBind(ruEval(cond, env.state.vars, env.state.conf), \val -> 
		switch (val) {
			ValBool(c): {
				if (c) {
					ruDoExecScript(pos, env);
				} else {
					ruDoExecScript(neg, env);
				}
			}
			default: {
				env.onMessage("'if' condition must return boolean value " + ruScExp2s(cond));
				None();
			}
		}
	);
}

ruExecWhile(cond : ScExp, script : ScScript, env : RuExecEnv) -> Maybe<RuState> {
	maybeBind(ruEval(cond, env.state.vars, env.state.conf), \val ->
		switch (val) {
			ValBool(c): {
				if (c) {
					maybeBind(
						ruDoExecScript(script, env),
						\state -> ruExecWhile(cond, script, RuExecEnv(env with state = state))
					);
				} else {
					Some(env.state);
				}
			}
			default: {
				env.onMessage("'while' condition must return boolean value " + ruScExp2s(cond));
				None();
			}
		}
	);
}

ruExecPrint(ex : ScExp, env : RuExecEnv) -> Maybe<RuState> {
	maybeMap(ruEval(ex, env.state.vars, env.state.conf), \val -> {
		env.onMessage(ruApplyScriptVars(ruValue2s(val), env.state.vars, env.state.conf));
		env.state;
	});
}

ruExecTask(task : ScTask, env : RuExecEnv) -> Maybe<RuState> {
	state = env.state;
	conf = state.conf;
	switch (lookupTree(env.commands, task.command)) {
		Some(command): {
			ruRunTask(task, command.run, command.descr, state);
		}
		None(): {
			switch (ruLoadScript(task.command, env.state.conf)) {
				Some(src): {
					ruRunTask(task, \t,s -> ruExecScript(src.script, env.commands, env.onMessage, s), src.descr, state);
				}
				None(): {
					env.onMessage("Unknown command or script: '" + task.command + "'");
					None();
				}
			}
		}
	}
}

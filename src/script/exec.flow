import math/uuid;
import script/eval;
import script/load;
import script/run;
import comm;

export {
	ruExecScript(s : ScComm, commands : Tree<string, RuComm>, state : RuState, out : RuOut) -> RuState;
}

ruExecScript(script : ScComm, commands : Tree<string, RuComm>, state : RuState, out : RuOut) -> RuState {
	timer = ruMakeTimer();
	log_script = exists(ruScCommTasks(script), \task -> !existsTree(task.args, \arg, __ -> arg == "do_not_log_this"));
	script_src = ruScComm2s(script);
	uuid = ruMakeUuid();
	if (log_script) {
		ruScriptLog("<" + uuid + "> Script started:  " + ruServerEscapeString(script_src), state.conf);
	}
	ret = ruDoExecScript(script, RuExecEnv(commands, state, out, ref false));
	if (log_script) {
		ruScriptLog(
			"<" + uuid + "> Script finished: " + 
			"in " + ruTimePassed2s(timer), state.conf
		);
	}
	ret
}

RuExecEnv(
	commands : Tree<string, RuComm>, 
	state : RuState, 
	out : RuOut,
	stop : ref bool
);

ruDoExecScript(script : ScComm, env : RuExecEnv) -> RuState {
	switch (script) {
		ScSeq(seq):
			ruExecSeq(seq, env);
		ScAssign(var, ex): 
			ruExecAssign(var, ex, env);
		ScDefine(var, type, ex): 
			ruExecAssign(var, ex, env);
		ScIf(cond, pos, neg): 
			ruExecIf(cond, pos, neg, env);
		ScWhile(cond, s): 
			ruExecWhile(cond, s, env);
		ScOutput(mode, ex): 
			ruExecOutput(mode, ex, env);
		ScTask(comm, args): 
			ruExecTask(script, env);
		ScStop(): {
			// Stop execution of a script
			env.stop := true;
			env.state;
		}
		ScExit(): {
			// Terminate the programm
			env.stop := true;
			RuState(env.state with exit = true);
		}
	}
}

ruExecSeq(seq : [ScComm], env : RuExecEnv) -> RuState {
	fold(seq, env.state, \acc, script -> 
		if (^(env.stop)) acc else 
		ruDoExecScript(script, RuExecEnv(env with state = acc))
	);
}

ruExecAssign(var : string, ex : ScExp, env : RuExecEnv) -> RuState {
	if (^(env.stop)) env.state else {
		val = ruEval(ex, makeTree(), env.state, env.out);
		if (scTypeGen(val.type) == "error") {
			env.out.onMessage("at assigning '" + ruScExp2s(ex) + "' to '" + var + "' met " + ruScValue2s(val));
		}
		/*switch (val) {
			ScError(errs): {
				env.out.onMessage("at assigning '" + ruScExp2s(ex) + "' to '" + var + "' met " + ruScValue2s(val));
			}
			default: { }
		}*/
		RuState(env.state with vars = setTree(env.state.vars, var, val));
	}
}

ruExecIf(cond : ScExp, pos : ScComm, mneg : Maybe<ScComm>, env : RuExecEnv) -> RuState {
	if (^(env.stop)) env.state else {
		val = ruEval(cond, makeTree(), env.state, env.out);
		val_type = scTypeGen(val.type);
		if (val_type == "bool") {
			c = cast(val.val : flow -> bool);
			if (c) {
				ruDoExecScript(pos, env);
			} else {
				switch (mneg) {
					Some(neg): ruDoExecScript(neg, env);
					None(): env.state;
				}
			}
		} else if (val_type == "error") {
			env.out.onMessage("at computing 'if' condition '" + ruScExp2s(cond) + "' met " + ruScValue2s(val));
			env.state;
		} else {
			env.out.onMessage("'if' condition '" + ruScExp2s(cond) + "' must return boolean value, while returned " + ruScValue2s(val));
			env.state;
		}
	}
}

ruExecWhile(cond : ScExp, script : ScComm, env : RuExecEnv) -> RuState {
	if (^(env.stop)) env.state else {
		val = ruEval(cond, makeTree(), env.state, env.out);
		val_type = scTypeGen(val.type);
		if (val_type == "bool") {
			c = cast(val.val : flow -> bool);
			if (c) {
				state = ruDoExecScript(script, env);
				ruExecWhile(cond, script, RuExecEnv(env with state = state));
			} else {
				env.state;
			}
		} else if (val_type == "error") {
			env.out.onMessage("at computing 'while' condition '" + ruScExp2s(cond) + "' met " + ruScValue2s(val));
			env.state;
		} else {
			env.out.onMessage("'while' condition '" + ruScExp2s(cond) + "' must return boolean value, while returned " + ruScValue2s(val));
			env.state;
		}
	}
}

ruExecPrint(ex : ScExp, env : RuExecEnv) -> RuState {
	if (^(env.stop)) env.state else {
		val = ruEval(ex, makeTree(), env.state, env.out);
		msg = ruApplyScriptVars(ruScValue2s(val), env.state.vars, env.state.conf);
		env.out.onMessage(strReplaces(msg, ["\\n", "\n", "\\t", "\t"]));
		env.state;
	}
}

ruExecOutput(mode : string, ex : ScExp, env : RuExecEnv) -> RuState {
	if (^(env.stop)) env.state else {
		val = ruEval(ex, makeTree(), env.state, env.out);
		msg = ruApplyScriptVars(ruScValue2s(val), env.state.vars, env.state.conf);
		if (mode == "print") {
			env.out.onMessage(strReplaces(msg, ["\\n", "\n", "\\t", "\t"]));
		} else if (mode == "output") {
			env.out.onData(strReplaces(msg, ["\\n", "\n", "\\t", "\t"]));
		} else {
			env.out.onError("unknown output mode: '" + mode + "', must be 'print' or 'output'", []);
		}
		env.state;
	}
}

ruExecTask(task : ScTask, env : RuExecEnv) -> RuState {
	if (^(env.stop)) env.state else {
		state = env.state;
		switch (lookupTree(env.commands, task.command)) {
			Some(command): {
				ruRun(
					RuUnit(task, state, env.out), 
					\unit -> either(command.run(unit), unit.state), 
					command.info
				);
			}
			None(): {
				switch (ruLoadScript(task.command, RuEnv(env.state.conf, env.out))) {
					Some(src): {
						ruRun(
							RuUnit(task, state, env.out), 
							\unit -> ruExecScript(src.command, env.commands, unit.state, unit.out), 
							src.commInfo
						);
					}
					None(): {
						env.out.onMessage("Unknown command or script: '" + task.command + "'");
						state;
					}
				}
			}
		}
	}
}

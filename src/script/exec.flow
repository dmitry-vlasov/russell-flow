import math/uuid;
import script/eval;
import script/load;
import script/run;
import comm;

export {
	ruExecScript(s : ScScript, commands : Tree<string, RuComm>, state : RuState, out : RuOut) -> RuState;
}

ruExecScript(script : ScScript, commands : Tree<string, RuComm>, state : RuState, out : RuOut) -> RuState {
	timer = ruMakeTimer();
	log_script = exists(ruScriptTasks(script), \task -> !existsTree(task.args, \arg, __ -> arg == "do_not_log_this"));
	script_src = ruScript2s(script);
	uuid = ruMakeUuid();
	if (log_script) {
		ruScriptLog("<" + uuid + "> Script started:  " + ruServerEscapeString(script_src), state.conf);
	}
	ret = ruDoExecScript(script, RuExecEnv(commands, state, out));
	if (log_script) {
		ruScriptLog(
			"<" + uuid + "> Script finished: " + 
			"in " + ruTimePassed2s(timer), state.conf
		);
	}
	ret
}

RuExecEnv(
	commands : Tree<string, RuComm>, 
	state : RuState, 
	out : RuOut
);

ruDoExecScript(script : ScScript, env : RuExecEnv) -> RuState {
	switch (script) {
		ScSeq(seq):
			ruExecSeq(seq, env);
		ScAssign(var, ex): 
			ruExecAssign(var, ex, env);
		ScIf(cond, s): 
			ruExecIf(cond, s, env);
		ScIfElse(cond, pos, neg): 
			ruExecIfElse(cond, pos, neg, env);
		ScWhile(cond, s): 
			ruExecWhile(cond, s, env);
		ScPrint(ex): 
			ruExecPrint(ex, env);
		ScTask(comm, args): 
			ruExecTask(script, env);
		ScExit(): 
			env.state;
	}
}

ruExecSeq(seq : [ScScript], env : RuExecEnv) -> RuState {
	fold(seq, env.state, \acc, script -> 
		ruDoExecScript(script, RuExecEnv(env with state = acc))
	);
}

ruExecAssign(var : string, ex : ScExp, env : RuExecEnv) -> RuState {
	val = ruEval(ex, env.state, env.out);
	switch (val) {
		ValError(errs): {
			env.out.onMessage("at assigning '" + ruScExp2s(ex) + "' to '" + var + "' met " + ruValue2s(val));
		}
		default: { }
	}
	RuState(env.state with vars = setTree(env.state.vars, var, val));
}

ruExecIf(cond : ScExp, script : ScScript, env : RuExecEnv) -> RuState {
	val = ruEval(cond, env.state, env.out);
	switch (val) {
		ValBool(c): {
			if (c) {
				ruDoExecScript(script, env);
			} else {
				env.state;
			}
		}
		ValError(err): {
			env.out.onMessage("at computing 'if' condition '" + ruScExp2s(cond) + "' met " + ruValue2s(val));
			env.state;
		}
		default: {
			env.out.onMessage("'if' condition '" + ruScExp2s(cond) + "' must return boolean value, while returned " + ruValue2s(val));
			env.state;
		}
	}
}

ruExecIfElse(cond : ScExp, pos : ScScript, neg : ScScript, env : RuExecEnv) -> RuState {
	val = ruEval(cond, env.state, env.out);
	switch (val) {
		ValBool(c): {
			if (c) {
				ruDoExecScript(pos, env);
			} else {
				ruDoExecScript(neg, env);
			}
		}
		ValError(err): {
			env.out.onMessage("at computing 'if' condition '" + ruScExp2s(cond) + "' met " + ruValue2s(val));
			env.state;
		}
		default: {
			env.out.onMessage("'if' condition '" + ruScExp2s(cond) + "' must return boolean value, while returned " + ruValue2s(val));
			env.state;
		}
	}
}

ruExecWhile(cond : ScExp, script : ScScript, env : RuExecEnv) -> RuState {
	val = ruEval(cond, env.state, env.out);
	switch (val) {
		ValBool(c): {
			if (c) {
				state = ruDoExecScript(script, env);
				ruExecWhile(cond, script, RuExecEnv(env with state = state));
			} else {
				env.state;
			}
		}
		ValError(err): {
			env.out.onMessage("at computing 'while' condition '" + ruScExp2s(cond) + "' met " + ruValue2s(val));
			env.state;
		}
		default: {
			env.out.onMessage("'while' condition '" + ruScExp2s(cond) + "' must return boolean value, while returned " + ruValue2s(val));
			env.state;
		}
	}
}

ruExecPrint(ex : ScExp, env : RuExecEnv) -> RuState {
	val = ruEval(ex, env.state, env.out);
	msg = ruApplyScriptVars(ruValue2s(val), env.state.vars, env.state.conf);
	env.out.onMessage(strReplaces(msg, ["\\n", "\n", "\\t", "\t"]));
	env.state;
}

ruExecTask(task : ScTask, env : RuExecEnv) -> RuState {
	state = env.state;
	switch (lookupTree(env.commands, task.command)) {
		Some(command): {
			ruRun(
				RuUnit(task, state, env.out), 
				\unit -> either(command.run(unit), unit.state), 
				command.descr
			);
		}
		None(): {
			switch (ruLoadScript(task.command, RuEnv(env.state.conf, env.out))) {
				Some(src): {
					ruRun(
						RuUnit(task, state, env.out), 
						\unit -> ruExecScript(src.script, env.commands, unit.state, unit.out), 
						src.descr
					);
				}
				None(): {
					env.out.onMessage("Unknown command or script: '" + task.command + "'");
					state;
				}
			}
		}
	}
}

import math/uuid;
import script/funcs;
import command;

export {
	ruExec(s : ScScript, commands : Tree<string, RuComm>, onMessage : (string) -> void, env : RuState) -> Maybe<RuState>;
}

ruExec(script : ScScript, commands : Tree<string, RuComm>, onMessage : (string) -> void, env : RuState) -> Maybe<RuState> {
	script_start = ruTime();
	log_script = exists(ruScriptTasks(script), \task -> !existsTree(task.args, \arg, __ -> arg == "do_not_log_this"));
	script_src = ruScript2s(script);
	uuid = ruMakeUuid();
	if (log_script) {
		ruScriptLog("<" + uuid + "> Script started:  " + ruServerEscapeString(script_src), env.conf);
	}
	err = ref false;
	ret = ruDoExec(script, RuExecEnv(commands, onMessage, env, err));
	if (log_script) {
		ruScriptLog(
			"<" + uuid + "> Script finished: " +
			(if (isSome(ret)) "Ok " else "Fail ") + 
			"in " + ruTime2s(ruTime() - script_start), env.conf
		);
	}
	ret
}

RuExecEnv(
	commands : Tree<string, RuComm>, 
	onMessage : (string) -> void, 
	state : RuState, 
	err : ref bool
);

ruDoExec(script : ScScript, env : RuExecEnv) -> Maybe<RuState> {
	ret = switch (script) {
		ScSeq(seq):
			ruExecSeq(seq, env);
		ScAssign(var, ex): 
			ruExecAssign(var, ex, env);
		ScIf(cond, s): 
			ruExecIf(cond, s, env);
		ScIfElse(cond, pos, neg): 
			ruExecIfElse(cond, pos, neg, env);
		ScWhile(cond, s): 
			ruExecWhile(cond, s, env);
		ScPrint(ex): 
			ruExecPrint(ex, env);
		ScTask(comm, args): 
			ruExecTask(script, env);
		ScExit(): 
			None();
	}
	if (isNone(ret) && !^(env.err)) {
		if (script != ScExit()) {
			env.onMessage("error at evaluation of <<<\n" + ruScript2s(script) + "\n>>>");
		}
		env.err := true;
	}
	ret;
}

ruExecSeq(seq : [ScScript], env : RuExecEnv) -> Maybe<RuState> {
	fold(seq, Some(env.state), \acc, s -> 
		maybeBind(acc, \state -> ruDoExec(s, RuExecEnv(env with state = state)))
	);
}

ruExecAssign(var : string, ex : ScExp, env : RuExecEnv) -> Maybe<RuState> {
	maybeMap(ruEval(ex, env.state.vars), \val -> 
		RuState(env.state with vars = setTree(env.state.vars, var, val))
	);
}

ruExecIf(cond : ScExp, script : ScScript, env : RuExecEnv) -> Maybe<RuState> {
	maybeBind(ruEval(cond, env.state.vars), \val -> 
		switch (val) {
			ValBool(c): {
				if (c) {
					ruDoExec(script, env);
				} else {
					Some(env.state);
				}
			}
			default: {
				env.onMessage("'if' condition must return boolean value " + ruScExp2s(cond));
				None();
			}
		}
	);
}

ruExecIfElse(cond : ScExp, pos : ScScript, neg : ScScript, env : RuExecEnv) -> Maybe<RuState> {
	maybeBind(ruEval(cond, env.state.vars), \val -> 
		switch (val) {
			ValBool(c): {
				if (c) {
					ruDoExec(pos, env);
				} else {
					ruDoExec(neg, env);
				}
			}
			default: {
				env.onMessage("'if' condition must return boolean value " + ruScExp2s(cond));
				None();
			}
		}
	);
}

ruExecWhile(cond : ScExp, script : ScScript, env : RuExecEnv) -> Maybe<RuState> {
	maybeBind(ruEval(cond, env.state.vars), \val ->
		switch (val) {
			ValBool(c): {
				if (c) {
					maybeBind(
						ruDoExec(script, env),
						\state -> ruExecWhile(cond, script, RuExecEnv(env with state = state))
					);
				} else {
					Some(env.state);
				}
			}
			default: {
				env.onMessage("'while' condition must return boolean value " + ruScExp2s(cond));
				None();
			}
		}
	);
}

ruExecPrint(ex : ScExp, env : RuExecEnv) -> Maybe<RuState> {
	maybeMap(ruEval(ex, env.state.vars), \val -> {
		env.onMessage(ruApplyScriptVars(ruValue2s(val), env.state.vars));
		env.state;
	});
}

ruExecTask(task : ScTask, env : RuExecEnv) -> Maybe<RuState> {
	upd_conf = \e, file -> {
		conf = if (file == "") e.conf else {
			conf_dir = ruFindConfDir(file);
			if (conf_dir == "") e.conf else {
				file_conf = ruTree2Conf(ruReadConfFromDir(conf_dir));
				ruUpdateConf(e.conf, file_conf);
			}
		} 
		RuState(e with 
			conf = RuConf(conf with 
				onMessage = env.onMessage,
				onError = ruMakeOnError(e.conf.opts, env.onMessage)
			)
		);
	}
	state = env.state;
	switch (lookupTree(env.commands, task.command)) {
		Some(command): {
			fold(ruPrepareTask(task, command, state), Some(env.state),  
				\ac, t -> maybeBind(ac, \s -> {
					task_start = ruTime();
					log_task = !existsTree(t.args, \arg,__ -> arg == "do_not_log_this");
					task_src = ruTask2s(t);
					uuid = ruMakeUuid();
					if (log_task) {
						ruScriptLog("<" + uuid + "> Task started:    " + task_src + " ... ", state.conf);
					}
					ret = command.run(t, upd_conf(s, lookupTreeDef(t.args, "file", "")));
					if (log_task) {
						ruScriptLog(
							"<" + uuid + "> Task finished:   " +
							(if (isSome(ret)) "Ok " else "Fail ") +
							"in " + ruTime2s(ruTime() - task_start), state.conf
						);
					}
					ret;
				})
			);
		}
		None(): {
			env.onMessage("Unknown command: '" + task.command + "'");
			None();
		}
	}
}

ruApplyScriptVars(s : string, vars : Tree<string, ValValue>) -> string {
	vars_subst = fold(tree2pairs(vars), [], \acc, kv -> 
		concat(acc, ["$" + kv.first, ruValue2s(kv.second)])
	);
	strReplaces(s, vars_subst);
}

ruPrepareTask(task0 : ScTask, command : RuComm, state : RuState) -> [ScTask] {
	conf = state.conf;
	task = ScTask(task0 with 
		args = foldTree(task0.args, makeTree(), \k, v, acc -> 
			if (v != "" || k == command.defarg || command.defarg == "") setTree(acc, k, v) else setTree(acc, command.defarg, k)
		)
	);
	induced_tasks = 
		if (containsKeyTree(task.args, "file") || conf.projectRoots == []) {
			[task];
		} else {
			map(conf.projectRoots, \root -> ScTask(task with args = setTree(task.args, "file", root)));
		}
	filtermap(induced_tasks, 
		\t -> {
			args_w_path = eitherMap(
				lookupTree(t.args, "file"), 
				\file -> setTree(t.args, "path", resolveRelativePath(file)), 
				t.args
			);
			args_w_defvals = fold(command.args, args_w_path, \acc, arg ->
				if (arg.defval == "") acc else {
					if (containsKeyTree(acc, arg.name)) acc else setTree(acc, arg.name, arg.defval)
				}
			);
			updated_args = foldTree(args_w_defvals, makeTree(), \k, v, acc -> 
				setTree(acc, ruApplyScriptVars(k, state.vars), ruApplyScriptVars(v, state.vars))
			);
			updated_task = ScTask(t with args = updated_args);
			check = forall(command.args, \arg ->
				if (arg.optional || containsKeyTree(updated_task.args, arg.name)) true else {
					conf.onMessage("Obligatory argument '" + arg.name + "' of the command '" + updated_task.command + "' is missing");
					false;
				}
			);
			if (!check) None() else Some(updated_task);
		}
	);
}

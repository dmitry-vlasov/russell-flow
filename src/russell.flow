import runner/http;
import runner/lsp;
import runner/console;

ruInitEnv(params : [[string]]) -> RuEnv {
	conf = ruMakeConf(".", params);
	env = ruMakeEnv(conf, println, nop1, nop2);
	ruReadIds(env);
	ruDiskCacheMakeDir(env);
	env;
}

main() -> void {
	if (isUrlParameterSet("russell-dir")) {
		println(getRussellDir());
		quit(0);
	} else {
		setThreadPoolSize(availableProcessors());
		server = toLowerCase(getUrlParameterDef("server", ""));
		if (server != "lsp") {
			println("Russell prover (4th generation)\n");
		}
		params = getAllUrlParametersArray();
		if (server == "http") {
			ruHttpServer(ruInitEnv(params));
		} else if (server == "lsp") {
			ruLspServer(ruInitEnv(params));
		} else if (server == "console" || server == "repl") {
			env = ruInitEnv(params);
			ruInitConf(env.conf);
			ruConsoleServer(env);
		} else if (server != "") {
			println("unsupported server mode: " + server);
			quit(0);
		} else {
			env = ruInitEnv([]);
			script_src = ruUrlParametersStr(params);
			if (ruShowHelp(ruCommandsTree, env)) quit(0) else {
				if (script_src == "") {
					println("No input script is given. Use help option to see help and usage info");
					quit(0);
				} else {
					switch (ruParseScComm(script_src)) {
						Some(script): {
							ruInitConf(env.conf);
							timer = ruMakeTimer();
							ruProcess(ruMakeUuid(), script.comm, \code -> {
									if (ruTimePassed(timer) > 100.0) {
										println("processed in " + ruTimePassed2s(timer));
									}
									if (code != 0) {
										println("exit code: " + i2s(code));
									}
									if (lookupTreeDef(env.conf.opts, "no-exit", "") != "1") {
										quit(code);
									}
								},
								env
							);
						}
						None(): {
							println("Syntax error in script: " + script_src);
							quit(0);
						}
					}
				}
			}
		}
	}
}

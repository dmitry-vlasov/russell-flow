import server;

ruInitEnv(params : [[string]]) -> RuEnv {
	conf = ruMakeConf(".", params);
	env = ruMakeEnv(conf, println, nop1);
	ruReadIds(env);
	ruDiskCacheMakeDir(env);
	env;
}

main() -> void {
	setThreadPoolSize(availableProcessors());
	russell_dir = isUrlParameterSet("russell-dir");
	server = toLowerCase(getUrlParameterDef("server", ""));
	if (server != "lsp" && !russell_dir) {
		println("Russell prover (4th generation)\n");
	}
	params = getAllUrlParametersArray();
	if (server == "http") {
		ruHttpServer(ruInitEnv(params));
	} else if (server == "lsp") {
		ruLspServer(ruInitEnv(params));
	} else if (server == "console" || server == "repl") {
		env = ruInitEnv(params);
		ruInitConf(env.conf);
		ruConsoleServer(env);
	} else if (server != "") {
		println("unsupported server mode: " + server);
		quit(0);
	} else if (russell_dir) {
		println(getRussellDir());
		quit(0);
	} else {
		env = ruInitEnv([]);
		script_src = ruUrlParametersStr(params);
		if (ruShowHelp(ruCommandsTree, env)) quit(0) else {
			if (script_src == "") {
				println("No input script is given. Use help option to see help and usage info");
				quit(0);
			} else {
				switch (ruParseScript(script_src)) {
					Some(src): {
						ruInitConf(env.conf);
						timer = ruMakeTimer();
						ruProcess(src.script, \code -> {
								println("processed in " + ruTimePassed2s(timer) + 
									(if (code == 0) "" else " with exit code: " + i2s(code))
								);
								quit(code);
							},
							ruDefaultOut
						);
					}
					None(): {
						println("Syntax error in script: " + script_src);
						quit(0);
					}
				}
			}
		}
	}
}

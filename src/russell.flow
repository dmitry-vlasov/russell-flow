import server;

main() -> void {
	setThreadPoolSize(availableProcessors());
	russell_dir = isUrlParameterSet("russell-dir");
	server = toLowerCase(getUrlParameterDef("server", ""));
	if (server != "lsp" && !russell_dir) {
		println("Russell prover (4th generation)\n");
	}
	conf = ruMakeConf(".", getAllUrlParametersArray());
	env = ruMakeEnv(conf, println);
	ruReadIds(env);
	ruDiskCacheMakeDir(env);
	if (server == "http") {
		ruHttpServer(conf);
	} else if (server == "lsp") {
		ruLspServer(conf);
	} else if (server == "console" || server == "repl") {
		ruConsoleServer(conf);
	} else if (server == "") {
		if (russell_dir) {
			println(getRussellDir());
			quit(0);
		} else {
			if (ruShowHelp(ruCommandsTree, env)) quit(0) else {
				script_src = trim2(ruUrlParametersStr(), " \t\r\n");
				if (script_src == "") {
					println("No input script is given. Use help option to see help and usage info");
					quit(0);
				} else {
					switch (ruParseScript(script_src)) {
						Some(src): {
							ruInitConf(conf);
							timer = ruMakeTimer();
							ruProcess(src.script, \code -> {
									println("processed in " + ruTimePassed2s(timer) + 
										(if (code == 0) "" else " with exit code: " + i2s(code))
									);
									quit(code);
								},
								ruDefaultOut
							);
						}
						None(): {
							println("Syntax error in script: " + script_src);
							quit(0);
						}
					}
				}
			}
		}
	} else {
		println("unsupported server mode: " + server);
		quit(0);
	}
}

import net/http;
import commands;

export {
	ruRun(job : RuJob, onMessage : (string) -> void, onRunComplete : (int) -> void) -> void;
	ruRunLocal(job : RuJob, onMessage : (string) -> void, onRunComplete : (int) -> void) -> void;
}

ruRun(job : RuJob, onMessage : (string) -> void, onRunComplete : (int) -> void) -> void {
	if (getUrlParameterBoolDef("local", false)) {
		ruRunLocal(job, onMessage, onRunComplete);
	} else {
		ruRunRemote(job, onMessage, onMessage, onRunComplete, 
			\code -> ruRunLocal(job, onMessage, onRunComplete)
		)
	}
}

ruRunRemote(job : RuJob, onData: (string) -> void, onError : (string) -> void, onRunComplete : (int) -> void, onServerError : (int) -> void) -> void {
	serverUrl = 
		"http://" + getUrlParameterDef("server-url", "localhost") + 
		":" + getUrlParameterDef("server-port", "20001");
	cwd = strReplace(resolveRelativePath("."), "\\", "/");
	remote_job = RuJob(concat([RuTask("update-conf", makeTree1("working-dir", cwd))], job.tasks));
	httpCustomRequest(
		serverUrl,
		GET(), [], RequestPayload(json2string(ruJob2Json(remote_job))),
		\status, data, headers -> {
			code = status - 200;
			if (code == 0) {
				onData(data);
				onRunComplete(0);
			} else if (0 < code && code < 64) {
				onError("Compilation error " + i2s(code) + "\n" + data);
				onRunComplete(code);
			} else {
				onServerError(status);
			}
		},
		false
	)
}

ru_env = ref RuEnv(ruEmptyMath, mmEmptyMath, ruMakeConf(".", []));

ruRunLocal(job : RuJob, onMessage : (string) -> void, onRunComplete : (int) -> void) -> void {
	ru_env := fold(job.tasks, ^ru_env, \acc, t -> {
		task = ruPrepareTask(t, acc.conf);
		switch (lookupTree(ruCommandsTree(), task.command)) {
			Some(command): {
				conf = RuConf(acc.conf with 
					onMessage = onMessage,
					onError = \err, places -> onMessage("Error: " + err + (if (places == []) "" else "\n" + strGlue(map(places, ruPlace2s), "\n")))
				);
				if (ruCheckTaskArgs(task, command, conf)) {
					command.run(task, RuEnv(acc with conf = conf));
				} else {
					acc;
				}
			}
			None(): {
				onMessage("Unknown command: '" + task.command + "'");
				acc;
			}
		}
	});
	onRunComplete(0);
}

ruPrepareTask(task : RuTask, conf : RuConf) -> RuTask {
	switch (lookupTree(task.args, "file")) {
		Some(file): {
			module = ruTrimPath(file, conf, getFileExt(file));
			RuTask(task with args = setTree(task.args, "module", module));
		}
		None(): {
			switch (lookupTree(conf.opts, "root-file")) {
				Some(file): {
					module = ruTrimPath(file, conf, getFileExt(file));
					RuTask(task with 
						args = setTree(setTree(task.args, "file", file), "module", module)
					);
				}
				None(): task;
			}
		}
	}
}

ruCheckTaskArgs(task : RuTask, command : RuComm, conf : RuConf) -> bool {
	forall(command.args, \arg ->
		if (arg.optional || containsKeyTree(task.args, arg.name)) true else {
			conf.onMessage("Obligatory argument '" + arg.name + "' of the command '" + task.command + "' is missing");
			false;
		}
	)
}

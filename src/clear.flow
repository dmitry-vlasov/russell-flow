import net/http;
import base/comms;
import ru/comms;
import mm/comms;
import script/exec;
import help;

export {
	ruClearCommands : [RuComm];
}

ruClearCommands = [
	ruCommClearMath,
	ruCommClearVars,
	ruCommClearProofs,
];

ruCommClearMath = RuComm(
	"clear-math", "misc", "clear all math structures", "",
	[RuCommArg("what", true, "'ru', 'mm' or 'all', default is 'all'", "all")], 
	ruRunClearMath
);

ruRunClearMath(task : ScTask, state : RuState) -> Maybe<RuState> {
	what = lookupTreeDef(task.args, "what", "all");
	Some(RuState(state with 
		ruMath = if (what == "ru" || what == "all") ruEmptyMath else state.ruMath,
		mmMath = if (what == "mm" || what == "all") mmEmptyMath else state.mmMath
	)); 
}

ruCommClearProofs = RuComm(
	"clear-proofs", "misc", "clear all proofs", "",
	[], ruRunClearProofs
);

ruRunClearProofs(task : ScTask, state : RuState) -> Maybe<RuState> {
	cleared = mapTree(state.ruMath.sources, \src ->
		RuSource(src with 
			decls = map(src.decls, \decl -> 
				switch (decl) {
					RuTheorem(__,__,__,proof): RuTheorem(decl with proof = ruNoProof);
					default: decl;
				}
			)
		)
	);
	Some(RuState(state with 
		ruMath = ruMakeMathFromSources(cleared, state.conf)
	)); 
}

ruCommClearVars = RuComm(
	"clear-vars", "misc", "clear all script variable values", "",
	[], ruRunClearVars 
);

ruRunClearVars(task : ScTask, state : RuState) -> Maybe<RuState> {
	Some(RuState(state with vars = makeTree()));
}

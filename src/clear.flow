import net/http;
import base/comms;
import ru/comms;
import mm/comms;
import script/exec;
import help;

export {
	ruClearCommands : [RuComm];
}

ruClearCommands = [
	ruCommClearMath,
	ruCommClearVars,
	ruCommClearProofs,
];

ruCommClearMath = RuComm(
	RuCommInfo(
		"clear-math", "misc", "clear all math structures", "", false, false, 
		[RuCommArg("what", true, "'ru', 'mm' or 'all', default is 'all'", "all")], []
	), 
	ruRunClearMath
);

ruRunClearMath(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	what = ruGetTaskArg(unit.task.args, "what", "all");
	new_ru = if (what == "ru" || what == "all") {
		env.out.onMessage("ru math is cleared");
		makeTree();
	} else state.ru;
	new_mm = if (what == "mm" || what == "all") {
		env.out.onMessage("mm math is cleared");
		makeTree();
	} else state.mm;
	cleared = RuState(state with ru = new_ru, mm = new_mm);
	gc();
	Some(cleared); 
}

ruCommClearProofs = RuComm(
	RuCommInfo("clear-proofs", "misc", "clear all proofs", "", false, false, [], []), 
	ruRunClearProofs
);

ruRunClearProofs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	proofless = mapTree(state.ru, ruClearSourceProofs);
	cleared = RuState(state with ru = proofless);
	gc();
	Some(cleared); 
}

ruCommClearVars = RuComm(
	RuCommInfo("clear-vars", "misc", "clear all script variable values", "", false, false, [], []),
	ruRunClearVars
);

ruRunClearVars(unit : RuUnit) -> Maybe<RuState> {
	cleared = RuState(unit.state with vars = makeTree());
	gc();
	Some(cleared);
}

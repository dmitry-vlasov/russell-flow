import ru_exp;

export {

	RuIndex(
		rules : Tree<string, RuIndexNode<?>>,
		vars  : Tree<string, RuIndexNode<?>>,
	);

	ruMakeIndex() -> RuIndex<?>;

	ruSetIndex(key : RuExp, data : Maybe<?>, index : RuIndex<?>, conflict : (?, ?) -> ?) -> RuIndex<?>;

	ruIndexSize(ind : RuIndex<?>) -> int;

	RuUnified(
		sub1 : Tree<RuVar, RuExp>,
		sub2 : Tree<RuVar, RuExp>,
		data : Maybe<?>
	);
	ruUnifyIndex(e : RuExp, index : RuIndex<?>, math : RuMath) -> [RuUnified<?>];
}

RuIndexNode(
	name  : string, // var or rule name
	type  : string, 
	arity : int,    // -1 means that it is a variable, not rule

	ends  : [RuIndexNode<?>], // ends of subterms, starting at this node
	lens  : [int],            // distances to the beginnings of subterms, starting at this node

	data  : Maybe<?>,

	index : RuIndex<?>, // children nodes
	mutable parent : Maybe<RuIndexNode<?>>,
);

ruMakeIndex() -> RuIndex<?> {
	ruIndexEmpty
}

ruIndexEmpty = RuIndex(makeTree(), makeTree());

ruIndexSize(ind : RuIndex<?>) -> int {
	s1 = foldTree(ind.rules, 0, \__, n, acc -> acc + ruIndexSize(n.index));
	s2 = foldTree(ind.vars, 0, \__, n, acc -> acc + ruIndexSize(n.index));
	s1 + s2 + 1;
}

ruSetIndex(key : RuExp, data : Maybe<?>, index : RuIndex<?>, conflict : (?, ?) -> ?) -> RuIndex<?> {
	ruDoAdd2Index(0, None(), index, RuIndexStacks(None(), None()), RuIndexAddEnv(key.nodes, data, conflict)).ind
}

RuIndexAddEnv(
	key : [RuExpNode], 
	data : Maybe<?>,
	conflict : (?, ?) -> ?,
);

RuIndexEndStack(
	parent : Maybe<RuIndexEndStack>,
	i   : int,
	len : int
);

RuIndexBegStack(
	parent : Maybe<RuIndexBegStack<?>>,
	i    : int,
	len  : int,
	node : RuIndexNode<?>
);

RuIndexStacks(
	ends : Maybe<RuIndexEndStack>,
	begs : Maybe<RuIndexBegStack<?>>
);

RuIndexAddRet(
	ind  : RuIndex<?>,
	node : RuIndexNode<?>,
	begs : Maybe<RuIndexBegStack<?>>,
);

ruProcIndexEnd(i : int, n : RuIndexNode<?>, stacks : RuIndexStacks) -> RuIndexStacks {
	switch (stacks.ends) {
		Some(end):
			if (end.i + end.len != i) stacks else {
				ruProcIndexEnd(i, n,
					RuIndexStacks(
						end.parent, 
						Some(RuIndexBegStack(stacks.begs, end.i, end.len, 
							RuIndexNode(n with lens = concat(n.lens, [end.len])))
						)
					)
				)
			}
		None(): stacks;
	}
}

ruProcIndexBeg(i : int, n : RuIndexNode<?>, ret : RuIndexAddRet) -> RuIndexAddRet {
	switch (ret.begs) {
		Some(beg):
			if (beg.i != i) ret else {
				ruProcIndexBeg(i, n,
					RuIndexAddRet(ret with
						node = RuIndexNode(ret.node with 
							ends = concat(ret.node.ends, [n])
						),
						begs = beg.parent
					)
				)
			}
		None(): ret;
	}
}

ruDoAdd2Index(i : int, parent : Maybe<RuIndexNode<?>>, index : RuIndex<?>, stacks : RuIndexStacks<?>, env : RuIndexAddEnv<?>) -> RuIndexAddRet {
	insert_data = \md1, md2 ->
		eitherMap(md1, \d1 -> eitherMap(md2, \d2 -> Some(env.conflict(d1, d2)), md1), md2);
	update_node = \n, s -> 
		if (i + 1 == length(env.key)) {
			RuIndexAddRet(index, RuIndexNode(n with data = insert_data(n.data, env.data)), stacks.begs);
		} else {
			ruProcIndexBeg(i, n, ruDoAdd2Index(i + 1, Some(n), n.index, ruProcIndexEnd(i, n, s), env));
		}
	make_ret = \ind, r -> {
		traverseInOrder(ind.rules, \__, n -> n.parent ::= Some(r.node));
		traverseInOrder(ind.vars, \__, n -> n.parent ::= Some(r.node));
		RuIndexAddRet(r with ind = ind);
	}
	switch (env.key[i]) {
		RuRuleRef(name, type, arity, len): {
			n = lookupTreeDef(index.rules, name, RuIndexNode(name, type, arity, [], [], None(), ruIndexEmpty, parent));
			r = update_node(n, RuIndexStacks(stacks with ends = Some(RuIndexEndStack(stacks.ends, i, len))));
			make_ret(RuIndex(index with rules = setTree(index.rules, name, r.node)), r);
		}
		RuVar(name, type): {
			n = lookupTreeDef(index.vars, name, RuIndexNode(name, type, -1, [], [], None(), ruIndexEmpty, parent));
			r = update_node(n, stacks);
			make_ret(RuIndex(index with vars = setTree(index.vars, name, r.node)), r);
		}
	}
}


ruUnifyIndex(e : RuExp, index : RuIndex<?>, math : RuMath) -> [RuUnified<?>] {
	ruDoUnifyIndex(0, index, math, RuUnifyEnv(e.nodes, makeTree(), makeTree()))
}

RuUnifyEnv(
	nodes : [RuExpNode],
	sub1 : Tree<RuVar, RuExp>,
	sub2 : Tree<RuVar, RuExp>,
);

ruIndexBranch(beg : RuIndexNode<?>, end : RuIndexNode<?>, acc : [RuIndexNode<?>]) -> [RuIndexNode<?>] {
	if (beg == end) concat([beg], acc) else {
		ruIndexBranch(beg, either(end.parent, beg), concat([end], acc));
	}
}

ruIndexSubexpr(beg : RuIndexNode<?>, end : RuIndexNode<?>) -> RuExp {
	branch = ruIndexBranch(beg, end, []);
	lens = foldi(branch, makeTree(), \i, acc, n -> 
		fold(n.lens, acc, \ac, len -> setTree(acc, i - len, len))
	);
	RuExp(
		foldi(branch, [], \i, acc, n ->
			if (n.arity == -1) {
				concat(acc, [RuVar(n.name, n.type)]);
			} else {
				concat(acc, [RuRuleRef(n.name, n.type, n.arity, lookupTreeDef(lens, i, -1))]);
			}
		)
		, -1
	);
}

ruDoUnifyIndex(i : int, index : RuIndex<?>, math : RuMath, env : RuUnifyEnv) -> [RuUnified<?>] {
	unify_step = \var, end, ex ->
		switch (ruAdd2Subst(env.sub1, var, ex)) {
			Some(s1): 
				ruDoUnifyIndexNode(i, end, math, RuUnifyEnv(env with sub1 = s1));
			None(): [];
		}
	unify_var = \var, ex_type, end, e ->
		if (ex_type == var.type) unify_step(var, end, e())
		else {
			switch (ruSuperRule(var.type, ex_type, math)) {
				Some(sr): {
					ex = RuExp(concat([RuRuleRef(sr.name, var.type, 1, 1)], e().nodes), -1);
					unify_step(var, end, ex);
				}
				None(): []
			}
		}
	if (i == length(env.nodes)) [] else {
		switch (env.nodes[i]) {
			RuRuleRef(name, type, arity, len): {
				r1 = switch (lookupTree(index.rules, name)) {
					Some(n): ruDoUnifyIndexNode(i, n, math, env);
					None(): [];
				}
				r2 = foldTree(index.vars, [], \v, n, acc -> 
					unify_var(RuVar(n.name, n.type), type, n, 
						\-> RuExp(subrange(env.nodes, i, i + len + 1), -1)
					)
				);
				concat(r1, r2);
			}
			RuVar(name, type): {
				r1 = foldTree(index.rules, [], \__, n, acc -> 
					fold(n.ends, acc, \ac, end ->
						unify_var(RuVar(name, type), n.type, n, 
							\-> ruIndexSubexpr(n, end)
						)
					)
				);
				r2 = foldTree(index.vars, [], \v, n, acc -> 
					unify_var(RuVar(n.name, n.type), type, n, 
						\-> RuExp([RuVar(name, type)], -1)
					)
				);
				concat(r1, r2);
			}
		}
	}
}

ruDoUnifyIndexNode(i : int, node : RuIndexNode<?>, math : RuMath, env : RuUnifyEnv) -> [RuUnified<?>] {
	if (i == length(env.nodes)) [RuUnified(env.sub1, env.sub2, node.data)] else 
		ruDoUnifyIndex(i + 1, node.index, math, env)
}

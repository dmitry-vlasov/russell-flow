import ru_exp;

export {

	RuIndex(
		rules : Tree<string, RuIndexNode<?>>,
		vars  : Tree<string, RuIndexNode<?>>,
		nodes : ref [RuIndexNode<?>]
	);

	ruMakeIndex() -> RuIndex<?>;

	ruSetIndex(key : RuExp, data : ?, index : RuIndex<?>) -> RuIndex<?>;

	ruIndexSize(ind : RuIndex<?>) -> int;

	RuUnified(
		sub : Tree<RuVar, RuExp>,
		data : ?
	);
	ruUnifyIndex(e : RuExp, index : RuIndex<?>, math : RuMath) -> [RuUnified<?>];
	ruIndex2s(index : RuIndex<?>, show_data : (?) -> string, math : RuMath) -> string;
	ruIndexRaw2s(index : RuIndex<?>) -> string;
}

RuIndexNode(
	id    : int,
	name  : string, // var or rule name
	type  : string, 
	arity : int,    // -1 means that it is a variable, not rule

	ends  : Set<int>, // ends of subterms, starting at this node
	lens  : Set<int>, // distances to the beginnings of subterms, starting at this node

	data  : [?],
	expr  : Maybe<RuExp>,

	index : RuIndex<?>, // children nodes
	parent : int,
);

ruNoIndexNode = RuIndexNode(-1, "", "", -1, makeSet(), makeSet(), [], None(), ruMakeIndex(), -1);

ruIndexNode2s(n : RuIndexNode<?>) -> string {
	"id: " + i2s(n.id) + ", " + n.name + ":" + n.type + ", a=" + i2s(n.arity) + ", " +
	"lens=[" + strGlue(map(set2array(n.lens), i2s), ", ") + "], " + 
	"ends=[" + strGlue(map(set2array(n.ends), i2s), ", ") + "], " + 
	"data=" + i2s(length(n.data)) + ", " +
	(switch (n.expr){ Some(e): "expr=" + ruExpRPN2s(e.nodes) + ", "; None(): ""}) + 
	"parent=" + i2s(n.parent) + ", ends=[" + strGlue(map(set2array(n.ends), i2s), ", ") + "]"
}

ruMakeIndex() -> RuIndex<?> {
	RuIndex(makeTree(), makeTree(), ref []);
}

ruIndexSize(ind : RuIndex<?>) -> int {
	s1 = foldTree(ind.rules, 0, \__, n, acc -> acc + ruIndexSize(n.index));
	s2 = foldTree(ind.vars, 0, \__, n, acc -> acc + ruIndexSize(n.index));
	s1 + s2 + 1;
}

ruSetIndex(key : RuExp, data : ?, index : RuIndex<?>) -> RuIndex<?> {
	insert_int = \t, i, v -> {
		w = lookupTreeDef(t, i, makeSet());
		setTree(t, i, insertSet(w, v));
	}
	//println("adding: " + ruExpRPN2s(key.nodes));
	env0 = RuIndexAddEnv(key, data, makeTree(), makeTree(), ref makeTree());
	env = foldi(key.nodes, env0, \i, acc, n ->
		switch (n) {
			RuRuleRef(__,__,__, len): 
				RuIndexAddEnv(acc with 
					lens = insert_int(acc.lens, i + len, len),
					ends = insert_int(acc.ends, i, i + len),
				);
			RuVar(__,__): acc;
		}
	);
	ruDoAdd2Index(0, index, -1, env);
}

RuIndexAddEnv(
	key : RuExp, 
	data : ?,
	lens : Tree<int, Set<int>>,
	ends : Tree<int, Set<int>>,
	branch : ref Tree<int, int>
);

ruDoAdd2Index(i : int, index : RuIndex<?>, parent : int, env : RuIndexAddEnv<?>) -> RuIndex<?> {
	new_node = \n, t, a -> {
		m = RuIndexNode(length(^(index.nodes)), n, t, a, makeSet(), makeSet(), [], None(), 
			RuIndex(makeTree(), makeTree(), index.nodes), parent
		);
		refArrayPush(index.nodes, m);
		//println("i=" + i2s(i) + ", created node: " + ruIndexNode2s(m) + ", nodes: " + i2s(length(^(index.nodes))));
		m
	}
	switch (env.key.nodes[i]) {
		RuRuleRef(name, type, arity, len): {
			n = switch(lookupTree(index.rules, name)) {
				Some(x): x;
				None(): new_node(name, type, arity);
			}
			m = ruDoAdd2IndexNode(i, n, env);
			RuIndex(index with rules = setTree(index.rules, name, m));
		}
		RuVar(name, type): {
			n = switch(lookupTree(index.vars, name)) {
				Some(x): x;
				None(): new_node(name, type, -1);
			}
			m = ruDoAdd2IndexNode(i, n, env);
			RuIndex(index with vars = setTree(index.vars, name, m));
		}
	}
}

ruCheckNodes(nodes : [RuIndexNode<?>]) -> void {
	iteri(nodes, \i, n -> 
		if (n.id != i) {
			println("n.id != " + i2s(i));
			println(ruIndexNode2s(n));
			
			iteri(nodes, \j, m ->
				println(i2s(j) + " --" + ruIndexNode2s(n))
			);
			
			quit(-2);
		}
	)
}

ruDoAdd2IndexNode(i : int, n : RuIndexNode<?>, env : RuIndexAddEnv<?>) -> RuIndexNode<?> {
	n1 = if (i + 1 == length(env.key.nodes)) {
		RuIndexNode(n with data = concat(n.data, [env.data]), expr = Some(env.key));
	} else {
		RuIndexNode(n with index = ruDoAdd2Index(i + 1, n.index, n.id, env));
	}
	n2 = RuIndexNode(n1 with 
		lens = mergeSets(n1.lens, lookupTreeDef(env.lens, i, makeSet())),
	);
	n3 = RuIndexNode(n2 with ends = 
		eitherMap(lookupTree(env.ends, i), \ends -> 
			mergeSets(n2.ends, mapSet(ends, \end -> 
				lookupTreeDef(^(env.branch), end, if (i == end) n.id else -1)
			)), 
		n2.ends)
	);
	env.branch := setTree(^(env.branch), i, n3.id);
	nodes = n.index.nodes;
	//ruCheckNodes(^nodes);
	//println("AAA: " + i2s(n3.id));
	n.index.nodes := concat3(subrange(^nodes, 0, n.id), [n3], subrange(^nodes, n.id + 1, length(^nodes)));
	//ruCheckNodes(^nodes);
	//println("BBB");
	n3
}

ruUnifyIndex(e : RuExp, index : RuIndex<?>, math : RuMath) -> [RuUnified<?>] {
	ruDoUnifyIndex(0, index, math, RuUnifyEnv(e, makeTree()))
}

RuUnifyEnv(
	expr : RuExp,
	sub : Tree<RuVar, RuExp>
);

ruIndexBranch(beg : RuIndexNode<?>, end : int) -> [RuIndexNode<?>] {
	if (beg.id == end) [beg] else {
		if (end == -1 || end >= length(^(beg.index.nodes))) {
			println("A) node with index: " + i2s(end) + " is not found, length(length(^nodes))=" + i2s(length(^(beg.index.nodes))));
			quit(-1);
			[]
		} else {
			n = ^(beg.index.nodes)[end];
			concat(ruIndexBranch(beg, n.parent), [n]);
		}
	}
}

error = ref false;

ruIndexSubexpr(beg : RuIndexNode<?>, end : RuIndexNode<?>) -> RuExp {
	branch = ruIndexBranch(beg, end.id);
	lens = foldi(branch, makeTree(), \i, acc, n -> 
		foldSet(n.lens, acc, \ac, len -> setTree(ac, i - len, len))
	);
	RuExp(
		foldi(branch, [], \i, acc, n ->
			if (n.arity == -1) {
				concat(acc, [RuVar(n.name, n.type)]);
			} else {
				switch (lookupTree(lens, i)) {
					Some(len): concat(acc, [RuRuleRef(n.name, n.type, n.arity, len)]);
					None(): {
						println("must not happen: i=" + i2s(i) + ", n.name=" + n.name + ", branch.size=" + i2s(length(branch)));
						println("lens:\n" + foldTree(lens, "", \j, len, ac -> ac + i2s(j) + " --> " + i2s(len) + "\n"));
						println("nodes:\n" + strGlue(map(branch, \m -> 
							"\t" + m.name + ", lens = " + strGlue(map(set2array(m.lens), i2s), ", ") 
						), "\n"));
						println("branch:\n" + strGlue(map(branch, ruIndexNode2s), "\n"));
						//quit(-1);
						error := true;
						quit(-1);
						acc
					}
				}
			}
		)
		, -1
	);
}

ruDoUnifyIndex(i : int, index : RuIndex<?>, math : RuMath, env : RuUnifyEnv) -> [RuUnified<?>] {
	unify_step = \j, var, end, ex -> {
		switch (lookupTree(env.sub, var)) {
			Some(ex1): {
				switch (ruUnifyExps([ex1, ex], env.sub, math)) {
					Some(s): ruDoUnifyIndexNode(j, end, math, RuUnifyEnv(env with sub = s));
					None(): [];
				}
			}
			None():
				switch (ruAdd2Subst(env.sub, var, ex)) {
					Some(s): 
						ruDoUnifyIndexNode(j, end, math, RuUnifyEnv(env with sub = s));
					None(): {
						/*println("ruAdd2Subst failed: ");
						println("var: " + ru2s(var, math.rules));
						println("ex: " + ru2s(ex, math.rules));
						println("sub:\n" + ruSubst2s(env.sub, math));*/
						[];
					}
				}
		}
	}
	unify_var = \j, var, ex_type, end, e ->
		if (ex_type == var.type) unify_step(j, var, end, e())
		else {
			switch (ruSuperRule(var.type, ex_type, math)) {
				Some(sr): {
					ex = RuExp(concat([RuRuleRef(sr.name, var.type, 1, 1)], e().nodes), -1);
					unify_step(j, var, end, ex);
				}
				None(): []
			}
		}
	if (i == length(env.expr.nodes)) [] else {
		switch (env.expr.nodes[i]) {
			RuRuleRef(name, type, arity, len): {
				r1 = switch (lookupTree(index.rules, name)) {
					Some(n): ruDoUnifyIndexNode(i, n, math, env);
					None(): [];
				}
				r2 = foldTree(index.vars, [], \v, n, acc -> 
					concat(acc, unify_var(i + len, RuVar(n.name, n.type), type, n, 
						\-> RuExp(subrange(env.expr.nodes, i, len + 1), -1)
					))
				);
				concat(r1, r2);
			}
			RuVar(name, type): {
				r1 = foldTree(index.rules, [], \nm, n, acc -> {
					foldSet(n.ends, acc, \ac, e -> {
						if (e < 0 || e >= length(^(index.nodes))) {
							println("B) node with index: " + i2s(e) + " is not found, length(^nodes)=" + i2s(length(^(index.nodes))));
							quit(-1);
						}
						end = ^(index.nodes)[e];
						concat(ac, unify_var(i, RuVar(name, type), n.type, end, 
							\-> {
								ex = ruIndexSubexpr(n, end);
								if (^error) {
									println("n: " + n.name + ", end: " + end.name + ", i: " + i2s(i) + ", var: " + name);
									println("n == end: " + b2s(n == end));
									
									println("n descr: \n" + ruIndent(ruIndexNode2s(n)));
									println("end descr:\n" + ruIndent(ruIndexNode2s(end)));
									
									//d = ruIndexNodeDepth(end);
									//r = ruIndexNodeRoot(end);
									//println("END ROOT:\n" + ruIndent(ruIndexNode2s(r, d)));
									
									println("ex: " + ru2s(ex, math.rules) + " : " + ruExpType(ex.nodes));
									println("to unify: " + ru2s(env.expr, math.rules));
									println("index:\n" + ruIndexRaw2s(index));
									quit(-1);
								}
								ex
							}
						))
					})
				});
				r2 = foldTree(index.vars, [], \v, n, acc -> 
					concat(acc, unify_var(i, RuVar(n.name, n.type), type, n, 
						\-> RuExp([RuVar(name, type)], -1)
					))
				);
				concat(r1, r2);
			}
		}
	}
}

ruDoUnifyIndexNode(i : int, node : RuIndexNode<?>, math : RuMath, env : RuUnifyEnv) -> [RuUnified<?>] {
	r = if (i + 1 == length(env.expr.nodes)) {
		fold(node.data, [], \acc, d -> {
				switch (node.expr) {
					Some(ex): {
						e1 = ruApplySubst(ex, env.sub);
						e2 = ruApplySubst(env.expr, env.sub);
						if (e1.nodes != e2.nodes) {
							println("wrong unification");
							println("e1: " + ru2s(ex, math.rules));
							//println("ex(raw): " + ruExpRPN2s(ex.nodes));
							println("e2: " + ru2s(env.expr, math.rules));
							println("s(e1): " + ru2s(e1, math.rules));
							println("s(e2): " + ru2s(e2, math.rules));
							println("subst:\n" + ruSubst2s(env.sub, math));
							//println("substRPN:\n" + ruSubstRPN2s(env.sub));
							//println("e1(1): " + ru2s(ruApplySubst(ex, env.sub), math.rules));
							//println("e1(raw): " + ruExpRPN2s(ruApplySubst(ex, env.sub).nodes));
							//println("e2(raw): " + ruExpRPN2s(ruApplySubst(env.expr, env.sub).nodes));
							quit(-1);
						}
					}
					None(): println("impossible");
				};
				concat(acc, [RuUnified(env.sub, d)]);
			}
		);
	} else [];
	concat(r, ruDoUnifyIndex(i + 1, node.index, math, env))
}

ruIndex2s(index : RuIndex<?>, show_data : (?) -> string, math : RuMath) -> string {
	ruDoIndex2s(index, show_data, None(), "", math)
}

ruDoIndex2s(index : RuIndex<?>, show_data : (?) -> string, beg : Maybe<RuIndexNode<?>>, acc : string, math : RuMath) -> string {
	begin = \n -> switch (beg) {
		Some(b): b;
		None(): n;
	}
	acc1 = foldTree(index.rules, acc, \__, n, ac ->
		ruDoIndexNode2s(n, show_data, begin(n), ac, math, index.nodes)
	);
	foldTree(index.vars, acc1, \__, n, ac ->
		ruDoIndexNode2s(n, show_data, begin(n), ac, math, index.nodes)
	);
}

ruDoIndexNode2s(node : RuIndexNode<?>, show_data : (?) -> string, beg : RuIndexNode<?>, acc : string, math : RuMath, nodes : ref [RuIndexNode<?>]) -> string {
	acc1 = if (node.data == []) acc else {
		acc + 
		ru2s(ruIndexSubexpr(beg, node), math.rules) + " --> {" + 
		strGlue(map(node.data, show_data), ", ") + "}\n";
	}
	ruDoIndex2s(node.index, show_data, Some(beg), acc1, math);
}

ruIndexRaw2s(index : RuIndex<?>) -> string {
	ruDoIndexRaw2s(index, [], "")
}

ruDoIndexRaw2s(index : RuIndex<?>, nodes : [RuIndexNode<?>], acc : string) -> string {
	acc1 = foldTree(index.rules, acc, \__, n, ac ->
		ruDoIndexNodeRaw2s(n, concat(nodes, [n]), ac)
	);
	foldTree(index.vars, acc1, \__, n, ac ->
		ruDoIndexNodeRaw2s(n, concat(nodes, [n]), ac)
	);
}

ruDoIndexNodeRaw2s(node : RuIndexNode<?>, nodes : [RuIndexNode<?>], acc : string) -> string {
	acc1 = if (node.data == []) acc else {
		acc + strGlue(
			map(nodes, \n -> 
				i2s(n.id) + "=" + n.name + ":" + n.type + 
				",lens=[" + strGlue(map(set2array(n.lens), i2s), ", ") + "]" + 
				",ends=[" + strGlue(map(set2array(n.ends), i2s), ", ") + "]" + 
				(if (length(n.data) > 0) "*" else "")
			), 
		" ") + " --> " + i2s(length(node.data)) + "\n";
	};
	ruDoIndexRaw2s(node.index, nodes, acc1);
}

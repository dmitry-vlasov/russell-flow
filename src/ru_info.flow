import ru_cache;
import ru_conf;
import ru_log;
import ru_stats;
import ru_command;

export {
	ruInfoCommands() -> [RuComm];
}

ruInfoCommands() -> [RuComm] {[
	RuComm(
		"info-outline", "info", "prints a file outline",
		[RuCommArg("file", false, "input file", "")],
		ruInfoOutline
	),
	RuComm(
		"info-math", "info", "prints info about math",
		[RuCommArg("kind", false, "kind of math, one of: consts, types, axioms, rules, defs", "")],
		ruInfoMath
	),
	RuComm(
		"info-hover", "info", "hover info",
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "line of expr", ""), 
			RuCommArg("col", false, "column of expr", "")
		], 
		ruInfoHover
	),
	RuComm(
		"info-decl", "info", "declaration of entity at the given position",
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "line of expr", ""), 
			RuCommArg("col", false, "column of expr", "")
		], 
		ruInfoDecl
	),
	RuComm(
		"info-uses", "info", "prints all uses of a name",
		[RuCommArg("name", false, "entity name", "")],
		ruInfoUses
	),
	RuComm(
		"info-find", "info", "find entity with a given name",
		[RuCommArg("name", false, "entity name", "")],
		ruInfoFind
	),
]}

ruInfoDecl(task : RuTask, env : RuEnv) -> RuEnv {
	file = lookupTreeDef(task.args, "file", "");
	line = s2i(lookupTreeDef(task.args, "line", "-1"));
	col = s2i(lookupTreeDef(task.args, "col", "-1"));
	name = ruNameByLineCol(line, col, getFileContent(file));
	iter(ruCachedDecl(name), \d ->
		maybeApply(ruFromCache(d.info.file, env.conf), \cached -> 
			ruPrintln(ruRange2s(cached.source.info.path, ruDeclRange(d.decl, cached.source), "declaration of " + name))
		)
	);
	env;
}

ruInfoHover(task : RuTask, env : RuEnv) -> RuEnv {
	file = lookupTreeDef(task.args, "file", "");
	line = s2i(lookupTreeDef(task.args, "line", "-1"));
	col = s2i(lookupTreeDef(task.args, "col", "-1"));
	name = ruNameByLineCol(line, col, getFileContent(file));
	ruPrintln(ruCachedDecl2s(name, env.conf));
	env;
}

ruInfoFind(task : RuTask, env : RuEnv) -> RuEnv {
	name = lookupTreeDef(task.args, "file", "");
	ruPrintln(ruCachedDecl2s(name, env.conf));
	env;
}

ruInfoOutline(task : RuTask, env : RuEnv) -> RuEnv {
	file = lookupTreeDef(task.args, "file", "");
	maybeApply(ruFromCache(file, env.conf), \cached -> {
		src = cached.source;
		code = ruFileSource(src.info.path);
		resolver = makeLineResolver(code);
		iter(src.imports, \imp -> 
			maybeApply(ruNameRangeByPos(imp.pos, code), \range ->
				ruPrintln(ruRangeWithResolver2s(src.info.path, range, "import " + imp.path, resolver))
			)
		);
		iter(src.decls, \decl -> {
			switch (decl) {
				RuDecl(): {
					maybeApply(ruNameRangeByPos(ruDeclPos(decl), code),
						\range -> 
							ruPrintln(ruRangeWithResolver2s(src.info.path, range, ruDeclKind(decl) + " " + ruDeclName(decl), resolver))
					);
				}
				default: { }
			}
		});
	});
	env
}

ruInfoUses(task : RuTask, env : RuEnv) -> RuEnv {
	name = lookupTreeDef(task.args, "name", "");
	iter(ruCachedDecl(name), \decl ->
		maybeApply(ruFromCache(decl.info.file, env.conf), \cached ->
			iter(ruSourcesCache(), \s -> { 
				iter(s.decls, \d ->
					switch (d) {
						RuTheorem(__,__,__,__,__,__,proof,__):
							iter(proof.steps, \step ->
								if (step.assertion == name) {
									code = ruFileSource(s.info.path);
									maybeApply(ruNameRangeByPos(step.pos, code),
										\range -> 
											ruPrintln(ruRange2s(cached.source.info.path, range, "uses " + name))
									);
								}
							);
						default: { }
					}
				);
			})
		)
	);
	env
}

ruInfoMath(task : RuTask, env : RuEnv) -> RuEnv {
	kind = lookupTreeDef(task.args, "kind", "");
	info = JsonArray(filtermap(
		filter(ruCachedDecls(), \cached ->
			switch (cached.decl) {
				RuConst(name,__,__,__):               kind == "consts";
				RuType(name,__,__):                   kind == "types";
				RuRule(name,__,__,__):                kind == "rules";
				RuAxiom(name,__,__,__,__,__):         kind == "axioms";
				RuDef(name,__,__,__,__,__,__,__):     kind == "defs";
				RuTheorem(name,__,__,__,__,__,__,__): kind == "theorems";
			}
		),
		\cached -> {
			path = cached.info.path;
			decl = cached.decl;
			name = ruDeclName(decl);
			code = ruFileSource(path);
			maybeMap(ruNameRangeByPos(ruDeclPos(decl), code),
				\range ->
					JsonObject([
						Pair("location", lspLocation2Json(ruRange2LspLocation(range, path))),
						Pair("name", JsonString(name)),
						Pair("tooltip", JsonString(ruCachedDecl2s(name, env.conf)))
					])
			)
		}
	));
	ruPrintln(json2string(info));
	env;
}

ruInfoTheoremAxioms(task : RuTask, env : RuEnv) -> RuEnv {
	th_axioms = ruCachedTheoremAxioms();
	ax_sets = foldTree(th_axioms, makeTree(), \th, axs, acc -> 
		switch (findInOrder(acc, \as, ths -> if (equalSet(as, axs)) Some(Pair(as, ths)) else None())) {
			Some(pair): setTree(acc, pair.first, insertSet(pair.second, th));
			None(): setTree(acc, axs, makeSet1(th));
		}
	);
	traverseInOrder(ax_sets,
		\axs, names -> {
			if (sizeSet(axs) > 1) {
				out = "axioms: {" + strGlue(set2array(axs), ", ") + "}\n" + "theorems: {" + strGlue(set2array(names), ", ") + "}\n";
				ruDebugLog(out, env.conf);
				ruAddStats("theorem-axioms", RuStatsRow(out, pairs2tree([
					Pair("axioms", i2d(sizeSet(axs))),
					Pair("theorems", i2d(sizeSet(names))),
				])));
				ruPrintln(out);
			}
		}
	);
	stats = "<< theorem axioms distribution >>\n" +
	"distrib: \n" +
	ruIndent(ruProcStats("theorem-axioms", ruDistribLinSumStats("axioms", "theorems", 10))) + "\n" +
	"max axioms:   " + ruProcStats("theorem-axioms", ruMaxStats("axioms")) + "\n" +
	"avg axioms:   " + ruProcStats("theorem-axioms", ruAvgStats("axioms")) + "\n" +
	"sigma axioms: " + ruProcStats("theorem-axioms", ruSigmaStats("axioms")) + "\n"
	"\n" +
	"max theorems:   " + ruProcStats("theorem-axioms", ruMaxStats("theorems")) + "\n" +
	"avg theorems:   " + ruProcStats("theorem-axioms", ruAvgStats("theorems")) + "\n" +
	"sigma theorems: " + ruProcStats("theorem-axioms", ruSigmaStats("theorems")) + "\n";
	ruPrintln(stats);
	ruDebugLog(stats, env.conf);
	env;
}

import ru_cache;
import ru_math;

export {
	ruProcessInfo(math : RuMath) -> void;
}

ruProcessInfo(math : RuMath) -> void {
	if (ruSomeOptsAreSet(["decl", "uses", "hover", "rename", "outline"], math.conf)) {
		line = s2i(ruOptDef("line", "-1", math.conf));
		col = s2i(ruOptDef("col", "-1", math.conf));
		if (!ruInfoDecl(math.conf, line, col)) {
			if(!ruInfoHover(math, line, col)) {
				ruInfoOutline(math.conf, line, col);
				{}
			}
		}
	}
}

ruInfoDecl(conf : RuConf, line : int, col : int) -> bool {
	decl = ruOpt("decl", conf);
	if (decl == "") false else {
		name = if (decl != "1") decl else {
			if (line != -1 && col != -1) {
				ruNameByLineCol(line, col, getFileContent(conf.file));
			} else {
				ruPrintln("Provide line=<int> and col=<in> arguments", conf);
				""
			}
		}
		if (name != "") {
			maybeApply(ruCachedDecl(name), \d ->
				maybeApply(ruFromCache(d.src, conf), \src -> {
					i = ruIndexOfDecl(name, src);
					end = if (i + 1 < length(src.decls)) {
						src.decls[i + 1].pos;
					} else {
						strlen(ruFileSource(src.info));
					}
					range = RuRange(d.decl.pos, end);
					ruPrintln(ruRange2s(src.info, range, "declaration of " + name), conf);
					//ruServerLog(ruRange2s(src.info, range, "declaration of " + name), conf);
				}
			));
		}
		true;
	}
}

ruInfoHover(math : RuMath, line : int, col : int) -> bool {
	hover = ruOpt("hover", math.conf);
	if (hover == "") false else {
		name = if (hover != "1") hover else {
			if (line != -1 && col != -1) {
				ruNameByLineCol(line, col, getFileContent(math.conf.file));
			} else {
				ruPrintln("Provide line=<int> and col=<in> arguments", math.conf);
				""
			}
		}
		if (name != "") {
			maybeApply(ruCachedDecl(name), \d -> 
				ruPrintln(ruDecl2s(d.decl, math.rules), math.conf)
			);
		}
		true;
	}
}

ruInfoOutline(conf : RuConf, line : int, col : int) -> bool {
	outline = ruOpt("outline", conf);
	if (outline == "") false else {
		name = if (outline != "1") outline else conf.file;
		if (name != "") {
			maybeApply(ruFromCache(name, conf), \src -> {
				code = ruFileSource(src.info);
				iter(src.decls, \decl -> {
					switch (decl) {
						RuDecl(): {
							maybeApply(ruNameRangeByPos(ruDeclPos(decl), code),
								\range -> 
									ruPrintln(ruRange2s(src.info, range, ruDeclKind(decl) + " " + ruDeclName(decl)), conf)
							);
						}
						default: { }
					}
				});
			});
		}
		true;
	}
}

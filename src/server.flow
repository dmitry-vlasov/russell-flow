import server/http;
import lsp/process;

export {
	// A language server working over http.
	ruHttpServer(env : RuEnv) -> void;

	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	ruLspServer(env : RuEnv) -> void;

	// A console interactive Russell server.
	ruConsoleServer(env : RuEnv) -> void;
}

ruProcessRequest(
	conf : RuConf, req : string,
	msg : (string) -> void,
	out : (int, string) ->  void, 
	exit : () -> void, 
	process : (ScScript, (int) -> void, RuOut) -> void
) -> void {
	switch (ruJson2Script(parseJsonSafe(req))) {
		Some(script): {
			shutdown = exists(ruScriptTasks(script), \task -> task.command == "server-shutdown");
			lines = ref makeList();
			process(script,
				\code -> {
					if (shutdown) {
						exit();
					} else {
						out(code, concatStrings(map(list2array(^lines), \line -> line + "\n")));
					}
				},
				ruMakeOut(
					\line -> {
						msg(line);
						lines := Cons(line, ^lines);
					}, 
					conf.opts
				)
			);
		}
		None(): {
			json = ruLspDecodeJsonRequest(req);
			if (json == JsonNull()) {
				out(200, "WARNING: Illegal request.");
			} else {
				ruLspProcessRequest(conf, json, \s -> out(0, s), exit, process);
			}
		}
	}
}

ruLspServer(env : RuEnv) -> void { 
	ruLspServerLog("Server started.", env.conf);
	ruRunLspServer(env);
}

ruRunLspServer(env : RuEnv) -> void {
	conf = env.conf;
	switch (ruLspReadRequest()) {
		Some(req): {
			// Special watermark for non-logging
			uuid = ruMakeUuid();
			log_request = !strContains(req.request, "do_not_log_this");
			if (log_request) {
				ruLspServerLog("<" + uuid  + "> Client: " + ruCutLongString(ruServerEscapeString(req.request)), conf);
			}
			timer = ruMakeTimer();
			ruProcessRequest(conf, req.json, nop1,
				\__, resp -> {
					if (log_request) {
						ruLspServerLog("<" + uuid  + "> Server [" + ruTimePassed2s(timer) + "]: " + ruCutLongString(ruServerEscapeString(resp)), conf);
					}
					print(resp);
				},
				\-> {
					ruLspServerLog("Server stopped.", conf);
					quit(0);
				},
				ruProcess
			);
		}
		None(): {
			ruLspServerLog("Failed to read a request.", conf);
		}
	}
	ruRunLspServer(env);
}

ruHttpServer(env : RuEnv) -> void {
	conf = env.conf;
	port = s2i(lookupTreeDef(conf.opts, "server-port", "20001"));
	server = ref nop;
	server := createHttpServer(port,
		\-> {
			ruHttpServerLog("Server started.", conf);
			env.out.onMessage("Http server started.")
		},
		\request, response -> {
			timer = ruMakeTimer();
			req_string = ruServerEscapeString(request.body);
			// Special watermark for non-logging
			log_request = !strContains(req_string, "do_not_log_this");
			uuid = ruMakeUuid();
			if (log_request) {
				ruHttpServerLog("<" + uuid  + "> Client: " + ruCutLongString(ruServerEscapeString(request.body)), conf);
			}
			ruProcessRequest(conf, 
				request.body, 
				if (log_request) env.out.onMessage else nop1,
				\code, output -> {
					if (log_request) {
						ruHttpServerLog("<" + uuid  + "> Server [" + ruTimePassed2s(timer) + "]: " + ruCutLongString(ruServerEscapeString(output)), conf);
					}
					HttpResponse(200 + code, output, []) |> response
				},
				\-> {
					env.out.onMessage("Http server stopped.");
					ruHttpServerLog("Server stopped.", conf);
					HttpResponse(200, "Http server stopped.", []) |> response;
					^server();
					quit(0);
				},
				ruProcessLocal
			)
		}
	);
}

ruConsoleServer(env : RuEnv) -> void {
	ruConsoleLog("Server started.", env.conf);
	env.out.onMessage(
		"Enter a script (command) and press enter to execute.\n"
		"Type 'exit' to leave, 'help' to see the help message."
	);
	ruRunConsoleServer(env);
	quit(0);
}

ruRunConsoleServer(env : RuEnv) -> void {
	conf = env.conf;
	print("> ");
	script_src = trim2(readUntil("\n"), " \r\n\t");
	if (!(script_src == "exit" || script_src == "quit" || script_src == "bye")) {
		if (script_src == "") {
			// Empty input
			ruRunConsoleServer(env);
		} else {
			switch (ruParseScript(script_src)) {
				Some(src): {
					uuid = ruMakeUuid();
					timer = ruMakeTimer();
					ruConsoleLog("<" + uuid + "> Script started: " + ruServerEscapeString(script_src), conf);
					ruProcess(src.script, 
						\code -> {
							time_msg = "[" + ruTimePassed2s(timer) + "]";
							code_msg = if(code == 0) "" else "(code: " + i2s(code) + ") ";
							ruConsoleLog("<" + uuid + "> Script finished " + code_msg + time_msg, conf);
							ruRunConsoleServer(env);
						},
						ruMakeOut(env.out.onMessage, conf.opts)
					);
				}
				None(): {
					env.out.onMessage("Syntax error in script: '" + escapeStr(script_src) + "'");
					ruConsoleLog(
						"Syntax error in script: '" + escapeStr(script_src) + "'",
						//+ " = [" + strGlue(map(s2a(script_src), i2s), ", ") + "]", 
						conf
					);
					ruRunConsoleServer(env);
				}
			}
		}
	} else {
		ruConsoleLog("Server stopped.", conf);
		env.out.onMessage("Bye.");
	}
}


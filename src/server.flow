import server/http;

import lsp;

export {
	// A language server working over http.
	ruHttpServer(conf : RuConf) -> void;

	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	ruLspServer(conf : RuConf) -> void;

	// A console interactive Russell server.
	ruConsoleServer(conf : RuConf) -> void;
}

ruProcessRequest(
	serverConf : RuConf, req : string,
	msg_cb : (string) -> void, 
	out_cb : (int, string) ->  void, 
	loop_cb : () -> void, 
	exit_cb : () -> void, 
	run : (ScScript, (string) -> void, (int) -> void) -> void
) -> void {
	switch (ruJson2ScScript(parseJsonSafe(req))) {
		Some(script): {
			shutdown = exists(ruScScriptTasks(script), \task -> task.command == "server-shutdown");
			run(script, msg_cb,
				\code -> {
					if (shutdown) {
						exit_cb();
					} else {
						out_cb(code, ruOutput());
						ruClearOutput();
						loop_cb();
					}
				}
			);
		}
		None(): {
			json = ruDecodeJsonRequest(req);
			if (json == JsonNull()) {
				out_cb(200, "WARNING: Illegal request.");
				loop_cb();
			} else {
				ruLspProcessRequest(serverConf, json, \msg -> out_cb(0, msg), loop_cb, exit_cb, run);
			}
		}
	}
}

ruLspServer(conf : RuConf) -> void { 
	ruServerLog("Server started.", conf);
	ruRunLspServer(conf);
}

ruRunLspServer(conf : RuConf) -> void {
	switch (ruLspReadRequest()) {
		Some(req): {
			// Special watermark for non-logging
			log_request = !strContains(req.request, "do_not_log_this");
			if (log_request) {
				ruServerLog("Client: " + ruCutLongString(ruServerEscapeString(req.request)), conf);
			}
			start_time = timestamp();
			ruProcessRequest(conf, req.json, nop1, 
				\__, resp -> {
					if (log_request) {
						ruServerLog("Server [" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + ruCutLongString(ruServerEscapeString(resp)), conf);
					}
					print(resp);
				},
				\-> ruRunLspServer(conf),
				\-> {
					ruServerLog("Server stopped.", conf);
					quit(0);
				},
				ruRun
			);
		}
		None(): {
			ruServerLog("Failed to read a request.", conf);
			ruRunLspServer(conf);
		}
	}
}

ruHttpServer(conf : RuConf) -> void {
	port = s2i(lookupTreeDef(conf.opts, "server-port", "20001"));
	server = ref nop;
	server := createHttpServer(port,
		\-> {
			ruServerLog("Server started.", conf);
			ruPrintln("Http server started.")
		},
		\request, response -> {
			start_time = timestamp();
			req_string = ruServerEscapeString(request.body);
			// Special watermark for non-logging
			log_request = !strContains(req_string, "do_not_log_this");
			if (log_request) {
				ruServerLog("Client: " + ruCutLongString(ruServerEscapeString(request.body)), conf);
			}
			ruProcessRequest(conf, request.body, ruPrintln, 
				\code, output -> {
					if (log_request) {
						ruServerLog("Server [" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + ruCutLongString(ruServerEscapeString(output)), conf);
					}
					HttpResponse(200 + code, output, []) |> response
				},
				nop,
				\-> {
					ruPrintln("Http server stopped.");
					ruServerLog("Server stopped.", conf);
					HttpResponse(200, ruOutput(), []) |> response;
					^server();
					quit(0);
				},
				ruRunLocal
			)
		}
	);
}

ruConsoleServer(conf : RuConf) -> void {
	ruServerLog("Server started.", conf);
	ruPrintln("Type 'do=help' and press enter to get more information about REPL mode.");
	ruRunConsoleServer(conf);
	quit(0);
}

ruRunConsoleServer(conf : RuConf) -> void {
	print("> ");
	command = ltrim2(readUntil("\n"), " \r\n\t");
	if (command != "exit") {
		switch (ruParseScScript(command)) {
			Some(script): {
				ruServerLog("Script: " + ruScScript2s(script), conf);
				ruRun(script, ruPrintln, \code -> ruRunConsoleServer(conf));
			}
			None(): {
				ruPrintln("Syntax error in script: " + command);
				ruRunConsoleServer(conf);
			}
		}
	} else {
		ruServerLog("Server stopped.", conf);
		ruPrintln("Bye.");
	}
}


import command;

export {
	ruHelpCommands(comms_tree : () -> Tree<string, RuComm>) -> [RuComm];
	ruShowHelp(comms_tree : () -> Tree<string, RuComm>) -> bool;
}

ruShowHelp(comms_tree : () -> Tree<string, RuComm>) -> bool {
	if (!exists(["help", "help-usage", "help-category", "help-server", "help-config"], \h -> isUrlParameterSet(h))) false else {
		help_task = RuTask("help", ruParams2Tree(getAllUrlParametersArray()));
		help_msg = ruRunHelp(help_task, comms_tree);
		println(help_msg);
		true;
	}
}

ruHelpCommands(comms_tree : () -> Tree<string, RuComm>) -> [RuComm] {[
	RuComm(
		"help", "help", "Usage: 'help <command>' or 'help <category>'", "category",
		[RuCommArg("category", true, "category of help. Run 'help-category' to see all categories", "")],
		\task, env -> { env.conf.onMessage(ruRunHelp(task, comms_tree)); Some(env) }
	),
	RuComm(
		"help-usage", "help", "usage message", "", [],
		\task, env -> { env.conf.onMessage(ruUsageMessage()); Some(env); }
	),RuComm(
		"help-category", "help", "show all help categories", "", [],
		\task, env -> { env.conf.onMessage(ruCategoryMessage(comms_tree)); Some(env); }
	),
	RuComm(
		"help-server", "help", "show all server modes", "", [],
		\task, env -> { env.conf.onMessage(ruServerMessage()); Some(env); }
	),
	RuComm(
		"help-config", "help", "show config options", "", [],
		\task, env -> { env.conf.onMessage(ruConfigMessage()); Some(env); }
	)
]};

ruRunHelp(task : RuTask, comms_tree : () -> Tree<string, RuComm>) -> string {
	cats = toLowerCase(lookupTreeDef(task.args, "category", ""));
	categories = 
		if (cats == "") {
			if (containsKeyTree(task.args, "category")) ["category"] else []
		} else {
			filtermap(
				strSplit(cats, ","),
				\cat -> if (cat == "") None() else Some(cat)
			);
		}
	if (categories != []) {
		strGlue(map(categories, \cat -> ruHelpOn(cat, comms_tree)), "");
	} else {
		commands = foldTree(task.args, [], \key, val, acc ->
			if (val == "" && key != "help") concat(acc, [key]) else acc
		);
		if (commands != []) {
			strGlue(map(commands, \comm -> ruHelpOn(comm, comms_tree)), "");
		} else {
			ruHelpOn("", comms_tree);
		}
	}
}

ruHelpMessage(detailed : bool, comms_tree : () -> Tree<string, RuComm>) -> string {
	commands = getTreeValues(comms_tree());
	categories = set2array(fold(commands, makeSet(), \acc, comm -> 
		if (comm.category == "") acc else insertSet(acc, comm.category)
	));
	"Help invocation:\n" +
		"\t'russell help <category>,...,<category>'\n" +
		"\t'russell help <command>'\n" +
	(if (!detailed) "" else 
		"Special help commands:\n" +
		"\t'russell help usage'    -- usage message (command format)\n" +
		"\t'russell help category' -- the list of all command categories\n" +
		"\t'russell help server'   -- the list of all server modes\n"
		"\t'russell help config'   -- the list of russell config parameters\n"
	) +
	"List of all commands may be seen with:\n" +
		"\t'russell help all'\n";
}

ruUsageMessage() -> string {
	"Usage:\n" + 
		"\t'russell <task_1> ; ... ; <task_m>'\n" +
	"where task is:\n" + 
		"\t'<command> <arg_1>=<val_1> ... <arg_n>=<val_n>'\n";
}

ruConfigMessage() -> string {
	"Config options:\n" + 
		"\tfile=<name>                         input file\n" +
		"\timport-roots=<dir_1>,...,<dir_n>    relative paths, against which sources are searched\n" +
		"\tproject-roots=<file_1>,...,<file_n> a set of sources, which contain all project data\n" +
		"\tbin-dir=<dir>                       directory, where the binary for russell is stored\n" + 
		"\tworking-dir=<dir>                   a working directory, relative to which all paths are resolved\n" + 
		"\tverbose={0,1,2,3,...}               output verbosity level. Larger means more verbose\n" + 
		"\thalt-on-errors=1                    abort execution of a programm at first error\n" + 
		"\tdisk-caching=0                      disable an external disk cache\n" + 
		"\tmem-caching=0                       disable memory cache\n" + 
		"\tcaching=0                           disable all kinds of caching\n" +
		"\tstrict-file-names=1                 resolve modules paths only against import-roots\n" +
		"\tdie-at-verify-failure=1             when a verification error is met program terminates\n" +
		"\tshow-disproved-theorems=1           show theorem declarations when a verification error is reported\n" +
		"\treport-depend-on-non-verified=1     report errors of kind: depends on non-verified theorem\n" +
		"\tconcurrent=0                        switch off concurrent execution: only sequential\n" +
		"\tmaxlen-expr=<int>                   maximum length of a plain expression used for output. Default is 32";
}

ruCategoryMessage(comms_tree : () -> Tree<string, RuComm>) -> string {
	commands = getTreeValues(comms_tree());
	categories = sort(set2array(fold(commands, makeSet(), \acc, comm -> 
		if (comm.category == "") acc else insertSet(acc, comm.category)
	)));
	cat2commands : Tree<string, [string]> = foldTree(comms_tree(), makeTree(), \name, comm, acc ->
		setTree(acc, comm.category, 
			concat(lookupTreeDef(acc, comm.category, []), [name])
		)
	);
	cat_matr = [
		categories,
		map(categories, \cat -> strGlue(lookupTreeDef(cat2commands, cat, []), ", ")),
	];
	"The list of all categories:\n" + 
	ruStringTable2s(cat_matr, Some(["Category", "Commands"])) + "\n";
}

ruServerMessage() -> string {
	"Starting a Russell server:\n" + 
		"\t'russell server=<mode>'\n" + 
	"where mode is one of:\n" + 
		"\thttp, lsp, console, repl\n" +
	"here repl is alias to console (i.e. it is the same).\n";
}

ruHelpOn(category : string, comms_tree : () -> Tree<string, RuComm>) -> string {
	commands = getTreeValues(comms_tree());
	if (category == "") {
		ruHelpMessage(true, comms_tree);
	} else if (category == "usage") {
		ruUsageMessage();
	} else if (category == "category") {
		ruCategoryMessage(comms_tree);
	} else if (category == "server") {
		ruServerMessage();
	} else if (category == "config") {
		ruConfigMessage();
	} else {
		filtered = filter(commands, \comm -> comm.category == category || category == "all");
		if (filtered != []) {
			ruComms2s(filtered, false);
		} else {
			eitherMap(lookupTree(comms_tree(), category), \comm -> ruComm2s(comm, true), "");
		}
	}
}

import comm;
import script/load;

export {
	ruHelpCommands(comms_tree : () -> Tree<string, RuComm>) -> [RuComm];
	ruShowHelp(comms_tree : () -> Tree<string, RuComm>, env : RuEnv) -> bool;
}

ruShowHelp(comms_tree : () -> Tree<string, RuComm>, env : RuEnv) -> bool {
	if (!exists(["help", "help-usage", "help-category", "help-server", "help-config"], \h -> isUrlParameterSet(h))) false else {
		help_task = RuTask("help", ruParams2Tree(getAllUrlParametersArray()));
		help_msg = ruRunHelp(help_task, comms_tree, env);
		env.out.println(help_msg);
		true;
	}
}

ruHelpCommands(comms_tree : () -> Tree<string, RuComm>) -> [RuComm] {[
	RuComm(
		RuCommInfo(
			"help", "help", "Usage: 'help <command>' or 'help <category>'", "category", false, false, 
			[RuCommArg("category", true, "category of help. Run 'help-category' to see all categories", "")], []
		),
		\unit -> { env = ruUnitEnv(unit); env.out.println(ruRunHelp(unit.task, comms_tree, env)); Some(unit.state) }
	),
	RuComm(
		RuCommInfo("help-usage", "help", "usage message", "", false, false, [], []),
		\unit -> { unit.out.println(ruUsageMessage()); Some(unit.state); }
	),RuComm(
		RuCommInfo("help-category", "help", "show all help categories", "", false, false, [], []),
		\unit -> { env = ruUnitEnv(unit); unit.out.println(ruCategoryMessage(comms_tree, env)); Some(unit.state); }
	),
	RuComm(
		RuCommInfo("help-server", "help", "show all server modes", "", false, false, [], []),
		\unit -> { unit.out.println(ruServerMessage()); Some(unit.state); }
	),
	RuComm(
		RuCommInfo("help-config", "help", "show config options", "", false, false, [], []),
		\unit -> { unit.out.println(ruConfigMessage()); Some(unit.state); }
	),
	RuComm(
		RuCommInfo("help-scripts", "help", "show all available scripts", "", false, false, [], []),
		\unit -> { env = ruUnitEnv(unit); unit.out.println(ruScriptsMessage(env)); Some(unit.state); }
	),
]};

ruRunHelp(task : RuTask, comms_tree : () -> Tree<string, RuComm>, env : RuEnv) -> string {
	cats = toLowerCase(ruTaskStringArg(task, "category", ""));
	categories = 
		if (cats == "") {
			if (containsKeyTree(task.args, "category")) ["category"] else []
		} else {
			filtermap(
				strSplit(cats, ","),
				\cat -> if (cat == "") None() else Some(cat)
			);
		}
	if (categories != []) {
		strGlue(map(categories, \cat -> ruHelpOn(cat, comms_tree, env)), "");
	} else {
		commands = foldTree(task.args, [], \name, value, acc ->
			if (value == "" && name != "help") concat(acc, [name]) else acc
		);
		if (commands != []) {
			strGlue(map(commands, \comm -> ruHelpOn(comm, comms_tree, env)), "");
		} else {
			ruHelpOn("", comms_tree, env);
		}
	}
}

ruHelpMessage(detailed : bool, comms_tree : () -> Tree<string, RuComm>, env : RuEnv) -> string {
	commands = getTreeValues(comms_tree());
	categories = set2array(fold(commands, makeSet(), \acc, comm -> 
		if (comm.info.category == "") acc else insertSet(acc, comm.info.category)
	));
	"Help invocation:\n" +
		"\t'russell help <category>,...,<category>'\n" +
		"\t'russell help <command>'\n" +
	(if (!detailed) "" else 
		"Special help commands:\n" +
		"\t'russell help usage'    -- usage message (command format)\n" +
		"\t'russell help category' -- the list of all command categories\n" +
		"\t'russell help server'   -- the list of all server modes\n" +
		"\t'russell help config'   -- the list of russell config parameters\n" +
		"\t'russell help scripts'  -- the list of available scripts\n"
	) +
	"List of all commands may be seen with:\n" +
		"\t'russell help all'\n";
}

ruUsageMessage() -> string {
	"Usage:\n" + 
		"\t'russell <task_1> ; ... ; <task_m>'\n" +
	"where task is:\n" + 
		"\t'<command> <arg_1>=<val_1> ... <arg_n>=<val_n>'\n";
}

ruConfigMessage() -> string {
	"Config options:\n" + 
		"\tfile=<name>                         input file\n" +
		"\timport-roots=<dir_1>,...,<dir_n>    relative paths, against which sources are searched\n" +
		"\tproject-roots=<file_1>,...,<file_n> a set of sources, which contain all project data\n" +
		"\trussell-dir=<dir>                   the directory with flow distribution\n" + 
		"\tworking-dir=<dir>                   a working directory, relative to which all paths are resolved\n" + 
		"\tverbose={0,1,2,3,...}               output verbosity level. Larger means more verbose\n" + 
		"\thalt-on-errors=1                    abort execution of a programm at first error\n" + 
		"\tdisk-caching=0                      disable an external disk cache\n" + 
		"\tmem-caching=0                       disable memory cache\n" + 
		"\tcaching=0                           disable all kinds of caching\n" +
		"\tno-server=1                         do not use http server (run locally)\n" + 
		"\tstrict-file-names=1                 resolve modules paths only against import-roots\n" +
		"\tdie-at-verify-failure=1             when a verification error is met program terminates\n" +
		"\tshow-disproved-theorems=1           show theorem declarations when a verification error is reported\n" +
		"\treport-depend-on-non-verified=1     report errors of kind: depends on non-verified theorem\n" +
		"\tconcurrent=0                        switch off concurrent execution: only sequential\n" +
		"\tmaxlen-expr=<int>                   maximum length of a plain expression used for output. Default is 32\n"+
		"\tprogress-update-sec=<time>          show progress every <time> seconds\n" +
		"\tforce-lookup-modules=1              lookup *.java classes in javagen folder anyway.\n" +
		"\n" +
		"\tlog-console=1                       switch on the interactive console logging. By default is off\n" +
		"\tlog-client=1                        switch on the http client logging. By default is off\n" +
		"\tlog-script=1                        switch on the script execution logging. By default is off\n" +
		"\tlog-lsp=0                           switch off the LSP server logging. By default is on\n" +
		"\tlog-http=0                          switch off the http server logging. By default is on\n" +
		"\tlog-all=0                           switch on all logging. By default is off\n" +
		"\n" +
		"\tscript-log=<file>                   choose a non-default log name for scripts. Default is: russell/log/russell_script.log\n" +
		"\tserver-log=<file>                   choose a non-default log name for server. Default is: russell/log/russell_server.log\n" +
		"\tscript-log-size=<lines>             size of a log file (lines). Default is: 128\n" +
		"\tserver-log-size=<lines>             size of a log file (lines). Default is: 128";
}

ruCategoryMessage(comms_tree : () -> Tree<string, RuComm>, env : RuEnv) -> string {
	commands = getTreeValues(comms_tree());
	categories = sort(set2array(fold(commands, makeSet(), \acc, comm -> 
		if (comm.info.category == "") acc else insertSet(acc, comm.info.category)
	)));
	cat2commands : Tree<string, [string]> = foldTree(comms_tree(), makeTree(), \name, comm, acc ->
		setTree(acc, comm.info.category, 
			concat(lookupTreeDef(acc, comm.info.category, []), [name])
		)
	);
	cat_matr = [
		categories,
		map(categories, \cat -> 
			strGlue(ruWrapLines(strGlue(lookupTreeDef(cat2commands, cat, []), ", ") + "\n", 80, " "), "\n")
		),
	];
	"The list of all categories:\n" + 
	ruStringTable2s(cat_matr, Some(["Category", "Commands"])) + "\n";
}

ruServerMessage() -> string {
	"Starting a Russell server:\n" + 
		"\t'russell server=<mode>'\n" + 
	"where mode is one of:\n" + 
		"\thttp, lsp, console, repl\n" +
	"here repl is alias to console (i.e. it is the same).\n";
}

ruHelpOn(what : string, comms_tree : () -> Tree<string, RuComm>, env : RuEnv) -> string {
	commands = getTreeValues(comms_tree());
	if (what == "") {
		ruHelpMessage(true, comms_tree, env);
	} else if (what == "usage") {
		ruUsageMessage();
	} else if (what == "category") {
		ruCategoryMessage(comms_tree, env);
	} else if (what == "server") {
		ruServerMessage();
	} else if (what == "config") {
		ruConfigMessage();
	} else if (what == "scripts") {
		ruScriptsMessage(env);
	} else {
		filtered = filter(commands, \comm -> comm.info.category == what || what == "all");
		if (filtered != []) {
			ruComms2s(filtered, false);
		} else {
			switch (lookupTree(comms_tree(), what)) {
				Some(comm): ruComm2s(comm, true);
				None(): {
					scripts = ruLoadAllScripts(env);
					what1 = changeFileExt(what, "");
					switch (find(scripts, \script -> script.commInfo.name == what1)) {
						Some(script): ruCommInfo2s(script.commInfo, true);
						None(): "";
					}
				}
			}
		}
	}
}

ruScriptsMessage(env : RuEnv) -> string {
	scripts = ruLoadAllScripts(env);
	script_matr = [
		map(scripts, \s -> s.commInfo.name),
		map(scripts, \s -> s.commInfo.help),
	];
	"Scripts available: \n" + 
	ruStringTable2s(script_matr, Some(["Script", "Help"])) + "\n";
}

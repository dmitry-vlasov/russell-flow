import base/util/bits;

export {
	// Symbol binary representations: lower bit - isVar, all higher - literal
	mmSymbLiteral(symb : int) -> int;
	mmSymbIsVar(symb : int) -> bool;
	mmMakeSymb(literal : int, isVar : bool) -> int;
}

mmSymbLiteral(symb : int) -> int {
	bitUshr(symb, 1);
}

mmSymbIsVar(symb : int) -> bool {
	symb % 2 > 0;
}

mmMakeSymb(literal : int, isVar : bool) -> int {
	symb = bitShl(literal, 1);
	if (!isVar) symb else symb + 1;
}

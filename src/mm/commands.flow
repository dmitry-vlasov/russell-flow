import mm/parse/load;
import mm/parse/collect;
import mm/to_ru;
import mm/verify;
import ru/parse/collect;

import command;

export {
	mmCommands() -> [RuComm];
	mmCommRead(task : RuTask, env : RuEnv) -> RuEnv;
	mmCommWrite(task : RuTask, env : RuEnv) -> RuEnv;
	mmCommTranslate(task : RuTask, env : RuEnv) -> RuEnv;
}

mmCommands() -> [RuComm] {[
	RuComm(
		"read-mm", "io", "read a Metamath file",
		[RuCommArg("file", false, "input file", "")],
		mmCommRead
	),
	RuComm(
		"write-mm", "io", "write a Metamath file to a filesystem",
		[
			RuCommArg("file", true, "input file", ""), 
			RuCommArg("all", true, "write all files", ""), 
			RuCommArg("all-to-one", true, "write all files to a one", ""),
			RuCommArg("strip-comments", true, "self evident", "")
		],
		mmCommWrite
	),
	RuComm(
		"mm-to-ru", "translate", "translate Metamath to Russell",
		[RuCommArg("file", false, "input file", "")],
		mmCommTranslate
	),
]}

mmCommWrite(task : RuTask, env : RuEnv) -> RuEnv {
	math = env.mmMath;
	conf = env.conf;
	write_mm = \src0 : MmSource -> {
		path = src0.info.path;
		ensureDirectoryExists(ruDirName(path));
		if (env.conf.verbose > 1) {
			conf.onMessage("\tmm writing : '" + path + "'");
		}
		src = if (lookupTreeDef(task.args, "strip-comments", "") == "1") mmStripComments(src0) else src0;
		if (!setFileContent(path, mm2s(src))) {
			conf.onMessage("error while writing '" + path + "'");
		}
	}
	if (lookupTreeDef(task.args, "file", "") != "") {
		file = lookupTreeDef(task.args, "file", "");
		if (!endsWith(file, ".mm")) {
			conf.onError("Wrong file extension " + file + ", mus be *.mm", []);
		} else {
			module = ruTrimPath(file, conf, ".mm");
			switch (lookupTree(math.sources, module)) {
				Some(src): write_mm(src);
				None(): conf.onMessage("source: '" + file + "' is not found");
			}
		}
	} else if (lookupTreeDef(task.args, "all", "") == "1") {
		start = timestamp();
		iter(getTreeValues(math.sources), write_mm);
		time = (timestamp() - start);
		if (conf.verbose > 0 && time > 100.0) {
			conf.onMessage("mm written " + i2s(sizeTree(math.sources)) + " files in " + d2st(time/ 1000.0, 2) + "s");
		}
	} else if (lookupTreeDef(task.args, "all-to-one", "") != "") {
		file = lookupTreeDef(task.args, "all-to-one", "");
		if (!endsWith(file, ".mm")) {
			conf.onError("Wrong file extension " + file + ", mus be *.mm", []);
		} else {
			write_mm(mmMath2SingleSource(env.mmMath, file, env.conf));
		}
	}
	env;
}

mmCommRead(task : RuTask, env : RuEnv) -> RuEnv {
	file = lookupTreeDef(task.args, "file", "");
	if (!endsWith(file, ".mm")) {
		env.conf.onError("Wrong file extension " + file + ", mus be *.mm", []);
		env;
	} else {
		path = resolveRelativePath(file);
		module = ruTrimPath(path, env.conf, getFileExt(file));
		mm = maybeBind(mmLoad(env.conf, module), \loaded ->
			maybeBind(mmParse(getTreeValues(loaded), env.conf), \parsed ->
				maybeBind(mmCollectMath(parsed, env.conf), \collected ->
					mmVerifyMath(collected, env.conf)
				)
			)
		);
		eitherMap(mm, \math -> RuEnv(env with mmMath = math), env);
	}
}

mmCommTranslate(task : RuTask, env : RuEnv) -> RuEnv {
	eitherMap(
		ruCollectMath(mm2ru(env.mmMath, env.conf), env.conf), 
		\math -> RuEnv(env with ruMath = math), 
		env
	);
}

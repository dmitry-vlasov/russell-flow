import mm/verify;
import base/concurrent;
import ds/vector;

export {
	mmDecompressProof(proof : MmProof, hyps : [MmHyp], arities : Tree<int, int>) -> MmNormalProof;
	mmDecompressAssertion(ass : MmAssertion, arities : Tree<int, int>) -> MmAssertion;
	mmDecompressDecl(decl : MmDecl, arities : Tree<int, int>) -> MmDecl;

	mmCompressDecl(decl : MmDecl, sources : Tree<int, MmSource>, structs : MmStructs, env : RuEnv, arities : Tree<int, int>) -> MmDecl;
	mmCompressAssertion(ass : MmAssertion, sources : Tree<int, MmSource>, structs : MmStructs, env : RuEnv, arities : Tree<int, int>) -> MmAssertion;
	mmCompressProof(labels : [int], ass : MmAssertion, sources : Tree<int, MmSource>, structs : MmStructs, env : RuEnv, arities : Tree<int, int>) -> MmCompressedProof;
}

mmDecompressDecl(decl : MmDecl, arities : Tree<int, int>) -> MmDecl {
	switch (decl) {
		MmAssertion(__,__,__,__,__,__): mmDecompressAssertion(decl, arities);
		default: decl;
	}
}

mmDecompressAssertion(ass : MmAssertion, arities : Tree<int, int>) -> MmAssertion {
	switch (ass.stat) {
		MmAxiomatic(__,__): ass;
		MmProvable(l, ex, proof): 
			MmAssertion(ass with 
				stat = MmProvable(l, ex, mmDecompressProof(proof, ass.hyps, arities))
			);
	}
}

MmStepLen(
	step : int,
	len : int // length of corresponding subproof in decompressed proof
);

MmDecompressAcc(
	decompressed : Vector<MmStepLen>,
	subexprs : [Vector<MmStepLen>]
);

mmDecompressProof(proof : MmProof, hyps : [MmHyp], arities : Tree<int, int>) -> MmNormalProof {
	switch (proof) {
		MmNormalProof(__): proof;
		MmCompressedProof(labels, steps): {
			decompressed = fold(steps, MmDecompressAcc(makeVector(128), []), \acc, i ->
				if (i >= 0) {
					if (i < length(hyps)) {
						pushVector(acc.decompressed, MmStepLen(hyps[i].label, 1));
					} else {
						j = i - length(hyps);
						if (j < length(labels)) {
							arity = lookupTreeDef(arities, labels[j], -1);
							if (arity == -1) {
								// Case of inner floating variable declaration
								pushVector(acc.decompressed, MmStepLen(labels[j], 1));
							} else {
								len = mmCalcSubproofLen(
									sizeVector(acc.decompressed) - 1,
									arity, 1, acc.decompressed
								);
								pushVector(acc.decompressed, MmStepLen(labels[j], len));
							}
						} else {
							k = j - length(labels);
							subexpr = acc.subexprs[k];
							appendVector(acc.decompressed, subexpr);
						}
					}
					acc;
				} else {
					len = getVectorUnsafe(acc.decompressed, sizeVector(acc.decompressed) - 1).len;
					subexpr = subVector(acc.decompressed, sizeVector(acc.decompressed) - len, len);
					MmDecompressAcc(acc with subexprs = concat(acc.subexprs, [subexpr]));
				}
			).decompressed;
			MmNormalProof(map(vector2array(decompressed), \s -> s.step));
		}
	}
}

mmCalcSubproofLen(i : int, arity : int, acc : int, steps : Vector<MmStepLen>) -> int {
	if (arity == 0) acc else {
		arg_len = getVectorUnsafe(steps, i).len;
		mmCalcSubproofLen(i - arg_len, arity - 1, acc + arg_len, steps);
	}
}


MmCompressExecutionAcc(
	stack : List<MmExp>,
	essentials : List<MmExpPair>,
	subst : Tree<int, MmExp>
);

mmCompressPickFromStack(stack : List<MmExp>, hyps : [MmHyp], env : RuEnv) -> MmCompressExecutionAcc {
	fold(hyps, MmCompressExecutionAcc(stack, makeList(), makeTree()), \acc, hyp -> {
		e = headList(acc.stack, MmExp([]));
		switch (hyp) {
			MmEssential(__, expr):
				MmCompressExecutionAcc(
					tailList(acc.stack), 
					Cons(MmExpPair(e, expr), acc.essentials), 
					acc.subst
				);
			MmFloating(__, type, var): {
				MmCompressExecutionAcc(
					tailList(acc.stack),
					acc.essentials,
					setTree(acc.subst, var, MmExp(tail(e.symbs)))
				);
			}
		}
	});
}

// Do not check, just perform a single step
mmCompressExecuteRPNstep(label : int, stack : List<MmExp>, entities : Tree<int, MmLabeled>, theorem : MmAssertion, env : RuEnv) -> List<MmExp> {
	switch (lookupTreeDef(entities, label, mmNoAssertion)) {
		MmAssertion(__,__,__,hyps, inner, statement): {
			exec_acc = mmCompressPickFromStack(stack, reverseA(hyps), env);
			Cons(mmApplySubst(statement.expr, exec_acc.subst), exec_acc.stack);
		}
		MmEssential(__, expr): {
			Cons(expr, stack);
		}
		MmFloating(__, type, var): {
			Cons(MmExp([mmMakeSymb(type, false), mmMakeSymb(var, true)]), stack);
		}
	}
}

mmCompressCountExprsInProof(proof : [int], ass : MmAssertion, sources : Tree<int, MmSource>, structs : MmStructs, env : RuEnv) -> Tree<MmExp, int> {
	fold(proof, Pair(makeList(), makeTree()),
		\acc, label -> {
			stack = mmCompressExecuteRPNstep(label, acc.first, structs.labeled, ass, env);
			ex = headList(stack, MmExp([]));
			Pair(stack, setTree(acc.second, ex, lookupTreeDef(acc.second, ex, 0) + 1));
		}
	).second;
}

mmCompressDecl(decl : MmDecl, sources : Tree<int, MmSource>, structs : MmStructs, env : RuEnv, arities : Tree<int, int>) -> MmDecl {
	switch (decl) {
		MmAssertion(__,__,__,__,__,__): mmCompressAssertion(decl, sources, structs, env, arities);
		default: decl;
	}
}

mmCompressAssertion(ass : MmAssertion, sources : Tree<int, MmSource>, structs : MmStructs, env : RuEnv, arities : Tree<int, int>) -> MmAssertion {
	switch (ass.stat) {
		MmAxiomatic(__,__): ass;
		MmProvable(thm, expr, proof): {
			switch (proof) {
				MmCompressedProof(__,__): ass;
				MmNormalProof(labels): {
					MmAssertion(ass with
						stat = MmProvable(thm, expr,  mmCompressProof(labels, ass, sources, structs, env, arities))
					);
				}
			}
		}
	}
}

MmProofCompressionAcc(
	stack : List<MmExp>,
	compressed : Vector<MmStepLen>,
	steps : Tree<MmExp, int>,
	count : int
);

mmCompressProof(labels : [int], ass : MmAssertion, sources : Tree<int, MmSource>, structs : MmStructs, env : RuEnv, arities : Tree<int, int>) -> MmCompressedProof {
	level = s2i(lookupTreeDef(env.conf.opts, "mm-compress-level", "1"));
	labs = concat(
		map(ass.inner, \inn -> inn.label), 
		filter(uniq(labels), \lab -> !(exists(ass.hyps, \hyp -> hyp.label == lab) || exists(ass.inner, \inn -> inn.label == lab)))
	);
	hyps_map = foldi(concat(ass.hyps, ass.inner), makeTree(), \i, acc, hyp -> setTree(acc, hyp.label, i));
	labs_map = foldi(labs, makeTree(), \i, acc, lab -> setTree(acc, lab, length(ass.hyps) + i));
	Z = length(ass.hyps) + sizeTree(labs_map);

	exps_counts = if (level == 0) makeTree() else mmCompressCountExprsInProof(labels, ass, sources, structs, env);
	calc_acc = \bad_steps -> 
		foldi(labels, MmProofCompressionAcc(makeList(), makeVector(128), makeTree(), 0), \i, acc, label -> {
			stack = mmCompressExecuteRPNstep(label, acc.stack, structs.labeled, ass, env);
			ex = headList(stack, MmExp([]));
			acc1 = MmProofCompressionAcc(acc with stack = stack);
			switch (lookupTree(hyps_map, label)) {
				Some(k): {
					pushVector(acc.compressed, MmStepLen(k, 1));
					acc1;
				}
				None(): {
					switch (lookupTree(labs_map, label)) {
						Some(k): {
							len = mmCalcSubproofLen(
								sizeVector(acc.compressed) - 1,
								lookupTreeDef(arities, label, -1), 
								0, acc.compressed
							);
							switch (lookupTree(acc.steps, ex)) {
								Some(n): {
									resizeVector(acc.compressed, sizeVector(acc.compressed) - len);
									pushVector(acc.compressed, MmStepLen(n, 1));
									acc1
								}
								None(): {
									if (lookupTreeDef(exps_counts, ex, 0) <= 1 || containsSet(bad_steps, ex)) {
										pushVector(acc.compressed, MmStepLen(k, len + 1));
										acc1
									} else {
										pushVector(acc.compressed, MmStepLen(k, len + 1));
										pushVector(acc.compressed, MmStepLen(-1, len + 2));
										MmProofCompressionAcc(acc1 with
											steps = setTree(acc.steps, ex, Z + acc.count),
											count = acc.count + 1
										);
									}
								}
							}
						}
						None(): { 
							ruCrash("MUST NOT HAPPEN, unknown label: " + id2s(label)); 
							acc; 
						}
					}
				}
			}
		});
	acc1 = calc_acc(makeSet());
	steps_inds = buildSet(getTreeValues(acc1.steps));
	unused_inds = differenceSets(steps_inds, buildSet(map(vector2array(acc1.compressed), \s -> s.step)));
	unused_exps = foldTree(acc1.steps, makeSet(), \ex, i, acc ->
		if (containsSet(unused_inds, i)) insertSet(acc, ex) else acc
	);
	acc2 = calc_acc(unused_exps);
	MmCompressedProof(labs, map(vector2array(acc2.compressed), \s -> s.step));
}

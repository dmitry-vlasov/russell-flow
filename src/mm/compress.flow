import mm/verify;

export {
	mmDecompressProof(proof : MmProof, hyps : [MmHyp], arities : Tree<int, int>) -> MmNormalProof;
	mmDecompressAssertion(ass : MmAssertion, arities : Tree<int, int>) -> MmAssertion;
	mmDecompressDecl(decl : MmDecl, arities : Tree<int, int>) -> MmDecl;

	mmCompressAssertion(ass : MmAssertion, math : MmMath, conf : RuConf) -> MmAssertion;
	mmCompressDecl(decl : MmDecl, math : MmMath, conf : RuConf) -> MmDecl;
	mmCompressDeclCheck(decl : MmDecl, math : MmMath, conf : RuConf, arities : Tree<int, int>) -> MmDecl;
}

mmDecompressDecl(decl : MmDecl, arities : Tree<int, int>) -> MmDecl {
	switch (decl) {
		MmAssertion(__,__,__,__): mmDecompressAssertion(decl, arities);
		default: decl;
	}
}

mmDecompressAssertion(ass : MmAssertion, arities : Tree<int, int>) -> MmAssertion {
	switch (ass.stat) {
		MmAxiomatic(__,__): ass;
		MmProvable(l, ex, proof): 
			MmAssertion(ass with 
				//stat = MmProvable(l,ex, mmDecompressProof(proof, concat(ass.hyps, ass.inner), arities))
				stat = MmProvable(l, ex, mmDecompressProof(proof, ass.hyps, arities))
			);
	}
}

mmDecompressProof(proof : MmProof, hyps : [MmHyp], arities : Tree<int, int>) -> MmNormalProof {
	switch (proof) {
		MmNormalProof(__): proof;
		MmCompressedProof(labels, steps): {
			len_cache = ref makeTree();
			MmNormalProof(fold(steps, Pair([],[]), \acc, s ->
				switch (s) {
					MmProofIndex(i): {
						if (i < length(hyps)) {
							Pair(concat(acc.first, [hyps[i].label]), acc.second);
						} else {
							j = i - length(hyps);
							if (j < length(labels)) {
								Pair(concat(acc.first, [labels[j]]), acc.second);
							} else {
								k = j - length(labels);
								Pair(concat(acc.first, acc.second[k]), acc.second);
							}
						}
					}
					MmProofZ(): {
						len = mmSubexprLength(length(acc.first) - 1, acc.first, arities, len_cache);
						subexpr = subrange(acc.first, length(acc.first) - len, len);
						Pair(acc.first, concat(acc.second, [subexpr]));
					}
				}
			).first);
		}
	}
}

mmSubexprLength(i : int, labels : [int], arities : Tree<int, int>, len_cache : ref Tree<int, int>) -> int {
	switch (lookupTree(^len_cache, i)) {
		Some(len): len;
		None(): {
			len = switch (lookupTree(arities, labels[i])) {
				Some(arity): mmSubexprArgsLength(i - 1, 1, arity, labels, arities, len_cache);
				None(): 1;
			}
			len_cache := setTree(^len_cache, i, len);
			len;
		}
	}
}

mmSubexprArgsLength(i : int, acc : int, arg : int, labels : [int], arities : Tree<int, int>, len_cache : ref Tree<int, int>) -> int {
	if (arg == 0) acc else {
		arg_len = mmSubexprLength(i, labels, arities, len_cache);
		mmSubexprArgsLength(i - arg_len, acc + arg_len, arg - 1, labels, arities, len_cache)
	}
}


// Do not check, just perform a single step
mmExecuteRPNstep(label : int, stack : List<MmExp>, entities : Tree<int, MmLabeled>, theorem : MmAssertion, conf : RuConf) -> List<MmExp> {
	switch (lookupTreeDef(entities, label, mmNoAssertion)) {
		MmAssertion(disj, hyps, inner, statement): {
			eitherMap(mmPickFromStack(stack, reverseA(hyps), conf),
				\acc -> Cons(mmApplySubst(statement.expr, acc.subst), acc.stack), stack
			);
		}
		MmEssential(__, expr): {
			Cons(expr, stack);
		}
		MmFloating(__, type, var): {
			Cons(MmExp([MmSymb(type, false), MmSymb(var, true)]), stack);
		}
	}
}

mmCountExprsInProof(proof : [int], ass : MmAssertion, math : MmMath, conf : RuConf) -> Tree<MmExp, int> {
	stack_top = \st -> switch (st) { 
		Cons(e, __): e; 
		EmptyList(): MmExp([]); 
	}
	fold(proof, Pair(makeList(), makeTree()),
		\acc, label -> {
			stack = mmExecuteRPNstep(label, acc.first, math.labeled, ass, conf);
			ex = stack_top(stack);
			Pair(stack, setTree(acc.second, ex, lookupTreeDef(acc.second, ex, 0) + 1));
		}
	).second;
}

MmProofCompressionAcc(
	stack : List<MmExp>,
	compressed : [MmCompressedStep],
	steps : Tree<MmExp, int>
);

mmCompressAssertion(ass : MmAssertion, math : MmMath, conf : RuConf) -> MmAssertion {
	stack_top = \st -> switch (st) { 
		Cons(e, __): e; 
		EmptyList(): MmExp([]); 
	}
	switch (ass.stat) {
		MmAxiomatic(__,__): ass;
		MmProvable(thm, expr, proof): {
			switch (proof) {
				MmCompressedProof(__,__): ass;
				MmNormalProof(labels): {
					hyps_map = foldi(concat(ass.hyps, ass.inner), makeTree(), \i, acc, hyp -> setTree(acc, hyp.label, i));
					arity1 = sizeTree(hyps_map);
					labs = filter(uniq(labels), \lab -> !containsKeyTree(hyps_map, lab));
					labs_map = foldi(labs, makeTree(), \i, acc, lab -> setTree(acc, lab, i + arity1));
					arity2 = arity1 + sizeTree(labs_map);

					count_exps = mmCountExprsInProof(proof.labels, ass, math, conf);
					compressed = fold(proof.labels, MmProofCompressionAcc(makeList(), [], makeTree()),
						\acc, label -> {
							stack = mmExecuteRPNstep(label, acc.stack, math.labeled, ass, conf);
							ex = stack_top(stack);
							switch (lookupTree(acc.steps, ex)) {
								Some(i): MmProofCompressionAcc(stack, concat(acc.compressed, [MmProofIndex(i)]), acc.steps);
								None(): {
									i1 = lookupTreeDef(hyps_map, label, -1);
									i2 = if (i1 >= 0) i1 else lookupTreeDef(labs_map, label, -1);
									if (lookupTreeDef(count_exps, ex, 0) == 1 || i1 != -1) {
										MmProofCompressionAcc(stack, concat(acc.compressed, [MmProofIndex(i2)]), acc.steps);
									} else {
										MmProofCompressionAcc(stack, 
											concat(acc.compressed, [MmProofIndex(i2), MmProofZ()]), 
											setTree(acc.steps, ex, sizeTree(acc.steps) + arity2)
										);
									}
								}
							}
						}
					).compressed;
					MmAssertion(ass with
						stat = MmProvable(thm, expr,  MmCompressedProof(labs, compressed))
					);
				}
			}
		}
	}
}

mmCompressDecl(decl : MmDecl, math : MmMath, conf : RuConf) -> MmDecl {
	switch (decl) {
		MmAssertion(__,__,__,__): mmCompressAssertion(decl, math, conf);
		default: decl;
	}
}

mmCompressDeclCheck(decl : MmDecl, math : MmMath, conf : RuConf, arities : Tree<int, int>) -> MmDecl {
	switch (decl) {
		MmAssertion(__,__,__,__): mmCompressAssertionCheck(decl, math, conf, arities);
		default: decl;
	}
}

mmCompressAssertionCheck(ass : MmAssertion, math : MmMath, conf : RuConf, arities : Tree<int, int>) -> MmAssertion {
	stack_top = \st -> switch (st) { 
		Cons(e, __): e; 
		EmptyList(): MmExp([]); 
	}
	switch (ass.stat) {
		MmAxiomatic(__,__): ass;
		MmProvable(thm, expr, proof): {
			switch (proof) {
				MmCompressedProof(__,__): ass;
				MmNormalProof(labels): {
					//hyps_map = foldi(ass.hyps, makeTree(), \i, acc, hyp -> setTree(acc, hyp.label, i));
					//arity0 = sizeTree(hyps_map);
					//inner_map = foldi(ass.inner, makeTree(), \i, acc, hyp -> setTree(acc, hyp.label, i));
					//arity1 = sizeTree(inner_map);

					labs = concat(
						map(ass.inner, \inn -> inn.label), 
						filter(uniq(labels), \lab -> !(exists(ass.hyps, \hyp -> hyp.label == lab) || exists(ass.inner, \inn -> inn.label == lab)))
					);
					//labs_map = foldi(labs, makeTree(), \i, acc, lab -> setTree(acc, lab, i + arity1));
					//arity2 = arity1 + sizeTree(labs_map);

					arity0 = length(ass.hyps);
					arity1 = length(ass.inner);
					arity2 = length(labs);
					labs_map = foldi(labs, makeTree(), \i, acc, lab -> setTree(acc, lab, i));
					count_exps = mmCountExprsInProof(proof.labels, ass, math, conf);
					compressed = foldi(proof.labels, MmProofCompressionAcc(makeList(), [], makeTree()),
						\i, acc, label -> {
							stack = mmExecuteRPNstep(label, acc.stack, math.labeled, ass, conf);
							ex = stack_top(stack);
							switch (findi(ass.hyps, \hyp -> hyp.label == label)) {
								Some(k): {
									MmProofCompressionAcc(stack, 
										concat(acc.compressed, [MmProofIndex(k)]),
										acc.steps
									);
								}
								None(): {
									switch (findi(ass.inner, \inn -> inn.label == label)) {
										Some(k): {
											MmProofCompressionAcc(stack, 
												concat(acc.compressed, [MmProofIndex(arity0 + k)]),
												acc.steps
											);
										}
										None(): {
											switch (lookupTree(labs_map, label)) {
												Some(k): {
													switch (lookupTree(acc.steps, ex)) {
														Some(n): {
															len = mmSubexprArgsLength1(
																length(acc.compressed) - 1, 
																0, 
																lookupTreeDef(arities, label, -1), 
																labs, acc.compressed, arities, arity0, arity1, arity2
															);
															MmProofCompressionAcc(
																stack, 
																concat(take(acc.compressed, length(acc.compressed) - len), [MmProofIndex(n)]), 
																acc.steps
															);
														}
														None(): {
															if (lookupTreeDef(count_exps, ex, 0) == 1) {
																MmProofCompressionAcc(stack, 
																	concat(acc.compressed, [MmProofIndex(arity0 + k)]),
																	acc.steps
																);
															} else {
																MmProofCompressionAcc(stack, 
																	concat(acc.compressed, [MmProofIndex(arity0 + k), MmProofZ()]),
																	setTree(acc.steps, ex, sizeTree(acc.steps) + arity0 + arity2)
																);
															}
														}
													}
												}
												None(): {
													println("MUST NOT HAPPEN (A), unknown label: " + id2s(label));
													quit(0);
													acc;
												}
											}
										}
									}
								}
							}


						/*	i1 = findiDef(ass.hyps, \hyp -> hyp.label == label, -1);
							i2 = if (i1 >= 0) i1 else findiDef(ass.inner, \inn -> inn.label == label, -1);
							i3 = if (i2 >= 0) i2 else findiDef(labs, \lab -> lab == label, -1);
							switch (lookupTree(acc.steps, ex)) {
								Some(n): {
									len = mmSubexprArgsLength1(
										length(acc.compressed) - 1, 
										0, 
										lookupTreeDef(arities, label, -1), 
										labs, acc.compressed, arities, arity0, arity1, arity2
									);
									MmProofCompressionAcc(
										stack, 
										concat(take(acc.compressed, length(acc.compressed) - len), [MmProofIndex(n)]), 
										acc.steps
									);
								}
								None(): {
									if (lookupTreeDef(count_exps, ex, 0) == 1 || i1 != -1) {
										MmProofCompressionAcc(stack, 
											concat(acc.compressed, [MmProofIndex(i2)]),
											acc.steps
										);
									} else if (lookupTreeDef(count_exps, ex, 0) == 1 || i1 != -1) {
										MmProofCompressionAcc(stack, 
											concat(acc.compressed, [MmProofIndex(i2)]),
											acc.steps
										);
									} else {
										MmProofCompressionAcc(stack, 
											concat(acc.compressed, [MmProofIndex(i2), MmProofZ()]),
											setTree(acc.steps, ex, sizeTree(acc.steps) + arity2)
										);
									}
								}
							}*/
						}
					).compressed;
					ret = MmAssertion(ass with
						stat = MmProvable(thm, expr,  MmCompressedProof(labs, compressed))
					);
					//println("Compressed:\n" + mm2s(ret));
					decompressed : MmAssertion = mmDecompressAssertion(ret, arities);
					if (ass != decompressed) {
						ruCrash("compression failure.\nCompressed:\n" + mm2s(ret) + "\nDecompressed:\n" + mm2s(decompressed) + "\nOriginal:\n" + mm2s(ass));
					} else {
						//println("GOOOD:");
					}
					ret;
				}
			}
		}
	}
}

mmSubexprLength1(i : int, labs : [int], steps : [MmCompressedStep], arities : Tree<int, int>, arity0 : int, arity1 : int, arity2 : int) -> int {
	if (i < 0) {
		println("i < 0: " + i2s(i));
		quit(0);
		1;
	} else {
		switch (steps[i]) {
			MmProofIndex(k): {
				//if (k < arity0) 1 else
				if (k < arity0 + arity1) 1 else
				if (k < arity0 + arity2) {
					if (i < 0) {
						println("k: " + i2s(k) + ", arity1: " + i2s(arity1));
						println("k - arity1 < 0: " + i2s(k - arity1));
						quit(0);
						1;
					} else {
						switch (lookupTree(arities, labs[k - arity0])) {
							Some(arity): mmSubexprArgsLength1(i - 1, 1, arity, labs, steps, arities, arity0, arity1, arity2);
							None(): {
								println("MUST NOT HAPPEN (B): " + id2s(labs[k - arity0]));
								quit(0);
								1;
							}
						}
					}
				} else {
					1;
				}
			}
			MmProofZ(): 1;
		}
	}
}

mmSubexprArgsLength1(i : int, acc : int, arg : int, labs : [int], steps : [MmCompressedStep], arities : Tree<int, int>, arity0 : int, arity1 : int, arity2 : int) -> int {
	if (arg == 0) acc else {
		arg_len = mmSubexprLength1(i, labs, steps, arities, arity0, arity1, arity2);
		mmSubexprArgsLength1(i - arg_len, acc + arg_len, arg - 1, labs, steps, arities, arity0, arity1, arity2)
	}
}

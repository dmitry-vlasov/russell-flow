import mm/math;

export {
	mmMath2SingleSource(math : MmMath, file : string, conf : RuConf) -> MmSource;
	mmFindLeafSources(math : MmMath) -> [MmSource];
	mmMathAssertions(math : MmMath) -> [MmAssertion];
	mmMathAxiomatic(math : MmMath) -> [MmAssertion];
	mmMathProvable(math : MmMath) -> [MmAssertion];
	mmMathStats(math : MmMath) -> string;
}

mmFindLeafSources(math : MmMath) -> [MmSource] {
	filter(getTreeValues(math.sources), \src -> src.imports == [])
}

mmMath2SingleSource(math : MmMath, file : string, conf : RuConf) -> MmSource {
	MmSource([],
		concatA(foldTree(math.sources, Pair([[]], makeSet()), \__,src, acc ->
			mmMathCollectSource(src, math, acc)
		).first),
		ruMakeFileInfo(file, conf)
	);
}

mmMathCollectSource(src : MmSource, math : MmMath, acc : Pair<[[MmDecl]], Set<int>>) -> Pair<[[MmDecl]], Set<int>> {
	if (containsSet(acc.second, src.info.id)) acc else {
		acc1 = fold(src.imports, Pair(acc.first, insertSet(acc.second, src.info.id)), 
			\ac, imp -> {
				switch (lookupTree(math.sources, imp.module)) {
					Some(inc_src): mmMathCollectSource(inc_src, math, ac);
					None(): ac;
				}
			}
		);
		Pair(concat(acc1.first, [src.decls]), acc1.second)
	}
}

mmMathAssertions(math : MmMath) -> [MmAssertion] {
	filtermap(getTreeValues(math.labeled), \lab ->
		switch (lab) {
			MmAssertion(__,__,__,__): Some(lab);
			default: None();
		}
	);
}

mmMathAxiomatic(math : MmMath) -> [MmAssertion] {
	filter(mmMathAssertions(math), \ass ->
		switch (ass.stat) {
			MmAxiomatic(__,__): true;
			default: false;
		}
	);
}

mmMathProvable(math : MmMath) -> [MmAssertion] {
	filter(mmMathAssertions(math), \ass ->
		switch (ass.stat) {
			MmProvable(__,__,__): true;
			default: false;
		}
	);
}

mmMathStats(math : MmMath) -> string {
	strGlue([
		"sources:     " + i2s(sizeTree(math.sources)),
		"consts:      " + i2s(sizeSet(math.consts)),
		"labeled:     " + i2s(sizeTree(math.labeled)),
		"assertions:  " + i2s(length(mmMathAssertions(math))),
		"  axiomatic: " + i2s(length(mmMathAxiomatic(math))),
		"  provable:  " + i2s(length(mmMathProvable(math))),
	], "\n")
}

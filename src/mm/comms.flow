import ds/vector;
import mm/parse/comms;
import mm/refactor/comms;
import mm/mm2ru;
import mm/verify;

export {
	mmCommands = concat3(
		mmIoCommands, 
		mmRefactorCommands,
		[
			mmCommMm2Ru, 
			mmCommMmCompressProofs,
			mmCommMmDecompressProofs,
			mmCommVerifyMm
		]
	);
}

mmCommMmCompressProofs = RuComm(
	RuCommInfo("mm-compress-proofs", "misc", "compress Metamath proofs", "", false, false, [], []),
	mmRunMmCompressProofs
);

mmCommMmDecompressProofs = RuComm(
	RuCommInfo("mm-decompress-proofs", "misc", "decompress Metamath proofs", "", false, false, [], []),
	mmRunMmDecompressProofs
);

mmRunMmCompressProofs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	sources = state.mm;
	timer = ruMakeTimer();
	arities = mmSources2AssertionsArities(sources);
	structs = mmSources2structs(sources);
	counter = ref 0;
	inc_counter = ruAtomicIntInc(counter);
	assertions = mmAssertions(sources);
	compressed_ass = values2tree(
		ruConcurrent(map(
			assertions,
			\ass -> \-> {
				if (ruVerbose(env.conf) > 2) {
					env.out.onMessage("\t\tcompressing " + id2s(ass.stat.label) + " ...");
				}
				ret = mmCompressAssertion(ass, sources, structs, env, arities);
				if (ruVerbose(env.conf) > 2) {
					env.out.onMessage("\t\t" + id2s(ass.stat.label) + " is compressed");
				}
				if (ret != ass) { 
					inc_counter(1); 
				}
				ret
			}
		)),
		\ass -> ass.stat.label
	);
	compressed_srcs = mapTree(sources, \src -> 
		MmSource(src with 
			decls = map(src.decls, \decl -> lookupTreeDef(compressed_ass, mmDeclLabel(decl), decl))
		)
	);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("mm compressed " + i2s(^counter) + " proofs in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		mm = compressed_srcs,
		vars = setTree(setTree(state.vars, 
			"mm-compress-proofs.time", ValDouble(ruTimePassed(timer))), 
			"mm-compress-proofs.size", ValInt(^counter)
		)
	));
}

mmRunMmDecompressProofs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	sources = state.mm;
	timer = ruMakeTimer();
	arities = mmSources2AssertionsArities(sources);
	counter = ref 0;
	inc_counter = ruAtomicIntInc(counter);
	decompressed = mapTree(sources, \src -> 
		MmSource(src with 
			decls = ruConcurrent(map(src.decls, 
				\decl -> \ -> {
					ret : MmDecl = mmDecompressDecl(decl, arities);
					if (ret != decl) { 
						inc_counter(1);
					}
					ret;
				}
			))
		)
	);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("mm decompressed " + i2s(^counter) + " proofs in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		mm = decompressed,
		vars = setTree(setTree(state.vars, 
			"mm-decompress-proofs.time", ValDouble(ruTimePassed(timer))), 
			"mm-decompress-proofs.size", ValInt(^counter)
		)
	));
}

mmCommMm2Ru = RuComm(
	RuCommInfo(
		"mm-to-ru", "translate", "translate Metamath to Russell", "file", true, false, 
		[
			RuCommArg("file", false, "input file", ""),
			RuCommArg("fix-left-recursion", true, "fix left recursive grammar rules", "1")
		], []
	),
	mmRunMm2Ru
);

mmRunMm2Ru(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	fix_left_recursion = lookupTreeDef(task.args, "fix-left-recursion", "1");
	timer = ruMakeTimer();
	maybeMap(mm2ru(state.mm, env),
		\math -> {
			new_math = if (fix_left_recursion == "0") {
				math 
			} else {
				if (ruVerbose(env.conf) > 0) {
					env.out.onMessage("ru left-recursive rules are fixed");
				}
				ruFixLeftRecursion(math);
			}
			RuState(state with 
				ru = new_math.sources,
				vars = setTree(setTree(state.vars, 
					"mm-to-ru.time", ValDouble(ruTimePassed(timer))), 
					"mm-to-ru.size", ValInt(sizeTree(new_math.sources))
				)
			)
		}
	);
}

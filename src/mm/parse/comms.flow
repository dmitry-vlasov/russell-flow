import mm/parse/load;
import mm/parse/collect;
import mm/mm2ru;
import mm/verify;
//import command;

export {
	mmIoCommands : [RuComm] = [
		mmCommRead,
		mmCommWrite
	];
	mmRunRead(unit : RuUnit) -> Maybe<RuState>;
	mmRunWrite(unit : RuUnit) -> Maybe<RuState>;
}

mmCommRead = RuComm(
	RuCommDescr(
		"read-mm", "io", "read a Metamath file", "file", true, false, 
		[RuCommArg("file", false, "input file", "")], []
	),
	mmRunRead
);

mmRunRead(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	file = lookupTreeDef(task.args, "file", "");
	if (!endsWith(file, ".mm")) {
		env.out.onError("Wrong extension of a file '" + file + "' , must be *.mm", []);
		None();
	} else {
		conf = state.conf;
		path = ruResolveRelativePath(file, conf.workingDir);
		if (!fileExists(path)) {
			env.out.onError("mm file: '" + file + "' is not found", []);
			None();
		} else {
			module = ruTrimPath(path, conf, getFileExt(file));
			if (module == "") {
				env.out.onError("mm module for file: '" + file + "' cannot be empty string", []);
				None();
			} else {
				timer = ruMakeTimer();
				maybeMap(
					maybeBind(mmLoad(env, s2id(module)), \loaded ->
						maybeBind(mmParse(getTreeValues(loaded), env), \parsed ->
							mmCollectSources(parsed, env)
						)
					), 
					\mm -> {						
						RuState(state with 
							mm = mm,
							vars = setTree(setTree(state.vars, 
								"read-mm.time", ValDouble(ruTimePassed(timer))),
								"read-mm.size", ValInt(sizeTree(mm))
							)
						);
					}
				);
			}
		}
	}
}

mmCommWrite = RuComm(
	RuCommDescr(
		"write-mm", "io", "write a Metamath file to a filesystem", "target", false, false, 
		[
			RuCommArg("target", true, "write the mm file or 'all' (default)", "all"), 
			RuCommArg("monolithic", true, "include all dependencies into a target file", ""),
			RuCommArg("strip-comments", true, "self evident", ""),
			RuCommArg("test-write", true, "perform a test writing - do not save files", ""),
		], []
	),
	mmRunWrite
);

mmRunWrite(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	sources = state.mm;
	conf = state.conf;
	test = lookupTreeDef(task.args, "test-write", "");
	write_mm = \src0 : MmSource -> {
		path = src0.info.path;
		if (test != "1") {
			dir = ruDirName(path);
			if (dir != "") {
				err = ensureDirectoryExists(dir);
				if (err != "") {
					env.out.onError("failed to create directory: '" + dir + "', error: '" + err + "'", [RuPlace(src0.info.module, -1)]);
				}
			}
		}
		if (ruVerbose(env.conf) > 1) {
			env.out.onMessage("\tmm writing : '" + path + "'");
		}
		src = if (lookupTreeDef(task.args, "strip-comments", "") == "1") mmStripComments(src0) else src0;
		if (test != "1") {
			if (!setFileContent(path, mm2s(src))) {
				env.out.onError("error while writing '" + path + "'", [RuPlace(src.info.module, -1)]);
			}
		}
	}
	write_module = \module -> {
		switch (lookupTree(sources, module)) {
			Some(src): {
				monolith =lookupTreeDef(task.args, "monolithic", "");
				if (monolith == "") {
					write_mm(src);
				} else {
					if (monolith != "1") {
						write_mm(mmSources2SingleSource(state.mm, monolith, env));
					} else {
						write_mm(mmSources2SingleSource(state.mm, src.info.module, env));
					}
				}
			}
			None(): env.out.onMessage("unknown module: '" + id2s(module) + "'");
		}
	}
	if (sizeTree(sources) == 0) {
		env.out.onError("There are no Metamath sources at all.", []);
	} else {
		file = lookupTreeDef(task.args, "target", "");
		if (file == "all") {
			timer = ruMakeTimer();
			iter(getTreeValues(sources), write_mm);
			if (ruVerbose(env.conf) > 0) {
				env.out.onMessage("mm written " + i2s(sizeTree(sources)) + " files in " + ruTimePassed2s(timer));
			}
		} else {
			file_id = s2id(file);
			module = ruTrimPath(file, conf, ".mm");
			if (containsKeyTree(sources, file_id)) {
				timer = ruMakeTimer();
				write_module(file_id);
				if (ruVerbose(env.conf) > 0) {
					env.out.onMessage("mm written '" + module + "'' file in " + ruTimePassed2s(timer));
				}
			} else {
				module_id = s2id(module);
				if (containsKeyTree(sources, module_id)) {
					timer = ruMakeTimer();
					write_module(module_id);
					if (ruVerbose(env.conf) > 0) {
						env.out.onMessage("mm written '" + module + "' file in " + ruTimePassed2s(timer));
					}
				} else {
					env.out.onError("Metamath source '" + file + "' is not found", []);
				}
			}
		}
	}
	Some(state);
}

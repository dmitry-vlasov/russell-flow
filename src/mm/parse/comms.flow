import mm/parse/load;
import mm/parse/collect;
import mm/mm2ru;
import mm/verify;
//import command;

export {
	mmIoCommands : [RuComm] = [
		mmCommRead,
		mmCommWrite
	];
	mmRunRead(unit : RuUnit) -> Maybe<RuState>;
	mmRunWrite(unit : RuUnit) -> Maybe<RuState>;
}

mmCommRead = RuComm(
	RuCommInfo(
		"read-mm", "io", "read a Metamath file", "file", true, false, 
		[
			RuCommArg("file", false, "input file", ""),
			RuCommArg("unicode-symbols", true, "make symbols unicode, not plain ASCII. Default is 1", "1")
		], []
	),
	mmRunRead
);

mmRunRead(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	file = ruTaskStringArg(task, "file", "");
	if (!endsWith(file, ".mm")) {
		env.out.error("Wrong extension of a file '" + file + "' , must be *.mm", []);
		None();
	} else {
		conf = state.conf;
		path = ruResolveRelativePath(file, conf.workingDir);
		if (!fileExists(path)) {
			env.out.error("mm file: '" + file + "' is not found", []);
			None();
		} else {
			module = ruTrimPath(path, conf, getFileExt(file));
			if (module == "") {
				env.out.error(
					"mm module for file: '" + file + "' cannot be empty string.\n" + 
					"path: " + path + "\n" + 
					"conf:\n" + strIndent(ruConf2s(conf)), 
					[]
				);
				None();
			} else {
				timer = ruMakeTimer();
				infos = mmParseInfosDef(env, task.args);
				maybeMap(
					maybeBind(mmLoad(env, s2id(module)), \loaded ->
						maybeBind(mmParse(getTreeValues(loaded), env, infos), \parsed -> {
							if (ruTaskBoolArg(task, "unicode-symbols", true)) {
								mmMakeSymbolTable(parsed, env);
							}
							mmCollectSources(parsed, env);
						})
					), 
					\mm -> {						
						RuState(state with 
							mm = mm,
							vars = setTree(state.vars, "read-mm", pairs2tree([
								Pair("time", flow(ruTimePassed(timer))),
								Pair("size", flow(sizeTree(mm)))
							]))
						);
					}
				);
			}
		}
	}
}

mmCommWrite = RuComm(
	RuCommInfo(
		"write-mm", "io", "write a Metamath file to a filesystem", "file", false, false, 
		[
			RuCommArg("file", true, "write the mm file or 'all' (default)", "all"), 
			RuCommArg("monolithic", true, "include all dependencies into a target file", ""),
			RuCommArg("strip-comments", true, "self evident", ""),
			RuCommArg("test-write", true, "perform a test writing - do not save files", ""),
			RuCommArg("concurrent", true, "write files concurrently", "1"),
			RuCommArg("mm-format", true, "try to mimic the original Metamath formatting rules ", "1"),
		], []
	),
	mmRunWrite
);

mmRunWrite(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	sources = state.mm;
	conf = state.conf;
	test = ruTaskBoolArg(task, "test-write", false);
	mm_format = ruTaskBoolArg(task, "mm-format", true);
	write_mm = \src0 : MmSource -> {
		path = src0.info.path;
		if (!test) {
			dir = ruDirName(path);
			if (dir != "") {
				ruEnsureDirectoryExists(dir, env.out);
			}
		}
		if (ruVerbose(env.conf) > 1) {
			env.out.println("\tmm writing : '" + path + "'");
		}
		src = if (ruTaskBoolArg(task, "strip-comments", false)) mmStripComments(src0) else src0;
		if (!test) {
			if (!setFileContent(path, if (mm_format) mmMm2s(src) else mm2s(src))) {
				env.out.error("error while writing '" + path + "'", [RuPlace(src.info.module, -1)]);
			}
		}
	}
	write_module = \module -> {
		switch (lookupTree(sources, module)) {
			Some(src): {
				monolith = ruTaskStringArg(task, "monolithic", "");
				if (monolith == "") {
					write_mm(src);
				} else {
					if (monolith != "1") {
						write_mm(mmSources2SingleSource(state.mm, monolith, env));
					} else {
						write_mm(mmSources2SingleSource(state.mm, src.info.module, env));
					}
				}
			}
			None(): env.out.println("unknown module: '" + id2s(module) + "'");
		}
	}
	if (sizeTree(sources) == 0) {
		env.out.error("There are no Metamath sources at all.", []);
		Some(state);
	} else {
		file = ruTaskStringArg(task, "file", "");
		if (file == "all") {
			timer = ruMakeTimer();
			concurrent = ruTaskBoolArg(task, "concurrent", true);
			executor = if (concurrent) ruConcurrentVoid else ruSequentialVoid;
			dirs = set2array(fold(getTreeValues(sources), makeSet(), \acc, src -> insertSet(acc, ruDirName(src.info.path))));
			iter(dirs, \dir -> {
				err = ensureDirectoryExists(dir);
				if (err != "") {
					env.out.error("while creating directory: '" + dir + "': " + err, []);
				}
			});
			executor(map(getTreeValues(sources), 
				\src -> \env1 -> write_mm(src)
			), env);
			if (ruVerbose(env.conf) > 0) {
				env.out.println("mm has written " + i2s(sizeTree(sources)) + " files in " + ruTimePassed2s(timer));
			}
			Some(RuState(state with
				vars = setTree(state.vars, "write-mm", pairs2tree([
					Pair("time", flow(ruTimePassed(timer))),
					Pair("size", flow(sizeTree(sources)))
				]))
			));
		} else {
			file_id = s2id(file);
			module = ruTrimPath(file, conf, ".mm");
			timer = ruMakeTimer();
			if (containsKeyTree(sources, file_id)) {
				write_module(file_id);
				if (ruVerbose(env.conf) > 0) {
					env.out.println("mm has written '" + module + "' file in " + ruTimePassed2s(timer));
				}
			} else {
				module_id = s2id(module);
				if (containsKeyTree(sources, module_id)) {
					write_module(module_id);
					if (ruVerbose(env.conf) > 0) {
						env.out.println("mm has written '" + module + "' file in " + ruTimePassed2s(timer));
					}
				} else {
					env.out.error("Metamath source '" + file + "' is not found", []);
				}
			}
			Some(RuState(state with
				vars = setTree(state.vars, "write-mm", pairs2tree([
					Pair("time", flow(ruTimePassed(timer))),
					Pair("size", flow(1))
				]))
			));
		}
	}
}

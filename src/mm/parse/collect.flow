import ds/vector;
import fs/filesystem;
import sys/concurrent;
import base/db;
import mm/parse/parse;
import mm/src_utils;
import mm/compress;

export {
	mmCollectSources(parsed : Tree<int, MmParseSource>, env : RuEnv) -> Maybe<Tree<int, MmSource>>;
}

mmCollectSources(parsed : Tree<int, MmParseSource>, env0 : RuEnv) -> Maybe<Tree<int, MmSource>> {
	err_count = ref 0;
	env = ruAddErrCounter2Env(env0, err_count);
	timer = ruMakeTimer();
	collected = mmDoCollectSources(parsed, env, makeTree());
	mmCollectFloatings(parsed, collected, env);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("mm collected: " +i2s(sizeTree(collected)) + " files in " + ruTimePassed2s(timer));
	}
	if (^err_count == 0) {
		Some(collected);
	} else {
		None();
	}
}

mmDoCollectSources(left : Tree<int, MmParseSource>, env : RuEnv, acc : Tree<int, MmSource>) -> Tree<int, MmSource> {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.module))
		);
		if (ready == []) {
			env.out.onError("cyclic import detected", []);
			acc
		} else {
			srcs = map(ready, \s -> mmCollectSource(s, env));
			add_hyps = \ac, hs -> fold(hs, ac, \a, h : MmHyp -> setTree(a, h.label, h));
			new_acc = fold(srcs, acc, \ac, src -> setTree(ac, src.info.id, src));
			new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.id));
			mmDoCollectSources(new_left, env, new_acc);
		}
	}
}

MmCollectAcc(
	vars  : Set<int>,
	disjs : List<MmDisj>,
	hyps  : List<MmHyp>,
	arities : Tree<int, int>,
	toplevel : Vector<MmDecl>
);

mmCollectSource(src : MmParseSource, env : RuEnv) -> MmSource {
	collect_timer = ruMakeTimer();
	acc = mmCollectElements(src.toplevel, 
		MmCollectAcc(makeSet(), makeList(), makeList(), makeTree(), makeVector(length(src.toplevel)))
	);
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tmm collected: '" + src.info.module + "' in " + ruTimePassed2s(collect_timer));
	}
	if (lookupTreeDef(env.conf.opts, "mm-decompress-proofs", "1") != "0") {
		decompress_timer = ruMakeTimer();
		mm_decls = ruConcurrent(map(vector2array(acc.toplevel), \decl -> 
			\env1 -> mmDecompressDecl(decl, acc.arities)
		), env);
		if (ruVerbose(env.conf) > 1) {
			env.out.onMessage("\tmm decompresed: " + i2s(sizeVector(acc.toplevel)) + " declarations in " + ruTimePassed2s(decompress_timer));
		}
		MmSource(src.imports, mm_decls, src.info);
	} else {
		MmSource(src.imports, vector2array(acc.toplevel), src.info);
	}
}

mmCollectElements(els : [MmElement], acc : MmCollectAcc) -> MmCollectAcc {
	fold(els, acc,
		\ac, el -> {
			switch (el) {
				MmComment(__): {
					pushVector(ac.toplevel, el);
					ac;
				}
				MmImport(__):
					ac; 
				MmVars(vs):
					MmCollectAcc(ac with 
						vars = fold(vs, ac.vars, \a, v-> insertSet(a, v))
					);
				MmDisj(__): 
					MmCollectAcc(ac with disjs = Cons(el, ac.disjs));
				MmConst(cs): {
					pushVector(ac.toplevel, el);
					ac;
				}
				MmEssential(l, __):
					MmCollectAcc(ac with hyps = Cons(el, ac.hyps));
				MmFloating(l, __, __): {
					MmCollectAcc(ac with hyps = Cons(el, ac.hyps));
				}
				MmAxiomatic(l, __): {
					a = mmMakeAssertion(el, ac);
					pushVector(ac.toplevel, a);
					MmCollectAcc(ac with 
						arities = setTree(ac.arities, a.stat.label, length(a.hyps))
					);
				}
				MmProvable(l, __, __): {
					a = mmMakeAssertion(el, ac);
					pushVector(ac.toplevel, a);
					MmCollectAcc(ac with 
						arities = setTree(ac.arities, a.stat.label, length(a.hyps))
					);
				}
				MmBlock(es): {
					block = mmCollectElements(es, ac);
					MmCollectAcc(ac with 
						arities = block.arities
					);
				}
			}
		}
	)
}

mmMakeAssertion(statement : MmStat, env : MmCollectAcc) -> MmAssertion {
	getVars = \expr -> fold(expr.symbs, makeSet(), \acc, symb -> 
		if (containsSet(env.vars, symb.literal)) insertSet(acc, symb.literal) else acc
	);
	vars = foldList(env.hyps, getVars(statement.expr), 
		\acc, hyp -> {
			switch (hyp) {
				MmEssential(__, expr): mergeSets(acc, getVars(expr));
				MmFloating(__,__,__): acc;
			}
		}
	);
	hyps = reverseA(foldList(env.hyps, [],
		\acc, hyp -> switch (hyp) {
			MmEssential(label, expr): 
				concat(acc, [MmEssential(label, mmMarkVarsInExpr(expr, vars))]);
			MmFloating(label, type, var): 
				if (containsSet(vars, var)) concat(acc, [hyp]) else acc;
		}
	));
	labels = switch (statement) {
		MmAxiomatic(__,__): makeSet();
		MmProvable(__,__,proof): {
			switch (proof) {
				MmNormalProof(ls): buildSet(ls);
				MmCompressedProof(ls, __): buildSet(ls);
			}
		}
	}
	inner = foldList(env.hyps, [],
		\acc, hyp -> switch (hyp) {
			MmEssential(label, expr): acc;
			MmFloating(label, type, var): 
				if (!containsSet(vars, var) && containsSet(labels, label)) concat(acc, [hyp]) else acc;
		}
	);
	all_vars = buildSet(filtermap(concat(hyps, inner), \h -> 
		switch (h) {
			MmFloating(__,__,v): Some(v);
			MmEssential(__,__): None();
		}
	));
	disjs = filtermap(
		list2array(env.disjs),
		\disj -> {
			filtered = filter(disj.vars, \v -> containsSet(all_vars, v));
			if (length(filtered) == 0) None() else Some(MmDisj(filtered));
		}
	);
	MmAssertion(disjs, [], hyps, inner, mmMakeStatement(statement, vars, hyps, env.arities));
}

mmMarkVarsInHypothesis(hyp : MmHyp, vars : Set<int>) -> MmHyp {
	switch (hyp) {
		MmEssential(label, expr): MmEssential(label, mmMarkVarsInExpr(expr, vars));
		default: hyp;
	}
}

mmMakeStatement(stat : MmStat, vars : Set<int>, hyps : [MmHyp], arities : Tree<int, int>) -> MmStat {
	switch (stat) {
		MmAxiomatic(label, expr): 
			MmAxiomatic(label, mmMarkVarsInExpr(expr, vars));
		MmProvable(label, expr, proof): 
			MmProvable(label, mmMarkVarsInExpr(expr, vars), proof);
	}
}

mmMarkVarsInExpr(expr : MmExp, vars : Set<int>) -> MmExp {
	MmExp(map(expr.symbs, \symb -> 
		MmSymb(symb.literal, containsSet(vars, symb.literal))
	))
}


mmCollectFloatings(parsed : Tree<int, MmParseSource>, collected : Tree<int, MmSource>, env : RuEnv) -> void {
	toplevel_flos = fold(getTreeValues(parsed), [], \acc, src ->
		concat(acc, filtermap(src.toplevel, \decl ->
			switch (decl) {
				MmFloating(__,__,__): Some(decl);
				default: None();
			}
		))
	);
	flo_labels = buildSet(map(toplevel_flos, \flo -> flo.label));
	local_flos = fold(getTreeValues(collected), makeTree(), \acc, src ->
		fold(src.decls, acc, \ac, decl ->
			switch (decl) {
				MmAssertion(__,__, hyps, inner, stat): {
					flos = mmAssertionFlos(concat(hyps, inner));
					local = filter(flos, \flo -> !containsSet(flo_labels, flo.label));
					if (length(local) > 0) {
						setTree(ac, stat.label, local);
					} else {
						ac;
					}
				};
				default: ac;
			}
		)
	);
	toplevel_vars = fold(getTreeValues(parsed), [], \acc, src ->
		concat(acc, concatA(filtermap(src.toplevel, \decl ->
			switch (decl) {
				MmVars(vars): Some(vars);
				default: None();
			}
		)))
	);
	if (env.conf.project != "") {
		ruSetDbItem(env.conf.project, ["toplevel_vars"], 
			JsonArray(map(toplevel_vars, \v -> JsonString(id2s(v))))
		);
		ruSetDbItem(env.conf.project, ["toplevel_floatings"], 
			JsonArray(map(toplevel_flos, mmFloating2Json))
		);
		ruSetDbItem(env.conf.project, ["local_floatings"],
			JsonObject(map(tree2pairs(local_flos), \p -> 
				Pair(id2s(p.first), 
					JsonArray(map(p.second, mmFloating2Json))
				)
			))
		);
	}
}

import ds/vector;
import fs/filesystem;
import sys/concurrent;
import mm/parse/parse;
import mm/math_utils;

export {
	mmCollectMath(parsed : Tree<int, MmParseSource>, conf : RuConf) -> Maybe<MmMath>;
}

mmCollectMath(parsed : Tree<int, MmParseSource>, conf0 : RuConf) -> Maybe<MmMath> {
	err_count = ref 0;
	conf = ruAddErrCounter(conf0, err_count);
	start = timestamp();
	collected = mmDoCollectMath(parsed, conf, MmMath(makeTree(), makeTree(), makeSet()));
	if (conf.verbose > 0) {
		conf.onMessage("mm collected: " +i2s(sizeTree(collected.sources)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	if (^err_count == 0) {
		Some(collected);
	} else {
		None();
	}
}

mmDoCollectMath(left : Tree<int, MmParseSource>, conf : RuConf, acc : MmMath) -> MmMath {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.module))
		);
		if (ready == []) {
			conf.onError("C) cyclic import detected", []);
			acc
		} else {
			srcs = map(ready, \s -> mmCollectSource(s, conf));
			add_hyps = \ac, hs -> fold(hs, ac, \a, h : MmHyp -> setTree(a, h.label, h));
			new_acc = fold(srcs, acc, \ac, src -> 
				MmMath(
					setTree(ac.sources, src.info.id, src),
					fold(src.decls, ac.labeled, \a, decl ->
						switch (decl) {
							MmAssertion(__, hyps, inner, stat):
								add_hyps(add_hyps(setTree(a, stat.label, decl), hyps), inner);
							default: a;
						}
					),
					fold(src.decls, ac.consts, \a, decl ->
						switch (decl) {
							MmConst(symbs):
								fold(symbs, a, \x, s -> insertSet(x, s));
							default: a;
						}
					)
				)
			);
			new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.id));
			mmDoCollectMath(new_left, conf, new_acc);
		}
	}
}

MmCollectAcc(
	vars  : Set<int>,
	disjs : List<MmDisj>,
	hyps  : List<MmHyp>,
	arities : Tree<int, int>,
	toplevel : Vector<MmDecl>
);

mmCollectSource(src : MmParseSource, conf : RuConf) -> MmSource {
	start = timestamp();
	acc = mmCollectElements(src.toplevel, 
		MmCollectAcc(makeSet(), makeList(), makeList(), makeTree(), makeVector(length(src.toplevel)))
	);
	if (conf.verbose > 1) {
		conf.onMessage("\tmm collected: '" + src.info.module + "' in " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
	}
	mm_decls = ruConcurrent(map(vector2array(acc.toplevel), \decl -> 
		\ -> mmDecompressDecl(decl, acc.arities)
	));
	MmSource(src.imports, mm_decls, src.info);
}

mmDecompressDecl(decl : MmDecl, arities : Tree<int, int>) -> MmDecl {
	switch (decl) {
		MmAssertion(disjs, hyps, inner, stat): {
			switch (stat) {
				MmProvable(label, expr, proof): {
					switch (proof) {
						MmCompressedProof(labels, steps):
							MmAssertion(decl with
								stat = MmProvable(stat with
									proof = mmDecompressProof(proof, hyps, arities)
								)
							);
						default: decl;
					}
				}
				default: decl;
			}
		}
		default: decl;
	}
}

mmCollectElements(els : [MmElement], acc : MmCollectAcc) -> MmCollectAcc {
	fold(els, acc,
		\ac, el -> {
			switch (el) {
				MmComment(__): {
					pushVector(ac.toplevel, el);
					ac;
				}
				MmImport(__):
					ac; 
				MmVars(vs):
					MmCollectAcc(ac with 
						vars = fold(vs, ac.vars, \a, v-> insertSet(a, v))
					);
				MmDisj(__): 
					MmCollectAcc(ac with disjs = Cons(el, ac.disjs));
				MmConst(cs): {
					pushVector(ac.toplevel, el);
					ac;
				}
				MmEssential(l, __):
					MmCollectAcc(ac with hyps = Cons(el, ac.hyps));
				MmFloating(l, __, __):
					MmCollectAcc(ac with hyps = Cons(el, ac.hyps));
				MmAxiomatic(l, __): {
					a = mmMakeAssertion(el, ac);
					pushVector(ac.toplevel, a);
					MmCollectAcc(ac with 
						arities = setTree(ac.arities, a.stat.label, length(a.hyps))
					);
				}
				MmProvable(l, __, __): {
					a = mmMakeAssertion(el, ac);
					pushVector(ac.toplevel, a);
					MmCollectAcc(ac with 
						arities = setTree(ac.arities, a.stat.label, length(a.hyps))
					);
				}
				MmBlock(es): {
					block = mmCollectElements(es, ac);
					MmCollectAcc(ac with 
						arities = block.arities
					);
				}
			}
		}
	)
}

mmMakeAssertion(statement : MmStat, env : MmCollectAcc) -> MmAssertion {
	getVars = \expr -> fold(expr.symbs, makeSet(), \acc, symb -> 
		if (containsSet(env.vars, symb.literal)) insertSet(acc, symb.literal) else acc
	);
	vars = foldList(env.hyps, getVars(statement.expr), 
		\acc, hyp -> {
			switch (hyp) {
				MmEssential(__, expr): mergeSets(acc, getVars(expr));
				MmFloating(__,__,__): acc;
			}
		}
	);
	hyps = reverseA(foldList(env.hyps, [],
		\acc, hyp : MmHyp -> switch (hyp) {
			MmEssential(label, expr): 
				concat(acc, [MmEssential(label, mmMarkVarsInExpr(expr, vars))]);
			MmFloating(label, type, var): 
				if (containsSet(vars, var)) concat(acc, [hyp]) else acc;
		}
	));
	labels = switch (statement) {
		MmAxiomatic(__,__): makeSet();
		MmProvable(__,__,proof): {
			switch (proof) {
				MmNormalProof(ls): buildSet(ls);
				MmCompressedProof(ls, __): buildSet(ls);
			}
		}
	}
	inner = foldList(env.hyps, [],
		\acc, hyp : MmHyp -> switch (hyp) {
			MmEssential(label, expr): acc;
			MmFloating(label, type, var): 
				if (!containsSet(vars, var) && containsSet(labels, label)) concat(acc, [hyp]) else acc;
		}
	);
	MmAssertion(list2array(env.disjs), hyps, inner, mmMakeStatement(statement, vars, hyps, env.arities));
}

mmMarkVarsInHypothesis(hyp : MmHyp, vars : Set<int>) -> MmHyp {
	switch (hyp) {
		MmEssential(label, expr): MmEssential(label, mmMarkVarsInExpr(expr, vars));
		default: hyp;
	}
}

mmMakeStatement(stat : MmStat, vars : Set<int>, hyps : [MmHyp], arities : Tree<int, int>) -> MmStat {
	switch (stat) {
		MmAxiomatic(label, expr): 
			MmAxiomatic(label, mmMarkVarsInExpr(expr, vars));
		MmProvable(label, expr, proof): 
			MmProvable(label, mmMarkVarsInExpr(expr, vars), proof /*mmDecompressProof(proof, hyps, arities)*/);
	}
}

mmMarkVarsInExpr(expr : MmExp, vars : Set<int>) -> MmExp {
	MmExp(map(expr.symbs, \symb -> 
		MmSymb(symb.literal, containsSet(vars, symb.literal))
	))
}

mmDecompressProof(proof : MmProof, hyps : [MmHyp], arities : Tree<int, int>) -> MmNormalProof {
	switch (proof) {
		MmNormalProof(__): proof;
		MmCompressedProof(labels, steps): {
			len_cache = ref makeTree();
			MmNormalProof(fold(steps, Pair([],[]), \acc, s ->
				switch (s) {
					MmProofIndex(i): {
						if (i < length(hyps)) {
							Pair(concat(acc.first, [hyps[i].label]), acc.second);
						} else {
							j = i - length(hyps);
							if (j < length(labels)) {
								Pair(concat(acc.first, [labels[j]]), acc.second);
							} else {
								k = j - length(labels);
								Pair(concat(acc.first, acc.second[k]), acc.second);
							}
						}
					}
					MmProofZ(): {
						len = mmSubexprLength(length(acc.first) - 1, acc.first, arities, len_cache);
						subexpr = subrange(acc.first, length(acc.first) - len, len);
						Pair(acc.first, concat(acc.second, [subexpr]));
					}
				}
			).first);
		}
	}
}

mmSubexprLength(i : int, labels : [int], arities : Tree<int, int>, len_cache : ref Tree<int, int>) -> int {
	switch (lookupTree(^len_cache, i)) {
		Some(len): len;
		None(): {
			len = switch (lookupTree(arities, labels[i])) {
				Some(arity): 1 + mmSubexprArgsLength(i - 1, 0, arity, labels, arities, len_cache);
				None(): 1;
			}
			len_cache := setTree(^len_cache, i, len);
			len;
		}
	}
}

mmSubexprArgsLength(i : int, acc : int, arg : int, labels : [int], arities : Tree<int, int>, len_cache : ref Tree<int, int>) -> int {
	if (arg == 0) acc else {
		arg_len = mmSubexprLength(i, labels, arities, len_cache);
		mmSubexprArgsLength(i - arg_len, acc + arg_len, arg - 1, labels, arities, len_cache)
	}
}

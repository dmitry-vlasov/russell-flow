import base/concurrent;
import base/util/timer;
import base/load;
import mm/src;

export {
	mmLoad(env : RuEnv, module : int) -> Maybe<Tree<int, RuRawSource>>;
}

mmLoader = RuLoader(
	"$(", "$)", "", "", "$[", "$]", ".mm",
	ruFileCodeLoader
);

mmLoad(env : RuEnv, module : int) -> Maybe<Tree<int, RuRawSource>> {
	err_count = ref 0;
	timer = ruMakeTimer();
	if (ruVerbose(env.conf) > 1) {
		env.out.println("\tloading: " + id2s(module));
	}
	loaded = mmLoadImports([module], ruAddErrCounter2Env(env, err_count), makeTree());
	if (ruVerbose(env.conf) > 1) {
		env.out.println(strRight(mmLoader.ext, 1) + " loaded " +i2s(sizeTree(loaded)) + " files in: " + ruTimePassed2s(timer));
	}
	if (^err_count == 0) {
		Some(loaded);
	} else {
		env.out.error(strRight(mmLoader.ext, 1) + " failed to load: '" + id2s(module) + "'", []);
		None();
	}
}

mmLoadImports(imports : [int], env : RuEnv, acc : Tree<int, RuRawSource>) -> Tree<int, RuRawSource> {
	if (imports == []) acc else {
		loaded = filtermap(ruConcurrent(map(imports, \imp -> \env1 ->
			ruLoadRawSource(imp, env1, mmLoader)
		), env), idfn);
		acc1 = fold(loaded, acc, \ac, l -> setTree(ac, l.info.id, l));
		new_imports = fold(loaded, makeSet(), \ac, l -> 
			fold(l.imps, ac, \a, p ->
				if (containsKeyTree(acc1, s2id(ruTrimPath(id2s(p), env.conf, mmLoader.ext)))) a else insertSet(a, p)
			)
		);
		mmLoadImports(set2array(new_imports), env, acc1)
	}
}

import base/load;
import mm/src;

export {
	mmLoad(conf : RuConf, module : int) -> Maybe<Tree<int, RuRawSource>>;
}

mmLoadDescr = RuLoadDescr("$(", "$)", "", "", "$[", "$]", ".mm");

mmLoad(conf : RuConf, module : int) -> Maybe<Tree<int, RuRawSource>> {
	err_count = ref 0;
	start = timestamp();
	if (conf.verbose > 1) {
		conf.onMessage("loading: " + id2s(module));
	}
	loaded = mmLoadImports([module], ruAddErrCounter(conf, err_count), makeTree());
	if (conf.verbose > 1) {
		conf.onMessage(strRight(mmLoadDescr.ext, 1) + " loaded " +i2s(sizeTree(loaded)) + " files in: " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	if (^err_count == 0) {
		Some(loaded);
	} else {
		None();
	}
}

mmLoadImports(imports : [int], conf : RuConf, acc : Tree<int, RuRawSource>) -> Tree<int, RuRawSource> {
	if (imports == []) acc else {
		loaded = filtermap(ruConcurrent(map(imports, \imp -> \ ->
			ruLoadRawSource(imp, conf, mmLoadDescr)
		)), idfn);
		acc1 = fold(loaded, acc, \ac, l -> setTree(ac, l.info.id, l));
		new_imports = fold(loaded, makeSet(), \ac, l -> 
			fold(l.imps, ac, \a, p ->
				if (containsKeyTree(acc1, s2id(ruTrimPath(id2s(p), conf, mmLoadDescr.ext)))) a else insertSet(a, p)
			)
		);
		mmLoadImports(set2array(new_imports), conf, acc1)
	}
}

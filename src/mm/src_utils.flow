import ds/vector;
import base/util/util;
import base/util/fileinfo;
import base/id_consts;
import base/split;
import mm/src;

export {
	mmApplySubst(expr : MmExp, subst : Tree<int, MmExp>) -> MmExp;
	mmSubst2s(s : Tree<int, MmExp>) -> string;
	mmStack2s(s : List<MmExp>) -> string;
	mm2s(a : MmAny) -> string;
	mmMm2s(a : MmAny) -> string; // Metamath format
	mmExprVars(e : MmExp) -> Set<int>;
	mmAssertionVars(a : MmAssertion) -> Set<int>;
	mmAssertionHyps(hyps : [MmHyp]) -> [MmEssential];
	mmAssertionFlos(hyps : [MmHyp]) -> [MmFloating];
	mmStripComments(src : MmSource) -> MmSource;

	mmStatIsRule(stat : MmStat) -> bool;
	mmJavaMmVol(any : MmAny) -> double;

	mmSources2structs(sources : Tree<int, MmSource>) -> MmStructs;
	mmSources2SingleSource(sources : Tree<int, MmSource>, module : string, env : RuEnv) -> MmSource;
	mmFindLeafSources(sources : Tree<int, MmSource>) -> [MmSource];
	mmDecls(sources : Tree<int, MmSource>) -> [MmDecl];
	mmAssertions(sources : Tree<int, MmSource>) -> [MmAssertion];
	mmAxiomatic(sources : Tree<int, MmSource>) -> [MmAssertion];
	mmProvable(sources : Tree<int, MmSource>) -> [MmAssertion];
	mmStats(sources : Tree<int, MmSource>) -> string;
	mmOrderSources(sources : Tree<int, MmSource>) -> [MmSource];
	mmDeclLabel(decl : MmDecl) -> int;
	mmAssertionProofLength(ass : MmAssertion) -> int;
	mmSources2AssertionsArities(sources : Tree<int, MmSource>) -> Tree<int, int>;

	mmExprStack2s(stack : List<MmExp>, num : int) -> string;
	mmHyps2s(hyps : [MmHyp]) -> string;
	mmIsTrivialSource(src : MmSource) -> bool;

	mmGatherAllFloatings(srcs : Tree<int, MmSource>) -> Set<MmFloating>;
	mmGatherAllParsedVars(srcs : Tree<int, MmParseSource>) -> Set<int>;
	mmGatherAllElemVars(acc : Set<int>, elem : MmElement) -> Set<int>;

	mmFloating2Json(hyp : MmFloating) -> Json;
	mmJson2Floating(json : Json) -> Maybe<MmFloating>;
}

mmApplySubst(expr : MmExp, subst : Tree<int, MmExp>) -> MmExp {
	applied = makeVector(64);
	iter(expr.symbs, \symb ->
		switch (lookupTree(subst, symb.literal)) {
			Some(e): iter(e.symbs, \s -> pushVector(applied, s));
			None(): pushVector(applied, symb);
		}
	);
	MmExp(vector2array(applied));
}

mm2s(a : MmAny) -> string {
	cpmstep2s = \step -> if (step == -1) "Z" else ruCompressInd(step);
	wrap_proof = \proof, sep -> {
		if (strlen(proof) <= 80) proof else 
		"\n" + strGlue(map(ruWrapLine(proof, 80, sep), \line -> "\t" + line), "\n");
	}
	wrap_vars = \str, sep -> {
		if (strlen(str) <= 76) str else 
		"\n" + strGlue(map(ruWrapLine(str, 76, sep), \line -> " " + line), "\n");
	}
	wrap_exp = \ex -> {
		if (strlen(ex) <= 80) ex else ruIndentBrackets(ex, 32);
	}
	wrap_comment = \text -> {
		text1 = if (ruStartsWithSplitPattern(text)) "\n" + text else " " + text;
		if (ruEndsWithSplitPattern(text)) text1 + "\n" else text1 + " ";
	}
	switch (a) {
		MmParseSource(imports, toplevel,__): 
			(if (imports == []) "" else concatStrings(map(imports, \imp -> mm2s(imp) + "\n")) + "\n") + 
			concatStrings(map(toplevel, \decl -> mm2s(decl) + "\n")) + "\n";
		MmComment(text):  if (trim2(text, " \r\n\t") == "") "" else "$(" + wrap_comment(text) + "$)";
		MmImport(file):   "$[ " + id2s(file) + " $]";
		MmDisj(vars):     "$d " + strGlue(map(vars, id2s), " ") + " $.";
		MmConst(symbs):   "$c " + strGlue(map(symbs, id2s), " ") + " $.";
		MmVars(symbs):    "$v " + strGlue(map(symbs, id2s), " ") + " $.";
		MmEssential(label, expr):       id2s(label) + " $e " + mm2s(expr) + " $.";
		MmFloating(label, type, var):   id2s(label) + " $f " + id2s(type) + " " + id2s(var) + " $.";
		MmAxiomatic(label, expr):       id2s(label) + " $a " + mm2s(expr) + " $.";
		MmProvable(label, expr, proof): id2s(label) + " $p " + mm2s(expr) + mm2s(proof);
		MmBlock(es):      "${\n\t" + strGlue(map(es, mm2s), "\n\t") + "\n$}";
		MmNormalProof(labels):  
			" $= " + wrap_proof(strGlue(map(labels, id2s), " "), " ") + " $.";
		MmCompressedProof(labels, steps): 
			" $= ( " + 
			wrap_proof(strGlue(map(labels, id2s), " "), " ") + " ) " + 
			wrap_proof(strGlue(map(steps, cpmstep2s), ""), "") + " $.";
		MmExp(symbs): wrap_exp(strGlue(map(symbs, \s -> id2s(s.literal)), " "));
		MmSymb(literal, __): id2s(literal);
		MmAssertion(comm, disj, outer, hyps, inner, stat): {
			vars = MmVars(filtermap(concat(hyps, inner), \hyp : MmHyp -> 
				if (contains(outer, hyp.label)) None() else {
					switch (hyp) {
						MmFloating(__,__,var): Some(var);
						default: None();
					}
				}
			));
			vars_str = if (length(vars.symbs) == 0) "" else mm2s(vars) + "\n\t";
			disjs_str = if (length(disj) == 0) "" else strGlue(map(disj, mm2s), "\n\t") + "\n\t";
			visible_hyps = filter(hyps, \hyp -> !contains(outer, hyp.label));
			hyps_str = if (visible_hyps == []) "" else strGlue(map(visible_hyps, mm2s), "\n\t") + "\n\t";
			inner_arr = filter(inner, \hyp -> !contains(outer, hyp.label));
			inner_str = if (inner_arr == []) "" else strGlue(map(inner_arr, mm2s), "\n\t") + "\n\t";
			comm_str = if (comm.text == "") "" else mm2s(comm) + "\n\t";
			"${\n\t" + 
				vars_str + disjs_str + hyps_str + inner_str + comm_str + mm2s(a.stat) + 
			"\n$}";
		}
		MmSource(imports, decls, info): {
			vars = filtermap(decls, \decl -> 
				switch (decl) {
					MmFloating(__,__,var): Some(var);
					default: None();
				}
			);
			(if (imports == []) "" else concatStrings(map(imports, \imp -> mm2s(imp) + "\n")) + "\n") + 
			(if (length(vars) == 0) "" else 
				mm2s(MmComment("All variables, used in source")) + "\n\n" + 
				"$v " + wrap_vars(strGlue(map(uniq(vars), id2s), " "), " ") + " $.\n\n"
			) + 
			concatStrings(map(decls, \d -> mm2s(d) + "\n\n")) + "\n";
		}
	}
}

// In Metamath sources two spaces are used as a standard indent
mmMm2s(a : MmAny) -> string {
	cpmstep2s = \step -> if (step == -1) "Z" else ruCompressInd(step);
	wrap_proof = \proof, sep -> {
		if (strlen(proof) <= 74) proof else 
		"\n" + strGlue(map(ruWrapLine(proof, 74, sep), \line -> "      " + line), "\n");
	}
	wrap_vars = \vars, sep -> {
		if (strlen(vars) <= 76) vars else 
		"\n" + strGlue(map(ruWrapLine(vars, 76, sep), \line -> " " + line), "\n");
	}
	wrap_exp = \ex -> {
		if (strlen(ex) <= 80) ex else ruIndentBrackets(ex, 32);
	}
	wrap_comment = \text -> {
		text1 = if (ruStartsWithSplitPattern(text)) "\n" + text else " " + text;
		if (ruEndsWithSplitPattern(text)) text1 + "\n" else text1 + " ";
	}
	switch (a) {
		MmParseSource(imports, toplevel,__): 
			(if (imports == []) "" else concatStrings(map(imports, \imp -> mmMm2s(imp) + "\n")) + "\n") + 
			concatStrings(map(toplevel, \decl -> mmMm2s(decl) + "\n")) + "\n";
		MmComment(text):  if (trim2(text, " \r\n\t") == "") "" else "$(" + wrap_comment(text) + "$)";
		MmImport(file):   "$[ " + id2s(file) + " $]";
		MmDisj(vars):     "$d " + strGlue(map(vars, id2s), " ") + " $.";
		MmConst(symbs):   "$c " + strGlue(map(symbs, id2s), " ") + " $.";
		MmVars(symbs):    "$v " + strGlue(map(symbs, id2s), " ") + " $.";
		MmEssential(label, expr):       id2s(label) + " $e " + mmMm2s(expr) + " $.";
		MmFloating(label, type, var):   id2s(label) + " $f " + id2s(type) + " " + id2s(var) + " $.";
		MmAxiomatic(label, expr):       id2s(label) + " $a " + mmMm2s(expr) + " $.";
		MmProvable(label, expr, proof): id2s(label) + " $p " + mmMm2s(expr) + mmMm2s(proof);
		MmBlock(es):      "  ${\n    " + strGlue(map(es, mmMm2s), "\n") + "    \n" + "  $}";
		MmNormalProof(labels):  
			" $= " + wrap_proof(strGlue(map(labels, id2s), " "), " ") + " $.";
		MmCompressedProof(labels, steps): {
			" $= ( " + 
			wrap_proof(strGlue(map(labels, id2s), " "), " ") + " ) " + 
			wrap_proof(strGlue(map(steps, cpmstep2s), ""), "") + " $.";
		}
		MmExp(symbs): wrap_exp(strGlue(map(symbs, \s -> id2s(s.literal)), " "));
		MmSymb(literal, __): id2s(literal);
		MmAssertion(comm, disj, outer, hyps, inner, stat): {
			vars = MmVars(filtermap(concat(hyps, inner), \hyp : MmHyp -> 
				if (contains(outer, hyp.label)) None() else {
					switch (hyp) {
						MmFloating(__,__,var): Some(var);
						default: None();
					}
				}
			));
			vars_str = if (length(vars.symbs) == 0) "" else mmMm2s(vars) + "\n    ";
			disjs_str = if (length(disj) == 0) "" else strGlue(map(disj, mmMm2s), " ") + "\n    ";
			visible_hyps = filter(hyps, \hyp -> !contains(outer, hyp.label));
			hyps_str = if (visible_hyps == []) "" else concatStrings(map(visible_hyps, \h -> mmMm2s(h) + "\n    "));
			inner_arr = filter(inner, \hyp -> !contains(outer, hyp.label));
			inner_str = if (inner_arr == []) "" else concatStrings(map(inner_arr, \h -> mmMm2s(h) + "\n    "));
			comm_str = if (comm.text == "") "" else mmMm2s(comm) + "\n    ";
			"  ${\n    " + 
				vars_str + disjs_str + hyps_str + inner_str + comm_str + mmMm2s(a.stat) + 
			"\n  $}";
		}
		MmSource(imports, decls, info): {
			vars = filtermap(decls, \decl -> 
				switch (decl) {
					MmFloating(__,__,var): Some(var);
					default: None();
				}
			);
			(if (imports == []) "" else concatStrings(map(imports, \imp -> mmMm2s(imp) + "\n")) + "\n") + 
			(if (length(vars) == 0) "" else 
				mmMm2s(MmComment("All variables, used in source")) + "\n\n" + 
				"$v " + wrap_vars(strGlue(map(uniq(vars), id2s), " "), " ") + " $.\n\n"
			) + 
			concatStrings(map(decls, \d -> mmMm2s(d) + "\n\n")) + "\n";
		}
	}
}

mmSubst2s(s : Tree<int, MmExp>) -> string {
	foldTree(s, "", \var, expr, str -> str + "\n" + id2s(var) + " --> " + mm2s(expr))
}

mmStack2s(s : List<MmExp>) -> string {
	foldList(s, "", \acc, e -> acc + "\n\t" + mm2s(e)) + "\n";
}

mmExprVars(e : MmExp) -> Set<int> {
	fold(e.symbs, makeSet(), \acc, s -> if (s.isVar) insertSet(acc, s.literal) else acc);
}

mmAssertionVars(a : MmAssertion) -> Set<int> {
	fold(a.hyps, makeSet(), \acc, h -> {
			switch (h) {
				MmFloating(__, __, v): insertSet(acc, v);
				default: acc;
			}
		}
	)
}

mmAssertionHyps(hyps : [MmHyp]) -> [MmEssential] {
	filtermap(hyps, \h -> 
		switch (h) {
			MmEssential(__,__): Some(h);
			default: None();
		}
	)
}

mmAssertionFlos(hyps : [MmHyp]) -> [MmFloating] {
	filtermap(hyps, \h -> 
		switch (h) {
			MmFloating(__,__,__): Some(h);
			default: None();
		}
	)
}

mmStripComments(src : MmSource) -> MmSource {
	MmSource(src with decls = filter(src.decls, \decl -> 
		switch (decl) {
			MmComment(__): false;
			default: true;
		}
	))
}

mmStatIsRule(stat : MmStat) -> bool {
	stat.expr.symbs[0].literal != ruIdTurnstile();
}

mmJavaMmVol(any : MmAny) -> double {
	ruJavaAlignVol(
		ruJavaObjectHeader() +
		switch (any) {
			MmComment(text):      ruJavaStringVol(text);
			MmImport(module):     ruJavaIntVol();
			MmDisj(vars):         ruJavaArrayVol(vars, \__-> ruJavaIntVol());
			MmConst(symbs):       ruJavaArrayVol(symbs, \__-> ruJavaIntVol());
			MmVars(vars):         ruJavaArrayVol(vars, \__-> ruJavaIntVol());
			MmEssential(__, e):   ruJavaIntVol() + mmJavaMmVol(e);
			MmFloating(__,__,__): ruJavaIntVol() + ruJavaIntVol() + ruJavaIntVol();
			MmAxiomatic(__, e):   ruJavaIntVol() + mmJavaMmVol(e);
			MmProvable(__, e, p): ruJavaIntVol() + mmJavaMmVol(e) + mmJavaMmVol(p);
			MmBlock(es):          ruJavaArrayVol(es, mmJavaMmVol);
			MmNormalProof(ls):    ruJavaArrayVol(ls, \__-> ruJavaIntVol());
			MmCompressedProof(ls, ss): 
				ruJavaArrayVol(ls, \__-> ruJavaIntVol()) + ruJavaArrayVol(ss, \__ -> ruJavaIntVol());
			MmExp(symbs):         ruJavaArrayVol(symbs, mmJavaMmVol);
			MmSymb(__,__):        ruJavaIntVol() + ruJavaBoolVol();
			MmAssertion(comm, disj, outer, hyps, inner, stat):
				mmJavaMmVol(comm) +
				ruJavaArrayVol(disj, mmJavaMmVol) + ruJavaArrayVol(outer, \_ -> ruJavaIntVol()) + 
				ruJavaArrayVol(hyps, mmJavaMmVol) +
				ruJavaArrayVol(inner, mmJavaMmVol) + mmJavaMmVol(stat);
			MmSource(imps, toplevel, info): 
				ruJavaArrayVol(imps, mmJavaMmVol) + ruJavaArrayVol(toplevel, mmJavaMmVol) + ruJavaFileInfoVol(info);
			MmParseSource(imps, toplevel, info):
				ruJavaArrayVol(imps, mmJavaMmVol) + ruJavaArrayVol(toplevel, mmJavaMmVol) + ruJavaFileInfoVol(info);
		}
	);
}

mmSources2structs(sources : Tree<int, MmSource>) -> MmStructs {
	foldTree(sources, MmStructs(makeTree(), makeSet(), []), \id, src, acc ->
		fold(src.decls, acc, \ac, decl -> 
			switch (decl) {
				MmAssertion(__,__,outer, hyps, inner, stat): 
					fold(inner,
						fold(hyps, 
							MmStructs(ac with labeled = setTree(ac.labeled, stat.label, decl)),
							\a, hyp : MmHyp -> MmStructs(a with labeled = setTree(a.labeled, hyp.label, hyp))
						),
						\a, inn : MmHyp -> MmStructs(a with labeled = setTree(a.labeled, inn.label, inn))
					);
				MmConst(symbs): 
					fold(symbs, ac, \a, symb -> 
						MmStructs(a with consts = insertSet(a.consts, symb))
					);
				MmFloating(label, type, var):
					MmStructs(ac with 
						labeled = setTree(ac.labeled, label, decl),
						vars = concat(ac.vars, [decl])
					);
				MmComment(__): ac;
			}
		)
	);
}

mmFindLeafSources(sources : Tree<int, MmSource>) -> [MmSource] {
	filter(getTreeValues(sources), \src -> src.imports == [])
}

mmSources2SingleSource(sources : Tree<int, MmSource>, module : string, env : RuEnv) -> MmSource {
	MmSource([],
		concatA(foldTree(sources, Pair([[]], makeSet()), \__,src, acc ->
			mmDoSources2SingleSource(src, sources, acc)
		).first),
		ruNewFileInfo(module, env.conf, ".mm")
	);
}

mmDoSources2SingleSource(src : MmSource, sources : Tree<int, MmSource>, acc : Pair<[[MmDecl]], Set<int>>) -> Pair<[[MmDecl]], Set<int>> {
	if (containsSet(acc.second, src.info.id)) acc else {
		acc1 = fold(src.imports, Pair(acc.first, insertSet(acc.second, src.info.id)), 
			\ac, imp -> {
				switch (lookupTree(sources, imp.module)) {
					Some(inc_src): mmDoSources2SingleSource(inc_src, sources, ac);
					None(): ac;
				}
			}
		);
		Pair(concat(acc1.first, [src.decls]), acc1.second)
	}
}

mmDecls(sources : Tree<int, MmSource>) -> [MmDecl] {
	concatA(map(getTreeValues(sources), \src -> src.decls));
}

mmAssertions(sources : Tree<int, MmSource>) -> [MmAssertion] {
	assertions = makeVector(128);
	traverseInOrder(sources, \id, src ->
		iter(src.decls, \decl -> 
			switch (decl) {
				MmAssertion(__,__,__,__,__,stat): pushVector(assertions, decl);
				default: { }
			}
		)
	);
	vector2array(assertions);
}

mmAxiomatic(sources : Tree<int, MmSource>) -> [MmAssertion] {
	filter(mmAssertions(sources), \ass ->
		switch (ass.stat) {
			MmAxiomatic(__,__): true;
			default: false;
		}
	);
}

mmProvable(sources : Tree<int, MmSource>) -> [MmAssertion] {
	filter(mmAssertions(sources), \ass ->
		switch (ass.stat) {
			MmProvable(__,__,__): true;
			default: false;
		}
	);
}

mmStats(sources : Tree<int, MmSource>) -> string {
	structs = mmSources2structs(sources);
	strGlue([
		"sources:     " + i2s(sizeTree(sources)),
		"consts:      " + i2s(sizeSet(structs.consts)),
		"labeled:     " + i2s(sizeTree(structs.labeled)),
		"assertions:  " + i2s(length(mmAssertions(sources))),
		"  axiomatic: " + i2s(length(mmAxiomatic(sources))),
		"  provable:  " + i2s(length(mmProvable(sources))),
	], "\n")
}

mmOrderSources(sources : Tree<int, MmSource>) -> [MmSource] {
	mmDoOrderSources(getTreeValues(sources), [], makeSet());
}

mmDoOrderSources(srcs : [MmSource], acc : [MmSource], visited: Set<int>) -> [MmSource] {
	new_level = filter(srcs, \src -> forall(src.imports, \imp -> containsSet(visited, imp.module)));
	level_names = buildSet(map(new_level, \src -> src.info.id));
	if (new_level == []) {
		if (length(srcs) == 0) acc else {
			println("Cycilc imports detected:\n" + strIndent(strGlue(map(srcs, \src -> id2s(src.info.id)), "\n")));
			[]
		};
	} else {
		new_srcs = filter(srcs, \src -> !containsSet(level_names, src.info.id));
		mmDoOrderSources(new_srcs, concat(acc, new_level), mergeSets(visited, level_names));
	}
}

mmDeclLabel(decl : MmDecl) -> int {
	switch (decl) {
		MmAssertion(__,__,__,__,__, stat): stat.label;
		MmFloating(label,__,__): label;
		MmConst(symbs): -1;
		MmComment(__): -1;
	}
}

mmAssertionProofLength(ass : MmAssertion) -> int {
	switch (ass.stat) {
		MmProvable(__,__,proof): {
			switch (proof) {
				MmNormalProof(labels): length(labels);
				MmCompressedProof(labels, steps): length(steps);
			}
		};
		MmAxiomatic(__,__): 0;
	}
}

mmSources2AssertionsArities(sources : Tree<int, MmSource>) -> Tree<int, int> {
	fold(mmOrderSources(sources), makeTree(), \acc, src ->
		fold(src.decls, acc, \ac, decl ->
			switch (decl) {
				MmAssertion(__,__,__, hyps, __, stat): {
					setTree(ac, stat.label, length(hyps));
				}
				default: ac;
			}
		)
	);
}

mmExprStack2s(stack : List<MmExp>, num : int) -> string {
	all_stack = list2array(stack);
	arr = tailFrom(all_stack, length(all_stack) - num);
	concatStrings(map(arr, \ex -> mm2s(ex) + "\n"));
}

mmHyps2s(hyps : [MmHyp]) -> string {
	concatStrings(map(hyps, \hyp -> mm2s(hyp) + "\n"));
}

mmIsTrivialSource(src : MmSource) -> bool {
	forall(src.decls, \decl -> 
		switch (decl) {
			MmComment(__): true;
			default: false;
		}
	);
}

mmGatherAllFloatings(srcs : Tree<int, MmSource>) -> Set<MmFloating> {
	foldTree(srcs, makeSet(), \id, src, acc -> 
		fold(src.decls, acc, \ac, decl ->
			switch (decl) {
				MmFloating(__,__,v): insertSet(ac, decl);
				MmAssertion(__,__,__,hyps, inner,__): {
					fold(inner,
						fold(hyps, ac, \a, hyp -> 
							switch (hyp) {
								MmFloating(__,__,v): insertSet(a, hyp);
								default: a
							}
						),
						\a, inn -> {
							switch (inn) {
								MmFloating(__,__,v): insertSet(a, inn);
								default: a
							}
						}
					);
				}
				default: ac;
			}
		)
	);
}

mmGatherAllParsedVars(srcs : Tree<int, MmParseSource>) -> Set<int> {
	fold(getTreeValues(srcs), makeSet(), \acc, src -> 
		fold(src.toplevel, acc, mmGatherAllElemVars)
	);
}

mmGatherAllElemVars(acc : Set<int>, elem : MmElement) -> Set<int> {
	switch (elem) {
		MmVars(vars): fold(vars, acc, \ac, v -> insertSet(ac, v));
		MmBlock(elems): fold(elems, acc, mmGatherAllElemVars)
		default: acc;
	}
}

mmFloating2Json(hyp : MmFloating) -> Json {
	JsonObject([
		Pair("label", JsonString(id2s(hyp.label))),
		Pair("type", JsonString(id2s(hyp.type))),
		Pair("var", JsonString(id2s(hyp.var))),
	])
}

mmJson2Floating(json : Json) -> Maybe<MmFloating> {
	label = getJsonStringField(json, "label", "");
	type = getJsonStringField(json, "type", "");
	var = getJsonStringField(json, "var", "");
	if (label == "" || type == "" || var == "") None() else {
		Some(MmFloating(s2id(label), s2id(type), s2id(var)));
	}
}

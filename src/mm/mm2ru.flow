import ds/vector;
import base/id_consts;
import ru/parse/exps/sources;
import ru/src;
import ru/refactor/left_recursion;
import mm/compress;
import mm/proof_tree;
import mm/symbols;

export {
	mm2ru(sources : Tree<int, MmSource>, env : RuEnv) -> Maybe<RuMath>;
}

mm2ru(sources : Tree<int, MmSource>, env : RuEnv) -> Maybe<RuMath> {
	transl_timer = ruMakeTimer();
	structs = mmSources2structs(sources);
	synt_timer = ruMakeTimer();
	syntax = mmSources2Syntax(sources, env);
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tmm prepared syntax in: " + ruTimePassed2s(synt_timer));
	}
	ass_timer = ruMakeTimer();
	mm_assertions = mmAssertions(sources);
	assertions = pairs2tree(concatA(ruConcurrent(mapi(
		mm2ruSplitAssertions(mm_assertions),
		\i, arr -> \env1 -> {
			t = ruMakeTimer();
			res = map(arr, \ass -> Pair(ass.stat.label, mmAssertion2ru(ass, structs, syntax, env1)));
			if (ruVerbose(env1.conf) > 2) {
				env1.out.onMessage("\t\tmm translated slice " + i2s(i) + " of size: " + i2s(length(arr)) + " in " + ruTimePassed2s(t));
			}
			res;
		}
	), env)));
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tmm translated " + i2s(length(mm_assertions)) + " assertions in: " + ruTimePassed2s(ass_timer));
	}
	src_timer = ruMakeTimer();
	parse_srcs = mapTree(sources, \src -> mmSource2ru(src, assertions, syntax, env));
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tmm translated " + i2s(sizeTree(sources)) + " sources in: " + ruTimePassed2s(src_timer));
	}
	collect_timer = ruMakeTimer();
	math = ruCollectMathFast(parse_srcs, env, false);
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tru parsed " + i2s(sizeTree(sources)) + " files in: " + ruTimePassed2s(collect_timer));
	}
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("mm total translation time for " + i2s(sizeTree(sources)) + " files in: " + ruTimePassed2s(transl_timer));
	}
	math;
}

mm2ruSplitAssertions(assertions : [MmAssertion]) -> [[MmAssertion]] {
	sum_length = fold(assertions, 0.0, \acc, ass -> acc + i2d(mmAssertionProofLength(ass)));
	length_per_processor = sum_length / i2d(availableProcessors());
	curr = makeVector(128);
	split = fold(assertions, Pair([], 0.0), \acc, ass -> {
		pushVector(curr, ass);
		sum =  acc.second + i2d(mmAssertionProofLength(ass));
		if (sum < length_per_processor) {
			Pair(acc with second = sum);
		} else {
			slice = vector2array(curr);
			clearVector(curr);
			Pair(concat(acc.first, [slice]), 0.0);
		}
	});
	if (sizeVector(curr) == 0) split.first else {
		concat(split.first, [vector2array(curr)]);
	}
}

RuParseDeclComment ::= RuParseDecl, RuParseComment;

mmSource2ru(src : MmSource, assertions : Tree<int, [RuParseDecl]>, syntax : MmRuSyntax, env : RuEnv) -> RuParseSource {
	timer = ruMakeTimer();
	decls = makeVector(128);
	comms = fold(
		concatA(ruConcurrent(map(src.decls, \decl ->
			\env1 -> mmDecl2ru(decl, assertions, syntax, env1)
		), env)), 
		[], 
		\acc, block -> {
			switch (block) {
				RuParseComment(__,__,__): concat(acc, [block]);
				RuParseDecl(): {
					pushVector(decls, ruSetParseDeclComments(block, acc));
					[];
				}
			}
		}
	);
	ret = RuParseSource(
		map(src.imports, \inc -> RuParseImport(inc.module, -1)),
		vector2array(decls), comms, 
		ruNewFileInfo(src.info.module, env.conf, ".ru")
	);
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tmm translated: '" + src.info.module + "' in " + ruTimePassed2s(timer));
	}
	ret
}

mmDecl2ru(decl : MmDecl, assertions : Tree<int, [RuParseDecl]>, syntax : MmRuSyntax, env : RuEnv) -> [RuParseDeclComment] {
	switch (decl) {
		MmComment(text): 
			mmComment2ru(decl);
		MmConst(symbs): 
			mmConstant2ru(decl, syntax, env);
		MmAssertion(disjs, outer, hyps, inner, stat): 
			lookupTreeDef(assertions, stat.label, []);
		MmFloating(__,__,__):
			[];
	}
}

mmConstant2ru(const : MmConst, syntax : MmRuSyntax, env : RuEnv) -> [RuParseDecl] {
	fold(const.symbs, [], \acc, s -> 
		switch (lookupTree(syntax.types, s)) {
			Some(t):
				if (containsSet(syntax.supers, t.id)) acc else {
					concat(
						fold(t.supers, acc, \ac, sup -> 
							concat(ac, [lookupTreeDef(syntax.types, sup, ruNoParseType)])
						),
						[t]
					);
				}
			None(): concat(acc, [mmConst2ru(s, env)]);
		}
	);
}

mmComment2ru(comm : MmComment) -> [RuParseDeclComment] {
	[RuParseComment(strReplace(strReplace(comm.text, "/*", "/ *"), "*/", "* /"), "", -1)]
}

mmVar2ru(var : int) -> int {
	// Russell variables must not contain following three symbols: ')' ',' ':'
	// Replace all these characters with some other. 
	var0 = id2s(var);
	char_codes = s2a(var0);
	if (forall(char_codes, \i -> !(i == 41 || i == 44 || i == 58))) var else {
		var1 = concatStrings(map(char_codes, \i -> 
			if (i == 41) "_]_" else // ) is replaced with _]_
			if (i == 44) "_._" else // , is replaced with _._
			if (i == 58) "_;_" else // : is replaced with _;_
			fromCharCode(i)
		));
		s2id(var1);
	}
}

mmSymb2ru(s : MmSymb, env : RuEnv) -> int {
	if (s.isVar) {
		mmVar2ru(s.literal)
	} else {
		mmConst2ru(s.literal, env).id
	}
}

mmConst2ru(s : int, env : RuEnv) -> RuParseConst {
	if (lookupTreeDef(env.conf.opts, "mm-ascii", "") == "1") {
		RuParseConst(s, [], -1, "", -1)
	} else {
		lookupTreeDef(mmSymbTable(), s, RuParseConst(s, [], -1, "", -1))
	}
}

mmAssertion2ru(ass : MmAssertion, structs : MmStructs, syntax : MmRuSyntax, env : RuEnv) -> [RuParseDecl] {
	switch (lookupTree(syntax.rules, ass.stat.label)) {
		Some(r):
			if (ruRuleIsSuper(r)) [] else [r];
		None(): {
			switch (ass.stat) {
				MmProvable(__,__,__): 
					mmTheorem2ru(ass, ass.stat, structs, env);
				MmAxiomatic(l,__): 
					if (mmAssertionIsDef(ass)) {
						mmDef2ru(ass, env); 
					} else {
						mmAxiom2ru(ass, env);
					}
			}
		}
	}
}

mmAxiom2ru(ass : MmAssertion, env : RuEnv) -> [RuParseDecl] {
	[RuParseAxiom(ass.stat.label, [], mmVars2ru(ass.hyps), mmDisjs2ru(ass.disjs, mmAssertionVars(ass)), 
		mapi(mmAssertionHyps(ass.hyps), \i, h -> RuParseHyp(i, mmExp2ru(h.expr.symbs, env), -1)), 
		mmExp2ru(ass.stat.expr.symbs, env), -1
	)];
}

MmDefFactor(
	defm : RuParseExp,
	defs : RuParseExp,
	def : RuParseExp,
);

mmDef2ru(ass : MmAssertion, env : RuEnv) -> [RuParseDecl] {
	defFactor = mmFactorDef(ass.stat.expr, env);
	[RuParseDef(ass.stat.label, [], mmVars2ru(ass.hyps), mmDisjs2ru(ass.disjs, mmAssertionVars(ass)), 
		mapi(mmAssertionHyps(ass.hyps), \i, h -> RuParseHyp(i, mmExp2ru(h.expr.symbs, env), -1)),
		defFactor.defm, defFactor.defs, defFactor.def, -1
	)];
}

MmFactorDefEqAcc(
	braces : int,
	brackets : int,
	eq : int
);

mmFactorDefEqInd(ex : MmExp) -> int {
	is_eq = ex.symbs[1].literal != ruIdLeftBracket();
	factor = \strict -> {
		foldi(ex.symbs, MmFactorDefEqAcc(0, 0, -1), \i, ac, s ->
			if (ac.eq != -1) ac else
			if (s.literal == ruIdLeftBracket())  MmFactorDefEqAcc(ac with brackets = ac.brackets + 1) else 
			if (s.literal == ruIdLeftBrace())    MmFactorDefEqAcc(ac with braces   = ac.braces + 1) else
			if (s.literal == ruIdRightBracket()) MmFactorDefEqAcc(ac with brackets = ac.brackets - 1) else
			if (s.literal == ruIdRightBrace())   MmFactorDefEqAcc(ac with braces   = ac.braces - 1) else
			if (s.literal == ruIdEquality()    && (is_eq || !strict)  && ac.braces == 0)   MmFactorDefEqAcc(ac with eq = i) else
			if (s.literal == ruIdEquivalence() && (!is_eq || !strict) && ac.brackets == 1) MmFactorDefEqAcc(ac with eq = i) else ac
		).eq
	}
	ind1 = factor(true);
	if (ind1 != -1) ind1 else factor(false);
}

mmFactorDef(ex : MmExp, env : RuEnv) -> MmDefFactor {
	eq_ind = mmFactorDefEqInd(ex);
	is_eq = ex.symbs[eq_ind].literal == ruIdEquality();
	dfm_beg = if (is_eq) 1 else 2;
	dfm_len = if (is_eq) eq_ind - 1 else eq_ind - 2;
	dfs_beg = eq_ind + 1;
	dfs_len = if (is_eq) length(ex.symbs) - eq_ind - 1 else length(ex.symbs) - eq_ind - 2;

	MmDefFactor(
		mmExp2ru(concat(if (is_eq) [MmSymb(ruIdClass(), false)] else [MmSymb(ruIdTurnstile(), false)], subrange(ex.symbs, dfm_beg, dfm_len)), env),
		mmExp2ru(concat(if (is_eq) [MmSymb(ruIdClass(), false)] else [MmSymb(ruIdTurnstile(), false)], subrange(ex.symbs, dfs_beg, dfs_len)), env),
		RuParseExp(ruIdWff(), 
			if (is_eq) [ruIdDefiendum(), ruIdEquality(), ruIdDefiniens()]
			else       [ruIdLeftBracket(), ruIdDefiendum(), mmSymb2ru(MmSymb(ruIdEquivalence(), false), env), ruIdDefiniens(), ruIdRightBracket()]
			, -1
		),
	);
}

mmExp2ru(symbs : [MmSymb], env : RuEnv) -> RuParseExp {
	if (symbs[0].literal == ruIdTurnstile()) {
		RuParseExp(ruIdWff(), map(tail(symbs), \s -> mmSymb2ru(s, env)), -1);
	} else {
		RuParseExp(symbs[0].literal, map(tail(symbs), \s -> mmSymb2ru(s, env)), -1);
	}
}

mmAssertionIsDef(ass : MmAssertion) -> bool {
	if (!startsWith(id2s(ass.stat.label), "df-")) false else {
		mmFactorDefEqInd(ass.stat.expr) > -1
	} 
}

ruRuleIsSuper(r : RuParseRule) -> bool {
	length(r.term.symbs) == 1 && length(r.vars) == 1;
}

ruRuleSuperType(r : RuParseRule) -> int {
	r.term.type
}

ruRuleInferType(r : RuParseRule) -> int {
	r.vars[0].type
}

mmRule2ru(ass : MmAssertion, env : RuEnv) -> RuParseRule {
	RuParseRule(
		ass.stat.label, [],
		mmVars2ru(ass.hyps), 
		mmExp2ru(ass.stat.expr.symbs, env), 
		-1
	);
}

mmVars2ru(hyps : [MmHyp]) -> [RuParseVar] {
	filtermap(hyps, \h ->
		switch (h) {
			MmFloating(__, t, v): Some(RuParseVar(mmVar2ru(v), t, -1));
			default: None();
		}
	)
}

mmDisjs2ru(disjs : [MmDisj], vars : Set<int>) -> [RuParseDisj] {
	map(disjs, \d -> RuParseDisj(filter(map(d.vars, mmVar2ru), \v -> containsSet(vars, v)), -1))
}

MmRuSyntax(
	types : Tree<int, RuParseType>,
	rules : Tree<int, RuParseRule>,
	supers : Set<int>
);

mmSources2Syntax(sources : Tree<int, MmSource>, env : RuEnv) -> MmRuSyntax {
	axioms = mmAxiomatic(sources);
	rules = filtermap(axioms, \ax -> 
		if (mmStatIsRule(ax.stat)) {
			Some(mmRule2ru(ax, env));
		} else {
			None();
		}
	);
	types = set2array(fold(rules, makeSet(), \acc, r -> 
		fold(r.vars, insertSet(acc, r.term.type), \ac, var -> insertSet(ac, var.type))
	));
	superTypesMap = fold(filter(rules, ruRuleIsSuper), makeTree(), \acc, r ->
		setTree(acc, ruRuleInferType(r), 
			switch (lookupTree(acc, ruRuleInferType(r))) {
				Some(supers): insertSet(supers, ruRuleSuperType(r));
				None():       makeSet1(ruRuleSuperType(r));
			}
		)
	);
	typeMap = values2tree(map(types, \t ->
			RuParseType(t, [], set2array(lookupTreeDef(superTypesMap, t, makeSet())), -1)
		),
		\t -> t.id
	);
	ruleMap = values2tree(rules, \r -> r.id);
	supers = buildSet(map(filter(rules, ruRuleIsSuper), \r -> r.term.type));
	MmRuSyntax(typeMap, ruleMap, supers);
}

mmTheorem2ru(ass : MmAssertion, stat : MmProvable, structs : MmStructs, env : RuEnv) -> [RuParseDecl] {
	eitherMap(
		mmTheorem2MmRuProofTree(ass, stat, structs, env),
		\proof -> {
			th_hyps = mmAssertionHyps(ass.hyps);
			th_vars = mmVars2ru(ass.hyps);
			th_vars_map = fold(th_vars, makeTree(), \acc, v -> setTree(acc, v.id, v.type));
			steps = mmProofTree2ru(proof, th_vars_map, env);
			vars_map = fold(mmAssertionFlos(concat(ass.hyps, ass.inner)), makeTree(), 
				\acc, v -> setTree(acc, v.var, RuVar(mmVar2ru(v.var), v.type))
			);
			make_var = \v -> lookupTreeDef(vars_map, v, ruNoVar);
			disj_set = fold(map(ass.disjs, \d -> d.vars), makeSet(), \acc, disj -> 
				foldi(disj, acc, \i, ac, v1 ->
					foldi(disj, ac, \j, a, v2 ->
						if (i < j && containsKeyTree(vars_map, v1) && containsKeyTree(vars_map, v2)) {
							insertSet(a, RuDisj(make_var(v1), make_var(v2))) 
						} else a
					)
				)
			);
			th_ds = filterSet(disj_set, \d -> containsKeyTree(th_vars_map, d.v1.id) && containsKeyTree(th_vars_map, d.v2.id));
			pr_ds = filterSet(disj_set, \d -> !(containsKeyTree(th_vars_map, d.v1.id) && containsKeyTree(th_vars_map, d.v2.id)));
			make_disj = \s -> map(ruDisjs2Array(s), \ds -> RuParseDisj(map(ds, \d -> d.id), -1));
			prop = mmExp2ru(ass.stat.expr.symbs, env);
			prop_i = findiDef(steps, \st -> st.expr.symbs == prop.symbs, -1);
			if (steps == []) [] else {
				[RuParseTheorem(
					ass.stat.label, [],
					th_vars, 
					make_disj(th_ds),
					RuParseMeta([], -1),
					mapi(th_hyps, \i, h -> RuParseHyp(i, mmExp2ru(h.expr.symbs, env), -1)), 
					prop, 
					RuParseProof(
						mmVars2ru(ass.inner), 
						make_disj(pr_ds),
						take(steps, prop_i + 1), 
						-1
					), 
					-1
				)]
			}
		},
		[]
	);
}

MmRuProofAcc(
	steps : Tree<RuParseExp, int>,
	linear : Vector<RuParseStep>
);

mmRemoveTrivialSteps(proof : MmRuProofTree) -> MmRuProofTree {
	switch (proof) {
		MmRuProofTreeStep(name, expr, refs): {
			new_proof = MmRuProofTreeStep(name, expr, map(refs, mmRemoveTrivialSteps));
			if (length(refs) != 1) {
				new_proof; 
			} else {
				switch (new_proof.refs[0]) {
					MmRuProofTreeStep(__, ex, __): 
						if (ex.symbs == expr.symbs) new_proof.refs[0] else new_proof;
					MmRuProofTreeHyp(__, ex): {
						if (ex.symbs == expr.symbs) new_proof.refs[0] else new_proof;
					}
					MmRuProofTreeNone(): new_proof;					
				}
			}
		}
		default: proof;
	}
}

mmProofTree2ru(proof : MmRuProofTree, vars : Tree<int, int>, env : RuEnv) -> [RuParseStep] {
	new_proof = mmRemoveTrivialSteps(proof);
	switch (new_proof) {
		MmRuProofTreeStep(__,__,__): 
			vector2array(mmDoProofTree2ru(new_proof, MmRuProofAcc(makeTree(), makeVector(128)), vars, env).linear);
		default: [];
	}
}

mmDoProofTree2ru(proof : MmRuProofTreeStep, acc0 : MmRuProofAcc, vars : Tree<int, int>, env : RuEnv) -> MmRuProofAcc {
	acc1 = fold(proof.refs, acc0, \ac, aref -> 
		switch (aref) {
			MmRuProofTreeStep(__,__,__): mmDoProofTree2ru(aref, ac, vars, env);
			default: ac;
		}
	);
	ru_expr = mmExp2ru(proof.expr.symbs, env);
	switch (lookupTree(acc1.steps, ru_expr)) {
		Some(__): acc1;
		None(): {
			ind = sizeVector(acc1.linear);
			refs = fold(proof.refs, [], \ac, aref -> 
				switch (aref) {
					MmRuProofTreeStep(label, ex, refs):
						concat(ac, [RuParseStepRef(lookupTreeDef(acc1.steps, mmExp2ru(ex.symbs, env), -1))]);
					MmRuProofTreeHyp(i,__): 
						concat(ac, [RuParseHypRef(i)]);
					MmRuProofTreeNone(): ac;
				}
			);
			pushVector(acc1.linear, RuParseStep(ind, proof.name, refs, ru_expr, ruParseNoProof, -1));
			MmRuProofAcc(setTree(acc1.steps, ru_expr, ind), acc1.linear);
		}
	}
}

ruNoParseType = RuParseType(-1, [], [], -1);

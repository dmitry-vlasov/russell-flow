import lingo/pegcode/driver;
import ru/parse/src;
import mm/src_utils;
import formats/html/html_parse;
import base/db;

export {
	MmSymbDef(
		symb  : int, 
		html  : string,
		alt   : MmSymbAltDef,
		latex : string,
	);
	MmSymbAltDef(
		full : string, // i.e. "&uarr;<SUB>&#x1D45A;</SUB>
		html : [HtmlNode],
		unicode : string // unicode representation of the symbol
	);

	mmMakeSymbolTable(srcs : Tree<int, MmParseSource>, env : RuEnv) -> void;
	mmSymbTable() -> Tree<int, RuParseConst>;
	mmSymbTable2s(tab : Tree<int, RuParseConst>, full : bool) -> string;
}

mmMakeSymbolTable(srcs : Tree<int, MmParseSource>, env : RuEnv) -> void {
	defs = mmGatherSymbolDefs(srcs, env);
	table1 = mmSynbDefs2SymbTable(defs, env);
	table2 = mmCorrectSymbDefsAmbiguities(table1, env);
	mmMakeVarsSymbTable(srcs, table2, env);
	mmSymbTable_ref := Some(table2);
}

mmSymbolDef2s(def : MmSymbDef) -> string {
	"symb: '" + id2s(def.symb) + "'\n" + 
	(if (def.latex != "") "\tlatex: '" + def.latex + "'\n" else "") +
	(if (def.alt.full != "") "\talt:\n" + strIndent(mmSymbAltDef2s(def.alt)) + "\n" else "");
}

mmSymbAltDef2s(alt : MmSymbAltDef) -> string {
	if (alt.full == "") "" else {
		"full: " + alt.full + "\n" + 
		"html: " + html2s(alt.html) + "\n" +
		"unicode: " + alt.unicode + "\n";
	}
}

mmSymbolDefs2s(defs : Tree<int, MmSymbDef>) -> string {
	superglue(getTreeValues(defs), mmSymbolDef2s, "\n");
}

mmGatherSymbolDefs(srcs : Tree<int, MmParseSource>, env : RuEnv) -> Tree<int, MmSymbDef> {
	vars = mapSet(mmGatherAllParsedVars(srcs), id2s);
	// Add ("|-", "⊢", "\\vdash") symbol
	turnstile = ruIdTurnstile();
	turnstile_def = MmSymbDef(turnstile, "&#8866;", MmSymbAltDef("&#8866;", [HtmlEntity("&#", "8866")], "⊢"), "\\vdash");
	fold(getTreeValues(srcs), 
		makeTree1(turnstile, turnstile_def), \acc, src -> 
		fold(src.toplevel, acc, \ac, elem -> 
			switch (elem) {
				MmComment(text): {
					i = strIndexOf(text, "$t");
					if (i == -1) ac else {
						uncommented = mmRemoveDefComments(text, 0, makeList());
						mmGatherTextSymbDefs(uncommented, i, vars, ac, env);
					}
				}
				default: ac;
			}
		)
	);
}

mmRemoveDefComments(text : string, pos : int, acc : List<string>) -> string {
	open = ruFindSubstring(text, pos, "/*");
	if (open == -1) {
		// No comments are left
		concatStrings(list2array(acc));
	} else {
		close = ruFindSubstring(text, open + 2, "*/");
		if (close == -1) {
			// unclosed comment. Just skip it.
			concatStrings(list2array(acc));
		} else {
			uncommented = substring(text, pos, open - pos);
			mmRemoveDefComments(text, close + 2, Cons(uncommented, acc));
		}
	}
}

mmGatherTextSymbDefs(txt : string, pos : int, vars : Set<string>, acc : Tree<int, MmSymbDef>, env : RuEnv) -> Tree<int, MmSymbDef> {
	keywords = ["htmldef", "althtmldef", "latexdef"];
	escapes = "'\"";
	p = ruFindOneOfSubstrings(txt, pos, keywords);
	if (p.first == -1) acc else {
		pos1 = p.second + strlen(keywords[p.first]);
		pos2 = ruFindSubstringEscaped(txt, pos1, ";", escapes);
		if (pos2 == -1) {
			env.out.error(" wrong typesetting def - doesn't end with ';' \n" + substring(txt, pos1, strlen(txt) - pos1), []);
			acc;
		} else {
			body = substring(txt, pos1, pos2 - pos1);
			if (!strContains(body, " as ") && !strContains(body, " as\n")) {
				// Bad situation. 
				env.out.error("Bad definition: (not contains ' as ' or ' as\\n' )" + body, []);
				mmGatherTextSymbDefs(txt, pos2 + 1, vars, acc, env);
			} else {
				els = if (strContains(body, " as ")) strSplit(body, " as ") else strSplit(body, " as\n");
				symb1 = ruUnwrapQuotations(trim2(els[0], " \n\t\r"));
				if (symb1 == "") {
					// Bad situation. 
					env.out.error("Bad definition: " + body, []);
					mmGatherTextSymbDefs(txt, pos2 + 1, vars, acc, env);
				} else {
					symb = s2id(symb1);
					def1 = ruJoinMultDef(trim2(els[1], " \n\t\r"));
					def = trim2(ruUnwrapQuotations(def1), " \n\r\t");
					symb_def_old = lookupTreeDef(acc, symb, MmSymbDef(symb, "", MmSymbAltDef("", [], ""), ""));
					symb_def_new = if (p.first == 0) {
						MmSymbDef(symb_def_old with html = def);
					} else if (p.first == 1) {
						html_parsed = parseHtml(def);
						elems = html_parsed.first;
						unicode = if (html_parsed.second != "") {
							env.out.error("Symbol typesetting definition:\n" + strIndent(def) + "\nis not parsed:\n" + html_parsed.second, []);
							"";
						} else {
							err = ref false;
							uni = mmSymbolHtml2unicode(elems, env, err);
							if (containsSet(vars, uni) || ^err) symb1 else uni;
						}
						MmSymbDef(symb_def_old with 
							alt = MmSymbAltDef(def, elems, unicode)
						);
					} else {
						MmSymbDef(symb_def_old with latex = def);
					}
					mmGatherTextSymbDefs(txt, pos2 + 1, vars, setTree(acc, symb, symb_def_new), env);
				}
			}
		}
	}
}

/*
  To parse definitions like this:

	althtmldef "-1-1-onto->" as '&ndash;<FONT SIZE=-2 '
		+ 'FACE=sans-serif>1-1</FONT>-<FONT SIZE=-2 '
		+ 'FACE=sans-serif>onto</FONT>&rarr;';

  we need to glue such multi-string definitions into a one string.
*/

mm_mult_def_parser : ref Maybe<[PegOp]> = ref None();

mmMultDefParser() -> [PegOp] {
	onlyOnce(mm_mult_def_parser, \ -> 
		compilePegGrammar("
mult_def = def:d defs+:ds { makeDefs(:d, :ds) };
def = def0 | def1;
def0 = ws '\\'' (!'\\'' any)+ $d '\\'' ws { $d };
def1 = ws \"\\\"\" (!\"\\\"\" any)+ $d \"\\\"\" ws { $d };
defs = '+' ws def:d { :d };
ws = (' ' | '\\t' | '\\n' | '\\r')*;
any = '\\u0000'-'\\uFFFF';
"
		)
	);
}

ruJoinMultDef(def : string) -> string {
	triple = parsic3(mmMultDefParser(), def, 
		SemanticActions(mergeTree(defaultPegActions.t, makeTree1(
			"makeDefs", \s -> concat([s[0]], s[1]))
		)), []
	);
	if (triple.third != "") def else concatStrings(triple.first);
}

ruUnwrapQuotations(str : string) -> string {
	if (startsWith(str, "'") && endsWith(str, "'")) {
		trim2(str, "'");
	} else if (startsWith(str, "\"") && endsWith(str, "\"")) {
		trim2(str, "\"");
	} else {
		str;
	}
}

mmSymbolHtml2unicode(html : [HtmlNode], env : RuEnv, err : ref bool) -> string {
	concatStrings(map(html, \elem -> mmSymbolHtmlNode2unicode(elem, env, err)));
}

mmSymbolHtmlNode2unicode(elem : HtmlNode, env : RuEnv, err : ref bool) -> string {
	switch (elem) {
		HtmlTag(__,__, children):
			mmSymbolHtml2unicode(children, env, err);
		HtmlText(text):
			strReplaces(text, [" ", "", "\n", "", "\r", "", "\t", ""]);
		HtmlComment(text):
			strReplaces(text, [" ", "", "\n", "", "\r", "", "\t", ""]);
		HtmlEntity(prefix, body): 
			unescapeHtmlEntity(elem);
	}
}

mmSynbDefs2SymbTable(defs : Tree<int, MmSymbDef>, env : RuEnv) -> Tree<int, RuParseConst> {
	all_defs = getTreeValues(defs);
	fold(getTreeValues(defs), makeTree(), \acc, def -> {
		if (def.alt.unicode == "") {
			ruCrash("def.alt.unicode == '':\n" + mmSymbolDef2s(def));
			acc;
		} else {
			// Try to correct ambiguities
			symb = lookupTreeDef(mmSymbAmbiguities(env), id2s(def.symb), def.alt.unicode);
			id = s2id(symb);
			if (id == def.symb && def.latex == "") acc else {
				setTree(acc, def.symb, RuParseConst(
					id, [], 
					if (id == def.symb) -1 else def.symb,
					def.latex, 
					-1
				));
			}
		}
	});
}

mmSymbTable2s(tab : Tree<int, RuParseConst>, full : bool) -> string {
	if (full) {
		superglue(getTreeValues(tab), ruParse2s, "\n");	
	} else {
		consts = filter(getTreeValues(tab), \c -> c.id != c.ascii);
		const2s = \c -> {
			"\t" + 
			id2s(c.id) + 
			(if (c.ascii == -1) "" else ", ascii: " + id2s(c.ascii)) + 
			(if (c.latex == "") "" else ", latex: " + c.latex)
		}
		superglue(consts, const2s, "\n");
	}
}

mmCorrectSymbDefsAmbiguities(table : Tree<int, RuParseConst>, env : RuEnv) -> Tree<int, RuParseConst> {
	table2 = fold(getTreeValues(table), makeTree(), \acc, const -> {
		key = if (const.ascii == -1) const.id else const.ascii;
		if (containsKeyTree(acc, key)) {
			ruCrash("non unique ascii - key: " + id2s(key));
		}
		setTree(acc, key, const.id)
	});
	reversed = reverseTreeArray(table2);
	duplicate_keys = filter(tree2pairs(reversed), \p -> 
		length(p.second) != 1
	);
	if (length(duplicate_keys) > 0) {
		env.out.error("duplicate keys in symbol table:\n" + 
			strIndent(superglue(duplicate_keys, \p -> 
				"symbol: '" + id2s(p.first) + "' has ASCII pre-images: \n" + strIndent(superglue(p.second, id2s, "\n")) + "\n", "\n"
			)) + "\n" +
			"update the 'symb_ambiguities' table in file 'set.json' with appropriate resolutions", []
		);
		fold(duplicate_keys, table, \acc, p ->
			fold(p.second, acc, \ac, key -> {
				const = lookupTreeDef(table, key, RuParseConst(-1, [], -1, "", -1));
				setTree(acc, key, RuParseConst(const with id = key));
			})
		);
	} else {
		table;
	}
}

// Hand written table for resovling ambiguities in symbols,
// when althtmldef-defined symbols for different ascii-symbols coincide. 
// This table is inside db/<poject>.json file, in 'symb_ambiguities' object

mm_symb_ambiguities : ref Maybe<Tree<string, string>> = ref None();

mmSymbAmbiguities(env : RuEnv) -> Tree<string, string> {
	onlyOnce(mm_symb_ambiguities, \ -> {
		db = env.conf.project;
		if (db == "") makeTree() else {
			json_table = ruGetDbItem(db, ["symb_ambiguities"]);
			table = map(getJsonObjectValue(json_table, []), \p -> 
				Pair(p.first, getJsonStringValue(p.second, ""))
			);
			pairs2tree(table);
		}
	});
}

mmSymbTable_ref : ref Maybe<Tree<int, RuParseConst>> = ref None();

mmSymbTable() -> Tree<int, RuParseConst> {
	switch (^mmSymbTable_ref) {
		Some(table): table;
		None(): {
			mmSymbTable_ref := Some(makeTree());
			mmSymbTable();
		}
	}
}

mmMakeVarsSymbTable(srcs : Tree<int, MmParseSource>, defs : Tree<int, RuParseConst>, env : RuEnv) -> void {
	if (env.conf.project != "") {
		toplevel_vars = buildSet(fold(getTreeValues(srcs), [], \acc, src ->
			concat(acc, concatA(filtermap(src.toplevel, \decl ->
				switch (decl) {
					MmVars(vars): Some(vars);
					default: None();
				}
			)))
		));
		vars_defs = filter(getTreeValues(defs), \def -> 
			containsSet(toplevel_vars, if (def.ascii == -1) def.id else def.ascii)
		);
		vars_defs_json = JsonArray(map(vars_defs, \def ->
			JsonObject([
				Pair("ascii", JsonString(id2s(if (def.ascii == -1) def.id else def.ascii))),
				Pair("latex", JsonString(def.latex)),
				Pair("unicode", JsonString(id2s(def.id))),
			])
		));
		ruSetDbItem(env.conf.project, ["vars_typesetting"], vars_defs_json);
	}
}

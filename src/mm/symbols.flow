import ru/parse/src;

export {
	mmSymbTable() -> Tree<int, RuParseConst>;
}

mmSymbTable_ref : ref Maybe<Tree<int, RuParseConst>> = ref None();

mmSymbTable() -> Tree<int, RuParseConst> {
	onlyOnce(mmSymbTable_ref, mmInitSymbTable);
}

mmMakeParseConst(ascii : string, utf : string, latex : string) -> RuParseConst {
	RuParseConst(s2id(utf), [], s2id(ascii), s2id(latex), -1);
}

mmInitSymbTable() -> Tree<int, RuParseConst> {
	values2tree([
		mmMakeParseConst("|-", "⊢", "vdash"),
		mmMakeParseConst("->", "→", "\\rightarrow"),
		mmMakeParseConst("-.", "¬", "\\lnot"),
		mmMakeParseConst("<->", "↔", "\\leftrightarrow"),
		mmMakeParseConst("\\/", "∨", "\\lor"),
		mmMakeParseConst("/\\", "∧", "\\land"),
		mmMakeParseConst("-/\\", "⊼", "\\bar{\\wedge}"),
		mmMakeParseConst("A.", "∀", "\\forall"),
		mmMakeParseConst("E.", "∃", "\\exists"),
		mmMakeParseConst("e.", "∈", "\\in"),
		mmMakeParseConst("E!", "∃!", "\\exists{!}"),
		mmMakeParseConst("E*", "∃*", "\\exists^{\\ast}"),
		mmMakeParseConst("{", "{", "\\{"),
		mmMakeParseConst("}", "}", "\\}"),
		mmMakeParseConst("=/=", "≠", "\\ne"),
		mmMakeParseConst("e/", "∉", "\\notin"),
		//mmMakeParseConst("_V", "���", "\\rm{V}"),
		mmMakeParseConst("[_", "[_", "["),
		mmMakeParseConst("]_", "]_", "]"),
		mmMakeParseConst("C_", "⊆", "\\subseteq"),
		mmMakeParseConst("C.", "⊂", "\\subset"),
		mmMakeParseConst("\\", "∖", "\\setminus"),
		mmMakeParseConst("u.", "∪", "\\cup"),
		mmMakeParseConst("i^i", "∩", "\\cap"),
		mmMakeParseConst("(/)", "∅", "\\emptyset"),
		mmMakeParseConst("~P", "Pow", "\\cal{P}"),
		mmMakeParseConst("<.", "〈", "\\langle"),
		mmMakeParseConst(">.", "〉", "\\rangle"),
		mmMakeParseConst("U.", "⋃", "\\bigcup"),
		mmMakeParseConst("|^|", "⋂", "\\bigcap"),
		mmMakeParseConst("U_", "⋃_", "\\bigcup"),
		mmMakeParseConst("|^|_", "⋂_", "\\bigcap"),
		//mmMakeParseConst("_E", "���", "\\epsilon"),
		mmMakeParseConst("_E", "_E", "\\epsilon"),
		mmMakeParseConst("_I", "_I", "\\rm{Id}"),
		mmMakeParseConst("om", "ω", "\\omega"),
		mmMakeParseConst("X.", "×", "\\times"),
		mmMakeParseConst("`'", "⁻¹", "{}^{-1}"),
		mmMakeParseConst("|`", "↾", "\\upharpoonright"),
		mmMakeParseConst("\"", "\"", "``"),
		mmMakeParseConst("o.", "∘", "\\circ"),
		mmMakeParseConst("-->", "⟶", "\\longrightarrow"),
		mmMakeParseConst("-1-1->", "↣", "\\rightarrowtail"),
		mmMakeParseConst("-onto->", "↠", "\\twoheadrightarrow"),
		mmMakeParseConst("-1-1-onto->", "⤖", "\\rightarrowtail\\twoheadrightarrow"),
		mmMakeParseConst("X_", "×_", "\\times"),
		mmMakeParseConst("|->", "↦", "\\mapsto"),
		mmMakeParseConst("^m", "↑m", "\\uparrow_m"),
		mmMakeParseConst("^pm", "↑pm", "\\uparrow_{pm}"),
		mmMakeParseConst("+o", "+ₒ", "+_o"),
		mmMakeParseConst(".o", "∙ₒ", "\\cdot_o"),
		mmMakeParseConst("^o", "↑ₒ", "\\uparrow_o"),
		mmMakeParseConst("1o", "1ₒ", "1_o"),
		mmMakeParseConst("2o", "2ₒ", "2_o"),
		mmMakeParseConst("/.", "/.", "\\diagup"),
		mmMakeParseConst("~~", "≈", "\\approx"),
		mmMakeParseConst("~<_", "≼", "\\preccurlyeq"),
		mmMakeParseConst("~<", "≺", "\\prec"),
		mmMakeParseConst("aleph", "ℵ", "\\aleph"),
		//mmMakeParseConst("+c", "+���", "+_c"),
		mmMakeParseConst("+c", "+c", "+_c"),
		mmMakeParseConst("R1", "R₁", "R_1"),
		mmMakeParseConst(".N", "∙N", "\\cdot_{\\cal{N}}"),
		mmMakeParseConst("<N", "<N", "<_{\\cal{N}}"),
		mmMakeParseConst("+pQ", "+pQ", "+_{p\\cal{Q}}"),
		mmMakeParseConst(".pQ", "∙pQ", "\\cdot_{p\\cal{Q}}"),
		mmMakeParseConst("Q.", "Q.", "\\cal{Q}"),
		mmMakeParseConst(".Q", "∙Q", "\\cdot_{\\cal{Q}}"),
		mmMakeParseConst("P.", "Pos", "\\rm{Pos}"),
		mmMakeParseConst("1P", "1Pos", "1_{\\rm{Pos}}"),
		mmMakeParseConst("+P.", "+Pos", "+_{\\rm{Pos}}"),
		mmMakeParseConst(".P.", "∙Pos", "\\cdot_{\\rm{Pos}}"),
		mmMakeParseConst("<P", "<Pos", "<_{\\rm{Pos}}"),
		mmMakeParseConst("+pR", "+pR", "+_{p\\cal{R}}"),
		mmMakeParseConst(".pR", "∙pR", "\\cdot_{p\\cal{R}}"),
		mmMakeParseConst("-1R", "-1R", "-1_{p\\cal{R}}"),
		mmMakeParseConst(".R", "∙R", "\\cdot_{p\\cal{R}}"),
		mmMakeParseConst("<R", "<R", "<_{p\\cal{R}}"),
		mmMakeParseConst("<RR", "<ℝ", "<_{\\mathbb{R}}"),
		mmMakeParseConst("CC", "ℂ", "\\mathbb{C}"),
		mmMakeParseConst("RR", "ℝ", "\\mathbb{R}"),
		mmMakeParseConst("x.", "∙", "\\cdot"),
		mmMakeParseConst("+oo", "+∞", "+\\infty"),
		mmMakeParseConst("-oo", "-∞", "-\\infty"),
		mmMakeParseConst("RR*", "ℝ*", "\\mathbb{R}*"),
		mmMakeParseConst("<_", "≤", "\\le"),
		mmMakeParseConst("NN", "ℕ", "\\mathbb{N}"),
		mmMakeParseConst("NN0", "ℕ₀", "\\mathbb{N}_0"),
		mmMakeParseConst("ZZ", "ℤ", "\\mathbb{Z}"),
		mmMakeParseConst("QQ", "ℚ", "\\mathbb{Q}"),
		mmMakeParseConst("RR+", "ℝ⁺", "\\mathbb{R}^+"),
		mmMakeParseConst("sqr", "√", "\\surd"),
		mmMakeParseConst("Re", "ℜ", "\\Re"),
		mmMakeParseConst("Im", "ℑ", "\\Im"),
		mmMakeParseConst("|_", "⌊", "\\lfloor"),
		mmMakeParseConst("==", "≡", "\\equiv"),
		mmMakeParseConst("seq1", "seq₁", "\\rm{seq}_1"),
		mmMakeParseConst("ZZ>=", "ℤ≥", "\\mathbb{Z}_\\ge"),
		mmMakeParseConst("seq0", "seq₀", "\\rm{seq}_0"),
		mmMakeParseConst("^", "↑", "\\uparrow"),
		mmMakeParseConst("~~>", "⇝", "\\rightsquigarrow"),
		mmMakeParseConst("...", "...", "\\ldots"),
		mmMakeParseConst("sum_", "∑", "\\sigma"),
		mmMakeParseConst("_e", "ℇ", "\\rm{e}"),
		mmMakeParseConst("pi", "π", "\\pi"),
		mmMakeParseConst("-cn->", "‒cn→", "\\longrightarrow_{\\rm{cn}}"),
		mmMakeParseConst("~~>m", "⇝m", "\\rightsquigarrow_{\\rm{m}}"),
		mmMakeParseConst("Id", "Id", "\\rm{Id}"),
		mmMakeParseConst("^d", "↑g", "\\uparrow_g"),
		mmMakeParseConst(".s", "∙s", "\\cdot_s"),
		mmMakeParseConst(".i", "∙i", "\\cdot_i"),
		mmMakeParseConst("~~>v", "⇝v", "\\rightsquigarrow_{\\rm{v}}"),
		mmMakeParseConst("_|_", "⊥", "\\perp"),
		mmMakeParseConst("vH", "vH", "\\vee_\\mathfrak{H}"),
		mmMakeParseConst("\\/H", "\\/H", "\\bigvee_\\mathfrak{H}"),
		mmMakeParseConst("<_op", "≤op", "\\le_{\\rm{op}}"),
		mmMakeParseConst("Lambda", "Λ", "\\Lambda"),
		mmMakeParseConst("<o", "⋖", "\\lessdot"),
		mmMakeParseConst("1stc", "1stω", "1^{\\rm{st}}\\omega"),
		mmMakeParseConst("2ndc", "2ndω", "2^{\\rm{nd}}\\omega"),
		mmMakeParseConst("prod_", "∏", "\\Pi"),
		mmMakeParseConst("(+)", "⊕", "\\oplus"),
		mmMakeParseConst("~~>t", "⇝t", "\\rightsquigarrow_{\\rm{t}}"),
		mmMakeParseConst("=~ph", "=~φ", "\\mbox{$=$\\~{}ph}"),
		mmMakeParseConst("->..", "⇒", "\\Longrightarrow"),
	], \c -> c.ascii);
}

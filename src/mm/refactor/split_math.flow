import base/split;
import mm/src;
import command;

export {
	mmCommSplitMath : RuComm;
	mmRunSplitMath(task : ScTask, env : RuState) -> Maybe<RuState>;
}

mmCommSplitMath = RuComm(
	RuCommDescr(
		"split-math-mm", "misc", "split a single file into a filesystem", "file", false, 
		[RuCommArg("file", false, "input file", "")]
	),
	mmRunSplitMath
);

mmRunSplitMath(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	sources = env.mm;
	conf = env.conf;
	module = ruTrimPath(file, conf, ".mm");
	timer = ruMakeTimer();
	num1 = sizeTree(sources);
	if (ruVerbose(conf) > 1) {
		conf.onMessage("mm going to split: " + i2s(num1) + " modules");
	}
	split_sources = foldTree(sources, makeTree(), \name, src, acc -> {
			if (ruVerbose(conf) > 1) {
				conf.onMessage("\tgoing to split module: '" + src.info.module + "'");
			}
			mergeTree(acc, mmSplitSources(src, conf, module))
		}
	);
	root_info = ruNewFileInfo(module, conf, ".mm");
	if (ruVerbose(conf) > 1) {
		conf.onMessage("\troot module: '" + root_info.module + "', path: '" + root_info.path + "'");
	}
	root_src = MmSource(
		map(getTreeValues(split_sources), \src -> MmImport(src.info.id)),
		[], root_info
	);
	if (ruVerbose(conf) > 0) {
		conf.onMessage("mm split " + i2s(num1) + " files into " + i2s(sizeTree(split_sources) + 1) + " in " + ruTimePassed2s(timer));
	}
	Some(RuState(env with mm = setTree(split_sources, s2id(module), root_src)));
}

MmSplitSource(
	pattern : string,
	header : string,
	path : string,
	blocks : ref [MmDecl],
	subs : ref [MmSplitSource]
);

mmSplitLevel(src : MmSplitSource, pattern : string) -> MmSplitSource {
	makePath = \h -> ruStrReplaceAll(h, " /:.?!;$\\\"'`#", "_");
	addBlock = \acc, block -> { 
		refArrayPush(lastElement(^(acc.subs), acc).blocks, block); 
		acc 
	}
	addSrc = \acc, h -> {
		path = (if (src.path != "") src.path + "/" else "") + makePath(h);
		refArrayPush(acc.subs, MmSplitSource(pattern, h, path, ref [], ref [])); 
		acc 
	}
	getHeader = \txt -> trim2(strSplit(txt, "\n")[2], " \t\n\r");
	isHeader = \txt -> {
		if (!(strContains(txt, pattern) && strCountOf(txt, "\n") > 1)) false else {
			getHeader(txt) != "";
		}
	}
	fold(^(src.blocks), MmSplitSource(src with blocks = ref [], subs = ref []), \acc, block -> 
		switch (block) {
			MmComment(text): {
				if (!isHeader(text)) {
					addBlock(acc, block)
				} else {
					addBlock(addSrc(acc, getHeader(text)), block);
				}
			}
			default: addBlock(acc, block);
		}
	);
}

mmSplitSourceRec(src : MmSplitSource, p : RuSplitPattern) -> MmSplitSource {
	parts = mmSplitLevel(src, p.pattern);
	switch (p.child) {
		None(): parts;
		Some(ch_p):
			MmSplitSource(parts with
				subs = ref map(^(parts.subs), \part -> mmSplitSourceRec(part, ch_p))
			);
	}
}

mmDoSplitSource(src : MmSource, conf : RuConf) -> MmSplitSource {
	mmSplitSourceRec(
		MmSplitSource("", "", "", ref src.decls, ref []), 
		mm_split_pattern
	)
}

MmLinearizeAcc(
	srcs : Tree<int, MmSource>,
	last : Maybe<MmSource>
);

mmMakeSplittedFile(file : string, acc : MmLinearizeAcc) -> string {
	if (!containsKeyTree(acc.srcs, s2id(file))) file else {
		mmMakeSplittedFile(file + "1", acc)
	}
}

mmLinearizeSplitSources(src : MmSplitSource, acc : MmLinearizeAcc, conf : RuConf, file0 : string) -> MmLinearizeAcc {
	file = mmMakeSplittedFile(if (src.path == "") file0 + "_init" else src.path, acc);
	module = ruTrimPath(file, conf, ".mm");
	header_pattern = lpad("", src.pattern, 40);
	curr_src = MmSource(
		eitherMap(acc.last, \last -> [MmImport(last.info.id)], []), 
		^(src.blocks), 
		ruNewFileInfo(module, conf, ".mm")
	);
	if (ruVerbose(conf) > 1) {
		conf.onMessage("\tmm splitted file: '" + curr_src.info.module + "'");
	}
	fold(^(src.subs), 
		MmLinearizeAcc(setTree(acc.srcs, s2id(file), curr_src), Some(curr_src)), 
		\ac, sub -> mmLinearizeSplitSources(sub, ac, conf, file0)
	);
}

mmSplitSources(src : MmSource, conf : RuConf, file : string) -> Tree<int, MmSource> {
	mmLinearizeSplitSources(
		mmDoSplitSource(src, conf),
		MmLinearizeAcc(makeTree(), None()), 
		conf, file
	).srcs;
}

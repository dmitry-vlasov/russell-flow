import mm/src;
import comm;

export {
	mmCommRemoveTrivialSources : RuComm;
}

mmCommRemoveTrivialSources = RuComm(
	RuCommInfo(
		"mm-remove-trivial-sources", "refactor", "remove all sources, which contain only comments", "keep", false, false, 
		[RuCommArg("keep", true, "keep the sources, listed as CSV", "")], []
	),
	mmRunRemoveTrivialSources
);

mmRunRemoveTrivialSources(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	sources = state.mm;
	conf = state.conf;
	timer = ruMakeTimer();
	to_keep0 = lookupTreeDef(task.args, "keep", "");
	to_keep = buildSet(if (to_keep0 == "") [] else 
		map(strSplit(to_keep0, ","), \file -> s2id(ruTrimPath(file, conf, ".mm")))
	);
	num1 = sizeTree(sources);
	println("all sources:\n" + 
		strGlue(map(getTreeKeys(sources), id2s), "\n")
	);
	println("CLASSICAL_FIRST-ORDER_LOGIC_WITH_EQUALITY/Pre-logic/Inferences_for_assisting_proof_development:\n" +
		mm2s(lookupTreeDef(sources, 
			s2id("CLASSICAL_FIRST-ORDER_LOGIC_WITH_EQUALITY/Pre-logic/Inferences_for_assisting_proof_development"),
			mmEmptySource
		))
	);
	trivial_sources0 = filter(getTreeValues(sources), \src -> 
		mmIsTrivialSource(src) && !containsSet(to_keep, src.info.id)
	);
	trivial_sources = map(trivial_sources0, \src ->
		MmSource(src with 
			imports = filter(src.imports, \imp -> !exists(trivial_sources0, \triv -> imp.module == triv.info.id))
		)
	);
	if (ruVerbose(conf) > 1) {
		env.out.onMessage("mm going to remove " + i2s(length(trivial_sources)) + " trivial sources from: " + i2s(num1) + " modules:\n" +
			strIndent(strGlue(map(trivial_sources, \src -> id2s(src.info.id)), "\n")) + "\n" +
			"to keep: " + strGlue(map(set2array(to_keep), id2s), ", ")
		);
	}
	trivial_removed = fold(trivial_sources, sources, \acc, src ->
		mmRemoveSource(acc, src)
	);
	if (ruVerbose(conf) > 0) {
		env.out.onMessage("mm removed " + i2s(length(trivial_sources)) + " trivial sources in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		mm = trivial_removed,
		vars = setTree(setTree(state.vars, 
			"mm-remove-trivial-sources.time", scDoubleVal(ruTimePassed(timer))), 
			"mm-remove-trivial-sources.size", scIntVal(length(trivial_sources))
		)
	));
}

mmRemoveSource(sources : Tree<int, MmSource>, src_to_remove : MmSource) -> Tree<int, MmSource> {
	id_to_remove = src_to_remove.info.id;
	foldTree(sources, makeTree(), \id, src, acc ->
		if (id == id_to_remove) acc else {
			new_src = switch (findi(src.imports, \imp -> imp.module == id_to_remove)) {
				Some(i): {
					new_imports = set2array(mergeSets(
						buildSet(removeIndex(src.imports, i)), 
						buildSet(src_to_remove.imports)
					));
					println(
						"upd src: " + id2s(id) + "\n" + 
						"old imps:\n" + strIndent(strGlue(map(src.imports, \imp -> id2s(imp.module)), "\n")) + "\n" +
						"new imps:\n" + strIndent(strGlue(map(new_imports, \imp -> id2s(imp.module)), "\n")) + "\n"

					);
					MmSource(src with imports = new_imports);
				}
				None(): src;
			}
			setTree(acc, id, new_src)
		}
	);
}

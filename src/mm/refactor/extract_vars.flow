import base/path;
import base/permute;
import mm/src;
import mm/proof_tree;
import comm;

export {
	mmSourcesExtractVars(sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmSource>;
	mmCommExtractVars : RuComm;
}

mmCommExtractVars = RuComm(
	RuCommInfo("mm-extract-vars", "misc", "extract common vars", "", false, false, [], []),
	\unit -> {
		env = ruUnitEnv(unit);
		task = unit.task;
		state = unit.state;
		sources = state.mm;
		conf = state.conf;
		timer = ruMakeTimer();
		extracted = mmSourcesExtractVars(sources, env);
		if (ruVerbose(conf) > 0) {
			env.out.onMessage("mm vars are extracted in " + ruTimePassed2s(timer));
		}
		Some(RuState(state with 
			mm = extracted,
			vars = setTree(state.vars, 
				"mm-extract-vars.time", ValDouble(ruTimePassed(timer))
			)
		));
	}
);

mmSourcesExtractVars(sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmSource> {
	assertions = mmAssertions(sources);
	vars = mmAllVars(sources);
	vars_map = foldi(vars, makeTree(), \i, acc, v ->
		setTree(acc, v.var, i)
	);
	perms = mmMakeVarsPermutations(assertions, vars_map, env);
	structs = MmStructs(mmSources2structs(sources) with vars = vars);
	permuted = mapTree(sources, \src -> 
		mmApplyPermutation2Source(src, perms, structs, env)
	);
	mmAddVars(vars, permuted, env);
}

mmMakeVarsPermutations(assertions : [MmAssertion], vars_map : Tree<int, int>, env : RuEnv) -> Tree<int, [int]> {
	fold(assertions, makeTree(), \acc, ass -> {
		flows = mmAssertionFlos(ass.hyps);
		flows_inds = map(flows, \flo -> lookupTreeDef(vars_map, flo.var, -1));
		inds_ordered = sort(flows_inds);
		flows_perm = map(flows_inds, \ind -> elemIndex(inds_ordered, ind, -1));
		perm = fold(ass.hyps, Triple([], 0, 0), \ac, hyp -> {
			switch (hyp) {
				MmFloating(lab, type, var): {
					Triple(
						concat(ac.first, [flows_perm[ac.third]]),
						ac.second,
						ac.third + 1
					);
				}
				MmEssential(__, __): {
					Triple(
						concat(ac.first, [ac.second + length(flows)]),
						ac.second + 1,
						ac.third
					);
				}
			}
		}).first;
		setTree(acc, ass.stat.label, ruReversePermutation(perm, env));
	});
}

mmApplyPermutation2Source(src : MmSource, perms : Tree<int, [int]>, structs : MmStructs, env : RuEnv) -> MmSource {
	MmSource(src with 
		decls = map(src.decls, \decl ->
			switch (decl) {
				MmAssertion(__,__,__,__,__): 
					mmApplyPermutation2Assertion(decl, perms, structs, env);
				default: 
					decl;
			}
		)
	);
}

mmApplyPermutation2Assertion(ass : MmAssertion, perms : Tree<int, [int]>, structs : MmStructs, env : RuEnv) -> MmAssertion {
	vars = mmAssertionFlos(ass.hyps);
	all_vars = mmAssertionFlos(concat(ass.hyps, ass.inner));
	vars_map = fold(all_vars, makeTree(), \acc, v -> 
		setTree(acc, v.label, mmMakeFloatingTypedLabel(v))
	);
	rename_vars = \hyps : [MmHyp] -> map(hyps,
		\hyp -> switch (hyp) {
			MmFloating(lab, type, var): MmFloating(hyp with label = lookupTreeDef(vars_map, lab, lab));
			default: hyp;
		}
	);
	MmAssertion(ass with
		outer = true,
		hyps = rename_vars(ruPermute(ass.hyps, lookupTreeDef(perms, ass.stat.label, []))),
		inner = rename_vars(ass.inner),
		stat = switch (ass.stat) {
			MmAxiomatic(__,__): ass.stat;
			MmProvable(__,__,proof): {
				switch (proof) {
					MmNormalProof(labs): {
						switch (mmTheorem2MmProofTree(ass, ass.stat, structs, env)) {
							Some(proof_tree): {
								permuted_tree = mmApplyPermutation2ProofTree(proof_tree, perms, env);
								permuted_labs = mmProofTree2NormalProof(permuted_tree, env);
								renamed_labs = map(permuted_labs, \lab -> lookupTreeDef(vars_map, lab, lab));
								MmProvable(ass.stat with proof = MmNormalProof(renamed_labs));
							}
							None(): {
								env.out.onError("Couldn't transform an RPN proof to tree", []);
								ass.stat;
							}
						}
					}
					MmCompressedProof(__,__): {
						env.out.onError("Compressed proofs are not allowed at applying a permutations to assertion hyps", []);
						ass.stat;
					}
				}
			}
		}
	);
}

mmApplyPermutation2ProofTree(proof : MmProofTree, perms : Tree<int, [int]>, env : RuEnv) -> MmProofTree {
	switch (proof) {
		MmProofTreeHyp(h): proof;
		MmProofTreeStep(lab, hyps0): {
			hyps = map(hyps0, \hyp -> mmApplyPermutation2ProofTree(hyp, perms, env));
			perm = lookupTreeDef(perms, lab, []);
			MmProofTreeStep(lab, ruPermute(hyps, perm));
		}
	}
}

mmAddVars(vars : [MmFloating], sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmSource> {
	leaf_srcs = filter(getTreeValues(sources), \src -> src.imports == []);
	common_dir = ruPath2s(ruCommonDir(map(leaf_srcs, \src -> ruSplitPath(src.info.path))));
	path = common_dir + "vars.mm";
	module = ruTrimPath(path, env.conf, ".mm");
	module_id = s2id(module);

	types = fold(vars, makeSet(), \acc, v -> insertSet(acc, v.type));
	type_consts_removed = mapTree(sources, \src ->
		MmSource(src with 
			decls = filtermap(src.decls, \decl -> 
				switch (decl) {
					MmConst(symbs): {
						filtered = filter(symbs, \s -> !containsSet(types, s));
						if (filtered == []) None() else Some(MmConst(filtered));
					}
					default: Some(decl);
				}
			)
		)
	);

	vars_src = MmSource([], 
		concat([
			MmComment("Types (non-terminals) used in grammar"), 
			MmConst(set2array(types)),
			MmComment("$f - statements for all variables, used in source"), 
		], vars), 
		RuFileInfo(module_id, module, path, 0.0, ruIdsVersion())
	);
	fold(leaf_srcs, setTree(type_consts_removed, module_id, vars_src), \acc, src ->
		setTree(acc, src.info.id, 
			MmSource([MmImport(module_id)], src.decls, src.info)
		)
	);
}

mmMakeFloatingTypedLabel(f : MmFloating) -> int {
	s2id(id2s(f.type) + "_" + ruMakeValidMmId(id2s(f.var)));
}

mmAllVars(sources : Tree<int, MmSource>) -> [MmFloating] {
	strip_name = \hyp -> MmFloating(hyp with label = mmMakeFloatingTypedLabel(hyp));
	filter_floatings = \hyps -> {
		filtermap(hyps, \hyp -> 
			switch (hyp) {
				MmFloating(__,__,__): Some(hyp);
				default: None();
			}
		)
	}
	all_vars = foldTree(sources, makeSet(), \__,src, acc ->
		fold(src.decls, acc, \ac, decl -> 
			switch (decl) {
				MmAssertion(__,__, hyps, inner,__): {
					fold(filter_floatings(concat(hyps, inner)), ac,
						\a, hyp -> insertSet(a, strip_name(hyp))
					)
				}
				default: ac;
			}
		)
	);
	sortCustom(set2array(all_vars), \v -> id2s(v.label), true);
}

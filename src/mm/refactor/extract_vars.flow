import base/path;
import mm/src;
import mm/proof_tree;
import comm;

export {
	mmSourcesExtractVars(sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmParseSource>;
	mmCommExtractVars : RuComm;
}

mmCommExtractVars = RuComm(
	RuCommInfo("extract-vars-mm", "misc", "extract common vars", "", false, false, [], []),
	\unit -> {
		env = ruUnitEnv(unit);
		task = unit.task;
		state = unit.state;
		sources = state.mm;
		conf = state.conf;
		Some(state);
	}
);

MmVarsPermutation(
	inds : [int]
);

mmSourcesExtractVars(sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmParseSource> {
	assertions = mmAssertions(sources);
	all_vars = mmAllVars(sources);
	vars_map = foldi(all_vars, makeTree(), \i, acc, var ->
		setTree(acc, var.label, i)
	);
	permutations = map(assertions, \ass -> {
		all_hyps = concat(ass.hyps, ass.inner);
		flows = mmAssertionFlos(all_hyps);
		fold(all_hyps, Pair([], 0), \acc, hyp -> {
			switch (hyp) {
				MmFloating(lab, type, var): {
					Pair(
						concat(acc.first, [lookupTreeDef(vars_map, var, -1)]),
						acc.second
					);
				}
				MmEssential(__, __): {
					Pair(
						concat(acc.first, [acc.second + length(flows)]),
						acc.second + 1
					);
				}
			}
		})
	});
	env.out.onMessage("mm vars:\n" +
		concatStrings(map(all_vars, \v -> "\t" + id2s(v.var) + " : " + id2s(v.type) + "\n"))
	);
	makeTree();
}

mmAddVars(vars : [MmFloating], sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmSource> {
	leaf_srcs = filter(getTreeValues(sources), \src -> src.imports == []);
	common_dir = ruPath2s(ruCommonDir(map(leaf_srcs, \src -> ruSplitPath(src.info.path))));
	path = common_dir + "vars.mm";
	module = ruTrimPath(path, env.conf, ".mm");
	module_id = s2id(module);
	vars_src = MmSource(
		[], 
		vars, 
		RuFileInfo(module_id, module, path, 0.0, ruIdsVersion())
	);
	fold(leaf_srcs, setTree(sources, module_id, vars_src), \acc, src ->
		setTree(acc, src.info.id, 
			MmSource([MmImport(module_id)], src.decls, src.info)
		)
	);
}

mmAllVars(sources : Tree<int, MmSource>) -> [MmFloating] {
	strip_name = \hyp -> MmFloating(hyp with label = hyp.var);
	filter_floatings = \hyps -> {
		filtermap(hyps, \hyp -> 
			switch (hyp) {
				MmFloating(__,__,__): Some(hyp);
				default: None();
			}
		)
	}
	all_vars = foldTree(sources, makeSet(), \__,src, acc ->
		fold(src.decls, acc, \ac, decl -> 
			switch (decl) {
				MmAssertion(__,hyps, inner,__): {
					fold(filter_floatings(inner),
						fold(filter_floatings(hyps), ac, \a, hyp -> 
							insertSet(a, strip_name(hyp))
						),
						\a, hyp -> insertSet(a, strip_name(hyp))
					)
				}
				default: ac;
			}
		)
	);
	sortCustom(set2array(all_vars), \v -> id2s(v.label), true);
}
import base/path;
import base/permute;
import base/db;
import mm/src;
import mm/proof_tree;
import comm;

export {
	mmSourcesExtractVars(sources : Tree<int, MmSource>, shorten_vars : bool, env : RuEnv) -> Tree<int, MmSource>;
	mmCommExtractVars : RuComm;
}

mmCommExtractVars = RuComm(
	RuCommInfo(
		"mm-extract-vars", "misc", "extract common vars", "", false, false, 
		[
			RuCommArg("shorten-vars", true, "set to 0 in order to keep vars name in the form <type>_<name>, otherwise vars names will be shortened", "0")
		], []
	),
	\unit -> {
		env = ruUnitEnv(unit);
		task = unit.task;
		state = unit.state;
		sources = state.mm;
		conf = state.conf;
		timer = ruMakeTimer();
		shorten_vars = lookupTreeDef(task.args, "shorten-vars", "0") == "1";
		extracted = mmSourcesExtractVars(sources, shorten_vars, env);
		if (ruVerbose(conf) > 0) {
			env.out.onMessage("mm vars are extracted in " + ruTimePassed2s(timer));
		}
		Some(RuState(state with 
			mm = extracted,
			vars = setTree(state.vars, 
				"mm-extract-vars.time", scDoubleVal(ruTimePassed(timer))
			)
		));
	}
);

mmSourcesExtractVars(sources : Tree<int, MmSource>, shorten_vars : bool, env : RuEnv) -> Tree<int, MmSource> {
	decls = mmSources2structs(sources);
	assertions = mmAssertions(sources);
	vars = mmAllVars(sources, env);
	vars_names = mmAllVarIds(vars, env);
	vars_labels = if (shorten_vars) {
		mmVarsShortRelabling(vars, assertions, decls.consts, env);
	} else {
		mmMakeVarsRelabling(vars, env);
	}
	relabeled_vars = map(vars, \v -> MmFloating(v with label = lookupTreeDef(vars_labels, v.label, -1)));
	vars_map = foldi(relabeled_vars, makeTree(), \i, acc, v ->
		setTree(acc, v.var, i)
	);
	local_flos = mmLocalFloatings(env);
	perms = mmMakeVarsPermutations(assertions, vars_map, local_flos, env);
	structs = MmStructs(mmSources2structs(sources) with vars = relabeled_vars);
	permuted_assertions = ruConcurrent(map(assertions, \ass -> \env1 ->
		mmApplyPermutation2Assertion(ass, perms, structs, vars_labels, local_flos, ref vars_names, env1)
	), env);
	perm_ass_tree = fold(permuted_assertions, makeTree(), \acc, ass ->
		setTree(acc, ass.stat.label, ass)
	);
	permuted = mapTree(sources, \src -> 
		mmApplyPermutation2Source(src, perm_ass_tree, env)
	);
	mmAddVars(relabeled_vars, permuted, env);
}

mmMakeVarsRelabling(vars : [MmFloating], env : RuEnv) -> Tree<int, int> {
	default_relabling = \ -> fold(vars, makeTree(), \acc, v -> 
		setTree(acc, v.label, v.label)
	);
	if (env.conf.project == "") {
		default_relabling();
	} else {
		floatings_json = ruGetDbItem(env.conf.project, ["toplevel_floatings"]);
		floatings_array = filtermap(getJsonArrayValue(floatings_json, []), mmJson2Floating);
		if (floatings_array == []) {
			default_relabling();
		} else {
			floatings_map = fold(floatings_array, makeTree(),\acc, flo -> setTree(acc, flo.var, flo));
			fold(vars, makeTree(), \acc, v -> 
				setTree(acc, v.label, lookupTreeDef(floatings_map, v.var, v).label)
			)
		}
	}
}

mmLocalFloatings(env : RuEnv) -> Tree<int, [MmFloating]> {
	if (env.conf.project == "") {
		makeTree();
	} else {
		locals_json = ruGetDbItem(env.conf.project, ["local_floatings"]);
		locals_array = map(getJsonObjectValue(locals_json, []), \p -> 
			Pair(p.first, filtermap(getJsonArrayValue(p.second, []), mmJson2Floating))
		);
		if (locals_array == []) {
			makeTree();
		} else {
			// Re-label those floatings, which label occur more then once in a list, like:
			/*
			"trujust": [
					{
						"label": "vx.tru",
						"type": "setvar",
						"var": "x"
					},
					{
						"label": "vy.tru",
						"type": "setvar",
						"var": "y"
					}
				],
				"df-tru": [
					{
						"label": "vx.tru",
						"type": "setvar",
						"var": "x"
					}
				],
				"tru": [
					{
						"label": "vx.tru",
						"type": "setvar",
						"var": "x"
					}
				],
			*/
			fold(locals_array, Pair(makeTree(), makeTree()), \acc, p -> {
				local_flos = map(p.second, \flo -> {
					count = lookupTreeDef(acc.second, flo.label, 0);
					MmFloating(flo with label = s2id(id2s(flo.label) + i2s(count)));
				});
				Pair(
					setTree(acc.first, s2id(p.first), local_flos),
					fold(p.second, acc.second, \ac, flo -> 
						setTree(ac, flo.label, lookupTreeDef(ac, flo.label, 0) + 1)
					)
				);
			}).first;
		}
	}
}

mmMakeVarsPermutations(assertions : [MmAssertion], vars_map : Tree<int, int>, local_flos : Tree<int, [MmFloating]>, env : RuEnv) -> Tree<int, [int]> {
	// Checks if a floating hyp is local or not.
	is_local = \ass, hyp -> {
		switch (lookupTree(local_flos, ass.stat.label)) {
			Some(locals): exists(locals, \loc -> loc.var == hyp.var);
			None(): false;
		}
	}
	pairs = ruConcurrent(map(assertions, \ass -> \env1 -> {
		all_flows = mmAssertionFlos(ass.hyps);
		flows = filter(all_flows, \flo -> !is_local(ass, flo));
		flows_inds = map(all_flows, \flo -> lookupTreeDef(vars_map, flo.var, -1));
		inds_ordered = sort(flows_inds);
		flows_perm = map(flows_inds, \ind -> elemIndex(inds_ordered, ind, -1));
		perm = fold(ass.hyps, Triple([], 0, 0), \ac, hyp -> {
			switch (hyp) {
				MmFloating(lab, type, var): {
					Triple(
						concat(ac.first, [flows_perm[ac.third]]),
						ac.second,
						ac.third + 1
					);
				}
				MmEssential(__, __): {
					Triple(
						concat(ac.first, [ac.second + length(all_flows)]),
						ac.second + 1,
						ac.third
					);
				}
			}
		}).first;
		Pair(ass.stat.label, ruReversePermutation(perm, env1));
	}), env);
	fold(pairs, makeTree(), \acc, p -> setTree(acc, p.first, p.second));
}

mmApplyPermutation2Source(src : MmSource, permuted : Tree<int, MmAssertion>, env : RuEnv) -> MmSource {
	MmSource(src with 
		decls = ruConcurrent(map(src.decls, \decl -> \env1 ->
			switch (decl) {
				MmAssertion(__,__,__,__,__,stat): 
					lookupTreeDef(permuted, stat.label, decl);
				default: 
					decl;
			}
		), env)
	);
}

mmMakeLocalVarName(v : int, count : int, global_vars : Set<int>) -> int {
	id = s2id(id2s(v) + i2s(count));
	if (!containsSet(global_vars, id)) id else mmMakeLocalVarName(v, count + 1, global_vars);
}

mmApplyPermutation2Assertion(
	ass : MmAssertion, perms : Tree<int, [int]>, 
	structs : MmStructs, relabling : Tree<int, int>, 
	local_flos : Tree<int, [MmFloating]>, global_vars_names : ref Set<int>,
	env : RuEnv
) -> MmAssertion {
	vars = mmAssertionFlos(ass.hyps);
	all_vars = mmAssertionFlos(concat(ass.hyps, ass.inner));
	vars_map1 = fold(all_vars, makeTree(), \acc, v -> 
		setTree(acc, v.label, lookupTreeDef(relabling, mmMakeFloatingTypedLabel(v), -1))
	);
	vars_map = fold(lookupTreeDef(local_flos, ass.stat.label, []), vars_map1, \acc, flo -> {
		switch (find(all_vars, \v -> v.var == flo.var))	{
			Some(v): setTree(acc, v.label, flo.label);
			None(): acc;
		}
	});
	rename_map = fold(lookupTreeDef(local_flos, ass.stat.label, []), makeTree(), \acc, v -> 
		if (!containsSet(^global_vars_names, v.var)) acc else {
			new_name = mmMakeLocalVarName(v.var, 1, ^global_vars_names);
			global_vars_names := insertSet(^global_vars_names, new_name);
			setTree(acc, v.var, new_name);
		}
	);
	rename_exp = \exp -> MmExp(map(exp.symbs, \s -> 
		if (!s.isVar) s else {
			switch (lookupTree(rename_map, s.literal)) {
				Some(id): MmSymb(id, s.isVar);
				None(): s;
			}
		}
	));
	relabel_vars = \hyps : [MmHyp] -> map(hyps,
		\hyp -> switch (hyp) {
			MmFloating(lab, type, var): {
				MmFloating(hyp with 
					label = lookupTreeDef(vars_map, lab, -1),
					var = lookupTreeDef(rename_map, var, var)
				);
			}
			MmEssential(lab, expr): {
				MmEssential(hyp with expr = rename_exp(expr));
			}
		}
	);
	make_outer = switch (lookupTree(local_flos, ass.stat.label)) {
		Some(locals): {
			\-> filtermap(all_vars, \v : MmFloating -> 
				if (exists(locals, \loc : MmFloating -> loc.var == v.var)) {
					None();
				} else {
					Some(lookupTreeDef(vars_map, v.label, -1));
				}
			);
		}
		None(): {
			\-> map(all_vars, \v -> lookupTreeDef(vars_map, v.label, -1));
		}
	}
	MmAssertion(
		ass.comment,
		map(ass.disjs, \disj -> MmDisj(map(disj.vars, \v -> lookupTreeDef(rename_map, v, v)))),
		make_outer(),
		relabel_vars(ruPermute(ass.hyps, lookupTreeDef(perms, ass.stat.label, []))),
		relabel_vars(ass.inner),
		switch (ass.stat) {
			MmAxiomatic(label, expr): {
				MmAxiomatic(label, rename_exp(expr));
			}
			MmProvable(label, expr, proof): {
				MmProvable(label, rename_exp(expr), 
					switch (proof) {
						MmNormalProof(labs): {
							switch (mmTheorem2MmProofTree(ass, ass.stat, structs, env)) {
								Some(proof_tree): {
									permuted_tree = mmApplyPermutation2ProofTree(proof_tree, perms, env);
									permuted_labs = mmProofTree2NormalProof(permuted_tree, env);
									renamed_labs = map(permuted_labs, \lab -> lookupTreeDef(vars_map, lab, lab));
									MmNormalProof(renamed_labs);
								}
								None(): {
									env.out.onError("Couldn't transform an RPN proof to tree", []);
									proof;
								}
							}
						}
						MmCompressedProof(__,__): {
							env.out.onError("Compressed proofs are not allowed at applying a permutations to assertion hyps", []);
							proof;
						}
					}
				);
			}
		}
	);
}

mmApplyPermutation2ProofTree(proof : MmProofTree, perms : Tree<int, [int]>, env : RuEnv) -> MmProofTree {
	switch (proof) {
		MmProofTreeHyp(h): proof;
		MmProofTreeStep(lab, hyps0): {
			hyps = map(hyps0, \hyp -> mmApplyPermutation2ProofTree(hyp, perms, env));
			perm = lookupTreeDef(perms, lab, []);
			MmProofTreeStep(lab, ruPermute(hyps, perm));
		}
	}
}

mmAddVars(vars : [MmFloating], sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmSource> {
	leaf_srcs = filter(getTreeValues(sources), \src -> src.imports == []);
	common_dir = ruPath2s(ruCommonDir(map(leaf_srcs, \src -> ruSplitPath(src.info.path))));
	path = common_dir + "vars.mm";
	module = ruTrimPath(path, env.conf, ".mm");
	module_id = s2id(module);

	types = fold(vars, makeSet(), \acc, v -> insertSet(acc, v.type));
	type_consts_removed = mapTree(sources, \src ->
		MmSource(src with 
			decls = filtermap(src.decls, \decl -> 
				switch (decl) {
					MmConst(symbs): {
						filtered = filter(symbs, \s -> !containsSet(types, s));
						if (filtered == []) None() else Some(MmConst(filtered));
					}
					default: Some(decl);
				}
			)
		)
	);

	vars_src = MmSource([], 
		concat([
			MmComment("Types (non-terminals) used in grammar"), 
			MmConst(set2array(types)),
			MmComment("$f - statements for all variables, used in source"), 
		], vars), 
		RuFileInfo(module_id, module, path, 0.0, ruIdsVersion())
	);
	fold(leaf_srcs, setTree(type_consts_removed, module_id, vars_src), \acc, src ->
		setTree(acc, src.info.id, 
			MmSource([MmImport(module_id)], src.decls, src.info)
		)
	);
}

mmMakeFloatingTypedLabel(f : MmFloating) -> int {
	s2id(id2s(f.type) + "_" + ruMakeValidMmId(id2s(f.var)));
}

mmAllVars(sources : Tree<int, MmSource>, env : RuEnv) -> [MmFloating] {
	srcs = getTreeValues(sources);
	srcs_vars = ruConcurrent(map(srcs, \src -> \env1 ->
		fold(src.decls, makeSet(), \ac, decl -> 
			switch (decl) {
				MmAssertion(__,__,__, hyps, inner,__): {
					fold(mmAssertionFlos(concat(hyps, inner)), ac, \a, hyp -> 
						insertSet(a, MmFloating(hyp with label = mmMakeFloatingTypedLabel(hyp)))
					)
				}
				default: ac;
			}
		)
	), env);
	all_vars = set2array(mergeSetsA(srcs_vars));
	sort_vars = \ -> sortCustom(all_vars, \v -> id2s(v.label), true);
	if (env.conf.project == "") {
		sort_vars() 
	} else {
		floatings_json = ruGetDbItem(env.conf.project, ["toplevel_floatings"]);
		floatings_array = filtermap(getJsonArrayValue(floatings_json, []), mmJson2Floating);
		if (floatings_array == []) {
			sort_vars();
		} else {
			// Reorder the variable by the order from the original <file>.mm file
			filtermap(floatings_array, \flo ->
				find(all_vars, \v -> v.var == flo.var)
			);
		}
	}
}

mmAllVarIds(flos : [MmFloating], env : RuEnv) -> Set<int> {
	var_ids = \ -> buildSet(map(flos, \v -> v.var));
	if (env.conf.project == "") {
		var_ids() 
	} else {
		vars_json = ruGetDbItem(env.conf.project, ["toplevel_vars"]);
		vars_json_array = getJsonArrayValue(vars_json, []);
		if (vars_json_array == []) {
			var_ids();
		} else {
			vars_array = filtermap(vars_json_array, \var_json -> {
				v = getJsonStringValue(var_json, "");
				if (v == "") None() else Some(s2id(v));
			});
			if (length(vars_array) != length(vars_json_array)) {
				var_ids();
			} else {
				buildSet(vars_array);
			}
		}
	}
}

mmVarsShortRelabling(vars : [MmFloating], assertions : [MmAssertion], consts : Set<int>, env : RuEnv) -> Tree<int, int> {
	labels = mergeSets(fold(assertions, makeSet(), \acc, ass -> insertSet(acc, ass.stat.label)), consts);
	types = set2array(fold(vars, makeSet(), \acc, v -> insertSet(acc, v.type)));
	mmDoVarsShortRelabling(types, vars, labels, 1);
}

mmDoVarsShortRelabling(types : [int], vars : [MmFloating], labels : Set<int>, i : int) -> Tree<int, int> {
	max_type_len = fold(types, 0, \acc, tp -> max(acc, strlen(id2s(tp))));
	if (i > max_type_len) {
		ruCrash("var names collision: some type has a variale with the same name and different labels. Must not happen");
		makeTree();
	} else {
		type_relablings = map(types, \tp -> {
			tp_vars = filter(vars, \v -> v.type == tp);
			mmFindTypeShortRelabling(id2s(tp), tp_vars, labels, i);
		});
		relabling = mergeTrees(type_relablings);
		if (sizeSet(buildSet(getTreeValues(relabling))) == length(vars)) relabling else {
			mmDoVarsShortRelabling(types, vars, labels, i + 1);
		}
	}
}

mmFindTypeShortRelabling(type : string, vars : [MmFloating], labels : Set<int>, i : int) -> Tree<int, int> {
	if (i > strlen(type)) {
		ruCrash("var names collision: some type has a variale with the same name and different labels. Must not happen");
		makeTree();
	} else {
		prefix = strLeft(type, i);
		relabling = fold(vars, makeTree(), \acc, v ->
			setTree(acc, v.label, s2id(prefix + ruMakeValidMmId(id2s(v.var))))
		);
		if (!mmVarTypeShortLabelsHaveCollision(relabling, vars, labels)) relabling else {
			mmFindTypeShortRelabling(type, vars, labels, i + 1);
		}
	}
}

mmVarTypeShortLabelsHaveCollision(relabling : Tree<int, int>, vars : [MmFloating], labels : Set<int>) -> bool {
	vars_collision = sizeSet(buildSet(getTreeValues(relabling))) < length(vars);
	labels_collision = exists(getTreeValues(relabling), \lab -> containsSet(labels, lab));
	vars_collision || labels_collision;
}

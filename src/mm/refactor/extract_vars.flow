import base/path;
import base/permute;
import base/db;
import mm/src;
import mm/proof_tree;
import comm;

export {
	mmSourcesExtractVars(sources : Tree<int, MmSource>, shorten_vars : bool, env : RuEnv) -> Tree<int, MmSource>;
	mmCommExtractVars : RuComm;
}

mmCommExtractVars = RuComm(
	RuCommInfo(
		"mm-extract-vars", "misc", "extract common vars", "", false, false, 
		[
			RuCommArg("shorten-vars", true, "set to 0 in order to keep vars name in the form <type>_<name>, otherwise vars names will be shortened", "1")
		], []
	),
	\unit -> {
		env = ruUnitEnv(unit);
		task = unit.task;
		state = unit.state;
		sources = state.mm;
		conf = state.conf;
		timer = ruMakeTimer();
		shorten_vars = lookupTreeDef(task.args, "shorten-vars", "1") == "1";
		extracted = mmSourcesExtractVars(sources, shorten_vars, env);
		if (ruVerbose(conf) > 0) {
			env.out.onMessage("mm vars are extracted in " + ruTimePassed2s(timer));
		}
		Some(RuState(state with 
			mm = extracted,
			vars = setTree(state.vars, 
				"mm-extract-vars.time", ValDouble(ruTimePassed(timer))
			)
		));
	}
);

mmSourcesExtractVars(sources : Tree<int, MmSource>, shorten_vars : bool, env : RuEnv) -> Tree<int, MmSource> {
	decls = mmSources2structs(sources);
	assertions = mmAssertions(sources);
	vars = mmAllVars(sources, env);
	vars_labels = if (shorten_vars) {
		mmVarsShortRelabling(vars, assertions, decls.consts, env);
	} else {
		fold(vars, makeTree(), \acc, v -> setTree(acc, v.label, v.label));
	}
	relabeled_vars = map(vars, \v -> MmFloating(v with label = lookupTreeDef(vars_labels, v.label, -1)));
	vars_map = foldi(relabeled_vars, makeTree(), \i, acc, v ->
		setTree(acc, v.var, i)
	);
	perms = mmMakeVarsPermutations(assertions, vars_map, env);
	structs = MmStructs(mmSources2structs(sources) with vars = relabeled_vars);
	permuted_assertions = ruConcurrent(map(assertions, \ass -> \env1 -> 
		mmApplyPermutation2Assertion(ass, perms, structs, vars_labels, env1)
	), env);
	perm_ass_tree = fold(permuted_assertions, makeTree(), \acc, ass ->
		setTree(acc, ass.stat.label, ass)
	);
	permuted = mapTree(sources, \src -> 
		mmApplyPermutation2Source(src, perm_ass_tree, env)
	);
	mmAddVars(relabeled_vars, permuted, env);
}

mmMakeVarsPermutations(assertions : [MmAssertion], vars_map : Tree<int, int>, env : RuEnv) -> Tree<int, [int]> {
	pairs = ruConcurrent(map(assertions, \ass -> \env1 -> {
		flows = mmAssertionFlos(ass.hyps);
		flows_inds = map(flows, \flo -> lookupTreeDef(vars_map, flo.var, -1));
		inds_ordered = sort(flows_inds);
		flows_perm = map(flows_inds, \ind -> elemIndex(inds_ordered, ind, -1));
		perm = fold(ass.hyps, Triple([], 0, 0), \ac, hyp -> {
			switch (hyp) {
				MmFloating(lab, type, var): {
					Triple(
						concat(ac.first, [flows_perm[ac.third]]),
						ac.second,
						ac.third + 1
					);
				}
				MmEssential(__, __): {
					Triple(
						concat(ac.first, [ac.second + length(flows)]),
						ac.second + 1,
						ac.third
					);
				}
			}
		}).first;
		Pair(ass.stat.label, ruReversePermutation(perm, env1));
	}), env);
	fold(pairs, makeTree(), \acc, p -> setTree(acc, p.first, p.second));
}

mmApplyPermutation2Source(src : MmSource, permuted : Tree<int, MmAssertion>, env : RuEnv) -> MmSource {
	MmSource(src with 
		decls = ruConcurrent(map(src.decls, \decl -> \env1 ->
			switch (decl) {
				MmAssertion(__,__,__,__,stat): 
					lookupTreeDef(permuted, stat.label, decl);
				default: 
					decl;
			}
		), env)
	);
}

mmApplyPermutation2Assertion(ass : MmAssertion, perms : Tree<int, [int]>, structs : MmStructs, relabling : Tree<int, int>, env : RuEnv) -> MmAssertion {
	vars = mmAssertionFlos(ass.hyps);
	all_vars = mmAssertionFlos(concat(ass.hyps, ass.inner));
	vars_map = fold(all_vars, makeTree(), \acc, v -> 
		setTree(acc, v.label, lookupTreeDef(relabling, mmMakeFloatingTypedLabel(v), -1))
	);
	rename_vars = \hyps : [MmHyp] -> map(hyps,
		\hyp -> switch (hyp) {
			MmFloating(lab, type, var): MmFloating(hyp with label = lookupTreeDef(vars_map, lab, lab));
			default: hyp;
		}
	);
	MmAssertion(ass with
		outer = true,
		hyps = rename_vars(ruPermute(ass.hyps, lookupTreeDef(perms, ass.stat.label, []))),
		inner = rename_vars(ass.inner),
		stat = switch (ass.stat) {
			MmAxiomatic(__,__): ass.stat;
			MmProvable(__,__,proof): {
				switch (proof) {
					MmNormalProof(labs): {
						switch (mmTheorem2MmProofTree(ass, ass.stat, structs, env)) {
							Some(proof_tree): {
								permuted_tree = mmApplyPermutation2ProofTree(proof_tree, perms, env);
								permuted_labs = mmProofTree2NormalProof(permuted_tree, env);
								renamed_labs = map(permuted_labs, \lab -> lookupTreeDef(vars_map, lab, lab));
								MmProvable(ass.stat with proof = MmNormalProof(renamed_labs));
							}
							None(): {
								env.out.onError("Couldn't transform an RPN proof to tree", []);
								ass.stat;
							}
						}
					}
					MmCompressedProof(__,__): {
						env.out.onError("Compressed proofs are not allowed at applying a permutations to assertion hyps", []);
						ass.stat;
					}
				}
			}
		}
	);
}

mmApplyPermutation2ProofTree(proof : MmProofTree, perms : Tree<int, [int]>, env : RuEnv) -> MmProofTree {
	switch (proof) {
		MmProofTreeHyp(h): proof;
		MmProofTreeStep(lab, hyps0): {
			hyps = map(hyps0, \hyp -> mmApplyPermutation2ProofTree(hyp, perms, env));
			perm = lookupTreeDef(perms, lab, []);
			MmProofTreeStep(lab, ruPermute(hyps, perm));
		}
	}
}

mmAddVars(vars : [MmFloating], sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmSource> {
	leaf_srcs = filter(getTreeValues(sources), \src -> src.imports == []);
	common_dir = ruPath2s(ruCommonDir(map(leaf_srcs, \src -> ruSplitPath(src.info.path))));
	path = common_dir + "vars.mm";
	module = ruTrimPath(path, env.conf, ".mm");
	module_id = s2id(module);

	types = fold(vars, makeSet(), \acc, v -> insertSet(acc, v.type));
	type_consts_removed = mapTree(sources, \src ->
		MmSource(src with 
			decls = filtermap(src.decls, \decl -> 
				switch (decl) {
					MmConst(symbs): {
						filtered = filter(symbs, \s -> !containsSet(types, s));
						if (filtered == []) None() else Some(MmConst(filtered));
					}
					default: Some(decl);
				}
			)
		)
	);

	vars_src = MmSource([], 
		concat([
			MmComment("Types (non-terminals) used in grammar"), 
			MmConst(set2array(types)),
			MmComment("$f - statements for all variables, used in source"), 
		], vars), 
		RuFileInfo(module_id, module, path, 0.0, ruIdsVersion())
	);
	fold(leaf_srcs, setTree(type_consts_removed, module_id, vars_src), \acc, src ->
		setTree(acc, src.info.id, 
			MmSource([MmImport(module_id)], src.decls, src.info)
		)
	);
}

mmMakeFloatingTypedLabel(f : MmFloating, ) -> int {
	s2id(id2s(f.type) + "_" + ruMakeValidMmId(id2s(f.var)));
}

mmAllVars(sources : Tree<int, MmSource>, env : RuEnv) -> [MmFloating] {
	strip_name = \hyp -> MmFloating(hyp with label = mmMakeFloatingTypedLabel(hyp));
	srcs = getTreeValues(sources);
	srcs_vars = ruConcurrent(map(srcs, \src -> \env1 ->
		fold(src.decls, makeSet(), \ac, decl -> 
			switch (decl) {
				MmAssertion(__,__, hyps, inner,__): {
					fold(mmAssertionFlos(concat(hyps, inner)), ac, \a, hyp -> 
						insertSet(a, MmFloating(hyp with label = mmMakeFloatingTypedLabel(hyp)))
					)
				}
				default: ac;
			}
		)
	), env);
	all_vars = set2array(mergeSetsA(srcs_vars));
	sort_vars = \ -> sortCustom(all_vars, \v -> id2s(v.label), true);
	if (env.conf.project == "") {
		sort_vars() 
	} else {
		floatings_json = ruGetDbItem(env.conf.project, ["floatings"]);
		floatings_array = map(getJsonObjectValue(floatings_json, []), \p -> 
			Pair(s2id(p.first), s2id(getJsonStringValue(p.second, "")))
		);
		if (floatings_array == []) {
			sort_vars();
		} else {
			// Reorder the variable by the order from the original <file>.mm file
			vars = filtermap(floatings_array, \flo ->
				find(all_vars, \v -> 
					v.var == flo.second
				)
			);
			fold(vars, [], \acc, v -> 
				if (exists(acc, \w -> w.var == v.var)) acc else concat(acc, [v])
			);
		}
	}
}

mmVarsShortRelabling(vars : [MmFloating], assertions : [MmAssertion], consts : Set<int>, env : RuEnv) -> Tree<int, int> {
	make_relabing = \ -> {
		labels = mergeSets(fold(assertions, makeSet(), \acc, ass -> insertSet(acc, ass.stat.label)), consts);
		types = set2array(fold(vars, makeSet(), \acc, v -> insertSet(acc, v.type)));
		mmDoVarsShortRelabling(types, vars, labels, 1);
	}
	if (env.conf.project == "") make_relabing() else {
		floatings_json = ruGetDbItem(env.conf.project, ["floatings"]);
		floatings_array = map(getJsonObjectValue(floatings_json, []), \p -> 
			Pair(s2id(p.first), s2id(getJsonStringValue(p.second, "")))
		);
		if (floatings_array == []) {
			make_relabing();
		} else {
			floatings_map = fold(floatings_array, makeTree(), \acc, p -> 
				setTree(acc, p.second, p.first)
			);
			err = ref false;
			relabling = fold(vars, makeTree(), \acc, flo -> {
				mm_label = lookupTreeDef(floatings_map, flo.var, -1);
				if (mm_label == -1) {
					err := true;
				}
				setTree(acc, flo.label, mm_label);
			});
			if (^err) make_relabing() else relabling;
		}
	}
}

mmDoVarsShortRelabling(types : [int], vars : [MmFloating], labels : Set<int>, i : int) -> Tree<int, int> {
	max_type_len = fold(types, 0, \acc, tp -> max(acc, strlen(id2s(tp))));
	if (i > max_type_len) {
		ruCrash("var names collision: some type has a variale with the same name and different labels. Must not happen");
		makeTree();
	} else {
		type_relablings = map(types, \tp -> {
			tp_vars = filter(vars, \v -> v.type == tp);
			mmFindTypeShortRelabling(id2s(tp), tp_vars, labels, i);
		});
		relabling = mergeTrees(type_relablings);
		if (sizeSet(buildSet(getTreeValues(relabling))) == length(vars)) relabling else {
			mmDoVarsShortRelabling(types, vars, labels, i + 1);
		}
	}
}

mmFindTypeShortRelabling(type : string, vars : [MmFloating], labels : Set<int>, i : int) -> Tree<int, int> {
	if (i > strlen(type)) {
		ruCrash("var names collision: some type has a variale with the same name and different labels. Must not happen");
		makeTree();
	} else {
		prefix = strLeft(type, i);
		relabling = fold(vars, makeTree(), \acc, v ->
			setTree(acc, v.label, s2id(prefix + ruMakeValidMmId(id2s(v.var))))
		);
		if (!mmVarTypeShortLabelsHaveCollision(relabling, vars, labels)) relabling else {
			mmFindTypeShortRelabling(type, vars, labels, i + 1);
		}
	}
}

mmVarTypeShortLabelsHaveCollision(relabling : Tree<int, int>, vars : [MmFloating], labels : Set<int>) -> bool {
	vars_collision = sizeSet(buildSet(getTreeValues(relabling))) < length(vars);
	labels_collision = exists(getTreeValues(relabling), \lab -> containsSet(labels, lab));
	vars_collision || labels_collision;
}

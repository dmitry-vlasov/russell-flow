import mm/src;
import comm;

export {
	mmCommExtractTheorems : RuComm;
}

mmCommExtractTheorems = RuComm(
	RuCommInfo(
		"mm-extract-theorems", "refactor", "leave only theorems and relable them to make a new ones", "", false, false, 
		[RuCommArg("postfix", true, "update extracted theorem names with a given string postfix", "_ext")], []
	),
	mmRunExtractTheorems
);

mmRunExtractTheorems(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	sources = state.mm;
	conf = state.conf;
	timer = ruMakeTimer();
	postfix = lookupTreeDef(task.args, "postfix", "_ext");
	extracted = mmExtractTheorems(sources, postfix);
	extracted_theorems = mmProvable(extracted);
	if (ruVerbose(conf) > 0) {
		env.out.onMessage("mm extracted " + i2s(length(extracted_theorems)) + " theorems in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		mm = extracted,
		vars = setTree(state.vars, "mm-extract-theorems", pairs2tree([
			Pair("time", flow(ruTimePassed(timer))),
			Pair("size", flow(length(extracted_theorems)))
		]))
	));
}

mmExtractTheorems(sources : Tree<int, MmSource>, postfix : string) -> Tree<int, MmSource> {
	relabel = if (postfix == "") idfn else \label -> s2id(id2s(label) + postfix);
	mapTree(sources, \src ->
		MmSource(src with
			decls = filtermap(src.decls, \decl ->
				switch (decl) {
					MmAssertion(__,__,__,__,__, stat): {
						switch (stat) {
							MmProvable(label, expr, proof): {
								Some(MmAssertion(decl with 
									stat = MmProvable(
										relabel(label), expr, proof
									)
								));
							}
							default: None();
						}
					}
					default: None();
				}
			)
		)
	);
}

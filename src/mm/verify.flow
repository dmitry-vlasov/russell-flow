import math/stringmath;
import base/ru_conf;
import mm/src;

export {
	mmVerifyMath(math : MmMath, conf : RuConf) -> Maybe<MmMath>;
}

mmVerifyMath(math : MmMath, conf0 : RuConf) -> Maybe<MmMath> {
	err_count = ref 0;
	conf = ruAddErrCounter(conf0, err_count);
	start = timestamp();
	verified = all(map(getTreeValues(math.sources), \s -> mmVerifySource(s, math, conf)));
	if (conf.verbose > 0) {
		conf.onMessage("mm verified: " +i2s(sizeTree(math.sources)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	if (^err_count == 0) {
		Some(math);
	} else {
		None();
	}
}

mmVerifySource(src : MmSource, math : MmMath, conf : RuConf) -> bool {
	start = timestamp();
	theorems = filtermap(src.decls, \decl ->
		switch (decl) {
			MmAssertion(__,__,__,stat): 
				switch (stat) {
					MmProvable(__,__,__): Some(decl);
					default: None();
				}
			default: None();
		}
	);
	ret = all(ruConcurrent(map(theorems, \decl -> \-> mmVerifyAssertion(decl, math, conf))));
	if (conf.verbose > 1) {
		conf.onMessage("\tmm verified: '" + src.info.module + "' in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	ret;
}

MmExecutionAcc(
	stack : List<MmExp>,
	essentials : List<MmExpPair>,
	subst : Tree<string, MmExp>
);

MmExpPair(
	fromStack : MmExp,
	fromHyp   : MmExp
);

mmPickFromStack(stack : List<MmExp>, hyps : [MmHyp], conf : RuConf) -> Maybe<MmExecutionAcc> {
	fold(hyps, Some(MmExecutionAcc(stack, makeList(), makeTree())),
		\macc, hyp -> {
			maybeBind(macc,
				\acc -> {
					if (isEmptyList(acc.stack)) {
						conf.onError("empty stack in the middle of proof", []);
						None();
					} else {
						e = headList(acc.stack, MmExp([]));
						switch (hyp) {
							MmEssential(__, expr):
								Some(MmExecutionAcc(
									tailList(acc.stack), 
									Cons(MmExpPair(e, expr), acc.essentials), 
									acc.subst
								));
							MmFloating(__, type, var): {
								if (length(e.symbs) == 0) {
									conf.onError("empty expression on stack", []);
									None();
								} else {
									e_type = e.symbs[0].literal;
									if (e_type != type) {
										conf.onError("wrong type of expression on stack: " + e_type + " != " + type, []);
										None()
									} else {
										e_expr = MmExp(tail(e.symbs));
										Some(MmExecutionAcc(
											tailList(acc.stack),
											acc.essentials,
											setTree(acc.subst, var, e_expr)
										));
									}
								}
							}
						}
					}
				}
			)
		}
	)
}

mmCheckSubstitution(subst : Tree<string, MmExp>, disj : [MmDisj], theorem : MmAssertion, conf : RuConf) -> bool {
	forall(disj, \dis -> {
			mapped = fold(dis.vars, [], 
				\acc, v -> switch(lookupTree(subst, v)) {
					Some(e): concat(acc, [e]);
					None(): acc;
				}
			);
			getVars = \e : MmExp -> fold(e.symbs, makeSet(), \acc, symb -> if (symb.isVar) insertSet(acc, symb.literal) else acc);
			foldi(mapped, true, \i, acc1, e1 -> 
				foldi(mapped, acc1, \j, acc2, e2 -> 
					if (j <= i || !acc2) acc2 else {
						vars1 = getVars(e1);
						vars2 = getVars(e2);
						if (!isEmptySet(intersectSets(vars1, vars2))) {
							conf.onError("expressions " + mm2s(e1) + " and " + mm2s(e2) + " have common vars - disjointed restrictions violation", []);
							false;
						} else {
							foldSet(vars1, true, \ac1, v1 ->
								foldSet(vars2, ac1, \ac2, v2 -> {
										ret = exists(theorem.disjs,
											\d -> contains(d.vars, v1) && contains(d.vars, v2)
										);
										if (!ret) {
											conf.onError("variables " + v1 + " and " + v2 + " are not inherently disjointed in theorem " + theorem.stat.label, []);
										}
										ret
									}
								)
							)
						}
					}
				)
			)
		}
	)
}

mmExecuteRPNstep(label : string, mstack : Maybe<List<MmExp>>, entities : Tree<string, MmLabeled>, theorem : MmAssertion, conf : RuConf) -> Maybe<List<MmExp>> {
	maybeBind(mstack, 
		\stack -> {
			switch (lookupTree(entities, label)) {
				Some(labeled): {
					switch (labeled) {
						MmAssertion(disj, hyps, inner, statement): {
							maybeBind(mmPickFromStack(stack, reverseA(hyps), conf),
								\acc -> {
									if (forall(list2array(acc.essentials), \pair -> {
											applied = mmApplySubst(pair.fromHyp, acc.subst);
											if (applied != pair.fromStack) {
												conf.onError("applied expression differs from stack value: " + mm2s(applied) + " != " + mm2s(pair.fromStack), []);
												false;
											} else {
												true;
											}
										}
									)) {
										applied = mmApplySubst(statement.expr, acc.subst);
										if (mmCheckSubstitution(acc.subst, disj, theorem, conf)) {
											Some(Cons(applied, acc.stack));
										} else {
											None();
										}
									} else {
										None();
									}
								}
							)
						}
						MmEssential(__, expr): Some(Cons(expr, stack));
						MmFloating(__, type, var): Some(Cons(MmExp([MmSymb(type, false), MmSymb(var, true)]), stack));
					}
				}
				None(): {
					conf.onError("unknown label: " + label, []);
					None();
				}
			}
		}
	)
}

mmVerifyAssertion(assertion : MmAssertion, math : MmMath, conf : RuConf) -> bool {
	ret = switch(assertion.stat) {
		MmAxiomatic(__,__): true;
		MmProvable(th_label, expr, proof): {
			maybe_stack = fold(proof.labels, Some(makeList()),
				\stack, label -> mmExecuteRPNstep(label, stack, math.labeled, assertion, conf)
			);
			eitherMap(maybe_stack,
				\stack -> {
					if (!isEmptyList(tailList(stack))) {
						conf.onError("non-empty stack at the end of proof", []);
						false;
					} else if (expr != headList(stack, MmExp([]))) {
						head = headList(stack, MmExp([]));
						conf.onError("expression on the top of the stack differs from provable expression: " + mm2s(expr) + " != " + mm2s(head), []);
						false;
					} else {
						true;
					}
				},
				false
			)
		}
	};
	if (!ret) {
		conf.onError("proof of " + assertion.stat.label + " is wrong", []);
	} else {
		if (conf.verbose > 2) {
			switch(assertion.stat) {
				MmProvable(__,__,__): conf.onMessage("theorem " + assertion.stat.label + " is verified");
				default: {}
			}
		}
	}
	ret
}

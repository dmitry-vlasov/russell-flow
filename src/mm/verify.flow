import mm/src_utils;
import comm;

export {
	MmExpPair(
		fromStack : MmExp,
		fromHyp   : MmExp
	);
	mmCommVerifyMm : RuComm;
}

mmCommVerifyMm = RuComm(
	RuCommDescr(
		"mm-verify", "misc", "verify Metamath", "file", true, false, 
		[
			RuCommArg("file", true, "input file", ""),
			RuCommArg("stack-trace", true, "comma separated list of theorems, at which print a stack trace during verification", ""),
		], []
	),
	mmRunVerifyMm
);

mmRunVerifyMm(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	sources = state.mm;
	stack_trace = map(filter(strSplit(lookupTreeDef(unit.task.args, "stack-trace", ""), ","), isNotSpace), s2id);
	timer = ruMakeTimer();
	if (!mmVerifyMath(sources, env, stack_trace)) None() else {
		Some(RuState(state with
			vars = setTree(setTree(state.vars,
				"mm-verify.time", ValDouble(ruTimePassed(timer))),
				"mm-verify.size", ValInt(sizeTree(sources))
			)
		));
	}
}

mmVerifyMath(sources : Tree<int, MmSource>, env0 : RuEnv, stack_trace : [int]) -> bool {
	err_count = ref 0;
	env = ruAddErrCounter2Env(env0, err_count);
	timer = ruMakeTimer();
	structs = mmSources2structs(sources); 
	verified = all(map(getTreeValues(sources), \s -> mmVerifySource(s, structs, env, stack_trace)));
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("mm verified: " +i2s(sizeTree(sources)) + " files in " + ruTimePassed2s(timer));
	}
	^err_count == 0;
}

mmVerifySource(src : MmSource, structs : MmStructs, env : RuEnv, stack_trace : [int]) -> bool {
	timer = ruMakeTimer();
	ret = all(ruConcurrent(map(src.decls, \decl -> 
		\-> mmVerifyDecl(decl, structs, env, stack_trace)
	)));
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tmm verified: '" + src.info.module + "' in " + ruTimePassed2s(timer));
	}
	ret;
}

mmVerifyDecl(decl : MmDecl, structs : MmStructs, env : RuEnv, stack_trace : [int]) -> bool {
	switch (decl) {
		MmAssertion(__,__,__,stat): 
			switch (stat) {
				MmProvable(__,__,__): mmVerifyAssertion(decl, structs, env, stack_trace);
				default: true;
			}
		default: true;
	}
}

MmExecutionAcc(
	stack : List<MmExp>,
	essentials : List<MmExpPair>,
	subst : Tree<int, MmExp>
);

mmPickFromStack(stack : List<MmExp>, hyps : [MmHyp], env : RuEnv) -> Maybe<MmExecutionAcc> {
	fold(hyps, Some(MmExecutionAcc(stack, makeList(), makeTree())),
		\macc, hyp -> {
			maybeBind(macc,
				\acc -> {
					if (isEmptyList(acc.stack)) {
						env.out.onError("empty stack in the middle of proof", []);
						None();
					} else {
						e = headList(acc.stack, MmExp([]));
						switch (hyp) {
							MmEssential(__, expr):
								Some(MmExecutionAcc(
									tailList(acc.stack), 
									Cons(MmExpPair(e, expr), acc.essentials), 
									acc.subst
								));
							MmFloating(__, type, var): {
								if (length(e.symbs) == 0) {
									env.out.onError("empty expression on stack", []);
									None();
								} else {
									e_type = e.symbs[0].literal;
									if (e_type != type) {
										env.out.onError("wrong type of expression on stack: " + id2s(e_type) + " != " + id2s(type), []);
										None()
									} else {
										e_expr = MmExp(tail(e.symbs));
										Some(MmExecutionAcc(
											tailList(acc.stack),
											acc.essentials,
											setTree(acc.subst, var, e_expr)
										));
									}
								}
							}
						}
					}
				}
			)
		}
	)
}

mmCheckSubstitution(subst : Tree<int, MmExp>, disj : [MmDisj], theorem : MmAssertion, env : RuEnv) -> bool {
	forall(disj, \dis -> {
			mapped = fold(dis.vars, [], 
				\acc, v -> switch(lookupTree(subst, v)) {
					Some(e): concat(acc, [e]);
					None(): acc;
				}
			);
			getVars = \e : MmExp -> fold(e.symbs, makeSet(), \acc, symb -> if (symb.isVar) insertSet(acc, symb.literal) else acc);
			foldi(mapped, true, \i, acc1, e1 -> 
				foldi(mapped, acc1, \j, acc2, e2 -> 
					if (j <= i || !acc2) acc2 else {
						vars1 = getVars(e1);
						vars2 = getVars(e2);
						if (!isEmptySet(intersectSets(vars1, vars2))) {
							env.out.onError("expressions " + mm2s(e1) + " and " + mm2s(e2) + " have common vars - disjointed restrictions violation", []);
							false;
						} else {
							foldSet(vars1, true, \ac1, v1 ->
								foldSet(vars2, ac1, \ac2, v2 -> {
										ret = exists(theorem.disjs,
											\d -> contains(d.vars, v1) && contains(d.vars, v2)
										);
										if (!ret) {
											env.out.onError("variables " + id2s(v1) + " and " + id2s(v2) + " are not inherently disjointed in theorem " + id2s(theorem.stat.label), []);
										}
										ret
									}
								)
							)
						}
					}
				)
			)
		}
	)
}

mmVerifyRPNstep(label : int, mstack : Maybe<List<MmExp>>, entities : Tree<int, MmLabeled>, theorem : MmAssertion, env : RuEnv) -> Maybe<List<MmExp>> {
	maybeBind(mstack, 
		\stack -> {
			switch (lookupTree(entities, label)) {
				Some(labeled): {
					switch (labeled) {
						MmAssertion(disj, hyps, inner, statement): {
							maybeBind(mmPickFromStack(stack, reverseA(hyps), env),
								\acc -> {
									if (forall(list2array(acc.essentials), \pair -> {
											applied = mmApplySubst(pair.fromHyp, acc.subst);
											if (applied != pair.fromStack) {
												env.out.onError("applied expression differs from stack value: " + mm2s(applied) + " != " + mm2s(pair.fromStack), []);
												false;
											} else {
												true;
											}
										}
									)) {
										applied = mmApplySubst(statement.expr, acc.subst);
										if (mmCheckSubstitution(acc.subst, disj, theorem, env)) {
											Some(Cons(applied, acc.stack));
										} else {
											None();
										}
									} else {
										None();
									}
								}
							)
						}
						MmEssential(__, expr): Some(Cons(expr, stack));
						MmFloating(__, type, var): Some(Cons(MmExp([MmSymb(type, false), MmSymb(var, true)]), stack));
					}
				}
				None(): {
					env.out.onError("unknown label: " + id2s(label), []);
					None();
				}
			}
		}
	)
}

mmVerifyAssertion(assertion : MmAssertion, structs : MmStructs, env : RuEnv, stack_trace : [int]) -> bool {
	ret = switch(assertion.stat) {
		MmAxiomatic(__,__): true;
		MmProvable(th_label, expr, proof): {
			trace = contains(stack_trace, th_label);
			if (trace) {
				env.out.onMessage("Tracing verification stack of " + id2s(th_label));
			}
			switch (proof) {
				MmNormalProof(labels): {
					maybe_stack = fold(labels, Some(makeList()),
						\stack, label -> {
							if (trace) {
								env.out.onMessage(id2s(label) + ":");
							}
							new_stack = mmVerifyRPNstep(label, stack, structs.labeled, assertion, env);
							if (trace) {
								switch (new_stack) {
									Some(s): {
										env.out.onMessage(
											strIndent(strGlue(map(list2array(s), mm2s), "\n")) + "\n"
										);
									}
									None(): env.out.onMessage("\t<EMPTY STACK>\n");
								}
							}
							new_stack;
						}
					);
					eitherMap(maybe_stack,
						\stack -> {
							if (!isEmptyList(tailList(stack))) {
								env.out.onError("non-empty stack at the end of proof", []);
								false;
							} else if (expr != headList(stack, MmExp([]))) {
								head = headList(stack, MmExp([]));
								env.out.onError("expression on the top of the stack differs from provable expression: " + mm2s(expr) + " != " + mm2s(head), []);
								false;
							} else {
								true;
							}
						},
						false
					)
				}
				MmCompressedProof(__,__): {
					env.out.onError("Decompress proofs before verification", []);
					quit(0);
					false;
				}
			}
		}
	};
	if (!ret) {
		env.out.onError("proof of " + id2s(assertion.stat.label) + " is wrong", []);
	} else {
		if (ruVerbose(env.conf) > 2) {
			switch(assertion.stat) {
				MmProvable(__,__,__): env.out.onMessage("theorem " + id2s(assertion.stat.label) + " is verified");
				default: {}
			}
		}
	}
	ret
}

import base/util/timer;
import base/html/html2md;
import base/concurrent;
import mm/symbols;

export {
	mmHtml2md(sources : [MmSource], env : RuEnv) -> [MmSource];
}

mmHtml2md(sources : [MmSource], env : RuEnv) -> [MmSource] {
	if (length(sources) == 1) {
		[mmSourceHtml2md(sources[0], env)];
	} else {
		ruConcurrent(map(sources, \src -> \e -> mmSourceHtml2md(src, e)), env);
	}
}

mmSourceHtml2md(src : MmSource, env : RuEnv) -> MmSource {
	MmSource(src with 
		decls = map(src.decls, \decl -> 
			switch (decl) {
				MmComment(text):
					mmCommentHtml2md(decl, env);
				MmAssertion(comment, __,__,__,__,__):
					MmAssertion(decl with comment = mmCommentHtml2md(comment, env));
				default: 
					decl;
			}
		);
	)
}

mmCommentHtml2md(comm : MmComment, env : RuEnv) -> MmComment {
	text = if (lookupTreeDef(env.conf.opts, "mm-ascii", "") == "1") comm.text else {
		html2md = ruTransformQuoted2(comm.text, "<HTML>", "</HTML>", \t -> {
			html = parseHtml(t);
			if (html.second == "") {
				ruHtml2md(html.first);
			} else {
				env.out.error("Error:\n" + html.second + "\n" + "wile parsing HTML:\n" + t, []);
				t
			}
		});
		ruTransformTokensInQuoted(html2md, "`", \t -> 
			switch (lookupTree(mmSymbTable(), s2id_(t))) {
				Some(const): id2s(const.id);
				None(): t;
			}
		);
	};
	MmComment(strReplace(strReplace(text, "/*", "/ *"), "*/", "* /"));
}

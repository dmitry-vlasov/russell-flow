import mm/src_utils;

export {
	MmRuProofTree ::= MmRuProofTreeStep, MmRuProofTreeHyp, MmRuProofTreeNone;
		MmRuProofTreeStep(name  : int, expr  : MmExp, refs : [MmRuProofTree]);
		MmRuProofTreeHyp(ind : int, expr  : MmExp);
		MmRuProofTreeNone();

	mmTheorem2MmRuProofTree(ass : MmAssertion, stat : MmProvable, structs : MmStructs, env : RuEnv) -> Maybe<MmRuProofTree>;

	MmProofTree ::= MmProofTreeStep, MmProofTreeHyp;
		MmProofTreeStep(id  : int, refs : [MmProofTree]);
		MmProofTreeHyp(id : int);

	mmTheorem2MmProofTree(ass : MmAssertion, stat : MmProvable, structs : MmStructs, env : RuEnv) -> Maybe<MmProofTree>;
	mmProofTree2NormalProof(proof : MmProofTree, env : RuEnv) -> [int];
	mmProofTree2s(proof : MmProofTree) -> string;
}

Mm2RuExecAcc(
	stack : Maybe<MmRuStack>,
	subst : Tree<int, MmExp>,
	refs : [MmRuProofTree]
);

MmRuStack(
	parent : Maybe<MmRuStack>,
	expr   : MmExp,
	proof  : MmRuProofTree,
);

mm2ruPickFromStack(s : Maybe<MmRuStack>, mmHyps : [MmHyp]) -> Mm2RuExecAcc {
	fold(mmHyps, Mm2RuExecAcc(s, makeTree(), []),
		\acc, hyp -> {
			eitherMap(acc.stack,
				\stack -> {
					switch (hyp) {
						MmEssential(__, expr):
							Mm2RuExecAcc(stack.parent, acc.subst, concat([stack.proof], acc.refs));
						MmFloating(__, type, var):
							Mm2RuExecAcc(stack.parent, setTree(acc.subst, var, MmExp(tail(stack.expr.symbs))), acc.refs);
					}
				},
				acc
			)
		}
	)
}

mm2ruExecRPNstep(lab : int, stack : Maybe<MmRuStack>, th_hyps : [MmHyp], labeled : Tree<int, MmLabeled>, env : RuEnv) -> Maybe<MmRuStack> {
	switch (lookupTreeDef(labeled, lab, mmNoAssertion)) {
		MmAssertion(__, disj, __, hyps, inner, stat): {
			acc = mm2ruPickFromStack(stack, reverseA(hyps));
			applied = mmApplySubst(stat.expr, acc.subst);
			Some(MmRuStack(acc.stack, applied, 
				if (mmStatIsRule(stat)) MmRuProofTreeNone() else MmRuProofTreeStep(lab, applied, acc.refs)
			));
		}
		MmEssential(l, expr): {
			i = findiDef(th_hyps, \h -> l == h.label, -1);
			switch (th_hyps[i]) {
				MmEssential(__, ex):
					Some(MmRuStack(stack, expr, MmRuProofTreeHyp(i, ex)));
				default:
					Some(MmRuStack(stack, expr, MmRuProofTreeNone()));
			}
		}
		MmFloating(__, type, var):
			Some(MmRuStack(stack, MmExp([MmSymb(type, false), MmSymb(var, true)]), MmRuProofTreeNone()));
	}
}

mmTheorem2MmRuProofTree(ass : MmAssertion, stat : MmProvable, structs : MmStructs, env : RuEnv) -> Maybe<MmRuProofTree> {
	switch (stat.proof) {
		MmNormalProof(labels): {
			th_hyps = mmAssertionHyps(ass.hyps);
			maybeMap(
				fold(labels, None(), \s, lab -> mm2ruExecRPNstep(lab, s, th_hyps, structs.labeled, env)),
				\stack -> stack.proof
			);
		}
		MmCompressedProof(__,__): {
			env.out.onError("Compressed proof is met while translating Metamath to Russell. Decompress first.", []);
			None();
		}
	}
}


MmStack(
	parent : Maybe<MmStack>,
	proof  : MmProofTree,
);

mmExecRPNstep(lab : int, stack : Maybe<MmStack>, th_hyps : [MmHyp], labeled : Tree<int, MmLabeled>, env : RuEnv) -> Maybe<MmStack> {
	switch (lookupTreeDef(labeled, lab, mmNoAssertion)) {
		MmAssertion(__, disj, __, hyps, inner, stat): {
			pair = fold(hyps, Pair(stack, []),
				\acc, hyp -> {
					eitherMap(acc.first,
						\st -> Pair(st.parent, concat([st.proof], acc.second)),
						acc
					)
				}
			);
			Some(MmStack(pair.first, 
				MmProofTreeStep(lab, pair.second)
			));
		}
		default: {
			Some(MmStack(stack, MmProofTreeHyp(lab)));
		}
	}
}

mmTheorem2MmProofTree(ass : MmAssertion, stat : MmProvable, structs : MmStructs, env : RuEnv) -> Maybe<MmProofTree> {
	switch (stat.proof) {
		MmNormalProof(labels): {
			th_hyps = mmAssertionHyps(ass.hyps);
			maybeMap(
				fold(labels, None(), \s, lab -> 
					mmExecRPNstep(lab, s, th_hyps, structs.labeled, env)
				),
				\stack -> stack.proof
			);
		}
		MmCompressedProof(__,__): {
			env.out.onError("Compressed proof is not supported. Decompress first.", []);
			None();
		}
	}
}

mmProofTree2NormalProof(proof : MmProofTree, env : RuEnv) -> [int] {
	list2array(mmDoProofTree2NormalProof(proof, makeList(), env));
}

mmDoProofTree2NormalProof(proof : MmProofTree, acc : List<int>, env : RuEnv) -> List<int> {
	switch (proof) {
		MmProofTreeStep(id, refs): {
			Cons(id, fold(refs, acc, \ac, rf ->
				mmDoProofTree2NormalProof(rf, ac, env)
			));
		}
		MmProofTreeHyp(id): {
			Cons(id, acc);
		}
	}
}

mmProofTree2s(proof : MmProofTree) -> string {
	switch (proof) {
		MmProofTreeStep(id, refs): {
			id2s(id) + "(" + strGlue(map(refs, mmProofTree2s), ", ") + ")";
		}
		MmProofTreeHyp(id): {
			id2s(id);
		}
	}
}
import base/fileinfo;

export {
	MmParseSource(imports : [MmImport], toplevel : [MmElement], info : RuFileInfo);

	MmElement ::= MmComment, MmDisj, MmEssential, MmProvable, MmBlock, MmAxiomatic, MmConst, MmVars, MmFloating, MmImport;
		MmComment(text : string);
		MmImport(module : int);
		MmDisj(vars : [int]);
		MmConst(symbs : [int]);
		MmVars(symbs : [int]);
		MmEssential(label : int, expr : MmExp);
		MmFloating(label : int, type : int, var : int);
		MmAxiomatic(label : int, expr : MmExp);
		MmProvable(label : int, expr : MmExp, proof : MmProof);
		MmBlock(elements : [MmElement]);

	MmProof ::= MmNormalProof, MmCompressedProof;
	MmNormalProof(labels : [int]);
	MmCompressedProof(labels : [int], steps : [int]);

	MmExp(symbs : [MmSymb]);
	MmSymb(literal : int, isVar : bool);

	MmHyp ::= MmEssential, MmFloating;
	MmStat ::= MmAxiomatic, MmProvable;

	MmAssertion(
		disjs : [MmDisj],
		outer : [int],   // ids of floating hyps which are declared in the outside scope
		extVars : bool,  // all vars are defined externally
		hyps  : [MmHyp], // extrenal assertion interface
		inner : [MmHyp], // vars, which are used in the proof internally
		stat  : MmStat
	);
	mmNoAssertion = MmAssertion([], [], false, [], [], MmAxiomatic(-1, MmExp([])));

	MmLabeled ::= MmHyp, MmAssertion;

	MmDecl ::= MmAssertion, MmConst, MmComment, MmFloating;

	MmSource(
		imports : [MmImport],
		decls   : [MmDecl],
		info    : RuFileInfo,
	);
	
	MmAny ::= MmParseSource, MmComment, MmDisj, MmEssential, MmProvable, MmBlock, MmAxiomatic, MmConst, MmVars, MmFloating, MmImport,
		MmProof, MmExp, MmSymb, MmAssertion, MmSource;

	MmStructs(
		labeled : Tree<int, MmLabeled>,
		consts  : Set<int>,
		vars    : [MmFloating]
	);

	mmEmptySource = MmSource([], [], ruNoFileInfo);
}

import ru/parse/ru_parse_src;
import ru/ru_src;
import mm/mm_src;

export {
	mm2ru(math : MmMath, conf : RuConf) -> Tree<string, RuParseSource>;
}

mm2ru(math : MmMath, conf : RuConf) -> Tree<string, RuParseSource> {
	start = timestamp();
	syntax = mmMath2Syntax(math, conf); 
	ret = mapTree(math.sources, \src -> mmSource2ru(src, math, syntax, conf));
	if (conf.verbose > 0) {
		conf.onMessage("mm translated in: " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
	}
	ret
}

mmSource2ru(src : MmSource, math : MmMath, syntax : MmRuSyntax, conf : RuConf) -> RuParseSource {
	start = timestamp();
	ret = RuParseSource(
		map(src.includes, \inc -> RuParseImport(inc.file, -1)),
		concatA(ruConcurrent(map(src.decls, \decl -> \ -> mmDecl2ru(decl, math, syntax, conf)))),
		ruNewFileInfo(src.info.module, conf, ".ru")
	);
	if (conf.verbose > 1) {
		conf.onMessage("\tmm translated: '" + src.info.module + "' in " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
	}
	ret
}

mmDecl2ru(decl : MmDecl, math : MmMath, syntax : MmRuSyntax, conf : RuConf) -> [RuParseBlock] {
	switch (decl) {
		MmComment(text): mmComment2ru(decl);
		MmConst(symbs):
			fold(symbs, [], \acc, s -> 
				switch (lookupTree(syntax.types, s)) {
					Some(t):
						if (containsSet(syntax.supers, t.name)) acc else {
							concat(
								fold(t.supers, acc, \ac, sup -> 
									concat(ac, [lookupTreeDef(syntax.types, sup, ruNoParseType)])
								),
								[t]
							);
						}
					None(): concat(acc, [mmConst2ru(s, conf)]);
				}
			);
		MmAssertion(disjs, hyps, inner, stat): mmAssertion2ru(decl, math, syntax, conf);
	}
}

mmComment2ru(comm : MmComment) -> [RuParseComment] {
	[RuParseComment(strReplace(strReplace(comm.text, "/*", "/ *"), "*/", "* /"), "", -1)]
}

mmVar2ru(var : string) -> string {
	// Russell variables must not contain following three symbols: ')' ',' ':'
	// Replace all these characters with some other. 
	fold(
		map(s2a(var), \i -> 
			if (i == 41) 93 else // ) is replaced with ]
			if (i == 44) 46 else // , is replaced with .
			if (i == 58) 59 else // : is replaced with ;
			i
		),
		"",
		\ac, i -> ac + fromCharCode(i)
	)
}

mmSymb2ru(s : MmSymb, conf : RuConf) -> string {
	if (s.isVar) {
		mmVar2ru(s.literal)
	} else {
		mmConst2ru(s.literal, conf).name
	}
}

mmConst2ru(s : string, conf : RuConf) -> RuParseConst {
	if (lookupTreeDef(conf.opts, "mm-ascii", "") == "1") {
		RuParseConst(s, "", "", -1)
	} else {
		lookupTreeDef(mmSymbTable, s, RuParseConst(s, "", "", -1))
	}
}

mmAssertion2ru(ass : MmAssertion, math : MmMath, syntax : MmRuSyntax, conf : RuConf) -> [RuParseBlock] {
	switch (lookupTree(syntax.rules, ass.stat.label)) {
		Some(r):
			if (ruRuleIsSuper(r)) [] else [r];
		None(): {
			switch (ass.stat) {
				MmProvable(__,__,__): 
					mmTheorem2ru(ass, ass.stat, math, conf);
				MmAxiomatic(l,__): 
					if (mmAssertionIsDef(ass)) {
						mmDef2ru(ass, math, syntax, conf); 
					} else {
						mmAxiom2ru(ass, math, syntax, conf);
					}
			}
		}
	}
}

mmAssertionHyps(hyps : [MmHyp]) -> [MmEssential] {
	filtermap(hyps, \h -> 
		switch (h) {
			MmEssential(__,__): Some(h);
			default: None();
		}
	)
}

mmAssertionFlos(hyps : [MmHyp]) -> [MmFloating] {
	filtermap(hyps, \h -> 
		switch (h) {
			MmFloating(__,__,__): Some(h);
			default: None();
		}
	)
}

mmAxiom2ru(ass : MmAssertion, math : MmMath, syntax : MmRuSyntax, conf : RuConf) -> [RuParseBlock] {
	[RuParseAxiom(ass.stat.label, mmVars2ru(ass.hyps), mmDisjs2ru(ass.disjs, mmAssertionVars(ass)), 
		mapi(mmAssertionHyps(ass.hyps), \i, h -> RuParseHyp(i, mmExp2ru(h.expr.symbs, conf), -1)), 
		mmExp2ru(ass.stat.expr.symbs, conf), -1
	)];
}

MmDefFactor(
	defm : RuParseExp,
	defs : RuParseExp,
	def : RuParseExp,
);

mmDef2ru(ass : MmAssertion, math : MmMath, syntax : MmRuSyntax, conf : RuConf) -> [RuParseBlock] {
	defFactor = mmFactorDef(ass.stat.expr, conf);
	[RuParseDef(ass.stat.label, mmVars2ru(ass.hyps), mmDisjs2ru(ass.disjs, mmAssertionVars(ass)), 
		mapi(mmAssertionHyps(ass.hyps), \i, h -> RuParseHyp(i, mmExp2ru(h.expr.symbs, conf), -1)),
		defFactor.defm, defFactor.defs, defFactor.def, -1
	)];
}

MmFactorDefEqAcc(
	braces : int,
	brackets : int,
	eq : int
);

mmFactorDefEqInd(ex : MmExp) -> int {
	is_eq = ex.symbs[1].literal != "(";
	factor = \strict -> {
		foldi(ex.symbs, MmFactorDefEqAcc(0, 0, -1), \i, ac, s ->
			if (ac.eq != -1) ac else
			if (s.literal == "(") MmFactorDefEqAcc(ac with brackets = ac.brackets + 1) else 
			if (s.literal == "{") MmFactorDefEqAcc(ac with braces   = ac.braces + 1) else
			if (s.literal == ")") MmFactorDefEqAcc(ac with brackets = ac.brackets - 1) else
			if (s.literal == "}") MmFactorDefEqAcc(ac with braces   = ac.braces - 1) else
			if (s.literal == "="   && (is_eq || !strict)  && ac.braces == 0) MmFactorDefEqAcc(ac with eq = i) else
			if (s.literal == "<->" && (!is_eq || !strict) && ac.brackets == 1) MmFactorDefEqAcc(ac with eq = i) else ac
		).eq
	}
	ind1 = factor(true);
	if (ind1 != -1) ind1 else factor(false);
}

mmFactorDef(ex : MmExp, conf : RuConf) -> MmDefFactor {
	eq_ind = mmFactorDefEqInd(ex);
	is_eq = ex.symbs[eq_ind].literal == "=";
	dfm_beg = if (is_eq) 1 else 2;
	dfm_len = if (is_eq) eq_ind - 1 else eq_ind - 2;
	dfs_beg = eq_ind + 1;
	dfs_len = if (is_eq) length(ex.symbs) - eq_ind - 1 else length(ex.symbs) - eq_ind - 2;

	MmDefFactor(
		mmExp2ru(concat(if (is_eq) [MmSymb("class", false)] else [MmSymb("|-", false)], subrange(ex.symbs, dfm_beg, dfm_len)), conf),
		mmExp2ru(concat(if (is_eq) [MmSymb("class", false)] else [MmSymb("|-", false)], subrange(ex.symbs, dfs_beg, dfs_len)), conf),
		RuParseExp("wff", 
			if (is_eq) ["defiendum", "=", "definiens"] 
			else       ["(", "defiendum", mmSymb2ru(MmSymb("<->", false), conf), "definiens", ")"]
			, -1
		),
	);
}

mmExp2ru(symbs : [MmSymb], conf : RuConf) -> RuParseExp {
	if (symbs[0].literal == "|-") {
		RuParseExp("wff", map(tail(symbs), \s -> mmSymb2ru(s, conf)), -1);
	} else {
		RuParseExp(symbs[0].literal, map(tail(symbs), \s -> mmSymb2ru(s, conf)), -1);
	}
}

mmStatIsRule(stat : MmStat) -> bool {
	stat.expr.symbs[0].literal != "|-";
}

mmAssertionIsDef(ass : MmAssertion) -> bool {
	if (!startsWith(ass.stat.label, "df-")) false else {
		mmFactorDefEqInd(ass.stat.expr) > -1
	} 
}

ruRuleIsSuper(r : RuParseRule) -> bool {
	length(r.term.symbs) == 1 && length(r.vars) == 1;
}

ruRuleSuperType(r : RuParseRule) -> string {
	r.term.type
}

ruRuleInferType(r : RuParseRule) -> string {
	r.vars[0].type
}

mmRule2ru(ass : MmAssertion, conf : RuConf) -> RuParseRule {
	RuParseRule(
		ass.stat.label, 
		mmVars2ru(ass.hyps), 
		mmExp2ru(ass.stat.expr.symbs, conf), 
		-1
	);
}

mmVars2ru(hyps : [MmHyp]) -> [RuParseVar] {
	filtermap(hyps, \h ->
		switch (h) {
			MmFloating(__, t, v): Some(RuParseVar(mmVar2ru(v), t, -1));
			default: None();
		}
	)
}

mmDisjs2ru(disjs : [MmDisj], vars : Set<string>) -> [RuParseDisj] {
	map(disjs, \d -> RuParseDisj(filter(map(d.vars, mmVar2ru), \v -> containsSet(vars, v)), -1))
}

MmRuSyntax(
	types : Tree<string, RuParseType>,
	rules : Tree<string, RuParseRule>,
	supers : Set<string>
);

mmMath2Syntax(math : MmMath, conf : RuConf) -> MmRuSyntax {
	axioms = mmMathAxiomatic(math);
	rules = filtermap(axioms, \ax -> 
		if (mmStatIsRule(ax.stat)) {
			Some(mmRule2ru(ax, conf));
		} else {
			None();
		}
	);
	types = set2array(fold(rules, makeSet(), \acc, r -> 
		fold(r.vars, insertSet(acc, r.term.type), \ac, var -> insertSet(ac, var.type))
	));
	superTypesMap = fold(filter(rules, ruRuleIsSuper), makeTree(), \acc, r ->
		setTree(acc, ruRuleInferType(r), 
			switch (lookupTree(acc, ruRuleInferType(r))) {
				Some(supers): insertSet(supers, ruRuleSuperType(r));
				None():       makeSet1(ruRuleSuperType(r));
			}
		)
	);
	typeMap = values2tree(map(types, \t ->
			RuParseType(t, set2array(lookupTreeDef(superTypesMap, t, makeSet())), -1)
		),
		\t -> t.name
	);
	ruleMap = values2tree(rules, \r -> r.name);
	supers = buildSet(map(filter(rules, ruRuleIsSuper), \r -> r.term.type));
	MmRuSyntax(typeMap, ruleMap, supers);
}

Mm2RuExecAcc(
	stack : Maybe<MmRuStack>,
	subst : Tree<string, MmExp>,
	refs : [RuProofTree]
);

RuProofTree ::= RuProofTreeStep, RuProofTreeHyp, RuProofTreeNone;
	RuProofTreeStep(name  : string, expr  : RuParseExp, refs : [RuProofTree]);
	RuProofTreeHyp(ind : int, expr  : RuParseExp);
	RuProofTreeNone();

MmRuStack(
	parent : Maybe<MmRuStack>,
	expr   : MmExp,
	proof  : RuProofTree,
);

mm2ruPickFromStack(s : Maybe<MmRuStack>, mmHyps : [MmHyp]) -> Mm2RuExecAcc {
	fold(mmHyps, Mm2RuExecAcc(s, makeTree(), []),
		\acc, hyp -> {
			eitherMap(acc.stack,
				\stack -> {
					switch (hyp) {
						MmEssential(__, expr):
							Mm2RuExecAcc(stack.parent, acc.subst, concat([stack.proof], acc.refs));
						MmFloating(__, type, var):
							Mm2RuExecAcc(stack.parent, setTree(acc.subst, var, MmExp(tail(stack.expr.symbs))), acc.refs);
					}
				},
				acc
			)
		}
	)
}

mm2ruExecRPNstep(lab : string, stack : Maybe<MmRuStack>, th_hyps : [MmHyp], labeled : Tree<string, MmLabeled>, conf : RuConf) -> Maybe<MmRuStack> {
	switch (lookupTreeDef(labeled, lab, mmNoAssertion)) {
		MmAssertion(disj, hyps, inner, stat): {
			acc = mm2ruPickFromStack(stack, reverseA(hyps));
			applied = mmApplySubst(stat.expr, acc.subst);
			Some(MmRuStack(acc.stack, applied, 
				if (mmStatIsRule(stat)) RuProofTreeNone() else RuProofTreeStep(lab, mmExp2ru(applied.symbs, conf), acc.refs)
			));
		}
		MmEssential(l, expr): {
			i = findiDef(th_hyps, \h -> l == h.label, -1);
			switch (th_hyps[i]) {
				MmEssential(__, ex):
					Some(MmRuStack(stack, expr, RuProofTreeHyp(i, mmExp2ru(ex.symbs, conf))));
				default:
					Some(MmRuStack(stack, expr, RuProofTreeNone()));
			}
		}
		MmFloating(__, type, var):
			Some(MmRuStack(stack, MmExp([MmSymb(type, false), MmSymb(var, true)]), RuProofTreeNone()));
	}
}

mmTheorem2ru(ass : MmAssertion, stat : MmProvable, math : MmMath, conf : RuConf) -> [RuParseBlock] {
	th_hyps = mmAssertionHyps(ass.hyps);
	eitherMap(
		fold(stat.proof.labels, None(), \s, lab -> mm2ruExecRPNstep(lab, s, th_hyps, math.labeled, conf)), 
		\stack -> {
			th_vars = mmVars2ru(ass.hyps);
			
			th_vars_map = fold(th_vars, makeTree(), \acc, v -> setTree(acc, v.name, v.type));
			steps = mmProofTree2ru(stack.proof, th_vars_map);
			vars_map = fold(mmAssertionFlos(concat(ass.hyps, ass.inner)), makeTree(), 
				\acc, v -> setTree(acc, v.var, RuVar(v.var, v.type))
			);
			make_var = \v -> lookupTreeDef(vars_map, v, ruNoVar);
			disj_set = fold(map(ass.disjs, \d -> map(d.vars, mmVar2ru)), makeSet(), \acc, disj -> 
				foldi(disj, acc, \i, ac, v1 ->
					foldi(disj, ac, \j, a, v2 ->
						if (i < j && containsKeyTree(vars_map, v1) && containsKeyTree(vars_map, v2)) {
							insertSet(a, RuDisj(make_var(v1), make_var(v2))) 
						} else a
					)
				)
			);
			th_ds = filterSet(disj_set, \d -> containsKeyTree(th_vars_map, d.v1.name) && containsKeyTree(th_vars_map, d.v2.name));
			pr_ds = filterSet(disj_set, \d -> !(containsKeyTree(th_vars_map, d.v1.name) && containsKeyTree(th_vars_map, d.v2.name)));
			
			make_disj = \s -> map(ruDisjs2Array(s), \ds -> RuParseDisj(map(set2array(ds), \d -> d.name), -1));
			if (steps == []) [] else {
				[RuParseTheorem(
					ass.stat.label, 
					th_vars, 
					make_disj(th_ds),
					RuParseMeta([], -1),
					mapi(th_hyps, \i, h -> RuParseHyp(i, mmExp2ru(h.expr.symbs, conf), -1)), 
					mmExp2ru(ass.stat.expr.symbs, conf), 
					RuParseProof(
						mmVars2ru(ass.inner), 
						make_disj(pr_ds),
						steps, -1
					), 
					-1
				)]
			}
		},
		[]
	);
}

MmRuProofAcc(
	steps : Tree<RuParseExp, int>,
	linear : [RuParseStep]
);

mmRemoveTrivialSteps(proof : RuProofTree) -> RuProofTree {
	switch (proof) {
		RuProofTreeStep(name, expr, refs): {
			new_proof = RuProofTreeStep(name, expr, map(refs, mmRemoveTrivialSteps));
			if (length(refs) != 1) {
				new_proof; 
			} else {
				switch (new_proof.refs[0]) {
					RuProofTreeStep(__, ex, __): 
						if (ex.symbs == expr.symbs) new_proof.refs[0] else new_proof;
					RuProofTreeHyp(__, ex): {
						if (ex.symbs == expr.symbs) new_proof.refs[0] else new_proof;
					}
					RuProofTreeNone(): new_proof;					
				}
			}
		}
		default: proof;
	}
}

mmProofTree2ru(proof : RuProofTree, vars : Tree<string, string>) -> [RuParseStep] {
	new_proof = mmRemoveTrivialSteps(proof);
	switch (new_proof) {
		RuProofTreeStep(__,__,__): 
			mmDoProofTree2ru(new_proof, MmRuProofAcc(makeTree(), []), vars).linear;
		default: [];
	}
}

mmDoProofTree2ru(proof : RuProofTreeStep, acc0 : MmRuProofAcc, vars : Tree<string, string>) -> MmRuProofAcc {
	acc1 = fold(proof.refs, acc0, \ac, ref -> 
		switch (ref) {
			RuProofTreeStep(__,__,__): mmDoProofTree2ru(ref, ac, vars);
			default: ac;
		}
	);
	switch (lookupTree(acc1.steps, proof.expr)) {
		Some(__): acc1;
		None(): {
			ind = length(acc1.linear);
			refs = fold(proof.refs, [], \ac, ref -> 
				switch (ref) {
					RuProofTreeStep(label, ex, refs):
						concat(ac, [RuParseStepRef(lookupTreeDef(acc1.steps, ex, -1), -1)]);
					RuProofTreeHyp(i,__): 
						concat(ac, [RuParseHypRef(i, -1)]);
					RuProofTreeNone(): ac;
				}
			);
			MmRuProofAcc(
				setTree(acc1.steps, proof.expr, ind),
				concat(acc1.linear, [RuParseStep(ind, proof.name, refs, proof.expr, -1)])
			);
		}
	}
}

ruNoParseType = RuParseType("__no", [], -1);

mmMakeParseConst(ascii : string, utf : string, latex : string) -> RuParseConst {
	RuParseConst(utf, ascii, latex, -1)
}

mmSymbTable = pairs2tree([
	Pair("|-", mmMakeParseConst("|-", "⊢", "vdash")),
	Pair("->", mmMakeParseConst("->", "→", "\\rightarrow")),
	Pair("-.", mmMakeParseConst("-.", "¬", "\\lnot")),
	Pair("<->", mmMakeParseConst("<->", "↔", "\\leftrightarrow")),
	Pair("\\/", mmMakeParseConst("\\/", "∨", "\\lor")),
	Pair("/\\", mmMakeParseConst("/\\", "∧", "\\land")),
	Pair("-/\\", mmMakeParseConst("-/\\", "⊼", "\\bar{\\wedge}")),
	Pair("A.", mmMakeParseConst("A.", "∀", "\\forall")),
	Pair("E.", mmMakeParseConst("E.", "∃", "\\exists")),
	Pair("e.", mmMakeParseConst("e.", "∈", "\\in")),
	Pair("E!", mmMakeParseConst("E!", "∃!", "\\exists{!}")),
	Pair("E*", mmMakeParseConst("E*", "∃*", "\\exists^{\\ast}")),
	Pair("{", mmMakeParseConst("{", "{", "\\{")),
	Pair("}", mmMakeParseConst("}", "}", "\\}")),
	Pair("=/=", mmMakeParseConst("=/=", "≠", "\\ne")),
	Pair("e/", mmMakeParseConst("e/", "∉", "\\notin")),
	//Pair("_V", mmMakeParseConst("_V", "���", "\\rm{V}")),
	Pair("[_", mmMakeParseConst("[_", "[_", "[")),
	Pair("]_", mmMakeParseConst("]_", "]_", "]")),
	Pair("C_", mmMakeParseConst("C_", "⊆", "\\subseteq")),
	Pair("C.", mmMakeParseConst("C.", "⊂", "\\subset")),
	Pair("\\", mmMakeParseConst("\\", "∖", "\\setminus")),
	Pair("u.", mmMakeParseConst("u.", "∪", "\\cup")),
	Pair("i^i", mmMakeParseConst("i^i", "∩", "\\cap")),
	Pair("(/)", mmMakeParseConst("(/)", "∅", "\\emptyset")),
	Pair("~P", mmMakeParseConst("~P", "Pow", "\\cal{P}")),
	Pair("<.", mmMakeParseConst("<.", "〈", "\\langle")),
	Pair(">.", mmMakeParseConst(">.", "〉", "\\rangle")),
	Pair("U.", mmMakeParseConst("U.", "⋃", "\\bigcup")),
	Pair("|^|", mmMakeParseConst("|^|", "⋂", "\\bigcap")),
	Pair("U_", mmMakeParseConst("U_", "⋃_", "\\bigcup")),
	Pair("|^|_", mmMakeParseConst("|^|_", "⋂_", "\\bigcap")),
	//Pair("_E", mmMakeParseConst("_E", "���", "\\epsilon")),
	Pair("_E", mmMakeParseConst("_E", "_E", "\\epsilon")),
	Pair("_I", mmMakeParseConst("_I", "_I", "\\rm{Id}")),
	Pair("om", mmMakeParseConst("om", "ω", "\\omega")),
	Pair("X.", mmMakeParseConst("X.", "×", "\\times")),
	Pair("`'", mmMakeParseConst("`'", "⁻¹", "{}^{-1}")),
	Pair("|`", mmMakeParseConst("|`", "↾", "\\upharpoonright")),
	Pair("\"", mmMakeParseConst("\"", "\"", "``")),
	Pair("o.", mmMakeParseConst("o.", "∘", "\\circ")),
	Pair("-->", mmMakeParseConst("-->", "⟶", "\\longrightarrow")),
	Pair("-1-1->", mmMakeParseConst("-1-1->", "↣", "\\rightarrowtail")),
	Pair("-onto->", mmMakeParseConst("-onto->", "↠", "\\twoheadrightarrow")),
	Pair("-1-1-onto->", mmMakeParseConst("-1-1-onto->", "⤖", "\\rightarrowtail\\twoheadrightarrow")),
	Pair("X_", mmMakeParseConst("X_", "×_", "\\times")),
	Pair("|->", mmMakeParseConst("|->", "↦", "\\mapsto")),
	Pair("^m", mmMakeParseConst("^m", "↑m", "\\uparrow_m")),
	Pair("^pm", mmMakeParseConst("^pm", "↑pm", "\\uparrow_{pm}")),
	Pair("+o", mmMakeParseConst("+o", "+ₒ", "+_o")),
	Pair(".o", mmMakeParseConst(".o", "∙ₒ", "\\cdot_o")),
	Pair("^o", mmMakeParseConst("^o", "↑ₒ", "\\uparrow_o")),
	Pair("1o", mmMakeParseConst("1o", "1ₒ", "1_o")),
	Pair("2o", mmMakeParseConst("2o", "2ₒ", "2_o")),
	Pair("/.", mmMakeParseConst("/.", "/.", "\\diagup")),
	Pair("~~", mmMakeParseConst("~~", "≈", "\\approx")),
	Pair("~<_", mmMakeParseConst("~<_", "≼", "\\preccurlyeq")),
	Pair("~<", mmMakeParseConst("~<", "≺", "\\prec")),
	Pair("aleph", mmMakeParseConst("aleph", "ℵ", "\\aleph")),
	//Pair("+c", mmMakeParseConst("+c", "+���", "+_c")),
	Pair("+c", mmMakeParseConst("+c", "+c", "+_c")),
	Pair("R1", mmMakeParseConst("R1", "R₁", "R_1")),
	Pair(".N", mmMakeParseConst(".N", "∙N", "\\cdot_{\\cal{N}}")),
	Pair("<N", mmMakeParseConst("<N", "<N", "<_{\\cal{N}}")),
	Pair("+pQ", mmMakeParseConst("+pQ", "+pQ", "+_{p\\cal{Q}}")),
	Pair(".pQ", mmMakeParseConst(".pQ", "∙pQ", "\\cdot_{p\\cal{Q}}")),
	Pair("Q.", mmMakeParseConst("Q.", "Q.", "\\cal{Q}")),
	Pair(".Q", mmMakeParseConst(".Q", "∙Q", "\\cdot_{\\cal{Q}}")),
	Pair("P.", mmMakeParseConst("P.", "Pos", "\\rm{Pos}")),
	Pair("1P", mmMakeParseConst("1P", "1Pos", "1_{\\rm{Pos}}")),
	Pair("+P.", mmMakeParseConst("+P.", "+Pos", "+_{\\rm{Pos}}")),
	Pair(".P.", mmMakeParseConst(".P.", "∙Pos", "\\cdot_{\\rm{Pos}}")),
	Pair("<P", mmMakeParseConst("<P", "<Pos", "<_{\\rm{Pos}}")),
	Pair("+pR", mmMakeParseConst("+pR", "+pR", "+_{p\\cal{R}}")),
	Pair(".pR", mmMakeParseConst(".pR", "∙pR", "\\cdot_{p\\cal{R}}")),
	Pair("-1R", mmMakeParseConst("-1R", "-1R", "-1_{p\\cal{R}}")),
	Pair(".R", mmMakeParseConst(".R", "∙R", "\\cdot_{p\\cal{R}}")),
	Pair("<R", mmMakeParseConst("<R", "<R", "<_{p\\cal{R}}")),
	Pair("<RR", mmMakeParseConst("<RR", "<ℝ", "<_{\\mathbb{R}}")),
	Pair("CC", mmMakeParseConst("CC", "ℂ", "\\mathbb{C}")),
	Pair("RR", mmMakeParseConst("RR", "ℝ", "\\mathbb{R}")),
	Pair("x.", mmMakeParseConst("x.", "∙", "\\cdot")),
	Pair("+oo", mmMakeParseConst("+oo", "+∞", "+\\infty")),
	Pair("-oo", mmMakeParseConst("-oo", "-∞", "-\\infty")),
	Pair("RR*", mmMakeParseConst("RR*", "ℝ*", "\\mathbb{R}*")),
	Pair("<_", mmMakeParseConst("<_", "≤", "\\le")),
	Pair("NN", mmMakeParseConst("NN", "ℕ", "\\mathbb{N}")),
	Pair("NN0", mmMakeParseConst("NN0", "ℕ₀", "\\mathbb{N}_0")),
	Pair("ZZ", mmMakeParseConst("ZZ", "ℤ", "\\mathbb{Z}")),
	Pair("QQ", mmMakeParseConst("QQ", "ℚ", "\\mathbb{Q}")),
	Pair("RR+", mmMakeParseConst("RR+", "ℝ⁺", "\\mathbb{R}^+")),
	Pair("sqr", mmMakeParseConst("sqr", "√", "\\surd")),
	Pair("Re", mmMakeParseConst("Re", "ℜ", "\\Re")),
	Pair("Im", mmMakeParseConst("Im", "ℑ", "\\Im")),
	Pair("|_", mmMakeParseConst("|_", "⌊", "\\lfloor")),
	Pair("==", mmMakeParseConst("==", "≡", "\\equiv")),
	Pair("seq1", mmMakeParseConst("seq1", "seq₁", "\\rm{seq}_1")),
	Pair("ZZ>=", mmMakeParseConst("ZZ>=", "ℤ≥", "\\mathbb{Z}_\\ge")),
	Pair("seq0", mmMakeParseConst("seq0", "seq₀", "\\rm{seq}_0")),
	Pair("^", mmMakeParseConst("^", "↑", "\\uparrow")),
	Pair("~~>", mmMakeParseConst("~~>", "⇝", "\\rightsquigarrow")),
	Pair("...", mmMakeParseConst("...", "...", "\\ldots")),
	Pair("sum_", mmMakeParseConst("sum_", "∑", "\\sigma")),
	Pair("_e", mmMakeParseConst("_e", "ℇ", "\\rm{e}")),
	Pair("pi", mmMakeParseConst("pi", "π", "\\pi")),
	Pair("-cn->", mmMakeParseConst("-cn->", "‒cn→", "\\longrightarrow_{\\rm{cn}}")),
	Pair("~~>m", mmMakeParseConst("~~>m", "⇝m", "\\rightsquigarrow_{\\rm{m}}")),
	Pair("Id", mmMakeParseConst("Id", "Id", "\\rm{Id}")),
	Pair("^g", mmMakeParseConst("^d", "↑g", "\\uparrow_g")),
	Pair(".s", mmMakeParseConst(".s", "∙s", "\\cdot_s")),
	Pair(".i", mmMakeParseConst(".i", "∙i", "\\cdot_i")),
	Pair("~~>v", mmMakeParseConst("~~>v", "⇝v", "\\rightsquigarrow_{\\rm{v}}")),
	Pair("_|_", mmMakeParseConst("_|_", "⊥", "\\perp")),
	Pair("vH", mmMakeParseConst("vH", "vH", "\\vee_\\mathfrak{H}")),
	Pair("\\/H", mmMakeParseConst("\\/H", "\\/H", "\\bigvee_\\mathfrak{H}")),
	Pair("<_op", mmMakeParseConst("<_op", "≤op", "\\le_{\\rm{op}}")),
	Pair("Lambda", mmMakeParseConst("Lambda", "Λ", "\\Lambda")),
	Pair("<o", mmMakeParseConst("<o", "⋖", "\\lessdot")),
	Pair("1stc", mmMakeParseConst("1stc", "1stω", "1^{\\rm{st}}\\omega")),
	Pair("2ndc", mmMakeParseConst("2ndc", "2ndω", "2^{\\rm{nd}}\\omega")),
	Pair("prod_", mmMakeParseConst("prod_", "∏", "\\Pi")),
	Pair("(+)", mmMakeParseConst("(+)", "⊕", "\\oplus")),
	Pair("~~>t", mmMakeParseConst("~~>t", "⇝t", "\\rightsquigarrow_{\\rm{t}}")),
	Pair("=~ph", mmMakeParseConst("=~ph", "=~φ", "\\mbox{$=$\\~{}ph}")),
	Pair("->..", mmMakeParseConst("->..", "⇒", "\\Longrightarrow")),
]);


import base/commands;
import ru/commands;
import mm/commands;

export {
	ruCommandsTree() -> Tree<string, RuComm>;
}

ru_commands_tree : ref Maybe<Tree<string, RuComm>> = ref None();

ruCommandsTree() -> Tree<string, RuComm> {
	init_commands_tree = \-> {
		commands_list = [
			[
				RuComm(
					"help", "help", "help on some topics", "category",
					[RuCommArg("category", true, "category of help", "")],
					ruCommHelp
				),
				ruApplyToProjectRoots(RuComm(
					"read", "io", "read a Russell file", "file",
					[RuCommArg("file", true, "input file", "")],
					ruCommReadAny
				))
			],
			ruBaseCommands(),
			ruCommands(),
			mmCommands()
		];
		fold(concatA(commands_list), makeTree(), \acc, comm -> setTree(acc, comm.name, comm));
    }
    onlyOnce(ru_commands_tree, init_commands_tree);
}

ruCommReadAny(task : RuTask, env : RuEnv) -> RuEnv {
	file = lookupTreeDef(task.args, "file", "");
	if (endsWith(file, ".ru")) {
		ruCommRead(task, env);
	} else if (endsWith(file, ".mm")) {
		mmCommRead(task, env);
	} else {
		env.conf.onError("Unknown file extension: " + file + ", must be *.ru or *.mm", []);
		env;
	}
}

ruCommHelp(task : RuTask, env : RuEnv) -> RuEnv {
	commands = getTreeValues(ruCommandsTree());
	categories = filtermap(
		strSplit(toLowerCase(lookupTreeDef(task.args, "category", "")), ","),
		\cat -> if (cat == "") None() else Some(cat)
	);
	if (categories != []) {
		env.conf.onMessage(strGlue(map(categories, ruHelpOn), ""));
	} else {
		env.conf.onMessage(ruHelpOn(""));
	}
	env;
}

ruHelpOn(category : string) -> string {
	commands = getTreeValues(ruCommandsTree());
	if (category == "" || category == "help") {
		categories = set2array(fold(commands, makeSet(), \acc, comm -> 
			if (comm.category == "") acc else insertSet(acc, comm.category)
		));
		"Help invocation:\n" +
			"\t'russell help <category>'\n" +
			"\t'russell help <command>'\n" +
		"where category is one of:\n" +
			"\thelp, usage, server, " + strGlue(categories, ", ") + ", all\n" +
		"List of all commands may be seen with:\n" +
			"\t'russell help all'\n";
	} else if (category == "usage") {
		"Usage:\n" + 
			"\t'russell <task_1> ; ... ; <task_m>'\n" +
		"where task is:\n" + 
			"\t'<command> <arg_1>=<val_1> ... <arg_n>=<val_n>'\n";
	} else if (category == "server") {
		"Starting a Russell server:\n" + 
			"\t'russell server=<mode>'\n" + 
		"where mode is one of:\n" + 
			"\thttp, lsp, console, repl\n" +
		"here repl is alias to console (i.e. it is the same).\n";
	} else {
		filtered = filter(commands, \comm -> comm.category == category || category == "all");
		if (filtered != []) ruComms2s(filtered, false) else {
			eitherMap(lookupTree(ruCommandsTree(), category), \comm -> ruComm2s(comm, true), "");
		}
	}
}

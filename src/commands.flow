import base/commands;
import ru/commands;
import mm/commands;

export {
	ruCommandsTree() -> Tree<string, RuComm>;
}

ru_commands_tree : ref Maybe<Tree<string, RuComm>> = ref None();

ruCommandsTree() -> Tree<string, RuComm> {
	init_commands_tree = \-> {
		commands_list = [
			[
				RuComm(
					"help", "", "help on some topics", "category",
					[RuCommArg("category", true, "category of help", "")],
					ruCommHelp
				),
				ruApplyToProjectRoots(RuComm(
					"read", "io", "read a Russell file", "file",
					[RuCommArg("file", true, "input file", "")],
					ruCommReadAny
				))
			],
			ruBaseCommands(),
			ruCommands(),
			mmCommands()
		];
		fold(concatA(commands_list), makeTree(), \acc, comm -> setTree(acc, comm.name, comm));
    }
    onlyOnce(ru_commands_tree, init_commands_tree);
}

ruCommReadAny(task : RuTask, env : RuEnv) -> RuEnv {
	file = lookupTreeDef(task.args, "file", "");
	if (endsWith(file, ".ru")) {
		ruCommRead(task, env);
	} else if (endsWith(file, ".mm")) {
		mmCommRead(task, env);
	} else {
		env.conf.onError("Unknown file extension: " + file + ", must be *.ru or *.mm", []);
		env;
	}
}

ruCommHelp(task : RuTask, env : RuEnv) -> RuEnv {
	category = lookupTreeDef(task.args, "category", "");
	filtered = if (category == "") getTreeValues(ruCommandsTree()) else 
		filter(getTreeValues(ruCommandsTree()), \comm -> comm.category == category);
	env.conf.onMessage("usage: '<task_1> ; ... ; <task_m>' where");
	env.conf.onMessage("task is: '<command> <arg_1>=<val_1> ... <arg_n>=<val_n>'");
	env.conf.onMessage(ruComms2s(filtered));
	env;
}

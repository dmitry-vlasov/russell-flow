import runner/process;

export {
	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	ruLspServer(env : RuEnv) -> void;
}

ruLspServer(env : RuEnv) -> void { 
	ruLspServerLog("Server started.", env.conf);
	ruRunLspServer(env);
}

ruRunLspServer(env : RuEnv) -> void {
	conf = env.conf;
	switch (ruLspReadRequest()) {
		Some(req): {
			// Special watermark for non-logging
			uuid = ruMakeUuid();
			log_request = !strContains(req.request, "do_not_log_this");
			if (log_request) {
				ruLspServerLog("<" + uuid  + "> Client: " + ruCutLongString(ruServerEscapeString(req.request)), conf);
			}
			timer = ruMakeTimer();
			data = ref "";
			funcs = RuReqFuncs(
				ruMakeOut(nop1, \d -> data := d, conf.opts),
				\code -> {
					if (log_request) {
						ruLspServerLog("<" + uuid  + "> Server [" + ruTimePassed2s(timer) + "]: " + ruCutLongString(ruServerEscapeString(^data)), conf);
					}
					print(^data);
				},
				\msg -> ruLspServerLog(msg, conf), 
				\ -> {
					ruLspServerLog("Server stopped.", conf);
					quit(0);
				},
			);
			ruProcessRequest(conf, RuRequest(uuid, req.json), funcs,
				\script, exit, out -> {
					// Markup the script commands with 'lsp=1' argument and run locally or on a server.
					ruProcess(uuid, ruSetScriptTaskArg(script, "lsp", "1"), exit, env);
				}
			);
		}
		None(): {
			ruLspServerLog("Failed to read a request.", conf);
		}
	}
	ruRunLspServer(env);
}

import process;
import lsp/protocol;
import lsp/methods/textDocument;
import lsp/methods/workspace;

export {
	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	ruLspServer(env : RuEnv) -> void;
}

ruLspServer(env : RuEnv) -> void { 
	ruLspServerLog("Server started.", env.conf);
	ruRunLspServer(env);
}

RuLspServerRequest(
	request : LspRequestMessage,
	callback : (LspResponseMessage) -> void
);

RuLspServerState(
	mutable clientConf : Json,
	mutable currId : int,
	mutable requests : Tree<Json, RuLspServerRequest>,
	mutable state : int // 0 - working, 1 - shutdown, 2 - exit
);

ruLspServerState = RuLspServerState(JsonNull(), 1, makeTree(), 0);

ruRunLspRequest(uuid : string, id : Json, method : RuLspMethod, params : Json, log_message : bool, env : RuEnv) -> void {
	script = ruSetScriptTaskArg(method.request2script(params, env), "lsp", "1");
	timer = ruMakeTimer();
	data = ref "";
	errs = ref [];
	out = RuOut(
		\msg -> if (msg != "") ruLspWriteNotification("console/message", JsonString(msg)),
		\str -> if (str != "") data := str,
		\err, __ -> refArrayPush(errs, err)
	);
	//conf = RuConf(env.conf with opts = setTree(env.conf.opts, "lsp", "1"));
	// ruProcess(uuid : string, script : ScScript, onRunComplete : (int) -> void, env : RuEnv) -> void;
	ruProcess(uuid, script, 
		\code -> {
			if (log_message) {
				ruLspServerLog(blueprint("<%uuid%> [%time%] Request completed: '%data%' errors: %errors%", 
					[
						"uuid", uuid, 
						"time", ruTimePassed2s(timer),
						"data", ruCutLongString(ruServerEscapeString(^data)),
						"errors", strGlue(^errs, ", ")
					]
				), env.conf);
			}
			if (method.responses) {
				if (length(^errs) == 0) {
					if (^data != "") {
						ruLspWriteResponse(id, parseJsonSafe(^data));
					} else {
						ruLspWriteResponse(id, JsonNull());
					}
				} else {
					ruLspWriteError(id, code, strGlue(^errs, ", "), JsonArray(map(^errs, \err -> JsonString(err))));
				}
			}
			method.callback();
		},
		RuEnv(env.conf, out)
	);
}

ruRunLspServer(env : RuEnv) -> void {
	conf = env.conf;
	switch (ruLspReadMessage(conf)) {
		Some(m): {
			// Special watermark for non-logging
			uuid = ruMakeUuid();
			log_message = !strContains(m.raw, "do_not_log_this");
			if (log_message) {
				ruLspServerLog(blueprint("<%uuid%> Received message: %body%", 
					[
						"uuid", uuid, 
						"body", ruCutLongString(ruServerEscapeString(m.raw))
					]
				), conf);
			}
			message = m.message;
			switch (message) {
				LspRequestMessage(__, id, method, params): {
					switch (lookupTree(ruLspMethods, method)) {
						Some(meth): {
							ruRunLspRequest(uuid , id, meth, params, log_message, env);
						}
						None(): {
							ruLspWriteError(id, 1, "request method '" + method + "'' is not found", JsonNull());
							ruLspServerLog("request method '" + method + "'' is not found", conf);
						}
					}
				}
				LspResponseMessage(__, id, result, errors): {
					switch (lookupTree(ruLspServerState.requests, id)) {
						Some(req): {
							ruLspServerLog("Processing the response: " + json2string(result), conf);
							req.callback(message);
						}
						None(): {
							ruLspServerLog("Server: unknown request: " + json2string(id), conf);
						}
					}
				}
				LspNotificationMessage(__, method, params): {
					ruLspServerLog("TODO support notifications to LSP server", conf);
				}
			}
		}
		None(): {
			ruLspServerLog("Failed to read a request.", conf);
		}
	}
	if (ruLspServerState.state < 2) {
		ruRunLspServer(env);
	} else {
		if (ruLspServerState.state == 1) {
			// exit request
			ruLspServerLog("Server stopped.", env.conf);
			quit(0);
		} else {
			// shutdown request was not made before exit - error in LSP protocol
			ruLspServerLog("Server stopped abnormally.", env.conf);
			quit(1);
		}
	}
}

ruMakeServerRequest(method : string, params : Json, callback : (LspResponseMessage) -> void) -> void {
	id = JsonDouble(i2d(ruLspServerState.currId));
	request = LspRequestMessage("2.0", id, method, params);
	ruLspServerState.requests ::= setTree(ruLspServerState.requests, request.id, 
		RuLspServerRequest(request, callback)
	);
	ruLspServerState.currId ::= ruLspServerState.currId + 1;
	ruLspWriteRequest(id, method, params);
}

ruExecuteCommandOptions = JsonObject([
	Pair("commands", 
		JsonArray([
			JsonString("verify"), 
			JsonString("metamath"),
			JsonString("math-info"),
			JsonString("find-symbol"),
			JsonString("command"),
		])
	),
	Pair("workDoneProgress", JsonBool(true))
]);

ruLspInitialize(json : Json, env : RuEnv) -> ScScript {
	ruLspServerState.clientConf ::= json;
	ScData(ScStringConst(json2string(
		JsonObject([
			Pair("capabilities", JsonObject([
					Pair("declarationProvider", JsonBool(true)),
					Pair("definitionProvider", JsonBool(true)),
					Pair("referencesProvider", JsonBool(true)),
					Pair("documentSymbolProvider", JsonBool(true)),
					Pair("hoverProvider", JsonBool(true)),
					Pair("renameProvider", JsonBool(true)),
					Pair("workspaceSymbolProvider", JsonBool(true)),
					Pair("executeCommandProvider", ruExecuteCommandOptions),
					/*Pair("codeActionProvider", 
						JsonObject([
							Pair("codeActionKinds", JsonArray([
								JsonString("verify"), JsonString("prove"), JsonString("reprove"), JsonString("generalize")
							])),
						])
					),*/
					//Pair("codeActionProvider", JsonBool(true)),
					Pair("textDocumentSync",
						JsonObject([
							Pair("openClose", JsonBool(true)),
							Pair("change", JsonDouble(2.0))
						])
					)
				])
			)
		])
	)));
}

ruInitializedCallback() -> void {
	if (getJsonBoolField(getJsonNestedField(ruLspServerState.clientConf, ["capabilities", "workspace", "didChangeConfiguration"]), "dynamicRegistration", false)) {
		params = lspRegistrationParams2Json(LspRegistrationParams([
			LspRegistration(makeUuid(), "textDocument/didChange", 
				lspTextDocumentChangeRegistrationOptions2Json(
					LspTextDocumentChangeRegistrationOptions([LspDocumentFilter("flow", "file", "*.{flow}")], 1)
				)
			),
			//LspRegistration(makeUuid(), "workspace/executeCommand", ruExecuteCommandOptions)
		]));
		ruMakeServerRequest("client/registerCapability", params, nop1);
	}
}

ruLspShutdown(json : Json, env : RuEnv) -> ScScript {
	ruLspServerState.clientConf ::= JsonNull();
	ruLspServerState.currId ::= 1;
	ruLspServerState.requests ::= makeTree();
	ruMemCacheClear(); // reset memory cache
	ruLspServerState.state ::= 1;
	ScStop();
}

ruLspExit(json : Json, env : RuEnv) -> ScScript {
	ruLspServerState.state ::= 2;
	ScExit();
}

ruLspInitMethods = pairs2tree([
	Pair("initialize", RuLspMethod(ruLspInitialize, true, nop)),
	Pair("initialized", RuLspMethod(\__,__ -> ScStop(), false, ruInitializedCallback)),
	Pair("shutdown", RuLspMethod(ruLspShutdown, true, nop)),
	Pair("exit", RuLspMethod(ruLspExit, false, nop)),
]);

ruLspMethods = mergeTree(
	mergeTree(ruLspInitMethods, ruLspWorkspaceMethods), 
	ruLspTextDocumentMethods
);

import process;
import lsp/methods/lifecycle;
import lsp/methods/textDocument;
import lsp/methods/workspace;

export {
	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	ruLspServer(env : RuEnv) -> void;
}

ruLspServer(env : RuEnv) -> void { 
	ruLspServerLog("Server started.", env.conf);
	params = LspInitializeParams("", LspClientInfo("", ""), "", "", "", JsonNull(), JsonNull(), "off", []);
	for(
		RuLsp(env, params, 1, makeTree(), makeSet(), 0),
		\state -> state.exit != 2,
		ruRunLspServer
	);
	quit(0);
}

ruRunLspRequest(id : Json, method : RuLspMethod, params : Json, log_message : bool, state : RuLsp) -> void {
	timer = ruMakeTimer();
	env = state.env;
	conf = env.conf;
	data = ref "";
	errs = ref [];
	out = RuOut(
		\msg -> if (msg != "") ruLspWriteNotification("console/message", JsonString(msg), log_message, env.conf),
		\str -> if (str != "") data := ^data + str,
		\err, __ -> refArrayPush(errs, err)
	);
	script = ruSetScCommTaskArg(method.script(params, RuEnv(env with out = out)), "lsp", "1");
	ruProcess(json2string(id), script, 
		\code -> {
			if (method.responses) {
				if (length(^errs) == 0) {
					if (^data != "") {
						switch (parseJsonSafer(^data)) {
							Some(json): {
								if (!containsSet(state.processed, id)) {
									ruLspWriteResponse(id, json, log_message, conf);
								} else {
									ruLspWriteError(id, lspParseError, "Error: server already processed the request: " + json2string(id), JsonNull(), conf);
								}
							}
							None(): {
								ruLspWriteError(id, lspParseError, "error while parsing json: " + ^data, JsonString(^data), conf);
							}
						}
					} else {
						ruLspWriteResponse(id, JsonNull(), log_message, conf);
					}
				} else {
					ruLspWriteError(id, lspRequestFailed, strGlue(^errs, ", "), JsonArray(map(^errs, \err -> JsonString(err))), conf);
				}
			}
		},
		RuEnv(env.conf, out)
	);
}

ruRunLspNotification(method : RuLspMethod, params : Json, log_message : bool, state : RuLsp) -> void {
	env = state.env;
	script = ruSetScCommTaskArg(method.script(params, env), "lsp", "1");
	timer = ruMakeTimer();
	errs = ref [];
	out = RuOut(
		\msg -> if (msg != "") ruLspWriteNotification("console/message", JsonString(msg), true, env.conf),
		nop1,
		\err, __ -> refArrayPush(errs, err)
	);
	ruProcess(ruMakeUuid(), script, \code -> {}, RuEnv(env.conf, out));
}

ruRunLspServer(state : RuLsp) -> RuLsp {
	env = state.env;
	conf = env.conf;
	switch (ruLspReadMessage(env, conf)) {
		Some(m): {
			// Special watermark for non-logging
			log_message = !strContains(m.raw, "do_not_log_this");
			message = m.message;
			switch (message) {
				LspRequestMessage(__, id, method, params): {
					if (state.exit > 0 && method != "exit") {
						ruLspServerLog("Error: server is shutdown, but received a request: " + m.raw, conf);
					}
					switch (lookupTree(ruLspMethods, method)) {
						Some(meth): {
							ruRunLspRequest(id, meth, params, log_message, state);
							new_state = meth.callback(params, state);
							RuLsp(new_state with processed = insertSet(new_state.processed, id));
						}
						None(): {
							ruLspWriteError(id, lspMethodNotFound, "request method '" + method + "' is not found", JsonNull(), conf);
							state;
						}
					}
				}
				LspResponseMessage(__, id, result, errors): {
					if (state.exit > 0) {
						ruLspServerLog("Error: server is shutdown, but received a response: " + m.raw, env.conf);
					}
					switch (lookupTree(state.requests, id)) {
						Some(req): {
							ruLspServerLog(blueprint("<%id%> Processing the response: %result%",
								[
									"id", json2string(id), 
									"result", json2string(result)
								]
							), conf);
							req.callback(result, state);
						}
						None(): {
							ruLspServerLog("Server: unknown request: " + json2string(id), conf);
							state;
						}
					}
				}
				LspNotificationMessage(__, method, params): {
					if (state.exit > 0 && method != "exit") {
						ruLspServerLog("Error: server is shutdown, but received a non-exit notification: " + m.raw, env.conf);
					}
					switch (lookupTree(ruLspMethods, method)) {
						Some(meth): {
							ruRunLspNotification(meth, params, log_message, state);
							meth.callback(params, state);
						}
						None(): {
							ruLspServerLog("request method '" + method + "' is not found", conf);
							state;
						}
					}
				}
			}
		}
		None(): state;
	}
}

ruLspMethods = mergeTree(
	mergeTree(ruLspLifecycleMethods(), ruLspWorkspaceMethods()), 
	ruLspTextDocumentMethods()
);

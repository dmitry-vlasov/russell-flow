import server/http;
import process;
import text/blueprint;

export {
	// A language server working over http.
	ruHttpServer(env : RuEnv) -> void;
}

// Request data must be kept between multiple sub-requests, corresponding to a main request.
RuRequestState(
	data : ref Json,
	request : ref Maybe<RuRequest>,
	queue : ref [RuQueuedResponse]
);

RuQueuedResponse(
	uuid : string,
	response : HttpResponse,
	callback : () -> void
);

// Storage for the intermediate states of requests (makes sense only for a server)
ru_requests : ConcurHashMap<string, RuRequestState> = makeConcurHashMap(fastHashString);

ruHttpServer(env : RuEnv) -> void {
	conf = env.conf;
	port = s2i(lookupTreeDef(conf.opts, "server-port", "20001"));
	server = ref nop;
	server := createHttpServer(port,
		\-> {
			ruHttpServerLog("Server started.", conf);
			env.out.println("Http server started.")
		},
		\msg -> env.out.error(msg, []),
		\request, respond -> {
			req = deserialize(request.body, IllegalStruct());
			if (req == IllegalStruct()) {
				ruHttpServerLog("Illegal request: '" + ruCutLongString(ruServerEscapeString(request.body)) + "'", conf);
			} else {
				switch (req) {
					RuRequest(uuid, body): {
						if (body != "") {
							// A new request
							setConcurHashMap(ru_requests, uuid, RuRequestState(ref JsonNull(), ref None(), ref []));
						}
						state = getConcurHashMap(ru_requests, uuid, RuRequestState(ref JsonNull(), ref None(), ref []));
						state.request := Some(req);
						timer = ruMakeTimer();
						// Special watermark for non-logging
						log_request = !strContains(request.body, "do_not_log_this");
						if (log_request) {
							ruHttpServerLog(blueprint("<%uuid%> Client request: [%body%] %queue%",
								[
									"uuid", uuid,
									"body", ruCutLongString(ruServerEscapeString(request.body)),
									"queue", if (length(^(state.queue)) == 0) "" else "queue len: " + i2s(length(^(state.queue))),
								]
							), conf);
						}
						if (body != "") {
							log_response = \code, msg -> {
								if (log_request) {
									ruHttpServerLog(blueprint("<%uuid%> %code% Server response [%time%]: %msg% %data% %queue%",
										[
											"uuid", uuid, 
											"msg", msg,
											"code", if (code < 0) "message" else if (code == 0) "exit" else "exit code: " + i2s(code), 
											"time", ruTimePassed2s(timer),
											"data", if (^(state.data) == JsonNull()) "" else "data: [" + ruCutLongString(ruServerEscapeString(json2string(^(state.data)))) + "]", 
											"queue", if (length(^(state.queue)) == 0) "" else "queue len: " + i2s(length(^(state.queue))),
										]
									), conf);
								}
							}
							do_respond = \code, response, callback -> {
								if (isSome(^(state.request))) {
									log_response(code, "");
									state.request := None();
									respond(response);
									callback();
								} else {
									refArrayPush(state.queue, 
										RuQueuedResponse(uuid, response, \-> {
											log_response(code, "RESPONDED");
											callback();
										}), 
									);
									log_response(code, "ENQUEUED");
								}
							}
							switch (ruJson2ScComm(parseJsonSafe(body))) {
								Some(script): {
									ruProcessLocal(script, 
										\code -> do_respond(code, 
											HttpResponse(200, serialize(RuResponse(uuid, json2string(^(state.data)), Some(code))), []),
											if (!exists(ruScCommTasks(script), \task -> task.command == "server-shutdown")) nop else {
												\-> {
													env.out.println("Http server stopped.");
													ruHttpServerLog("Server stopped.", conf);
													^server();
													quit(0);
												}
											}
										), 
										ruMakeOut(
											// println
											\msg -> {
												if (log_request) {
													env.out.println(msg);
												}
												do_respond(-1, HttpResponse(200, serialize(RuResponse(uuid, msg, None())), []), nop);
											},
											// onData
											\data -> state.data := data,
											\meth, json -> do_respond(-1, HttpResponse(200, serialize(RuResponse(uuid, json2string(json), None())), []), nop),
											conf.opts
										),
									);
								}
								None(): {
									ruHttpServerLog("Illegal request: " + ruCutLongString(ruServerEscapeString(request.body)), conf);
								}
							}
						} else {
							ruDeferredResopnse(uuid, state.queue, respond, conf);
						}
					}
					default: {
						ruHttpServerLog("Illegal request: " + ruCutLongString(ruServerEscapeString(request.body)), conf);
					}
				}
			}
		}
	);
}

ruDeferredResopnse(uuid : string, queue : ref [RuQueuedResponse], respond : (HttpResponse) -> void, conf : RuConf) -> void {
	if (length(^queue) > 0) {
		r = ^queue[0];
		if (r.uuid != uuid) {
			ruHttpServerLog(blueprint("Error - uuid or request <%uuid_1%> doesn't coincide with uuid of response <%uuid_2%>", 
				[
					"uuid_1", uuid,
					"uuid_2", r.uuid
				]
			), conf);
		}
		ruHttpServerLog(blueprint("<%uuid%> Executing posponed request: '%body%'", 
			[
				"uuid", r.uuid,
				"body", r.response.body,
			]
		), conf);
		respond(r.response);
		queue := tail(^(queue));
		r.callback();
	} else {
		//ruHttpServerLog("Waiting for queue to be non-empty... : " + i2s(length(^queue)), conf);
		timer(100, \-> ruDeferredResopnse(uuid, queue, respond, conf));
	}
}

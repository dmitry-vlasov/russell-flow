import sys/concurrent;
import net/url_parameter;

export {
	// In server mode this function transfers argument to the http
	// response buffer as well as to the console output. Id is a thread id.
	ruPrintln(str : string) -> void;

	// In server mode this function transfers argument to the http
	// response buffer as well as to the console output. Id is a thread id.
	ruPrintlnToThread(str : string, threadId : int) -> void;

	// Returns accumulated output string (buffer). 
	ruOutput() -> string;

	// Returns accumulated output string (buffer). 
	ruOutputFromThread(threadId : int) -> string;

	// Clears the output buffers, accociated with a thread id.
	ruClearOutput() -> void;

	ruSkipPrinting = ref false;

	ruThreadId() -> int;
}

ruThreadId() -> int {
	s2i(getThreadId());
}

ruOutputBuffer = initConcurrentHashMap();

ruPrintln(str : string) -> void {
	if (!containsConcurrentHashMap(ruOutputBuffer, ruThreadId())) {
		setConcurrentHashMap(ruOutputBuffer, ruThreadId(), ref []);
	}
	refArrayPush(getConcurrentHashMap(ruOutputBuffer, ruThreadId(), ref []), str);
	if (!^ruSkipPrinting) {
		println(str);
	}
}

ruPrintlnToThread(str : string, threadId : int) -> void {
	if (!containsConcurrentHashMap(ruOutputBuffer, threadId)) {
		setConcurrentHashMap(ruOutputBuffer, threadId, ref []);
	}
	refArrayPush(getConcurrentHashMap(ruOutputBuffer, threadId, ref []), str);
	if (!^ruSkipPrinting) {
		println(str);
	}
}

ruOutput() -> string {
	if (!containsConcurrentHashMap(ruOutputBuffer, ruThreadId())) "" else
	strGlue(^(getConcurrentHashMap(ruOutputBuffer, ruThreadId(), ref [])), "\n");
}

ruOutputFromThread(threadId : int) -> string {
	if (!containsConcurrentHashMap(ruOutputBuffer, threadId)) "" else
	strGlue(^(getConcurrentHashMap(ruOutputBuffer, threadId, ref [])), "\n");
}

ruClearOutput() -> void {
	setConcurrentHashMap(ruOutputBuffer, ruThreadId(), ref []);
}

ruLastOutputLine(threadId : int) -> string {
	if (!containsConcurrentHashMap(ruOutputBuffer, threadId)) "" else {
		lines = ^(getConcurrentHashMap(ruOutputBuffer, threadId, ref []));
		lastElement(lines, "");
	}
}
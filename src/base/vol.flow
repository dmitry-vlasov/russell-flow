import ds/tree;
import ds/set;
import math/math;

export {
	ruJavaReferenceVol() -> double;
	ruJavaIntVol() -> double;
	ruJavaBoolVol() -> double;
	ruJavaDoubleVol() -> double;
	ruJavaAlignVol(size : double) -> double;
	ruJavaObjectHeader() -> double;

	ruJavaArrayVol(a : [?], vol : (?) -> double) -> double;
	ruJavaStringVol(s : string) -> double;
	ruJavaTreeVol(a : Tree<?, ??>, key_vol : (?) -> double, val_vol : (??) -> double) -> double;
	ruJavaSetVol(a : Set<?>, vol : (?) -> double) -> double;
}

//ruJavaReferenceVol() -> double { 8.0 } // 64 bit
ruJavaReferenceVol() -> double { 4.0 } // 64 bit
ruJavaIntVol() -> double { 4.0 }
ruJavaBoolVol() -> double { 4.0 }
ruJavaDoubleVol() -> double { 8.0 }

// All object sizes are divisible by 8 bytes
ruJavaAlignVol(size : double) -> double {
	size;
	/*if (size % 8.0 == 0) size else {
		((size / 8) + 1) * 8;
	}*/
}

ruJavaObjectHeader() -> double {
	// Reference to the object - the part of upper level aggregation
	ruJavaReferenceVol() +
	// Java header (16 bytes)
	16.0;
}

ruJavaArrayVol(a : [?], vol : (?) -> double) -> double {
	ruJavaAlignVol(
		ruJavaObjectHeader() +
		fold(a, 0.0, \acc, x -> acc + vol(x))
	);
}

ruJavaStringVol(s : string) -> double {
	ruJavaAlignVol(
		ruJavaObjectHeader() +
		// byte[] chars;
		ruJavaObjectHeader() +
		i2d(strlen(s)) * 2.0 //// 2 bytes for each symbol
	); 
}

ruJavaTreeVol(tree : Tree<?, ??>, key_vol : (?) -> double, val_vol : (??) -> double) -> double {
	ruJavaAlignVol(
		ruJavaObjectHeader() +
		switch (tree) {
			TreeNode(key, val, left, right, depth): {
				key_vol(key) + 
				val_vol(val) + 
				ruJavaTreeVol(left, key_vol, val_vol) + 
				ruJavaTreeVol(right, key_vol, val_vol) +
				ruJavaIntVol();
			}
			TreeEmpty(): 0.0;
		}
	);
}

ruJavaSetVol(set : Set<?>, vol : (?) -> double) -> double {
	ruJavaAlignVol(
		ruJavaObjectHeader() +
		ruJavaTreeVol(set.tree, vol, \__ -> ruJavaBoolVol())
	);
}

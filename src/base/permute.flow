import base/env;

export {
	ruPermute(arr : [?], perm : [int]) -> [?];
	ruPerm2s(perm : [int]) -> string;
	ruCheckPermutation(perm : [int], env : RuEnv) -> void;
	ruReversePermutation(perm : [int], env : RuEnv) -> [int];
}

ruPermute(arr : [?], perm : [int]) -> [?] {
	mapi(arr, \i,__ -> arr[perm[i]]);
}

ruPerm2s(perm : [int]) -> string {
	"[" + strGlue(mapi(perm, \i, n -> i2s(i) + " => " + i2s(n)), ", ") + "]";
}

ruCheckPermutation(perm : [int], env : RuEnv) -> void {
	ret = forall(enumFromTo(0, length(perm) - 1), \i ->
		countA(perm, \j -> j == i) == 1
	);
	if (!ret) {
		env.out.onError("Array: " + ruPerm2s(perm) + " is not a permutation", []);
		ruCrash("Array: " + ruPerm2s(perm) + " is not a permutation");
	}
}

ruReversePermutation(perm : [int], env : RuEnv) -> [int] {
	//ruCheckPermutation(perm, env);
	mapi(perm, \i,__ -> elemIndex(perm, i, -1));
}

import base/env;

export {
	ruPermute(arr : [?], perm : [int]) -> [?];
	ruPerm2s(perm : [int]) -> string;
	ruCheckPermutation(perm : [int], env : RuEnv, crash : bool) -> bool;
	ruCheckPermutationApplication(arr : [?], perm : [int], env : RuEnv, crash : bool) -> bool;
	ruReversePermutation(perm : [int], env : RuEnv) -> [int];
}

ruPermute(arr : [?], perm : [int]) -> [?] {
	mapi(arr, \i,__ -> arr[perm[i]]);
}

ruPerm2s(perm : [int]) -> string {
	if (length(perm) < 10) {
		"[" + strGlue(mapi(perm, \i, n -> i2s(i) + " => " + i2s(n)), ", ") + "]";
	} else {
		"[\n" + strIndent(concatStrings(mapi(perm, \i, n -> i2s(i) + " => " + i2s(n) + ",\n"))) + "]\n";
	}
}

ruCheckPermutation(perm : [int], env : RuEnv, crash : bool) -> bool {
	ret = forall(enumFromTo(0, length(perm) - 1), \i ->
		countA(perm, \j -> j == i) == 1
	);
	if (!ret) {
		env.out.error("Array: " + ruPerm2s(perm) + " is not a permutation", []);
		if (crash) {
			ruCrash("Array: " + ruPerm2s(perm) + " is not a permutation");
		}
	}
	ret;
}

ruCheckPermutationApplication(arr : [?], perm : [int], env : RuEnv, crash : bool) -> bool {
	if (!ruCheckPermutation(perm, env, crash)) {
		false;
	} else if (length(arr) != length(perm)) {
		env.out.error("Permutation: " + ruPerm2s(perm) + " cannot be applied to array of length: " + i2s(length(arr)), []);
		if (crash) {
			ruCrash("Permutation: " + ruPerm2s(perm) + " cannot be applied to array of length: " + i2s(length(arr)));
		}
		false;
	} else {
		true;
	}
}


ruReversePermutation(perm : [int], env : RuEnv) -> [int] {
	//ruCheckPermutation(perm, env);
	mapi(perm, \i,__ -> elemIndex(perm, i, -1));
}

import base/util;

export {
	// Syntax of a task:
	//   <command> <arg_1>=<val_1> ... <arg_n>=<val_n>
	//

	RuTask(
		command : string,
		args : Tree<string, string>
	);

	ruTask2s(task : RuTask) -> string;
	ruTask2Json(task : RuTask) -> Json;
	ruJson2Task(json : Json) -> Maybe<RuTask>;
	ruSetNoLogging(task : RuTask) -> RuTask;
}

ruTask2Json(task : RuTask) -> Json {
	JsonObject([
		Pair("command", JsonString(task.command)),
		Pair("args", JsonArray(map(tree2pairs(task.args), 
			\arg -> JsonObject([
				Pair("key", JsonString(arg.first)),
				Pair("value", JsonString(arg.second))
			])
		)))
	]);
}

ruJson2Task(json : Json) -> Maybe<RuTask> {
	if (exists(["command", "args"], \field -> !jsonObjectHasField(json, field))) None() else {
		Some(RuTask(
			getJsonStringField(json, "command", ""),
			pairs2tree(map(getJsonArrayField(json, "args"), 
				\opt -> Pair(getJsonStringField(opt, "key", ""), getJsonStringField(opt, "value", ""))
			))
		));
	}
}

ruTask2s(task : RuTask) -> string {
	task.command + " " + 
	strGlue(map(tree2pairs(task.args), \p -> 
		if (p.second == "") p.first else p.first + "=" + ruCutLongStringUpTo(p.second, 128)
	), " ") + ";";
}

ruSetNoLogging(task : RuTask) -> RuTask {
	RuTask(task with args = setTree(task.args, "do_not_log_this", ""));
}
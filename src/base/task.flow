import formats/json/json;
import text/serialize;
import base/util/str;
import base/reflect;

export {
	RuTask(command : string, args : Tree<string, flow>);

	ruTask2s(task : RuTask) -> string;
	ruTask2Json(task : RuTask) -> Json;
	ruJson2Task(json : Json) -> Maybe<RuTask>;

	ruTaskArgs2Tree(args : Tree<string, flow>) -> Tree<string, string>;
	ruTree2TaskArgs(tree : Tree<string, string>) -> Tree<string, flow>;

	ruTaskIntArg(task : RuTask, name : string, defval : int) -> int;
	ruTaskStringArg(task : RuTask, name : string, defval : string) -> string;
	ruTaskDoubleArg(task : RuTask, name : string, defval : double) -> double;
	ruTaskBoolArg(task : RuTask, name : string, defval : bool) -> bool;

	ruSetTaskNoLogging(task : RuTask) -> RuTask;
	ruTaskIsNoLogging(task : RuTask) -> bool;
	ruTaskIsLogging(task : RuTask) -> bool;

	non_logging_watermark = "do_not_log_this";
}


ruTask2Json(task : RuTask) -> Json {
	JsonObject([
		Pair("command", JsonString(task.command)),
		Pair("args", JsonArray(map(tree2pairs(task.args), 
			\arg -> JsonObject([
				Pair("name", JsonString(arg.first)),
				Pair("value", JsonString(arg.second))
			])
		)))
	]);
}

ruJson2Task(json : Json) -> Maybe<RuTask> {
	if (exists(["command", "args"], \field -> !jsonObjectHasField(json, field))) None() else {
		Some(RuTask(
			getJsonStringField(json, "command", ""),
			pairs2tree(map(getJsonArrayField(json, "args"), 
				\opt -> Pair(
					getJsonStringField(opt, "name", ""), 
					getJsonStringField(opt, "value", "")
				)
			))
		));
	}
}

ruTask2s(task : RuTask) -> string {
	task.command + " " + 
	strGlue(map(tree2pairs(ruTaskArgs2Tree(task.args)), \arg -> 
		if (arg.second == "") arg.first else arg.first + "=" + ruCutLongStringUpTo(arg.second, 256)
	), " ") + ";";
}

ruTaskArgs2Tree(args : Tree<string, flow>) -> Tree<string, string> {
	mapTree(args, \arg -> {
		type = runtimeValueType(arg);
		if (type == "bool") {
			b2s(cast(arg : flow -> bool));
		} else if (type == "int") {
			i2s(cast(arg : flow -> int));
		} else if (type == "double") {
			d2s(cast(arg : flow -> double));
		} else if (type == "string") {
			cast(arg : flow -> string);
		} else if (type == "bool") {
			b2s(cast(arg : flow -> bool));
		} else {
			toString(arg);
		}
	});
}

ruTree2TaskArgs(tree : Tree<string, string>) -> Tree<string, flow> {
	mapTree(tree, \s ->
		if (s == "true")  flow(true) else
		if (s == "false") flow(true) else
		if (isDigits(s))  flow(s2i(s)) else
		if (isDouble(s))  flow(s2d(s)) else flow(s)
	);
}

ruTaskIntArg(task : RuTask, name : string, defval : int) -> int {
	switch (lookupTree(task.args, name)) {
		Some(v): {
			type = runtimeValueType(v);
			if (type == "int") {
				cast(v : flow -> int);
			} else if (type == "string") {
				s2i(trim2(cast(v : flow -> string), " \n\r\t\""));
			} else {
				fail("runtime error: cannot convert '" + toString(v) + "' of type '" + type + "' to int");
				defval;
			}
		}
		None(): {
			defval;
		}
	}
}

ruTaskArg2String(v : flow) -> string {
	t = runtimeValueType(v);
	if (t == "int") {
		i2s(cast(v : flow -> int));
	} else if (t == "string") {
		cast(v : flow -> string);
	} else if (t == "double") {
		d2s(cast(v : flow -> double));
	} else if (t == "bool") {
		b2s(cast(v : flow -> bool));
	} else if (t == "ref") {
		ruTaskArg2String(^cast(v : flow -> ref flow));
	} else if (t == "array") {
		"[" + superglue(cast(v : flow -> [flow]), ruTaskArg2String, ", ") + "]";
	} else if (isStructName(t)) {
		t + "(" + superglue(extractStructArguments(v), ruTaskArg2String, ", ") + ")";
	} else {
		toString(v);
	}
}

ruTaskStringArg(task : RuTask, name : string, defval : string) -> string {
	switch (lookupTree(task.args, name)) {
		Some(v): {
			type = runtimeValueType(v);
			if (type == "string") v else
			if (type == "bool") b2s(cast(v : flow -> bool)) else
			if (type == "int") i2s(cast(v : flow -> int)) else
			if (type == "double") d2s(cast(v : flow -> double)) else
			toString(v);
		}
		None(): {
			defval;
		}
	}
}

ruTaskDoubleArg(task : RuTask, name : string, defval : double) -> double {
	switch (lookupTree(task.args, name)) {
		Some(v): {
			type = runtimeValueType(v);
			if (type == "int") {
				i2d(cast(v : flow -> int));
			} else if (type == "string") {
				s2d(trim2(cast(v : flow -> string), " \n\r\t\""));
			} else if (type == "double") {
				cast(v : flow -> double);
			} else {
				fail("runtime error: cannot convert '" + toString(v) + "' of type '" + type + "' to double");
				defval;
			}
		}
		None(): {
			defval;
		}
	}
}

ruTaskBoolArg(task : RuTask, name : string, defval : bool) -> bool {
	switch (lookupTree(task.args, name)) {
		Some(v): {
			type = runtimeValueType(v);
			if (type == "int") {
				cast(v : flow -> int) != 0;
			} else if (type == "string") {
				s2b(trim2(cast(v : flow -> string), " \n\r\t\""));
			} else if (type == "double") {
				cast(v : flow -> double) != 0.0;
			} else if (type == "bool") {
				cast(v : flow -> bool);
			} else {
				fail("runtime error: cannot convert '" + toString(v) + "' of type: " + type + " to bool");
				defval;
			}
		}
		None(): {
			defval;
		}
	}
}

ruSetTaskNoLogging(task : RuTask) -> RuTask {
	RuTask(task with args = setTree(task.args, non_logging_watermark, ""));
}

ruTaskIsNoLogging(task : RuTask) -> bool {
	contains(getTreeKeys(task.args), non_logging_watermark);
}

ruTaskIsLogging(task : RuTask) -> bool {
	!contains(getTreeKeys(task.args), non_logging_watermark);
}

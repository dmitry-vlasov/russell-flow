import base/dir;
import base/reflect;
import base/db;

export {
	ruLookupRuntimeModules(force : bool) -> [string];

	ruRegisterRuntimeModules(modules : [string]) -> void;
}

ruLoadRuntimeModulesFromDb() -> [string] {
	loaded = ruGetDbItem("runtime", ["modules"]);
	switch (loaded) {
		JsonArray(json_items): {
			items = filtermap(json_items, \json_item -> {
				m = getJsonStringValue(json_item, "");
				if (m == "") None() else Some(m);
			});
			if (length(items) == length(json_items)) items else [];
		}
		default: [];
	}
}

ruLookupRuntimeModules(force : bool) -> [string] {
	loaded = ruLoadRuntimeModulesFromDb();
	if (force || loaded == []) {
		russell_dir = getRussellDir();
		java_dir = pathCombineMany([russell_dir, "src", "javagen", "russell"]);
		classes = filtermap(readDirectory(java_dir), \f -> 
			if (endsWith(f, ".java")) Some(changeFileExt(f, "")) else None()
		);
		modules = filtermap(classes, \class -> {
			module = "russell." + class;
			if (hasRuntimeModule(module)) Some(module) else {
				println("Module: " + module + " is not loaded...");
				None();
			}
		});
		ruSetDbItem("runtime", ["modules"], 
			JsonArray(map(modules, \m -> JsonString(m)))
		);
		modules;
	} else {
		loaded;
	}
}

ruRegisterRuntimeModules(modules : [string]) -> void {
	iter(modules, \module -> registerRuntimeModule(module));
}

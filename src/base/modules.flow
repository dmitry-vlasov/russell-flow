import base/dir;
import base/reflect;
import base/db;

export {
	ruLookupRuntimeModules(force : bool) -> [string];

	ruRegisterRuntimeModules(modules : [string]) -> void;
}

ruLoadRuntimeModulesFromDb() -> [string] {
	loaded = ruGetDbItem("runtime", ["modules"]);
	switch (loaded) {
		JsonArray(json_items): {
			items = filtermap(json_items, \json_item -> {
				m = getJsonStringValue(json_item, "");
				if (m == "") None() else Some(m);
			});
			if (length(items) == length(json_items)) items else [];
		}
		default: [];
	}
}

ruLookupRuntimeModules(force : bool) -> [string] {
	loaded = ruLoadRuntimeModulesFromDb();
	if (force || loaded == []) {
		russell_dir = getRussellDir();
		java_russell_dir = pathCombineMany([russell_dir, "src", "javagen", "russell"]);
		java_runtime_dir = pathCombineMany([russell_dir, "platforms", "java", "com", "area9innovation", "flow"]);
		modules = concat(
			ruLookupRuntimeModulesInDir(java_russell_dir, "russell"),
			ruLookupRuntimeModulesInDir(java_runtime_dir, "com.area9innovation.flow"),
		);
		ruSetDbItem("runtime", ["modules"], 
			JsonArray(map(modules, \m -> JsonString(m)))
		);
		modules;
	} else {
		loaded;
	}
}

ruLookupRuntimeModulesInDir(java_dir : string, package : string) -> [string] {
	classes = filtermap(readDirectory(java_dir), \f -> 
		if (endsWith(f, ".java")) Some(changeFileExt(f, "")) else None()
	);
	filtermap(classes, \class -> {
		module = package + "." + class;
		if (hasRuntimeModule(module)) Some(module) else {
			println("Module: " + module + " is not loaded...");
			None();
		}
	});
}

ruRegisterRuntimeModules(modules : [string]) -> void {
	iter(modules, \module -> registerRuntimeModule(module));
}

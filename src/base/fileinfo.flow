import utctime;
import base/conf;
import base/ids;
import base/vol;

export {
	RuFileInfo(
		id : int, // Unique integer identifier of the source
		module : string, // The path as used by flow imports
		path : string, // The full filesystem path
		modified : double, // The timestamp of the source file
		ids_ver : double // version of ids maps which are used
	);

	ruNoFileInfo = RuFileInfo(-1, "", "", 0.0, 0.0);

	ruFileId(file : string, conf : RuConf) -> int;
	ruFileInfo2s(info : RuFileInfo) -> string;
	ruFileChanged(info : RuFileInfo) -> bool;
	ruFileChangedMessage(info : RuFileInfo, path : string) -> string;
	ruJavaFileInfoVol(info : RuFileInfo) -> double;
}

ruFileId(file : string, conf : RuConf) -> int {
	module = ruTrimPath(file, conf, ".ru");
	s2id(module);
}

ruFileInfo2s(info : RuFileInfo) -> string {
	"module='" + info.module + "' path='" + info.path + "' modified=" + time2stringUtc(info.modified);
}

ruFileChanged(info : RuFileInfo) -> bool {
	!fileExists(info.path) || info.modified != fileModified(info.path);
}

ruFileChangedMessage(info : RuFileInfo, path : string) -> string {
	modified = fileModified(path);
	if (!fileExists(path)) {
		"file " + path + " doesn't exist";
	} else {
		if (info.modified == modified) "" else {
			"module '" + info.module + "' is obsolete with timestamp '" + time2stringUtc(info.modified) + "' while source has '" + time2stringUtc(modified) + "'";
		}
	}
}

ruJavaFileInfoVol(info : RuFileInfo) -> double {
	ruJavaAlignVol(
		ruJavaObjectHeader() +
		ruJavaIntVol() +
		ruJavaStringVol(info.module) +
		ruJavaStringVol(info.path) +
		ruJavaDoubleVol()
	);
}

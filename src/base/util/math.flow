import ds/set;
import math/math;

export {
	ruiLogN(n : int, N : int) -> int;
	ruiExpN(n : int, N : int) -> int;

	rudLogN(n : double, N : int) -> int;
	rudExpN(n : double, N : int) -> int;

	ruSetsIntersect(s1 : Set<?>, s2 : Set<?>) -> bool;
	ruIsSubset(s1 : Set<?>, s2 : Set<?>) -> bool;
	ruExistsi(a : [?], fn : (int, ?) -> bool) -> bool;

	ruMaxIntFromArray(ints : [int]) -> int;
	ruSumIntsFromArray(ints : [int]) -> int;
	ruMaxDoubleFromArray(ints : [double]) -> double;
	ruSumDoublesFromArray(ints : [double]) -> double;

	ruTransposeMatrix(m : [[?]]) -> [[?]];
}

ruiLogN(n : int, N : int) -> int {
	if (n < 0) ruiLogN(-n, N) else 
	if (n < N) 1 else {
		1 + ruiLogN(n / N, N);
	}
}

ruiExpN(n : int, N : int) -> int {
	if (n < 0) ruiExpN(-n, N) else 
	if (n == 0) 1 else {
		N * ruiExpN(n - 1, N);
	}
}

rudLogN(n : double, N : int) -> int {
	if (n < 0.0) rudLogN(-n, N) else 
	if (n < i2d(N)) 1 else {
		1 + rudLogN(n / i2d(N), N);
	}
}

rudExpN(n : double, N : int) -> int {
	if (n < 0.0) rudExpN(-n, N) else 
	if (n == 0.0) 1 else {
		N * rudExpN(n - 1.0, N);
	}
}

ruSetsIntersect(s1 : Set<?>, s2 : Set<?>) -> bool {
	if (sizeSet(s2) < sizeSet(s1)) {
		ruSetsIntersect(s2, s1);
	} else {
		existsSet(s1, \v -> containsSet(s2, v));
	}
}

ruIsSubset(s1 : Set<?>, s2 : Set<?>) -> bool {
	!existsSet(s1, \x -> !containsSet(s2, x));
}

ruExistsi(a : [?], fn : (int, ?) -> bool) -> bool {
	iteriUntil(a, fn) != length(a);
}

ruMaxIntFromArray(ints : [int]) -> int {
	fold(ints, 0, \acc, i -> max(acc, i));
}

ruSumIntsFromArray(ints : [int]) -> int {
	fold(ints, 0, \acc, i -> acc + i);
}

ruMaxDoubleFromArray(ints : [double]) -> double {
	fold(ints, 0.0, \acc, i -> max(acc, i));
}

ruSumDoublesFromArray(ints : [double]) -> double {
	fold(ints, 0.0, \acc, i -> acc + i);
}

ruTransposeMatrix(m : [[?]]) -> [[?]] {
	if (length(m) == 0) [] else {
		dimx = length(m);
		dimy = length(m[0]);
		map(enumFromTo(0, dimy - 1), \i ->
			map(enumFromTo(0, dimx - 1), \j -> m[j][i])
		);
	}
}
import math/stringmath;

export {
	// Prints time (milliseconds) in '1h 2s 25.99s' format 
	ruTime2s(time : double) -> string;
	// Current time in milliseconds.
	ruTime() -> double;

	RuTimer(
		started : double, // The time when timer was created.
		limit   : double  // The time limit for the timer.
	);
	ruMakeTimer(limit : double) -> RuTimer;
	ruTimeIsOver(timer : RuTimer) -> bool;
	ruTimeLeft(timer : RuTimer) -> double;
	ruTimePassed(timer : RuTimer) -> double;
	ruTimePassed2s(timer : RuTimer) -> string;
}

ruTime2s(time : double) -> string {
	day  = floor(time / (1000.0 * 60.0 * 60.0 * 24.0));
	hour = floor((time - i2d(day * 1000 * 60 * 60 * 24)) / (1000.0 * 60.0 * 60.0));
	min  = floor((time - i2d((day * 24 + hour) * 1000 * 60 * 60)) / (1000.0 * 60.0));
	sec1 = (time - i2d((min + (hour + day * 24)* 60) * 60 * 1000)) / 1000.0 ;
	sec2 = floor((time - i2d(((day * 24 + hour) * 60  + min) * 1000 * 60)) / 1000.0);
	ms   = time - i2d((sec2 + (min + (hour + day * 24)* 60) * 60) * 1000);
	day2s  = \-> if (day > 0)  i2s(day)  + " d " else "";
	hour2s = \-> if (hour > 0) i2s(hour) + " h " else "";
	min2s  = \-> if (min > 0)  i2s(min)  + " m " else "";
	sec2s  = \-> if (sec2 > 0) d2st(sec1, 2) + " s " else "";
	day2s() + hour2s() + min2s() + sec2s() + 
	(if (day > 0 || hour > 0 || min > 0 || sec2 > 0) "" else d2st(ms, 2) + " ms");
}

ruTime() -> double {
	//timestamp() / 1000.0
	timestamp()
}

ruMakeTimer(limit : double) -> RuTimer {
	RuTimer(ruTime(), limit);
}

ruTimeIsOver(timer : RuTimer) -> bool {
	ruTime() - timer.started > timer.limit;
}

ruTimeLeft(timer : RuTimer) -> double {
	timer.limit - (ruTime() - timer.started);
}

ruTimePassed(timer : RuTimer) -> double {
	ruTime() - timer.started;
}

ruTimePassed2s(timer : RuTimer) -> string {
	ruTime2s(ruTime() - timer.started);
}

import math/stringmath;

export {
	RuTimeUnits(
		day : int, 
		hour : int,
		min : int, 
		sec : int,
		ms : double
	);

	ruParseTimeUnits(s : string) -> RuTimeUnits;
	ruTimeUnits2s(t : RuTimeUnits) -> string;
	ruTime2TimeUnits(t : double) -> RuTimeUnits;
	ruTimeUnits2Time(t : RuTimeUnits) -> double;

	// Prints time (milliseconds) in '1h 2s 25.99s' format 
	ruTime2s(t : double) -> string;
	ruParseTime(s : string) -> double;
}

ruParseTimeUnits(s : string) -> RuTimeUnits {
	if (s == "year") RuTimeUnits(365, 0, 0, 0, 0.0) else
	if (s == "month") RuTimeUnits(31, 0, 0, 0, 0.0) else
	if (s == "week") RuTimeUnits(7, 0, 0, 0, 0.0) else
	ruDoParseTimeUnits(toLowerCase(s), 0, RuTimeUnits(0, 0, 0, 0, 0.0), "");
}

ruDoParseTimeUnits(s : string, i : int, acc : RuTimeUnits, num : string) -> RuTimeUnits {
	if (i == strlen(s)) acc else {
		ch = getCharAt(s, i);
		if (isDigit(ch)) {
			ruDoParseTimeUnits(s, i + 1, acc, num + ch);
		} else if (ch == "d") {
			ruDoParseTimeUnits(s, i + 1, RuTimeUnits(acc with day = s2i(num)), "");
		} else if (ch == "h") {
			ruDoParseTimeUnits(s, i + 1, RuTimeUnits(acc with hour = s2i(num)), "");
		} else if (ch == "m") {
			ruDoParseTimeUnits(s, i + 1, RuTimeUnits(acc with min = s2i(num)), "");
		} else if (ch == "s") {
			ruDoParseTimeUnits(s, i + 1, RuTimeUnits(acc with sec = s2i(num)), "");
		} else {
			ruDoParseTimeUnits(s, i + 1, acc, num);
		}
	}
}

ruTimeUnits2s(time : RuTimeUnits) -> string {
	day2s  = \ -> if (time.day > 0)  i2s(time.day)  + " d " else "";
	hour2s = \ -> if (time.hour > 0) i2s(time.hour) + " h " else "";
	min2s  = \ -> if (time.min > 0)  i2s(time.min)  + " m " else "";
	sec2s  = \ -> {
		secs = ruTimeUnits2Time(time) / 1000.0;
		if (secs < 600.0) {
			(if (secs < 1.0) {
				d2st(time.ms / 1000.0, 3);
			} else if (secs < 10.0) {
				d2st(secs, 2);
			} else {
				i2s(time.sec);
			}) + " s ";
		} else ""
	}
	trim(day2s() + hour2s() + min2s() + sec2s());
}

ruTime2TimeUnits(time : double) -> RuTimeUnits {
	day  = floor(time / (1000.0 * 60.0 * 60.0 * 24.0));
	hour = floor(
		(time - (i2d(day) * i2d(1000 * 60 * 60 * 24))) / 
		(1000.0 * 60.0 * 60.0)
	);
	min  = floor(
		(time - (i2d(day * 24 + hour) * i2d(1000 * 60 * 60))) / 
		(1000.0 * 60.0)
	);
	sec1 = (
		time - (i2d(min) + (i2d(hour) + i2d(day) * 24.0) * 60.0) * i2d(60 * 1000)
	) / 1000.0 ;
	sec2 = floor(
		(time - (((i2d(day) * 24.0 + i2d(hour)) * 60.0  + i2d(min)) * i2d(1000 * 60))) / 
		1000.0
	);
	ms   = time - ((i2d(sec2) + (i2d(min) + (i2d(hour) + i2d(day) * 24.0)* 60.0) * 60.0) * 1000.0);
	RuTimeUnits(day, hour, min, sec2, ms);
}

ruTimeUnits2Time(t : RuTimeUnits) -> double {
	t.ms + 
	i2d(t.sec)  * 1000.0 + 
	i2d(t.min)  * 1000.0 * 60.0 +
	i2d(t.hour) * 1000.0 * 60.0 * 60.0 +
	i2d(t.day)  * 1000.0 * 60.0 * 60.0 * 24.0;
}

ruTime2s(timestamp : double) -> string {
	ruTimeUnits2s(ruTime2TimeUnits(timestamp));
}

ruParseTime(s : string) -> double {
	ruTimeUnits2Time(ruParseTimeUnits(s));
}

import ds/cart_prod;
import ds/trie;
import sys/target;
import lingo/compiler/syntaxtree_types;
import math/uuid;
import string_utils;
import text/blueprint;
import base/util/math;

export {
	// Convert a long string with brackets to a multi-line with level indentation.
	ruIndentBrackets(str : string, maxlen : int) -> string;
	ruIndentTimes(str : string, n : int) -> string;
	ruIndentWith(str : string, indent : string) -> string;

	// Remove first '\t' from each line
	ruUnindent(s : string) -> string;
	ruTrimAll(str : string) -> string;
	ruStrReplaceAll(str : string, chars : string, onto : string) -> string;
	ruMakeUuid() -> string;
	ruProd2s(prod : CartProd) -> string;

	// matrix[col][row] : string
	ruStringMatrix2s(matrix : [[string]], colHeaders : Maybe<[string]>, rowHeadres : Maybe<[string]>) -> string;
	ruStringTable2s(matrix : [[string]], colHeaders : Maybe<[string]>) -> string;
	ruTable2TSVs(matrix : [[string]]) -> string;
	ruWrapLine(s : string, max_len : int, sep : string) -> [string];
	ruWrapLines(s : string, max_len : int, sep : string) -> [string];

	/*
	When URI parser parses something like: 
		file:///c:/Users/dmitr/area9/flow9/tools/flowc
	it outputs path as: 
		/c:/Users/dmitr/area9/flow9/tools/flowc
	which is wrong in windows, first slash must be removed.
	*/
	ruCorrectUriPath(path : string) -> string;

	// Do a replacement "\n" to "\\n" and so on
	ruServerEscapeString(str : string) -> string;
	ruCutLongString(str : string) -> string;
	ruCutLongStringUpTo(str : string, up_to : int) -> string;

	ruHighlightErrorPos(src : string, pos : int) -> string;
	ruExpectError2s(err : ExpectError) -> string;

	// Adds a new line after s if s is not empty 
	ruAddNewLine(s : string) -> string;

	// Adds a space after s if s is not empty
	ruAddSpace(s : string) -> string;
	ruIsSpace(s : string) -> bool;

	ruSplitLines(lines : [string]) -> [string];

	ruCheckSubstring(txt : string, pos : int, str : string) -> bool;
	ruFindSubstring(txt : string, pos : int, str : string) -> int;
	ruFindSubstringEscaped(txt : string, pos : int, str : string, escapes : string) -> int;

	// Returns a pair: first - index of a substring, second - its position in txt
	ruFindOneOfSubstrings(txt : string, pos : int, strs : [string]) -> Pair<int, int>;

	//ruPlotDistrib(distib : Tree<int, int>) -> string;

	// Reduce long strings (try not to exceed 'max_width' symbols) and long arrays (more then 5 elements).
	// Usefull while logging.
	ruJson2sketch(j : Json) -> string;
	ruJson2skatchWidth(j : Json, max_width : int) -> string;

	ruFirstNLinesPos(s : string, n : int) -> int;
	ruTakeFirstNLines(s : string, n : int) -> string;

	ruFirstAfterPos(s : string, pos : int, what : string) -> int;
	ruLastBeforePos(s : string, pos : int, what : string) -> int;
	ruStrEqualsAtPos(s : string, pos : int, what : string) -> bool;

	ruMinPos(p1 : int, p2 : int) -> int;
	ruMaxPos(p1 : int, p2 : int) -> int;
	ruPosPreceeds(less : int, more : int) -> bool;

	RuQuoted(text : string, quotBeg : string, quotEnd : string);
	ruString2quoted(s : string, quotation : string) -> [RuQuoted];
	ruString2quoted2(s : string, quotBeg : string, quotEnd) -> [RuQuoted];
	ruQuoted2String(quoted : [RuQuoted]) -> string;

	// Split string into non-space words, interlaced with spaces
	ruTokenise(s : string) -> [string];

	// Leave only a single ' ' as a separator between non-space tokens.
	ruSingleSpaceDelimiter(ss : [string]) -> [string];

	ruTransformTokensInQuoted(text : string, quotation : string, fn : (string) -> string) -> string;
	ruTransformQuoted2(text : string, quotBeg : string, quotEnd : string, fn : (string) -> string) -> string;
}

ruIndentBrackets(str : string, maxlen : int) -> string {
	if (strlen(str) < maxlen) str else {
		eitherMap(
			ruBracketBegEndMap(str, 0, None(), makeTree()),
			\beg_end -> {
				if (sizeTree(beg_end) == 0) str else {
					ruDoIndentBrackets(str, 0, strlen(str), beg_end, maxlen, "");
				}
			},
			str
		);
	}
}

RuBracketEndsStack(
	begin : int,
	prev : Maybe<RuBracketEndsStack>
);

ruBracketBegEndMap(str : string, i : int, stack : Maybe<RuBracketEndsStack>, acc : Tree<int, int>) -> Maybe<Tree<int, int>> {
	if (i == strlen(str)) {
		if (isNone(stack)) Some(acc) else None();
	} else {
		s = getCharAt(str, i);
		if (s == "(" && (i + 1 < strlen(str)) && getCharAt(str, i + 1) == " ") {
			ruBracketBegEndMap(str, i + 1, Some(RuBracketEndsStack(i, stack)), acc);
		} else if (s == ")" && (i > 0) && getCharAt(str, i - 1) == " ") {
			maybeBind(stack, \top ->
				ruBracketBegEndMap(str, i + 1, top.prev, setTree(acc, top.begin, i + 1))
			);
		} else {
			ruBracketBegEndMap(str, i + 1, stack, acc);
		}
	}
}

ruDoIndentBrackets(str : string, i : int, end : int, beg_end : Tree<int, int>, maxlen : int, acc : string) -> string {
	if (i == end) acc else {
		s = getCharAt(str, i);
		if (s == "(" && (i + 1 < strlen(str)) && getCharAt(str, i + 1) == " ") {
			len = lookupTreeDef(beg_end, i, strlen(str)) - i;
			if (len < max(16, maxlen)) {
				ruDoIndentBrackets(
					str, i + len, end, beg_end, maxlen,
					acc + substring(str, i, len)
				);
			} else {
				ruDoIndentBrackets(
					str, i + len, end, beg_end, maxlen,
					acc + "(\n" + strIndent(ruDoIndentBrackets(str, i + 1, i + len - 1, beg_end, maxlen - 4, "")) + "\n)"
				);
			}
		} else {
			ruDoIndentBrackets(str, i + 1, end, beg_end, maxlen, acc + s);
		}
	}
}

ruIndentTimes(s : string, n : int) -> string {
	ruIndentWith(s, strRepeat("\t", n));
}

ruIndentWith(s : string, indent : string) -> string {
	if (indent == "") s else strGlue(map(strSplit(s, "\n"), \line -> indent + line), "\n");
}

ruUnindent(s : string) -> string {
	strGlue(map(strSplit(s, "\n"), 
		\line -> if (startsWith(line, "\t")) strRight(line, 1) else line
	), "\n");
}

ruTrimAll(str : string) -> string {
	ltrim2(rtrim2(str, "_\n\t\r"), " \n\t\r");
}

ruStrReplaceAll(str : string, chars : string, onto : string) -> string {
	char_codes = buildSet(s2a(chars));
	under_code = getCharCodeAt(onto, 0);
	fold(
		map(s2a(str), \i -> if (containsSet(char_codes, i)) under_code else i),
		"",
		\ac, i -> ac + fromCharCode(i)
	)
}

ruMakeUuid() -> string {
	strReplace(makeUuid(), "-", "");
}

ruProd2s(prod : CartProd) -> string {
	strGlue(map(prod.sets, \s -> i2s(length(s))), "x");
}

ruSplitByLen(s : string, max_len : int) -> [string] {
	ruDoSplitByLen(s, max_len, 0, []);
}

ruDoSplitByLen(s : string, max_len : int, i : int, acc : [string]) -> [string] {
	if (i + max_len >= strlen(s)) {
		concat(acc, [strRight(s, i)]);
	} else {
		ruDoSplitByLen(s, max_len, i + max_len, concat(acc, [substring(s, i, max_len)]));
	}
}

ruWrapLine(s : string, max_len : int, sep : string) -> [string] {
	if (sep == "") ruSplitByLen(s, max_len) else
	foldi(strSplit(s, sep), [], \i, acc, word -> 
		if (i == 0) [word] else {
			last = lastElement(acc, "");
			added = if (last == "") word else last + sep + word;
			if (strlen(added) <= max_len) {
				replace(acc, length(acc) - 1, added);
			} else {
				concat(acc, [word]);
			}
		}
	);
}

ruWrapLines(s : string, max_len : int, sep : string) -> [string] {
	concatA(map(strSplit(s, "\n"), \line -> ruWrapLine(line, max_len, sep)));
}

RuStringDims(length : int, height : int);

ruStringDims(s : string) -> RuStringDims {
	lines = strSplit(s, "\n");
	RuStringDims(
		fold(tail(lines), strlen(lines[0]), \acc, line -> max(acc, strlen(line))),
		length(lines)
	);
}

ruFillCell(s : string, dims : RuStringDims) -> [string] {
	s_lines = strSplit(s, "\n");
	map(enumFromTo(0, dims.height - 1), \i ->
		if (i < length(s_lines)) {
			line = " " + s_lines[i];
			if (strlen(line) < dims.length) {
				rpad(line, " ", dims.length);
			} else {
				substring(line, 0, dims.length);
			}
		} else {
			strRepeat(" ", dims.length);
		}
	);
}

ruCompleteMatrix(m : [[string]]) -> [[string]] {
	max_rows = fold(m, 0, \acc, col -> max(acc, length(col)));
	fold(m, [], \acc, col ->
		concat(acc, [concat(col, arrayRepeat("", max_rows - length(col)))])
	);
}

ruStringMatrix2s(m : [[string]], colHeaders : Maybe<[string]>, rowHeadres : Maybe<[string]>) -> string {
	if (m == []) "" else {
		m1 = eitherMap(colHeaders, \hs -> mapi(m, \i, col -> concat([if (i < length(hs)) hs[i] else ""], col)), m);
		m2 = eitherMap(rowHeadres, \hs -> concat(if (isNone(colHeaders)) [hs] else [concat([""], hs)], m1), m1);
		matr = ruCompleteMatrix(m2);
		n_rows = length(matr[0]);
		dims = map(matr, \col -> map(col, \row -> ruStringDims(row)));
		cols = map(dims, \col -> fold(col, 0, \ac, row -> max(ac, row.length + 2)));
		rows = map(enumFromTo(0, n_rows - 1), \i -> fold(dims, 0, \ac, col -> max(ac, col[i].height)));
		cells = mapi(matr, \i, col -> mapi(col, \j, row -> ruFillCell(row, RuStringDims(cols[i], rows[j]))));
		leng = fold(cols, 0, \acc, col -> acc + col + 1) + 1;
		strGlue(
			map(enumFromTo(0, n_rows - 1),
				\i -> strGlue(
					map(enumFromTo(0, rows[i] - 1),
						\j -> "|" + strGlue(mapi(cols, \k,__ -> cells[k][i][j]), "|") + "|"
					),
					"\n"
				)
			),
			"\n" + strRepeat("-", leng) + "\n"
		)
	}
}

ruStringTable2s(m : [[string]], colHeaders : Maybe<[string]>) -> string {
	if (m == []) "" else {
		m1 = eitherMap(colHeaders, \hs -> mapi(m, \i, col -> concat([if (i < length(hs)) hs[i] else ""], col)), m);
		matr = ruCompleteMatrix(m1);
		n_rows = length(matr[0]);
		dims = map(matr, \col -> map(col, \row -> ruStringDims(row)));
		cols = map(dims, \col -> fold(col, 0, \ac, row -> max(ac, row.length + 2)));
		rows = map(enumFromTo(0, n_rows - 1), \i -> fold(dims, 0, \ac, col -> max(ac, col[i].height)));
		cells = mapi(matr, \i, col -> mapi(col, \j, row -> ruFillCell(row, RuStringDims(cols[i], rows[j]))));
		leng = fold(cols, 0, \acc, col -> acc + col + 1);
		foldi(
			map(enumFromTo(0, n_rows - 1),
				\i -> strGlue(
					map(enumFromTo(0, rows[i] - 1),
						\j -> strGlue(mapi(cols, \k,__ -> cells[k][i][j]), " ")
					),
					"\n"
				)
			),
			"",
			\i, acc, s -> {
				if (i != 1 || isNone(colHeaders)) acc + "\n" + s else  {
					acc + "\n" + strRepeat("-", leng) + "\n" + s
				}
			}
		)
	}
}

ruTable2TSVs(matrix : [[string]]) -> string {
	concatStrings(map(matrix, \row -> strGlue(row, "\t") + "\n"));
}

// Do a replacement "\n" to "\\n" and so on
ruServerEscapeString(str : string) -> string {
	strReplaces(str, ["\n", "\\n", "\r", "\\r", "\t", "\\t"]);
}

ruCutLongString(str : string) -> string {
	ruCutLongStringUpTo(str, 256);
}

ruCutLongStringUpTo(str : string, up_to : int) -> string {
	escaped = ruServerEscapeString(str);
	if (strlen(escaped) < up_to) escaped else {
		strLeft(escaped, up_to / 2) + "...[" + i2s(strlen(escaped) - up_to) + " is cut off ]..." + strRight(escaped, strlen(escaped) - (up_to / 2));
	}
}

showDiffFiles(str1 : string, str2 : string) -> string {
	strGlue(mapi(
		diffFiles(str1, str2), \i, diff ->
			"diff " + i2s(i + 1) + ":\n" + showDiff(diff)
		), "\n====================\n"
	);
}

FcDiffPart(start : int, end : int, text : string);
FcDiff(left : FcDiffPart, right : FcDiffPart);

showDiffPart(part : FcDiffPart) -> string {
	"start=" + i2s(part.start) + ", end=" + i2s(part.end) + ", len=" + i2s(part.end - part.start) + " " 
	+ ", text:\n--------------\n" + part.text + "\n--------------\n\n";
}

showDiff(diff : FcDiff) -> string {
	"LEFT: " + showDiffPart(diff.left) + "RIGHT: " + showDiffPart(diff.right);
}

diffFiles(str1 : string, str2 : string) -> [FcDiff] {
	lines1 = strSplit(str1, "\n");
	lines2 = strSplit(str2, "\n");
	trie1 = foldi(lines1, makeTrie(), \i, acc, line -> addTrie(acc, line, concat(lookupTrieDef(acc, line, []), [i])));
	trie2 = foldi(lines2, makeTrie(), \i, acc, line -> addTrie(acc, line, concat(lookupTrieDef(acc, line, []), [i])));
	for(Triple([], 0,0), 
		\t -> {
			i1 = t.second;
			i2 = t.third;
			!(i1 == length(lines1) && i2 == length(lines2))
		},
		\t -> {
			acc = t.first;
			i1 = t.second;
			i2 = t.third;
			p1 = diffFilesHelper(i1 + 1, i2 + 1, lines1, length(lines2), trie2);
			p2 = diffFilesHelper(i2 + 1, i1 + 1, lines2, length(lines1), trie1);
			if (p1.second != -1) {
				s1 = p1.first - i1 + p1.second - i2;
				s2 = p2.first - i2 + p2.second - i1;
				if (s1 <= s2) {
					between1 = strGlue(subrange(lines1, i1 + 1, p1.first - i1 - 1), "\n");
					between2 = strGlue(subrange(lines2, i2 + 1, p1.second - i2 - 1), "\n");
					Triple(
						if (between1 == "" && between2 == "") acc else {
							concat(acc, [
								FcDiff(
									FcDiffPart(i1 + 1, p1.first, between1), 
									FcDiffPart(i2 + 1, p1.second, between2)
								)
							])
						},
						p1.first, 
						p1.second
					);
				} else {
					between1 = strGlue(subrange(lines1, i1 + 1, p2.second - i1 - 1), "\n");
					between2 = strGlue(subrange(lines2, i2 + 1, p2.first - i2 - 1), "\n");
					Triple(
						if (between1 == "" && between2 == "") acc else {
							concat(acc, [
								FcDiff(
									FcDiffPart(i1 + 1, p2.second, between1), 
									FcDiffPart(i2 + 1, p2.first, between2)
								)
							]);
						},
						p2.second, 
						p2.first
					);
				}
			} else {
				between1 = strGlue(subrange(lines1, i1 + 1, length(lines1) - i1 - 1), "\n");
				between2 = strGlue(subrange(lines2, i2 + 1, length(lines2) - i2 - 1), "\n");
				Triple(
					concat(acc, [
						FcDiff(
							FcDiffPart(i1 + 1, length(lines1) - 1, between1), 
							FcDiffPart(i2 + 1, length(lines2) - 1, between2)
						)
					]), 
					length(lines1), 
					length(lines2)
				);
			}
		}
	).first
}

diffFilesHelper(i : int, j : int, arr : [string], len : int, trie : Trie<[int]>) -> Pair<int, int> {
	if (i == length(arr)) {
		if (j == len) Pair(i, j) else Pair(i, -1);
	} else {
		switch (lookupTrie(trie, arr[i])) {
			Some(js_): {
				switch (find(js_, \j1 -> j <= j1)) {
					Some(j1): Pair(i, j1);
					None(): Pair(i, -1);
				}
			}
			None(): diffFilesHelper(i + 1, j, arr, len, trie);
		}
	}
}

ruCorrectUriPath(path : string) -> string {
	if (!startsWith(path, "/") || !hasTargetName("windows")) path else {
		path1 = strRight(path, 1);
		// Detect c:, d:, etc.
		if (isLetter(getCharAt(path1, 0)) && getCharAt(path1, 1) == ":") {
			path1
		} else {
			// keep original path 
			path
		}
	}
}

ruHighlightErrorPos(src : string, pos : int) -> string {
	left = substring(src, pos - 64, 64);
	right = substring(src, pos, 64);
	left + "<<ERROR>>" + right;
}

ruExpectError2s(err : ExpectError) -> string {
	"met: '" + err.met + "', while expected: '" + strGlue(err.expected, ", ") + "'";
}

ruAddNewLine(s : string) -> string {
	if (s == "") "" else s + "\n";
}

ruAddSpace(s : string) -> string {
	if (s == "") "" else s + " ";
}

ruSplitLines(lines : [string]) -> [string] {
	map(concatA(map(lines, \l -> strSplit(l, "\n"))), \l -> trim2(l, " \t\n\r"));
}

ruCheckSubstring(txt : string, pos : int, str : string) -> bool {
	ruDoCheckSubstring(txt, pos, 0, str);
}

ruDoCheckSubstring(txt : string, pos : int, i : int, str : string) -> bool {
	if (i == strlen(str)) true else 
	if (getCharAt(txt, pos + i) != getCharAt(str, i)) false else 
	ruDoCheckSubstring(txt, pos, i + 1, str);
}

ruFindSubstring(txt : string, pos : int, str : string) -> int {
	ruDoFindSubstring(txt, pos, 0, str);
}

ruDoFindSubstring(txt : string, pos : int, i : int, str : string) -> int {
	if (pos == strlen(txt)) {
		-1;
	} else if (i == strlen(str)) {
		pos;
	} else if (getCharAt(txt, pos + i) != getCharAt(str, i)) {
		ruDoFindSubstring(txt, pos + 1, 0, str);
	} else {
		ruDoFindSubstring(txt, pos, i + 1, str);
	}
}

ruFindOneOfSubstrings(txt : string, pos : int, strs : [string]) -> Pair<int, int> {
	all_inds = map(strs, \str -> ruFindSubstring(txt, pos, str));
	found_inds = filter(all_inds, \ind -> ind >= 0);
	if (length(found_inds) == 0) Pair(-1, -1) else {
		min_ind = fold(tail(found_inds), found_inds[0], min);
		i = findiDef(all_inds, \ind -> ind == min_ind, -1);
		Pair(i, min_ind);
	}
}

ruFindSubstringEscaped(txt : string, pos : int, str : string, escapes : string) -> int {
	ruDoFindSubstringEscaped(txt, pos, 0, "", str, escapes);
}

ruDoFindSubstringEscaped(txt : string, pos : int, i : int, esc : string, str : string, escapes : string) -> int {
	if (pos == strlen(txt)) {
		-1;
	} else if (i == strlen(str)) {
		pos;
	} else if (getCharAt(txt, pos + i) != getCharAt(str, i) || esc != "") {
		new_esc = 
			if (esc == "" && strContains(escapes, getCharAt(txt, pos + i))) {
				getCharAt(txt, pos + i)
			} else if (esc != "" && getCharAt(txt, pos + i) == esc) {
				"";
			} else {
				esc;
			}
		ruDoFindSubstringEscaped(txt, pos + 1, 0, new_esc, str, escapes);
	} else {
		ruDoFindSubstringEscaped(txt, pos, i + 1, "", str, escapes);
	}
}
/*
ruPlotDistrib(distrib : Tree<int, int>, roof_val : int) -> string {
	keys = getTreeKeys(distrib);
	vals = getTreeValues(distrib);

	min_key = ruMinIntFromArray(keys);
	max_key = ruMaxIntFromArray(keys);

	min_val = ruMinIntFromArray(vals);
	max_val = ruMaxIntFromArray(vals);

	factor = i2d(max_val - min_val) / i2d(roof_val);


	"";
}
*/

ruJson2sketch(j : Json) -> string {
	ruJson2skatchWidth(j, 512);
}

ruJson2skatchWidth(j : Json, max_width : int) -> string {
	arr_len = \arr -> fold(arr, 0, \acc, v ->
		acc + if (strContains(v, "\n")) max_width else strlen(v) + 2
	);
	switch (j : Json) {
		JsonNull(): "null";
		JsonBool(v): b2s(v);
		JsonDouble(d): d2s(d);
		JsonString(s): {
			s0 = toStringForJson(s);
			if (strlen(s) < max_width) s0 else ruCutLongStringUpTo(s0, max(max_width, 16));
		}
		JsonArray(arr): {
			if (arr == []) "[]" else
			if (length(arr) == 1) {
				a = ruJson2skatchWidth(arr[0], max_width);
				if (!strContains(a, "\n") && strlen(a) + 2 < max_width) {
					"[" + a + "]";
				} else {
					"[\n\t" + ruJson2skatchWidth(arr[0], max_width - 4) + "\n]";
				}
			} else
			if (length(arr) <= 10) {
				arr_s = \i -> map(arr, \v -> ruJson2skatchWidth(v, max_width - i));
				arr_0 = arr_s(0);
				if (arr_len(arr_0) + 2 < max_width) {
					"[" + strGlue(arr_0, ", ") + "]";
				} else {
					"[\n" + strIndent(strGlue(arr_s(4), ",\n")) + "\n]";
				}
			} else {
				arr_s = \i -> concat3(
					map(take(arr, 5), \v -> ruJson2skatchWidth(v, max_width - i)),
					["... [" + i2s(length(arr) - 10) + " is cut off] ..."],
					map(tailFrom(arr, length(arr) - 5), \v -> ruJson2skatchWidth(v, max_width - i))
				);
				arr_0 = arr_s(0);
				if (arr_len(arr_0) + 2 < max_width) {
					"[" + strGlue(arr_0, ", ") + "]";
				} else {
					"[\n" + strIndent(strGlue(arr_s(4), ",\n")) + "\n]";
				}
			}
		}
		JsonObject(arr): {
			if (arr == []) {
				"{}";
			} else {
				arr_s = \i -> map(arr, \v : Pair<string, Json> ->
					toStringForJson(v.first) + ": " + ruJson2skatchWidth(v.second, max_width - i)
				);
				arr_0 = arr_s(0);
				if (arr_len(arr_0) + 2 < max_width) {
					"{" + strGlue(arr_0, ", ") + "}";
				} else {
					"{\n" + strIndent(strGlue(arr_s(4), ",\n")) + "\n}";
				}
			}
		}
	}
}

// Find the position of n-th new line '\n'
ruFirstNLinesPos(s : string, n : int) -> int {
	for(
		Pair(0, 0), // first - position, second - new-line counter
		\p -> p.first + 1 < strlen(s) && p.second < n,
		\p -> Pair(p.first + 1, if (getCharAt(s, p.first) == "\n") p.second + 1 else p.second)
	).first
}

ruTakeFirstNLines(s : string, n : int) -> string {
	strLeft(s, ruFirstNLinesPos(s, n));
}

ruFirstAfterPos(s : string, pos : int, what : string) -> int {
	if (pos + strlen(what) >= strlen(s)) -1 else {
		if (ruStrEqualsAtPos(s, pos, what)) pos 
		else ruFirstAfterPos(s, pos + 1, what);
	}
}

ruLastBeforePos(s : string, pos : int, what : string) -> int {
	if (pos < strlen(what)) -1 else {
		if (ruStrEqualsAtPos(s, pos, what)) pos 
		else ruLastBeforePos(s, pos - 1, what);
	}
}

ruStrEqualsAtPos(s : string, pos : int, what : string) -> bool {
	ruDoStrEqualsAtPos(s, pos, what, 0);
}

ruDoStrEqualsAtPos(s : string, pos : int, what : string, i : int) -> bool {
	if (i == strlen(what)) true else 
	if (pos + i >= strlen(s)) false else {
		if (getCharAt(s, pos + i) != getCharAt(what, i)) false 
		else ruDoStrEqualsAtPos(s, pos, what, i + 1);
	}
}

ruMinPos(p1 : int, p2 : int) -> int {
	if (p1 == -1) p2 else if (p2 == -1) p1 else min(p1, p2);
}

ruMaxPos(p1 : int, p2 : int) -> int {
	if (p1 == -1) p2 else if (p2 == -1) p1 else max(p1, p2);
}

ruPosPreceeds(less : int, more : int) -> bool {
	(less == -1) ||  (more == -1) || (less < more);
}

ruString2quoted(s : string, quotation : string) -> [RuQuoted] {
	list2array(ruDoString2quoted(s, quotation, 0, 0, false, makeList()));
}

ruDoString2quoted(s : string, quotation : string, pos : int, beg : int, in_quotation : bool, acc : List<RuQuoted>) -> List<RuQuoted> {
	if (pos == strlen(s)) {
		text = substring(s, beg, pos - beg);
		quot = if (in_quotation) quotation else "";
		Cons(RuQuoted(text, quot, quot), acc);
	} else {
		if (getCharAt(s, pos) == quotation) {
			text = substring(s, beg, pos - beg);
			quot = if (in_quotation) quotation else "";
			ruDoString2quoted(s, quotation, 
				pos + 1, pos + 1, !in_quotation, 
				Cons(RuQuoted(text, quot, quot), acc)
			);
		} else {
			ruDoString2quoted(s, quotation, pos + 1, beg, in_quotation, acc);
		}
	}
}

ruString2quoted2(s : string, quotBeg : string, quotEnd) -> [RuQuoted] {
	list2array(ruDoString2quoted2(s, quotBeg, quotEnd, 0, 0, false, makeList()));
}

ruDoString2quoted2(s : string, quotBeg : string, quotEnd : string, pos : int, beg : int, in_quotation : bool, acc : List<RuQuoted>) -> List<RuQuoted> {
	if (pos == strlen(s)) {
		text = substring(s, beg, pos - beg);
		Cons(RuQuoted(text, 
			if (in_quotation) quotBeg else "", 
			if (in_quotation) quotEnd else ""
		), acc);
	} else {
		if (ruCheckSubstring(s, pos, quotBeg)) {
			text = substring(s, beg, pos - beg);
			next = pos + strlen(quotBeg);
			ruDoString2quoted2(s, quotBeg, quotEnd, 
				next, next, !in_quotation, 
				Cons(RuQuoted(text, 
					if (in_quotation) quotBeg else "", 
					if (in_quotation) quotEnd else ""
				), acc)
			);
		} else if (ruCheckSubstring(s, pos, quotEnd)) {
			text = substring(s, beg, pos - beg);
			next = pos + strlen(quotEnd);
			ruDoString2quoted2(s, quotBeg, quotEnd, 
				next, next, !in_quotation, 
				Cons(RuQuoted(text, 
					if (in_quotation) quotBeg else "", 
					if (in_quotation) quotEnd else ""
				), acc)
			);
		} else {
			ruDoString2quoted2(s, quotBeg, quotEnd, pos + 1, beg, in_quotation, acc);
		}
	}
}

ruQuoted2String(quoted : [RuQuoted]) -> string {
	concatStrings(map(quoted, \q -> q.quotBeg + q.text + q.quotEnd));
}

ruTokenise(s : string) -> [string] {
	list2array(ruDoTokenise(s, 0, 0, isSpace(getCharAt(s, 0)), makeList()));
}

ruDoTokenise(s : string, pos : int, beg : int, is_space : bool, acc : List<string>) -> List<string> {
	if (pos == strlen(s)) {
		text = substring(s, beg, pos - beg);
		if (text == "") {
			acc;
		} else {
			Cons(text, acc);
		}
	} else {
		ch = getCharCodeAt(s, pos);
		this_is_space = ch <= 32;
		if (this_is_space != is_space) {
			text = substring(s, beg, pos - beg);
			ruDoTokenise(s, pos + 1, pos, !is_space, Cons(text, acc));
		} else {
			ruDoTokenise(s, pos + 1, beg, is_space, acc);
		}
	}
}

ruGlueNeighbourQuotations(q : [RuQuoted]) -> [RuQuoted] {
	ruDoGlueNeighbourQuotations(q, 0, [], []);
}

ruDoGlueNeighbourQuotations(q : [RuQuoted], i : int, collected : [RuQuoted], acc : [RuQuoted]) -> [RuQuoted] {
	if (i == length(q)) {
		if (length(collected) == 0) acc else {
			concat(acc, [RuQuoted(collected[0] with text = concatStrings(map(collected, \x -> x.text)))]);
		} 
	} else {
		if (q[i].quotBeg == "" && q[i].text != "") {
			new_acc = if (length(collected) == 0) {
				concat(acc, [q[i]]);
			} else {
				glued = RuQuoted(collected[0] with text = concatStrings(map(collected, \x -> x.text)));
				/*if (length(collected) > 1) {
					println(
						"Collected: [" + superglue(collected, \x -> "'" + x.text + "'", ", ") + "]" + "\n" + 
						"glued: '" + glued.text + "'"
					);
				}*/
				concat(acc, [glued, q[i]]);
			}
			ruDoGlueNeighbourQuotations(q, i + 1, [], new_acc);
		} else {
			ruDoGlueNeighbourQuotations(q, i + 1, concat(collected, [q[i]]), acc);
		}
	}
}

ruIsSpace(s : string) -> bool {
	forall(s2a(s), \code -> code <= 32);
}

ruSingleSpaceDelimiter(ss : [string]) -> [string] {
	filtermapi(ss, \i, s -> {
		if (!ruIsSpace(s)) Some(s) else 
		if (i > 0 && ruIsSpace(ss[i - 1])) None() else Some(" ")
	});
}

ruTransformTokensInQuoted(text : string, quotation : string, fn : (string) -> string) -> string {
	quoted = ruGlueNeighbourQuotations(ruString2quoted(text, quotation));
	/*quoted = ruString2quoted(text, quotation);
	if (quoted1 != quoted) {
		println("quoted1 != quoted:\n" +
			"quoted:\n" + strIndent(ruQuoted2String(quoted)) + "\n" +
			"quoted1:\n" + strIndent(ruQuoted2String(quoted1)) + "\n"
		);
	}*/

	/*
	concatStrings(map(quoted, \q ->
		if (q.quotBeg == "") q.text else {
			tokenized = ruTokenise(q.text);
			updated = map(tokenized, \t ->
				if (isSpace(getCharAt(t, 0))) t else fn(t)
			);
			concatStrings(updated);
		}
	));
	*/
	symbs_updeted = map(quoted, \q ->
		if (q.quotBeg == "") q else {
			tokenized = ruSingleSpaceDelimiter(ruTokenise(q.text));
			updated = map(tokenized, \t ->
				if (getCharAt(t, 0) == " ") t else fn(t)
			);
			RuQuoted(q with text = concatStrings(updated));
		}
	);
	ruQuoted2String(symbs_updeted);
}

ruTransformQuoted2(text : string, quotBeg : string, quotEnd : string, fn : (string) -> string) -> string {
	quoted = ruString2quoted2(text, quotBeg, quotEnd);
	concatStrings(map(quoted, \q ->
		if (q.quotBeg == "") q.text else {
			fn(q.text);
		}
	));
}

import ds/cart_prod;
import ds/set;
import base/util/time;

export {
	// Different fold functions with timer
	ruFold(a : [?], init: ??, fn : (??, ?) -> ??, timer : RuTimer) -> ??;
	ruFoldi(a : [?], init: ??, fn : (int, ??, ?) -> ??, timer : RuTimer) -> ??;
	ruFoldTree(t : Tree<?, ??>, acc : ???, fn : (?, ??, ???) -> ???, timer : RuTimer) -> ???;
	ruFoldSet(s : Set<?>, init : ??, fn : (??, ?) -> ??, timer : RuTimer) -> ??;
	ruFoldList(l : List<?>, acc : ??, fn : (??, ?) -> ??, timer : RuTimer) -> ??;
	ruFoldCartProd(prod : CartProd<?>, init : ??, f : (??, [?]) -> ??, timer : RuTimer) -> ??;
	ruIterCartProd(prod : CartProd<?>, f : ([?]) -> void, timer : RuTimer) -> void;
}

ruFold(a : [?], init: ??, fn : (??, ?) -> ??, timer : RuTimer) -> ?? {
	ruDoFold(a, init, fn, timer, 0);
}

ruDoFold(a : [?], acc: ??, fn : (??, ?) -> ??, timer : RuTimer, i : int) -> ?? {
	if (i == length(a) || ruTimeIsOver(timer)) acc else {
		ruDoFold(a, fn(acc, a[i]), fn, timer, i + 1);
	}
}

ruFoldi(a : [?], init: ??, fn : (int, ??, ?) -> ??, timer : RuTimer) -> ?? {
	ruDoFoldi(a, init, fn, timer, 0);
}

ruDoFoldi(a : [?], acc: ??, fn : (int, ??, ?) -> ??, timer : RuTimer, i : int) -> ?? {
	if (i == length(a) || ruTimeIsOver(timer)) acc else {
		ruDoFoldi(a, fn(i, acc, a[i]), fn, timer, i + 1);
	}
}

ruFoldTree(tree : Tree<?, ??>, acc : ???, f : (?, ??, ???) -> ???, timer : RuTimer) -> ??? {
	if (ruTimeIsOver(timer)) acc else {
		switch (tree : Tree) {
			TreeEmpty(): acc;
			TreeNode(k, v, left, right, depth): {
				acc1 = ruFoldTree(left, acc, f, timer);
				acc2 = f(k, v, acc1);
				ruFoldTree(right, acc2, f, timer);
			}
		}
	}
}

ruFoldSet(s : Set<?>, init : ??, fn : (??, ?) -> ??, timer : RuTimer) -> ?? {
	ruFoldTree(s.tree, init, \k, v, acc -> fn(acc, k), timer);
}


ruFoldList(l : List<?>, acc : ??, fn : (??, ?) -> ??, timer : RuTimer) -> ?? {
	if (ruTimeIsOver(timer)) acc else {
		switch (l) {
			EmptyList(): acc;
			Cons(h, t): ruFoldList(t, fn(acc, h), fn, timer);
		}
	}
}

ruFoldCartProd(prod : CartProd<?>, init : ??, f : (??, [?]) -> ??, timer : RuTimer) -> ?? {
	if (sizeCartProd(prod) == 0) init else
	ruDoFoldCartProd(prod, initCartProd(prod), init, f, timer)
}

ruDoFoldCartProd(prod : CartProd<?>, v : [int], val : ??, f : (??, [?]) -> ??, timer : RuTimer) -> ?? {
	if (ruTimeIsOver(timer)) val else {
		d = mapi(v, \i, n -> prod.sets[i][n]);
		new_val = f(val, d);
		switch (nextCartProd(v, prod)) {
			Some(next): ruDoFoldCartProd(prod, next, new_val, f, timer);
			None(): new_val;
		}
	}
}

ruIterCartProd(prod : CartProd<?>, f : ([?]) -> void, timer : RuTimer) -> void {
	if (sizeCartProd(prod) > 0) {
		ruDoIterCartProd(prod, initCartProd(prod), f, timer)
	}
}

ruDoIterCartProd(prod : CartProd<?>, v : [int], f : ([?]) -> void, timer : RuTimer) -> void {
	if (!ruTimeIsOver(timer)) {
		f(mapi(v, \i, n -> prod.sets[i][n]));
		switch (nextCartProd(v, prod)) {
			Some(next): ruDoIterCartProd(prod, next, f, timer);
			None(): {};
		}
	}
}

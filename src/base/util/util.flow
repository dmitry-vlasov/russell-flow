import ds/vector;
import sys/concurrent;
import formats/json/json;
import net/url_parameter;

export {
	ruSetJsonNestedField(json: Json, fields: [string], name : string, value : Json) -> Json;
	ruConcurrentHashMap2Tree(hash_map : native) -> Tree<?, ??>;

	ruCompressInd(i : int) -> string;
	ruDecompressInd(least_s : string, most_s : [string]) -> int;

	ruUrlParametersStr(params : [[string]]) -> string;
	ruMakeValidMmId(var : string) -> string;

	vectorTailFrom(v : Vector<?>, n : int) -> Vector<?>;
}

ruSetJsonNestedField(json: Json, fields: [string], name : string, value : Json) -> Json {
	switch (json) {
		JsonNull():
			JsonObject([
				if (fields == []) Pair(name, value) else 
				Pair(fields[0], ruSetJsonNestedField(JsonNull(), tail(fields), name, value))
			]);
		JsonObject(members): {
			if (fields == []) {
				switch (findi(members, \member -> member.first == name)) {
					Some(i): JsonObject(replace(members, i, Pair(name, value)));
					None(): JsonObject(concat(members, [Pair(name, value)]));
				}
			} else {
				switch (findi(members, \member -> member.first == fields[0])) {
					Some(i):
						JsonObject(replace(members, i, 
							Pair(fields[0], ruSetJsonNestedField(members[i].second, tail(fields), name, value))
						));
					None(): 
						JsonObject(concat(members, [
							Pair(fields[0], ruSetJsonNestedField(JsonNull(), tail(fields), name, value))
						]));
				}
			}
		}
		default: ruSetJsonNestedField(JsonNull(), fields, name, value);
	}
}

ruConcurrentHashMap2Tree(hash_map : native) -> Tree<?, ??> {
	keys = keysConcurrentHashMap(hash_map);
	values = valuesConcurrentHashMap(hash_map);
	pairs2tree(mapi(keys, \i, k -> Pair(k, values[i])));
}

ruCompressInd(i : int) -> string {
	least = i % 20;
	most = ref [];
	for(i / 20, \k -> (k > 0), \k -> {
		refArrayPush(most, ((k - 1) % 5) + 1);
		(k - 1) / 5
	});
	fold(reverseA(^most), "", \acc, digit -> acc + fromCharCode(digit + 84)) + fromCharCode(least + 65)
}

ruDecompressInd(least_s : string, most_s : [string]) -> int {
	least = getCharCodeAt(least_s, 0) - 65;
	most_digits = map(most_s, \d -> 
		getCharCodeAt(d, 0) - 84
	);
	most = fold(reverseA(most_digits), Pair(0, 1), \acc, d -> 
		Pair(acc.first + d * acc.second, acc.second * 5)
	).first;
	20 * most + least;
}

ruUrlParametersStr(params : [[string]]) -> string {
	trim2(strGlue(map(params, \p -> if (p[1] == "") p[0] else p[0] + "=" + p[1]), " "), " \t\r\n");
}

ruMakeValidMmId(var : string) -> string {
	// Mm labels must be: "Only letters, digits, "_", "-", and "." are allowed in labels."
	// Replace all characters not falling into these classes with those, who fall. 
	good_char = \i -> {
		(i == 45 || i == 46 || i == 95) ||
		(48 <= i  && i <= 57) ||
		(65 <= i  && i <= 90) ||
		(97 <= i  && i <= 122)
	}
	char_codes = s2a(var);
	if (forall(char_codes, good_char)) {
		var; 
	} else {
		fold(
			map(char_codes, \i -> 
				if (good_char(i)) i else {
					if (i < 48) i + 32 else
					if (i < 65) i + 23 else 
					if (i < 97) i + 7 else i - 4
				}
			), "", \acc, i -> acc + fromCharCode(i)
		);
	}
}

vectorTailFrom(v : Vector<?>, n : int) -> Vector<?> {
	size = sizeVector(v) - n;
	if (size <= 0) makeVector(0) else {
		ret = makeVector(size);
		iter(enumFromTo(n, sizeVector(v) - 1), \i -> 
			pushVector(ret, getVectorUnsafe(v, i))
		);
		ret;
	}
}
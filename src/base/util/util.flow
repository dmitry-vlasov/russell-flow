import sys/concurrent;
import formats/json/json;
import net/url_parameter;

export {
	ruSetJsonNestedField(json: Json, fields: [string], name : string, value : Json) -> Json;
	ruConcurrentHashMap2Tree(hash_map : native) -> Tree<?, ??>;

	ruCompressInd(i : int) -> string;
	ruDecompressInd(least_s : string, most_s : [string]) -> int;

	ruUrlParametersStr() -> string;

	ruMakeAtomicArrayPush(arr : ref [?]) -> (?) -> ?;
}

ruMakeAtomicArrayPush(arr : ref [?]) -> (?) -> ? {
	synchronizedUnaryFn(arr, \x -> { refArrayPush(arr, x); x });
}

ruSetJsonNestedField(json: Json, fields: [string], name : string, value : Json) -> Json {
	switch (json) {
		JsonNull():
			JsonObject([
				if (fields == []) Pair(name, value) else 
				Pair(fields[0], ruSetJsonNestedField(JsonNull(), tail(fields), name, value))
			]);
		JsonObject(members): {
			if (fields == []) {
				switch (findi(members, \member -> member.first == name)) {
					Some(i): JsonObject(replace(members, i, Pair(name, value)));
					None(): JsonObject(concat(members, [Pair(name, value)]));
				}
			} else {
				switch (findi(members, \member -> member.first == fields[0])) {
					Some(i):
						JsonObject(replace(members, i, 
							Pair(fields[0], ruSetJsonNestedField(members[i].second, tail(fields), name, value))
						));
					None(): 
						JsonObject(concat(members, [
							Pair(fields[0], ruSetJsonNestedField(JsonNull(), tail(fields), name, value))
						]));
				}
			}
		}
		default: ruSetJsonNestedField(JsonNull(), fields, name, value);
	}
}

ruConcurrentHashMap2Tree(hash_map : native) -> Tree<?, ??> {
	keys = keysConcurrentHashMap(hash_map);
	values = valuesConcurrentHashMap(hash_map);
	pairs2tree(mapi(keys, \i, k -> Pair(k, values[i])));
}

ruCompressInd(i : int) -> string {
	least = i % 20;
	most = ref [];
	for(i / 20, \k -> (k > 0), \k -> {
		refArrayPush(most, ((k - 1) % 5) + 1);
		(k - 1) / 5
	});
	fold(reverseA(^most), "", \acc, digit -> acc + fromCharCode(digit + 84)) + fromCharCode(least + 65)
}

ruDecompressInd(least_s : string, most_s : [string]) -> int {
	least = getCharCodeAt(least_s, 0) - 65;
	most_digits = map(most_s, \d -> 
		getCharCodeAt(d, 0) - 84
	);
	most = fold(reverseA(most_digits), Pair(0, 1), \acc, d -> 
		Pair(acc.first + d * acc.second, acc.second * 5)
	).first;
	20 * most + least;
}

ruUrlParametersStr() -> string {
	strGlue(map(getAllUrlParametersArray(), \p -> if (p[1] == "") p[0] else p[0] + "=" + p[1]), " ");
}
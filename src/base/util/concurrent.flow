import sys/concurrent;
import math/uuid;

export {
	//ruIf(cond : bool, val : ?, f : (?) -> ?) -> ?;
	ruConcurrent(jobs : [() -> ?]) -> [?];
	ruConcurrentVoid(jobs : [() -> void]) -> void;
	ruConcurrentLimited(jobs : [() -> ?], limit : int) -> [?];
	ruConcurrentLimitedVoid(jobs : [() -> void], limit : int) -> void;
	ruSequential(jobs : [() -> ?]) -> [?];
	ruSequentialVoid(jobs : [() -> void]) -> void;
}

/*ruIf(cond : bool, val : ?, f : (?) -> ?) -> ? {
	if (cond) f(val) else val
}*/

ruConcurrentVoid(jobs : [() -> void]) -> void {
	ruConcurrent(map(jobs, \job -> \-> { job(); 0; }));
	{}
}

jobs_pool = initConcurrentHashMap();

ruConcurrent(jobs : [() -> ?]) -> [?] {
	wrap_job = \job -> \ -> {
		job_uuid = makeUuid();
		setConcurrentHashMap(jobs_pool, job_uuid, timestamp());
		ret = job();
		removeConcurrentHashMap(jobs_pool, job_uuid);
		ret;
	}
	concurrent(true, map(jobs, wrap_job));
	//sequential(true, jobs);
}

ruSequential(jobs : [() -> ?]) -> [?] {
	sequential(true, jobs);
}

ruSequentialVoid(jobs : [() -> void]) -> void {
	ruSequential(map(jobs, \job -> \-> { job(); 0; }));
	{}
}

ruConcurrentLimited(jobs : [() -> ?], limit : int) -> [?] {
	concatA(
		map(
			splitByNumber(jobs, limit),
			ruConcurrent
		)
	);
}

ruConcurrentLimitedVoid(jobs : [() -> void], limit : int) -> void {
	iter(
		splitByNumber(jobs, limit),
		ruConcurrentVoid
	);
}

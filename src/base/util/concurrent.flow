import sys/concurrent;
import math/uuid;

export {
	ruConcurrent(jobs : [() -> ?]) -> [?];
	ruConcurrentVoid(jobs : [() -> void]) -> void;
	ruConcurrentLimited(jobs : [() -> ?], limit : int) -> [?];
	ruConcurrentLimitedVoid(jobs : [() -> void], limit : int) -> void;
	ruSequential(jobs : [() -> ?]) -> [?];
	ruSequentialVoid(jobs : [() -> void]) -> void;

	ruMakeAtomicArrayPush(arr : ref [?]) -> (?) -> ?;
	ruMakeAtomicSetTree(tree : ref Tree<?, ??>) -> (?, ??) -> ??;
	ruAtomicDoubleAdd(v : ref double) -> (double) -> double;
	ruAtomicIntAdd(v : ref int) -> (int) -> int;
	ruAtomicIntInc(v : ref int) -> (int) -> void;
	ruAtomicRefArrayPush(arr : ref [?]) -> (?) -> void;
}

ruConcurrentVoid(jobs : [() -> void]) -> void {
	ruConcurrent(map(jobs, \job -> \-> { job(); 0; }));
	{}
}

ruConcurrent(jobs : [() -> ?]) -> [?] {
	concurrent(true, jobs);
}

ruSequential(jobs : [() -> ?]) -> [?] {
	sequential(true, jobs);
}

ruSequentialVoid(jobs : [() -> void]) -> void {
	ruSequential(map(jobs, \job -> \-> { job(); 0; }));
	{}
}

ruConcurrentLimited(jobs : [() -> ?], limit : int) -> [?] {
	concatA(
		map(
			splitByNumber(jobs, limit),
			ruConcurrent
		)
	);
}

ruConcurrentLimitedVoid(jobs : [() -> void], limit : int) -> void {
	iter(
		splitByNumber(jobs, limit),
		ruConcurrentVoid
	);
}

ruMakeAtomicArrayPush(arr : ref [?]) -> (?) -> ? {
	synchronizedUnaryFn(arr, \x -> { refArrayPush(arr, x); x });
}

ruMakeAtomicSetTree(tree : ref Tree<?, ??>) -> (?, ??) -> ?? {
	synchronizedBinaryFn(tree, \k, v -> { tree := setTree(^tree, k, v); v });
}

ruAtomicDoubleAdd(v : ref double) -> (double) -> double {
	synchronizedUnaryFn(v, \delta -> { v := ^v + delta; ^v });
}

ruAtomicIntAdd(v : ref int) -> (int) -> int {
	synchronizedUnaryFn(v, \delta -> { v := ^v + delta; ^v });
}

ruAtomicIntInc(v : ref int) -> (int) -> void {
	add = ruAtomicIntAdd(v);
	\delta -> { add(delta); {} }
}

ruAtomicRefArrayPush(arr : ref [?]) -> (?) -> void {
	push = synchronizedUnaryFn(arr, \x -> { refArrayPush(arr, x); x });
	\x -> { push(x); {}	}
}

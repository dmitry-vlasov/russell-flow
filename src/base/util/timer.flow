import math/stringmath;
import timer;
import base/out;

export {
	// Prints time (milliseconds) in '1h 2s 25.99s' format 
	ruTime2s(time : double) -> string;
	// Current time in milliseconds.
	ruTime() -> double;

	RuTimer(
		started : double, // The time when timer was created.
		limit   : double  // The time limit for the timer.
	);

	// Unlimited timer
	ruMakeTimer() -> RuTimer;
	// Timer with a limit
	ruMakeLimitedTimer(limit : double) -> RuTimer;

	ruTimeIsOver(timer : RuTimer) -> bool;
	ruTimeLeft(timer : RuTimer) -> double;
	ruTimePassed(timer : RuTimer) -> double;
	ruTimePassed2s(timer : RuTimer) -> string;

	ruTrackProgress(isOn : ref bool, counter : ref int, num : int, delta : int, tr : RuTimer, out : RuOut, msg : () -> string) -> void;
}

ruTime2s(time : double) -> string {
	day  = floor(time / (1000.0 * 60.0 * 60.0 * 24.0));
	hour = floor((time - i2d(day * 1000 * 60 * 60 * 24)) / (1000.0 * 60.0 * 60.0));
	min  = floor((time - i2d((day * 24 + hour) * 1000 * 60 * 60)) / (1000.0 * 60.0));
	sec1 = (time - i2d((min + (hour + day * 24)* 60) * 60 * 1000)) / 1000.0 ;
	sec2 = floor((time - i2d(((day * 24 + hour) * 60  + min) * 1000 * 60)) / 1000.0);
	ms   = time - i2d((sec2 + (min + (hour + day * 24)* 60) * 60) * 1000);
	day2s  = \-> if (day > 0)  i2s(day)  + " d " else "";
	hour2s = \-> if (hour > 0) i2s(hour) + " h " else "";
	min2s  = \-> if (min > 0)  i2s(min)  + " m " else "";
	sec2s  = \-> if (sec2 > 0) { (if (sec1 < 10.0) d2st(sec1, 1) else i2s(sec2)) + " s " } else "";
	trim2(
		day2s() + hour2s() + min2s() + sec2s() + 
		(if (day > 0 || hour > 0 || min > 0 || sec2 > 0) "" else d2st(ms, 2) + " ms"), " "
	);
}

ruTime() -> double {
	//timestamp() / 1000.0
	timestamp()
}

ruMakeTimer() -> RuTimer {
	RuTimer(ruTime(), -1.0);
}

ruMakeLimitedTimer(limit : double) -> RuTimer {
	RuTimer(ruTime(), limit);
}

ruTimeIsOver(timer : RuTimer) -> bool {
	if (timer.limit == -1.0) false else 
	ruTime() - timer.started > timer.limit;
}

ruTimeLeft(timer : RuTimer) -> double {
	if (timer.limit == -1.0) doubleMax else 
	timer.limit - (ruTime() - timer.started);
}

ruTimePassed(timer : RuTimer) -> double {
	ruTime() - timer.started;
}

ruTimePassed2s(timer : RuTimer) -> string {
	ruTime2s(ruTime() - timer.started);
}

ruTimeLeft2s(timer : RuTimer) -> string {
	ruTime2s(ruTimeLeft(timer));
}

ruTrackProgress(isOn : ref bool, counter : ref int, num : int, delta : int, tr : RuTimer, out : RuOut, msg : () -> string) -> void {
	if (^isOn) {
		percent = i2d(^counter) * 100.0 / i2d(num);
		m = msg();
		out.onMessage(
			"  " + d2st(percent, 1) + " % (" + i2s(^counter) + " of " + i2s(num) + "), " +
			("passed: " + ruTimePassed2s(tr)) + 
			(if (tr.limit <= 0.0) "" else ", left: " + ruTimeLeft2s(tr)) +
			(if (m == "") "" else  ", " + m)
		);
		if (^counter < num) {
			timer(delta, \-> ruTrackProgress(isOn, counter, num, delta, tr, out, msg));
		}
	}
}

import timer;
import base/out;
import base/util/time_units;

export {
	// Current time in milliseconds.
	ruTime() -> double;

	RuTimer(
		started : double, // The time when timer was created.
		limit   : double  // The time limit for the timer.
	);

	// Unlimited timer
	ruMakeTimer() -> RuTimer;
	// Timer with a limit
	ruMakeLimitedTimer(limit : double) -> RuTimer;

	ruTimeIsOver(timer : RuTimer) -> bool;
	ruTimeLeft(timer : RuTimer) -> double;
	ruTimeLeft2s(timer : RuTimer) -> string;
	ruTimePassed(timer : RuTimer) -> double;
	ruTimePassed2s(timer : RuTimer) -> string;
	ruTimer2s(timer : RuTimer) -> string;
}

ruTime() -> double {
	timestamp()
}

ruMakeTimer() -> RuTimer {
	RuTimer(ruTime(), -1.0);
}

ruMakeLimitedTimer(limit : double) -> RuTimer {
	RuTimer(ruTime(), limit);
}

ruTimeIsOver(timer : RuTimer) -> bool {
	if (timer.limit == -1.0) false else 
	ruTime() - timer.started > timer.limit;
}

ruTimeLeft(timer : RuTimer) -> double {
	if (timer.limit == -1.0) doubleMax else 
	timer.limit - (ruTime() - timer.started);
}

ruTimePassed(timer : RuTimer) -> double {
	ruTime() - timer.started;
}

ruTimePassed2s(timer : RuTimer) -> string {
	ruTime2s(ruTime() - timer.started);
}

ruTimeLeft2s(timer : RuTimer) -> string {
	ruTime2s(ruTimeLeft(timer));
}

ruTimer2s(timer : RuTimer) -> string {
	"passed: " + ruTimePassed2s(timer) + "\n" + 
	"limit: " + (if (timer.limit == -1.0) "no" else ruTime2s(timer.limit)) +  
	(if (timer.limit == -1.0) "" else {"\n" +
	"left: " + ruTimeLeft2s(timer) + "\n" + 
	"is over: " + ruTimeLeft2s(timer) + "\n"
	});
}

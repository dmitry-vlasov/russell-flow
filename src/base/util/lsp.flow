import formats/lsp;
import base/util/range;

export {
	// Format location as:
	//    /home/user/dir1/dir2/file.ru:163:1:163:38:
	//    <uri>:<start line>:<start col>:<end line>:<end col>
	lspLocation2s(loc : LspLocation) -> string;
	lspPosition2s(pos : LspPosition) -> string;
	lspRange2s(range : LspRange) -> string;

	ruRangeCode2LspLocation(range : RuRange, path : string, code : string) -> LspLocation;
	ruRangeResolver2LspLocation(range : RuRange, path : string, resolver : LineResolver) -> LspLocation;
	ruRangePosTree2LspLocation(range : RuRange, path : string, pos_tree : Tree<int, RuLineCol>) -> LspLocation;
}

lspPosition2s(pos : LspPosition) -> string {
	if (pos.line < 0) "" else {
		i2s(pos.line) + if (pos.character < 0) "" else (":" + i2s(pos.character));
	}
}

lspRange2s(range : LspRange) -> string {
	if (range.start.line < 0) "" else {
		lspPosition2s(range.start) + 
		if (range.start.character < 0 || range.end.line < 0) "" else (":" + lspPosition2s(range.end));
	}
}

lspLocation2s(loc : LspLocation) -> string {
	uri2string(loc.uri) + 
	if (loc.range.start.line < 0) "" else (":" + lspRange2s(loc.range));
}

ruRangeCode2LspLocation(range : RuRange, path : string, code : string) -> LspLocation {
	resolver = makeLineResolver(code);
	ruRangeResolver2LspLocation(range, path, resolver);
}

ruRangeResolver2LspLocation(range : RuRange, path : string, resolver : LineResolver) -> LspLocation {
	s = findLine(resolver, range.start);
	if (range.end < 0) {
		LspLocation(
			URI("file", URIAuthority("", "", ""), path, "", ""), 
			LspRange(
				LspPosition(s.lineno - 1, s.lineIndex),
				LspPosition(-1, -1)
			)
		);
	} else {
		e = findLine(resolver, range.end);
		LspLocation(
			URI("file", URIAuthority("", "", ""), path, "", ""), 
			LspRange(
				LspPosition(s.lineno - 1, s.lineIndex),
				LspPosition(e.lineno - 1, e.lineIndex)
			)
		);
	}
}

ruRangePosTree2LspLocation(range : RuRange, path : string, pos_tree : Tree<int, RuLineCol>) -> LspLocation {
	beg = lookupTreeDef(pos_tree, range.start, ruNoLineCol);
	if (range.end < 0) {
		LspLocation(
			URI("file", URIAuthority("", "", ""), path, "", ""), 
			LspRange(
				LspPosition(beg.line, beg.col),
				LspPosition(-1, -1)
			)
		);
	} else {
		end = lookupTreeDef(pos_tree, range.end, ruNoLineCol);
		LspLocation(
			URI("file", URIAuthority("", "", ""), path, "", ""), 
			LspRange(
				LspPosition(beg.line, beg.col),
				LspPosition(end.line, end.col)
			)
		);
	}
}

import string_utils;

export {
	RuSubstr(
		str : string,
		beg : int, // the first symbol of substring
		len : int  // the length of substring
	);

	ruSubstr2s(ss : RuSubstr) -> string;
	ruSubstrEnd(ss : RuSubstr) -> int; // the last symbol of substring

	ruSubstrSurroundedBy(code : string, index : int, delims : string) -> RuSubstr;
	ruSubstrLine(code : string, index : int) -> RuSubstr;
	ruSubstrWord(code : string, index : int) -> RuSubstr;
	ruTrimSubstr(ss : RuSubstr) -> RuSubstr;
	ruTrimSubstr2(ss : RuSubstr, ugly : string) -> RuSubstr;
	ruRTrimSubstr(ss : RuSubstr) -> RuSubstr;
	ruRTrimSubstr2(ss : RuSubstr, ugly : string) -> RuSubstr;
	ruLTrimSubstr(ss : RuSubstr) -> RuSubstr;
	ruLTrimSubstr2(ss : RuSubstr, ugly : string) -> RuSubstr;
}

ruSubstr2s(ss : RuSubstr) -> string {
	substring(ss.str, ss.beg, ss.len);
}

ruSubstrEnd(ss : RuSubstr) -> int {
	ss.beg + ss.len - 1;
}

ruSubstrSurroundedBy(code : string, index : int, delims : string) -> RuSubstr {
	if (index < 0 || index > strlen(code)) RuSubstr(code, index, 0) else {
		beg = for(index, 
			\i -> (i > 0) && !strContains(delims, getCharAt(code, i - 1)), 
			\i -> i - 1
		);
		end = for(index, 
			\i -> (i + 1 < strlen(code)) && !strContains(delims, getCharAt(code, i + 1)), 
			\i -> i + 1
		);
		RuSubstr(code, beg, end - beg + 1);
	}
}

ruSubstrLine(code : string, index : int) -> RuSubstr {
	ruTrimSubstr(ruSubstrSurroundedBy(code, index, "\n"));
}

ruSubstrWord(code : string, index : int) -> RuSubstr {
	ruSubstrSurroundedBy(code, index, " \t\r\n");
}

ruLTrimSubstr(ss : RuSubstr) -> RuSubstr {
	ruLTrimSubstr2(ss, " \t\r\n");
}

ruLTrimSubstr2(ss : RuSubstr, ugly : string) -> RuSubstr {
	beg = for(ss.beg, 
		\i -> (i < ruSubstrEnd(ss)) && strContains(ugly, getCharAt(ss.str, i)), 
		\i -> i + 1
	);
	end = ruSubstrEnd(ss);
	RuSubstr(ss.str, beg, if (end >= beg) end - beg + 1 else 0);
}

ruRTrimSubstr(ss : RuSubstr) -> RuSubstr {
	ruRTrimSubstr2(ss, " \t\r\n");
}

ruRTrimSubstr2(ss : RuSubstr, ugly : string) -> RuSubstr {
	beg = ss.beg;
	end = for(ruSubstrEnd(ss),
		\i -> (i > ss.beg) && strContains(ugly, getCharAt(ss.str, i)), 
		\i -> i - 1
	);
	RuSubstr(ss.str, beg, if (end >= beg) end - beg + 1 else 0);
}

ruTrimSubstr(ss : RuSubstr) -> RuSubstr {
	ruTrimSubstr2(ss, " \t\r\n");
}

ruTrimSubstr2(ss : RuSubstr, ugly : string) -> RuSubstr {
	ruLTrimSubstr2(ruRTrimSubstr2(ss, ugly), ugly);
}

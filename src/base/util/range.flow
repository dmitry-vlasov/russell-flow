import lingo/linecolumn;
import formats/lsp;
import base/line_col;

export {
	RuRange(start : int, end : int);
	RuLocation(module : int, path : string, range : RuRange);

	ruNameByLineCol(line : int, col : int, src : string) -> string ;
	ruNameByPos(pos : int, src : string) -> string;
	ruNameRangeByPos(pos : int, src : string) -> Maybe<RuRange>;
	
	ruRange2s(range : RuRange, msg : string, path : string, code : string) -> string;
	ruLocation2s(location : RuLocation, msg : string, code : string) -> string;
	ruRangeWithResolver2s(path : string, range : RuRange, msg : string, resolver : LineResolver) -> string;
	ruLocationWithResolver2s(location : RuLocation, msg : string, resolver : LineResolver) -> string;
}

ruNameByLineCol(line : int, col : int, src : string) -> string {
	resolver = makeLineResolver(src);
	ruNameByPos(findLineIndex(resolver, line, col), src);
}

ruNameByPos(pos : int, src : string) -> string {
	eitherMap(ruNameRangeByPos(pos, src), \range -> substring(src, range.start, range.end - range.start + 1), "");
}

ruNameRangeByPos(pos : int, src : string) -> Maybe<RuRange> {
	is_name_char = \s -> s != "(" && s != ":" && s != ")" && s !="," && s != "=" && isNotSpace(s);
	if (pos < 0 || pos >= strlen(src) || !isNotSpace(getCharAt(src, pos))) None() else {
		start = for(pos, 
			\i -> if (i <= 0) false else is_name_char(getCharAt(src, i - 1)), 
			\i -> i - 1
		);
		end = for(pos, 
			\i -> if (i + 1 >= strlen(src)) false else is_name_char(getCharAt(src, i + 1)), 
			\i -> i + 1
		);
		Some(RuRange(start, end));
	}
}

ruRange2s(range : RuRange, msg : string, path : string, code : string) -> string {
	if (path == "") "" else {
		resolver = makeLineResolver(code);
		ruRangeWithResolver2s(path, range, msg, resolver);
	}
}

ruLocation2s(location : RuLocation, msg : string, code : string) -> string {
	ruRange2s(location.range, msg, location.path, code);
}

ruLocationWithResolver2s(location : RuLocation, msg : string, resolver : LineResolver) -> string {
	ruRangeWithResolver2s(location.path, location.range, msg, resolver);
}

ruRangeWithResolver2s(path : string, range : RuRange, msg : string, resolver : LineResolver) -> string {
	if (path == "") "" else {
		s = findLine(resolver, range.start);
		if (range.end < 0) {
			path + ":" + i2s(s.lineno) + ":" + i2s(s.lineIndex + 1) + ":" + (if (msg == "") "" else " " + msg);
		} else {
			e = findLine(resolver, range.end);
			path + ":" + i2s(s.lineno) + ":" + i2s(s.lineIndex + 1) + ":" + i2s(e.lineno) + ":" + i2s(e.lineIndex + 1) + ":" + (if (msg == "") "" else " " + msg);
		}
	}
}

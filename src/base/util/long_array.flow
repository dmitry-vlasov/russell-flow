import ds/array;
import base/util/long;

export {
	// Array of 64-bit integers
	ArrayOfLong(v: native);

	makeLongArray(size: int) -> ArrayOfLong;
	sizeLongArray(arr: ArrayOfLong) -> int;
	getLongArray(arr: ArrayOfLong, i: int) -> Long;
	setLongArray(arr: ArrayOfLong, i: int, v: Long) -> void;

	concatLongArray(arr1: ArrayOfLong, arr2: ArrayOfLong) -> ArrayOfLong;

	pushLongArrayFront(v: Long, arr: ArrayOfLong) -> ArrayOfLong;
	pushLongArrayBack(arr: ArrayOfLong, v: Long) -> ArrayOfLong;

	mapLongArray(arr: ArrayOfLong, fn: (Long) -> ?) -> [?];
	mapiLongArray(arr: ArrayOfLong, fn: (int, Long) -> ?) -> [?];
	foldLongArray(arr: ArrayOfLong, init: ?, fn: (?, Long) -> ?) -> ?;
	foldiLongArray(arr: ArrayOfLong, init: ?, fn: (int, ?, Long) -> ?) -> ?;
	iterLongArray(arr: ArrayOfLong, fn: (Long) -> void) -> void;
	iteriLongArray(arr: ArrayOfLong, fn: (int, Long) -> void) -> void;

	mapLongArray2LongArray(arr: ArrayOfLong, fn: (Long) -> Long) -> ArrayOfLong;
}

ArrayOfLong(v: native);

makeLongArray(size: int) -> ArrayOfLong {
	ArrayOfLong(makeLongArrayNative(size));
}

sizeLongArray(arr: ArrayOfLong) -> int {
	sizeLongArrayNative(arr.v);
}

getLongArray(arr: ArrayOfLong, i: int) -> Long {
	Long(getLongArrayNative(arr.v, i));
}

setLongArray(arr: ArrayOfLong, i: int, l: Long) -> void {
	setLongArrayNative(arr.v, i, l.v);
}

concatLongArray(arr1: ArrayOfLong, arr2: ArrayOfLong) -> ArrayOfLong {
	ArrayOfLong(concatLongArrayNative(arr1.v, arr2.v));
}

pushLongArrayFront(l: Long, arr: ArrayOfLong) -> ArrayOfLong {
	ArrayOfLong(pushLongArrayFrontNative(l.v, arr.v));
}
pushLongArrayBack(arr: ArrayOfLong, l: Long) -> ArrayOfLong {
	ArrayOfLong(pushLongArrayBackNative(arr.v, l.v));
}

mapLongArray(arr: ArrayOfLong, fn: (Long) -> ?) -> [?] {
	mapLongArrayNative(arr.v, \x -> fn(Long(x)));
}

mapiLongArray(arr: ArrayOfLong, fn: (int, Long) -> ?) -> [?] {
	mapiLongArrayNative(arr.v, \i, x -> fn(i, Long(x)));
}

foldLongArray(arr: ArrayOfLong, init: ?, fn: (?, Long) -> ?) -> ? {
	foldLongArrayNative(arr.v, init, \acc, x -> fn(acc, Long(x)));
}

foldiLongArray(arr: ArrayOfLong, init: ?, fn: (int, ?, Long) -> ?) -> ? {
	foldiLongArrayNative(arr.v, init, \i, acc, x -> fn(i, acc, Long(x)));
}

iterLongArray(arr: ArrayOfLong, fn: (Long) -> void) -> void {
	iterLongArrayNative(arr.v, \x -> fn(Long(x)));
}

iteriLongArray(arr: ArrayOfLong, fn: (int, Long) -> void) -> void {
	iteriLongArrayNative(arr.v, \i, x -> fn(i, Long(x)));
}

mapLongArray2LongArray(arr: ArrayOfLong, fn: (Long) -> Long) -> ArrayOfLong {
	ret = makeLongArray(sizeLongArray(arr));
	iteriLongArray(arr, \i, v -> setLongArray(ret, i, fn(v)));
	ret;
}

native makeLongArrayNative : (size: int) -> native = RussellLongArray.make;
native sizeLongArrayNative : (arr: native) -> int = RussellLongArray.size;
native getLongArrayNative : (arr: native, i: int) -> native = RussellLongArray.getLow;
native setLongArrayNative : (arr: native, i: int, v: native) -> void = RussellLongArray.set;
native concatLongArrayNative : (arr1: native, arr2: native) -> native = RussellLongArray.concat;
native pushLongArrayFrontNative : (v: native, arr: native) -> native = RussellLongArray.pushFront;
native pushLongArrayBackNative : (arr: native, v: native) -> native = RussellLongArray.pushBack;

native mapLongArrayNative : (native, (native) -> ?) -> [?] = RussellLongArray.map;
native mapiLongArrayNative : (native, (int, native) -> ?) -> [?] = RussellLongArray.mapi;
native foldLongArrayNative : (native, init : ?, fn : (?, native) -> ?) -> ? = RussellLongArray.fold;
native foldiLongArrayNative : (native, init : ?, fn : (int, ?, native) -> ?) -> ? = RussellLongArray.foldi;
native iterLongArrayNative : (native, (native) -> void) -> void = RussellLongArray.iter;
native iteriLongArrayNative : (native, (int, native) -> void) -> void = RussellLongArray.iteri;

import ds/array;

export {
	native makeLongArray : (size: int) -> native = RussellLongArray.make;
	native sizeLongArray : (arr: native) -> int = RussellLongArray.size;
	native getLongArrayLow : (arr: native, i: int) -> int = RussellLongArray.getLow;
	native getLongArrayHigh : (arr: native, i: int) -> int = RussellLongArray.getHigh;
	native setLongArray : (arr: native, i: int, low: int, high: int) -> int = RussellLongArray.set;
	native concatLongArray : (arr1: native, arr2: native) -> native = RussellLongArray.concat;
	native pushLongArrayFront : (low: int, high: int, arr: native) -> native = RussellLongArray.pushFront;
	native pushLongArrayBack : (arr: native, low: int, high: int) -> native = RussellLongArray.pushBack;

	native mapLongArray : (native, (int, int) -> ?) -> [?] = RussellLongArray.map;
	native mapiLongArray : (native, (int, int, int) -> ?) -> [?] = RussellLongArray.mapi;
	native foldLongArray : (native, init : ?, fn : (?, int, int) -> ?) -> ? = RussellLongArray.fold;
	native foldiLongArray : (native, init : ?, fn : (int, ?, int, int) -> ?) -> ? = RussellLongArray.foldi;
	native iterLongArray : (native, (int, int) -> void) -> void = RussellLongArray.iter;
	native iteriLongArray : (native, (int, int, int) -> void) -> void = RussellLongArray.iteri;
}

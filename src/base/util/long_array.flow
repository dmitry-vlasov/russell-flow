import ds/array;

export {
	native makeLong: (low: int, high: int) -> native = RussellLongArray.makeLong;
	native longLow: (l: native) -> int = RussellLongArray.longLow;
	native longHigh: (l: native) -> int = RussellLongArray.longHigh;

	native makeLongArray : (size: int) -> native = RussellLongArray.make;
	native sizeLongArray : (arr: native) -> int = RussellLongArray.size;
	native getLongArray : (arr: native, i: int) -> native = RussellLongArray.getLow;
	native setLongArray : (arr: native, i: int, v: native) -> void = RussellLongArray.set;
	native concatLongArray : (arr1: native, arr2: native) -> native = RussellLongArray.concat;
	native pushLongArrayFront : (v: native, arr: native) -> native = RussellLongArray.pushFront;
	native pushLongArrayBack : (arr: native, v: native) -> native = RussellLongArray.pushBack;

	native mapLongArray : (native, (native) -> ?) -> [?] = RussellLongArray.map;
	native mapiLongArray : (native, (int, native) -> ?) -> [?] = RussellLongArray.mapi;
	native foldLongArray : (native, init : ?, fn : (?, native) -> ?) -> ? = RussellLongArray.fold;
	native foldiLongArray : (native, init : ?, fn : (int, ?, native) -> ?) -> ? = RussellLongArray.foldi;
	native iterLongArray : (native, (native) -> void) -> void = RussellLongArray.iter;
	native iteriLongArray : (native, (int, native) -> void) -> void = RussellLongArray.iteri;

	mapLongArray2LongArray(arr: native, fn: (native) -> native) -> native;
}

mapLongArray2LongArray(arr: native, fn: (native) -> native) -> native {
	ret = makeLongArray(sizeLongArray(arr));
	iteriLongArray(arr, \i, v -> setLongArray(ret, i, fn(v)));
	ret;
}

import fs/filesystem;

export {
	ruDirName(path : string) -> string;
	// Returns current working directory with slashes (/) and no slash at the end
	ruCurrentWorkingDir() -> string;
	ruRemoveExt(file : string, ext : string) -> string;

	// Recursively deletes a directory. Returns an array of error messages
	ruDeleteDir(dir : string) -> [string];
	ruCopyFile(file : string, dir : string) -> bool;
	// Recursively traverse directory and collect all files 
	ruDirFiles(dir : string) -> [string];
}

ruCurrentWorkingDir() -> string {
	rtrim2(strReplace(resolveRelativePath("."), "\\", "/"), "/");
}

ruDirName(path : string) -> string {
	path1 = strReplace(path, "\\", "/");
	if (!strContains(path1, "/")) "" else {
		strLeft(path1, strLastIndexOf(path1, "/"));
	}
}

ruRemoveExt(file : string, ext0 : string) -> string {
	ext = if (startsWith(ext0, ".")) ext0 else "." + ext0;
	if (endsWith(file, ext)) strsubsmart(file, 0, -strlen(ext)) else file;
}

ruDeleteDir(dir : string) -> [string] {
	msgs = fold(readDirectory(dir), [], \acc, x ->
		if (isDirectory(x)) {
			concat(acc, ruDeleteDir(x));
		} else {
			msg = deleteFile(x);
			if (msg == "") acc else {
				concat(acc, [msg]);
			}
		}
	);
	msg = deleteDirectory(dir);
	if (msg == "") msgs else {
		concat(msgs, [msg]);
	}
}

ruCopyFile(file1 : string, file2 : string) -> bool {
	setFileContent(file2, getFileContent(file1));
}

ruDirFiles(dir : string) -> [string] {
	fold(readDirectory(dir), [], \acc, x ->
		if (isDirectory(x)) {
			concat(acc, ruDirFiles(dir + "/" + x));
		} else {
			concat(acc, [dir + "/" + x]);
		}
	);
}

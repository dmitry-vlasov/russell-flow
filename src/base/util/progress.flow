import base/util/timer;

export {
	RuProgress(
		isOn     : ref bool,  // to switch off a progress tracker set this to 'false'
		counter  : ref int,   // current progress value
		total    : int,       // total value of what is progressing
		delta_ms : int,       // a timeout in ms, when a progress is reported
		timer    : RuTimer,   // the timer of  a progress
		init     : bool,      // the first call to track progress
		inform   : () -> void // is called report progress (each delta ms)
	);

	ruTrackProgress(progress : RuProgress) -> void;
	ruMakeProgress(time_limit : double, total : int, delta : int) -> RuProgress;
	ruProgressMessage(progress : RuProgress) -> string;
}

ruTrackProgress(progress : RuProgress) -> void {
	if (^(progress.isOn)) {
		if (!progress.init) {
			progress.inform();
		}
		if (^(progress.counter) < progress.total) {
			timer(progress.delta_ms, \-> ruTrackProgress(RuProgress(progress with init = false)));
		}
	}
}

ruMakeProgress(time_limit : double, total : int, delta : int) -> RuProgress {
	RuProgress(ref true, ref 0, total, delta, ruMakeLimitedTimer(time_limit), true, nop);
}

ruProgressMessage(progress : RuProgress) -> string {
	percent = i2d(^(progress.counter)) * 100.0 / i2d(progress.total);
	d2st(percent, 1) + " % (" + i2s(^(progress.counter)) + " of " + i2s(progress.total) + "), " +
	("passed: " + ruTimePassed2s(progress.timer)) + 
	(if (progress.timer.limit <= 0.0) "" else ", left: " + ruTimeLeft2s(progress.timer)) 
}
import utctime;
import base/conf;
import base/ids;
import base/vol;

export {
	RuPath(
		dirs : [string],
		file : string
	);

	ruPath2s(path : RuPath) -> string;
	ruSplitPath(path : string) -> RuPath;
	ruCommonDir(paths : [RuPath]) -> RuPath;
	ruDirContainsRuSources(d : string) -> bool;
}

ruPath2s(path : RuPath) -> string {
	//(if (path.dirs != []) pathCombineMany(path.dirs) + "/" else "") + path.file
	pathCombineMany(concat(path.dirs, [path.file]));
}

ruSplitPath(path : string) -> RuPath {
	file = fileNameOnly(path);
	dir = ruDirName(path);
	if (dir != "") {
		RuPath(ruSplitDir(dir), file);
	} else {
		RuPath([], file);
	}
}

ruSplitDir(path : string) -> [string] {
	dir = fileNameOnly(path);
	left = ruDirName(path);
	if (left == "" || left == path) [dir] else concat(ruSplitDir(left), [dir]);
}

ruCommonDir(paths : [RuPath]) -> RuPath {
	if (paths == []) RuPath([], "") else {
		RuPath(
			fold(tail(paths), paths[0].dirs, \acc, path ->
				fold(zipWith(path.dirs, acc, \d1, d2 -> Pair(d1, d2)), Pair([], true), \ac, p ->
					if (p.first == p.second && ac.second) Pair(concat(ac.first, [p.first]), true) else Pair(ac.first, false)
				).first
			), 
			""
		);
	}
}

ruDirContainsRuSources(d : string) -> bool {
	dir = if (endsWith(d, "/")) d else d + "/";
	if (!isDirectory(dir)) false else {
		exists(readDirectory(dir), \nm -> {
				name = dir + nm;
				if (isDirectory(name)) {
					ruDirContainsRuSources(name);
				} else {
					endsWith(name, ".ru");
				}
			}
		);
	} 
}

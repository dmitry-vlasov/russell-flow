import utctime;
import base/ru_conf;
import base/ru_println;

export {

	RuFileInfo(
		module : string, // The path as used by flow imports
		path : string, // The full filesystem path
		modified : double, // The timestamp of the source file
		mutable source : string
	);

	ruNewFileInfo(module : string, conf : RuConf, ext : string) -> RuFileInfo;
	ruMakeFileInfo(file : string, conf : RuConf) -> RuFileInfo;
	ruUpdateFileInfo(info : RuFileInfo) -> RuFileInfo;

	ruNoFileInfo = RuFileInfo("__no", "__no", 0.0, "");

	RuPath(
		dirs : [string],
		file : string
	);

	ruPath2s(path : RuPath) -> string;
	ruSplitPath(path : string) -> RuPath;
	ruCommonDir(paths : [RuPath]) -> RuPath;

	ruFileChanged(info : RuFileInfo) -> bool;
	ruFileChangedMessage(info : RuFileInfo) -> string;
}

ruNewFileInfo(module : string, conf : RuConf, ext : string) -> RuFileInfo {
	root_opt = if (ext == ".ru") "ru-root" else if (ext == ".mm") "mm-root" else "";
	ruRoot = rtrim2(lookupTreeDef(conf.opts, "ru-root", "."), "/");
	RuFileInfo(module, ruRoot + "/" + module + ext, 0.0, "");
}

ruMakeFileInfo(file : string, conf : RuConf) -> RuFileInfo {
	RuFileInfo(ruTrimPath(file, conf, getFileExt(file)), file, fileModified(file), "");
}

ruUpdateFileInfo(info : RuFileInfo) -> RuFileInfo {
	RuFileInfo(info with 
		modified = fileModified(info.path),
		path = resolveRelativePath(info.path)
	);
}

ruPath2s(path : RuPath) -> string {
	(if (path.dirs != []) strGlue(path.dirs, "/") + "/" else "") + path.file
}

ruSplitPath(path : string) -> RuPath {
	file = fileNameOnly(path);
	dir = ruDirName(path);
	if (dir != "") {
		RuPath(ruSplitDir(dir), file);
	} else {
		RuPath([], file);
	}
}

ruSplitDir(path : string) -> [string] {
	dir = fileNameOnly(path);
	left = ruDirName(path);
	if (left == "" || left == path) [dir] else concat(ruSplitDir(left), [dir]);
}

ruCommonDir(paths : [RuPath]) -> RuPath {
	if (paths == []) RuPath([], "") else {
		RuPath(
			fold(tail(paths), paths[0].dirs, \acc, path ->
				fold(zipWith(path.dirs, acc, \d1, d2 -> Pair(d1, d2)), Pair([], true), \ac, p ->
					if (p.first == p.second && ac.second) Pair(concat(ac.first, [p.first]), true) else Pair(ac.first, false)
				).first
			), 
			""
		);
	}
}

ruFileChanged(info : RuFileInfo) -> bool {
	!fileExists(info.path) || info.modified != fileModified(info.path);
}

ruFileChangedMessage(info : RuFileInfo) -> string {
	modified = fileModified(info.path);
	if (!fileExists(info.path)) {
		"file " + info.path + " doesn't exist";
	} else {
		if (info.modified == modified) "" else {
			"module '" + info.module + "' is obsolete with timestamp '" + time2stringUtc(info.modified) + "' while source has '" + time2stringUtc(modified) + "'";
		}
	}
}

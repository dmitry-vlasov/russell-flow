import base/log;
import base/util/str;
import base/place;

export {
	RuOut(
		onMessage : (string) -> void,
		//onData : (string) -> void,
		onError : (string, [RuPlace]) -> void
	);

	ruDefaultOut = RuOut(println, ruMakeOnError(println, makeTree()));

	ruAddErr2Out(out : RuOut, msg : string) -> RuOut;
	ruAddErrCounter2Out(out : RuOut, err_count : ref int) -> RuOut;

	ruMakeOnError(onMessage : (string) -> void, opts : Tree<string, string>) -> (string, [RuPlace]) -> void;
	ruMakeOut(onMessage : (string) -> void, opts : Tree<string, string>) -> RuOut;

	ruIndentOut(out : RuOut) -> RuOut;
	ruUnindentOut(out : RuOut) -> RuOut;
}

ruAddErr2Out(out : RuOut, msg : string) -> RuOut {
	RuOut(out with onError = \str, pos -> out.onError(str + msg, pos))
}

ruAddErrCounter2Out(out : RuOut, err_count : ref int) -> RuOut {
	RuOut(out with onError = 
		\err, places -> {
			err_count := ^err_count + 1;
			out.onError(err, places);
		}
	)
}

ruMakeOnError(onMessage : (string) -> void, opts : Tree<string, string>) -> (string, [RuPlace]) -> void {
	\err, places -> {
		onMessage("Error: " + err + (if (places == []) "" else "\n" + ruPlaces2s(places)));
		if (lookupTreeDef(opts, "halt-on-errors", "") == "1") {
			ruCrash("Aborting russell run, because halt-on-errors=1");
		}
	}
}

ruMakeOut(onMessage : (string) -> void, opts : Tree<string, string>,) -> RuOut {
	RuOut(onMessage, ruMakeOnError(onMessage, opts));
}

ruIndentOut(out : RuOut) -> RuOut {
	RuOut(out with onMessage = \s -> out.onMessage(strIndent(s)));
}

ruUnindentOut(out : RuOut) -> RuOut {
	RuOut(out with onMessage = \s -> out.onMessage(ruUnindent(s)));
}

import base/task;

export {
	// Syntax of a job:
	//   <task_1> ; ... ; <task_m>

	RuJob(
		tasks : [RuTask]
	);

	ruMakeJob(params : [[string]]) -> RuJob;
	ruJob2Json(job : RuJob) -> Json;
	ruJson2Job(json : Json) -> Maybe<RuJob>;

	ruJob2s(job : RuJob) -> string;
	ruJobSmall2s(job : RuJob) -> string;
}

ruMakeJob(ps : [[string]]) -> RuJob {
	str = strGlue(filtermap(ps, \p ->
		if (length(p) == 0) None() else {
			k = trim2(p[0], " \t\r\n"); 
			if (length(p) == 1) {
				if (k == "") None() else Some(k);
			} else {
				v = trim2(p[1], " \t\n\r");
				if (k == "") None() else 
				if (v == "") Some(k) else Some(k + "=" + v);
			}
		}
	), " ");
	RuJob(filtermap(
		strSplit(str, ";"),
		\s -> {
			task_str = trim2(s, " \t\n\r");
			if (task_str == "") None() else {
				parts = strSplit2(task_str, [" ", "\n", "\r", "\t"]);
				Some(RuTask(
					parts[0], 
					fold(tail(parts), makeTree(), \acc, p -> {
						part = trim2(p, " \n\r\t");
						if (part == "") acc else {
							param = strSplit(part, "=");
							setTree(acc, param[0], if (length(param) == 1) "" else param[1]);
						}
					})
				));
			}
		}
	));
}

ruJob2Json(job : RuJob) -> Json {
	JsonObject([Pair("tasks", JsonArray(map(job.tasks, ruTask2Json)))]);
}

ruJson2Job(json : Json) -> Maybe<RuJob> {
	if (!jsonObjectHasField(json, "tasks")) None() else {
		Some(RuJob(filtermap(getJsonArrayField(json, "tasks"), ruJson2Task)));
	}
}

ruJob2s(job : RuJob) -> string {
	strGlue(map(job.tasks, ruTask2s), ";\n");
}

ruJobSmall2s(job : RuJob) -> string {
	strGlue(map(job.tasks, \task -> task.command), ", ");
}

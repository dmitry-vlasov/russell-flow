import ds/tree;
import string;

export {

	RuTrie2(
		data : Maybe<??>,
		map1 : Tree<?, RuTrie2<?, ??>>,
		map2 : Tree<?, RuTrie2<?, ??>>,
	);
	ruTrie2Empty = RuTrie2(None(), makeTree(), makeTree());

	ruMakeTrie2() -> RuTrie2<?, ??>;
	ruAdd2Trie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>], data : Maybe<??>, conflict : (??, ??) -> ??) -> RuTrie2<?, ??>;
	ruSetTrie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>], data : ??) -> RuTrie2<?, ??>;
	ruRemoveFromTrie2(key : [Pair<?, bool>], trie : RuTrie2<?, ??>) -> RuTrie2<?, ??>;
	ruTrie2Tos(t : RuTrie2<?, ??>, show_key : (?) -> string, show_val : (??) -> string) -> string;
	ruMergeRuTrie2(t1 : RuTrie2<?, ??>, t2 : RuTrie2<?, ??>, conflict : (??, ??) -> ??) -> RuTrie2<?, ??>;
	ruLookupTrie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>]) -> Maybe<??>;
	ruLookupTrie2Def(trie : RuTrie2<?, ??>, key : [Pair<?, bool>], def : ??) -> ??;
	ruContainsTrie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>]) -> bool;
	ruSizeTrie2(trie : RuTrie2<?, ??>) -> int;
}

ruMakeTrie2() -> RuTrie2<?, ??> {
	RuTrie2(None(), makeTree(), makeTree());
}

ruAdd2Trie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>], data : Maybe<??>, conflict : (??, ??) -> ??) -> RuTrie2<?, ??> {
	if (length(key) == 0) trie else doRuAdd2Trie2(0, key, data, trie, conflict)
}

doRuAdd2Trie2(i : int, key : [Pair<?, bool>], data : Maybe<??>, trie : RuTrie2<?, ??>, conflict : (??, ??) -> ??) -> RuTrie2<?, ??> {
	n = lookupTreeDef(if (key[i].second) trie.map1 else trie.map2, key[i].first, ruTrie2Empty);
	if (i + 1 == length(key)) {
		if (key[i].second) {
			RuTrie2(trie with map1 = setTree(trie.map1, key[i].first, RuTrie2(n with data = ruInsertData2Trie2(n.data, data, conflict))));
		} else {
			RuTrie2(trie with map2 = setTree(trie.map2, key[i].first, RuTrie2(n with data = ruInsertData2Trie2(n.data, data, conflict))));
		}
	} else {
		if (key[i].second) {
			RuTrie2(trie with map1 = setTree(trie.map1, key[i].first, doRuAdd2Trie2(i + 1, key, data, n, conflict)));
		} else {
			RuTrie2(trie with map2 = setTree(trie.map2, key[i].first, doRuAdd2Trie2(i + 1, key, data, n, conflict)));
		}
	}
}

ruInsertData2Trie2(md1 : Maybe<??>, md2 : Maybe<??>, conflict : (??, ??) -> ??) -> Maybe<??> {
	eitherMap(md1, \d1 -> eitherMap(md2, \d2 -> Some(conflict(d1, d2)), md1), md2)
}

ruSetTrie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>], data : ??) -> RuTrie2<?, ??> {
	ruAdd2Trie2(trie, key, Some(data), \old, new -> new);
}

ruRemoveFromTrie2(key : [Pair<?, bool>], trie : RuTrie2<?, ??>) -> RuTrie2<?, ??> {
	if (length(key) == 0) trie else doRuRemoveFromTrie2(0, key, trie)
}

doRuRemoveFromTrie2(i : int, key : [Pair<?, bool>], trie : RuTrie2<?, ??>) -> RuTrie2<?, ??> {
	n = lookupTreeDef(if (key[i].second) trie.map1 else trie.map2, key[i].first, ruTrie2Empty);
	if (i + 1 == length(key)) {
		if (key[i].second) {
			RuTrie2(trie with map1 = setTree(trie.map1, key[i].first, RuTrie2(n with data = None())));
		} else {
			RuTrie2(trie with map2 = setTree(trie.map2, key[i].first, RuTrie2(n with data = None())));
		}
	} else {
		if (key[i].second) {
			RuTrie2(trie with map1 = setTree(trie.map1, key[i].first, doRuRemoveFromTrie2(i + 1, key, n)));
		} else {
			RuTrie2(trie with map2 = setTree(trie.map2, key[i].first, doRuRemoveFromTrie2(i + 1, key, n)));
		}
	}
}

ruMergeRuTrie2(t1 : RuTrie2<?, ??>, t2 : RuTrie2<?, ??>, conflict : (??, ??) -> ??) -> RuTrie2<?, ??> {
	RuTrie2(
		ruInsertData2Trie2(t1.data, t2.data, conflict),
		mergeTreeCustom(t1.map1, t2.map1, \__, s1, s2 -> ruMergeRuTrie2(s1, s2, conflict)),
		mergeTreeCustom(t1.map2, t2.map2, \__, s1, s2 -> ruMergeRuTrie2(s1, s2, conflict)),
	)
}

ruTrie2Tos(t : RuTrie2<?, ??>, show_key : (?) -> string, show_val : (??) -> string) -> string {
	foldTree(doRuTrie2ToTree(t, [], makeTree(), show_key, show_val), "",
		\path, val, acc ->
			acc + strGlue(path, " ") + " --> " + val + "\n"
	)
}

doRuTrie2ToTree(trie : RuTrie2<?, ??>, path : [string], acc : Tree<[string], string>, show_key : (?) -> string, show_val : (??) -> string) -> Tree<[string], string> {
	do_map = \ac, mp -> foldTree(mp, ac, 
		\k, v, a -> {
			path1 = concat(path, [show_key(k)]);
			a1 = doRuTrie2ToTree(v, path1, a, show_key, show_val);
			switch (v.data) {
				None(): a1;
				Some(d): setTree(a1, path1, show_val(d));
			}
		}
	);
	do_map(do_map(acc, trie.map1), trie.map2);
}

ruLookupTrie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>]) -> Maybe<??> {
	ruDoLookupTrie2(trie, key, 0);
}

ruDoLookupTrie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>], i : int) -> Maybe<??> {
	if (i == length(key)) trie.data else {
		maybeBind(lookupTree(if (key[i].second) trie.map1 else trie.map2, key[i].first),
			\tr -> ruDoLookupTrie2(tr, key, i + 1)
		);
	}
}

ruContainsTrie2(trie : RuTrie2<?, ??>, key : [Pair<?, bool>]) -> bool {
	isSome(ruLookupTrie2(trie, key));
}

ruLookupTrie2Def(trie : RuTrie2<?, ??>, key : [Pair<?, bool>], def : ??) -> ?? {
	either(ruLookupTrie2(trie, key), def);
}

ruSizeTrie2(trie : RuTrie2<?, ??>) -> int {
	1 + 
	foldTree(trie.map1, 0, \__, tr, acc -> acc + ruSizeTrie2(tr)) + 
	foldTree(trie.map2, 0, \__, tr, acc -> acc + ruSizeTrie2(tr));
}

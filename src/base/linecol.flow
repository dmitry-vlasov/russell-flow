import base/place;
import base/task;

export {
	RuLineCol(
		path : string, 
		line : int, 
		col : int
	);

    ruNoLineCol = RuLineCol("", -1, -1);

    ruPlace2LineCol(place : RuPlace) -> RuLineCol;
    ruLineCol2Place(line_col : RuLineCol) -> RuPlace;

	ruLineCol2s(lc : RuLineCol) -> string;
	ruArgs2LineCol(args : [ScTaskArg]) -> Maybe<RuLineCol>;
}

ruPlace2LineCol(place : RuPlace) -> RuLineCol {
    if (place.pos < 0 || !fileExists(place.path)) ruNoLineCol else {
        ruDoPos2LineCol(place, getFileContent(place.path), 0, 0, 0);
    }
}

ruDoPos2LineCol(place : RuPlace, code : string, i : int, line : int, col : int) -> RuLineCol {
    if (place.pos == i) RuLineCol(place.path, line, col) else {
        char = getCharAt(code, i);
        if (char == "\n") {
            ruDoPos2LineCol(place, code, i + 1, line + 1, 0);
        } else {
            ruDoPos2LineCol(place, code, i + 1, line, col + 1);
        }
    }
}

ruLineCol2Place(lc : RuLineCol) -> RuPlace {
	if (lc.line < 0 || lc.col < 0 || !fileExists(lc.path)) ruNoPlace else {
    	ruDoLineCol2Pos(lc, getFileContent(lc.path), 0, 0, 0);
	}
}

ruDoLineCol2Pos(lc : RuLineCol, code : string, i : int, line : int, col : int) -> RuPlace {
    if (lc.line == line && lc.col == col) RuPlace(lc.path, i) else {
        char = getCharAt(code, i);
        if (char == "\n") {
            ruDoLineCol2Pos(lc, code, i + 1, line + 1, 0);
        } else {
            ruDoLineCol2Pos(lc, code, i + 1, line, col + 1);
        }
    }
}

ruLineCol2s(lc : RuLineCol) -> string {
	"file '" + lc.path + "': line " + i2s(lc.line + 1) + ", col " + i2s(lc.col + 1);
}

ruArgs2LineCol(args : [ScTaskArg]) -> Maybe<RuLineCol> {
	path = ruGetTaskArg(args, "path", ruGetTaskArg(args, "file", ""));
	line = ruGetTaskArg(args, "line", "");
	col = ruGetTaskArg(args, "col", "");
	if (path == "" || line == "" || col == "" || !isDigits(line) || !isDigits(col)) None() else {
		Some(RuLineCol(path, s2i(line), s2i(col)));
	}
}

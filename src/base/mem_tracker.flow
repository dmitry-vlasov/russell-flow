import sys/system;
import ds/list;
import timer;
import comm;

export {

	RuMemStats(
		time : double,
		used : double,
		free : double,
		total: double
	);

	ruStartMemoryTracker() -> void;
	ruStopMemoryTracker() -> void;
	ruGetMemoryTracker() -> [RuMemStats];

	ruMemTrackerCommands : [RuComm];
}

ruMemTrackerCommands = [
	RuComm(RuCommInfo("mem-tracker-start", "misc", "start memory info tracker", "", false, false, [], []),
		\unit -> { ruStartMemoryTracker(); Some(unit.state); }
	),
	RuComm(RuCommInfo("mem-tracker-stop", "misc", "stop memory info tracker", "", false, false, [], []),
		\unit -> { ruStopMemoryTracker(); Some(unit.state); }
	),
	RuComm(RuCommInfo("mem-tracker-info", "misc", "show memory info tracker", "", false, false,
		[
			RuCommArg("what", false, "one of: free, used, total.", "used"),
			RuCommArg("step", false, "step of output - im seconds. 0 mins no compression", "10"),
		], []),
		\unit -> {
			stats = ruGetMemoryTracker();
			what = ruTaskStringArg(unit.task, "what", "used");
			step = ruTaskIntArg(unit.task, "step", 10);
			table = map(ruGetMemoryTracker(), \row ->
				Pair(row.time,
					if (what == "free") row.free else
					if (what == "used") row.used else
					if (what == "total") row.total else row.used
				)
			);
			squeezed = if (step <= 0) table else ruSqueezeTable(table, step);
			unit.out.println(
				what + " memory:\n" +
				ruPlotTableCustom(squeezed, 64,
					\t -> ruTime2s(t - ruStartTime),
					\v -> memory2s(v)
				)
			);
			Some(unit.state);
		}
	)
];

ru_memory_tracker_started : ref bool = ref false;
ru_memory_tracker_stats : ref List<RuMemStats> = ref makeList();

ruStartMemoryTracker() -> void {
	ru_memory_tracker_started := true;
	ru_memory_tracker_stats := makeList();
	ruRunMemoryTracker();
}

ruRunMemoryTracker() -> void {
	if (^ru_memory_tracker_started) {
		ru_memory_tracker_stats := Cons(
			RuMemStats(
				timestamp(),
				usedMemory(),
				freeMemory(),
				totalMemory()
			),
			^ru_memory_tracker_stats
		);
		timer(1000, ruRunMemoryTracker);
	}
}

ruStopMemoryTracker() -> void {
	ru_memory_tracker_started := false;
}

ruGetMemoryTracker() -> [RuMemStats] {
	list2array(^ru_memory_tracker_stats);
}

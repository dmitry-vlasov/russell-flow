import base/ids;

export {
	ruIdTurnstile() -> int;     // |-
	ruIdLeftBracket() -> int;   // ( 
	ruIdRightBracket() -> int;  // )
	ruIdLeftBrace() -> int;     // {
	ruIdRightBrace() -> int;    // }
	ruIdEquality() -> int;      // =
	ruIdEquivalence() -> int;   // <->
	ruIdClass() -> int;         // class
	ruIdWff() -> int;           // wff
	ruIdComma() -> int;         // ,
	ruIdColon() -> int;         // :
	ruIdDefiendum() -> int;     // defiendum
	ruIdDefiniens() -> int;     // definiens 
	ruIdX() -> int;             // x
}

ru_id_turnstile : ref Maybe<int> = ref None();
ru_id_left_bracket : ref Maybe<int> = ref None();
ru_id_right_bracket : ref Maybe<int> = ref None();
ru_id_left_brace : ref Maybe<int> = ref None();
ru_id_right_brace : ref Maybe<int> = ref None();
ru_id_equality : ref Maybe<int> = ref None();
ru_id_equivalence : ref Maybe<int> = ref None();
ru_id_class : ref Maybe<int> = ref None();
ru_id_wff : ref Maybe<int> = ref None();
ru_id_comma : ref Maybe<int> = ref None();
ru_id_colon : ref Maybe<int> = ref None();
ru_id_defiendum : ref Maybe<int> = ref None();
ru_id_definiens : ref Maybe<int> = ref None();
ru_id_x : ref Maybe<int> = ref None();

ruIdTurnstile() -> int {
	onlyOnce(ru_id_turnstile, \ -> s2id_("|-"));
}

ruIdLeftBracket() -> int {
	onlyOnce(ru_id_left_bracket, \ -> s2id_("("));
}

ruIdRightBracket() -> int {
	onlyOnce(ru_id_right_bracket, \ -> s2id_(")"));
}

ruIdLeftBrace() -> int {
	onlyOnce(ru_id_left_brace, \ -> s2id_("{"));
}

ruIdRightBrace() -> int {
	onlyOnce(ru_id_right_brace, \ -> s2id_("}"));
}

ruIdEquality() -> int {
	onlyOnce(ru_id_equality, \ -> s2id_("="));
}

ruIdEquivalence() -> int {
	onlyOnce(ru_id_equivalence, \ -> s2id_("<->"));
}

ruIdClass() -> int {
	onlyOnce(ru_id_class, \ -> s2id_("class"));
}

ruIdWff() -> int {
	onlyOnce(ru_id_wff, \ -> s2id_("wff"));
}

ruIdComma() -> int {
	onlyOnce(ru_id_comma, \ -> s2id_(","));
}

ruIdColon() -> int {
	onlyOnce(ru_id_colon, \ -> s2id_(":"));
}

ruIdDefiendum() -> int {
	onlyOnce(ru_id_defiendum, \ -> s2id("defiendum"));
}

ruIdDefiniens() -> int {
	onlyOnce(ru_id_definiens, \ -> s2id("definiens"));
}

ruIdX() -> int {
	onlyOnce(ru_id_x, \ -> s2id("x"));
}

import base/conf;
import base/dir;
import sys/concurrent;

export {
	ruHttpServerLog(msg : string, conf : RuConf) -> void;
	ruLspServerLog(msg : string, conf : RuConf) -> void;
	ruConsoleLog(msg : string, conf : RuConf) -> void;
	ruScriptLog(msg : string, conf : RuConf) -> void;
	ruClientLog(msg : string, conf : RuConf) -> void;

	ruDebugLog(msg : string) -> void;

	ruCrash(message : string) -> void;
}

ruHttpServerLog(msg : string, conf : RuConf) -> void {
	if (lookupTreeDef(conf.opts, "log-http", "1") == "1" || lookupTreeDef(conf.opts, "log-all", "") == "1") {
		deferred(\-> ruHttpServerLogDirect(msg, conf));
	}
}

ruLspServerLog(msg : string, conf : RuConf) -> void {
	if (lookupTreeDef(conf.opts, "log-lsp", "1") == "1" || lookupTreeDef(conf.opts, "log-all", "") == "1") {
		deferred(\-> ruLspServerLogDirect(msg, conf));
	}
}

ruConsoleLog(msg : string, conf : RuConf) -> void {
	if (lookupTreeDef(conf.opts, "log-console", "") == "1" || lookupTreeDef(conf.opts, "log-all", "") == "1") {
		deferred(\-> ruConsoleLogDirect(msg, conf));
	}
}

ruScriptLog(msg : string, conf : RuConf) -> void {
	if (lookupTreeDef(conf.opts, "log-script", "") == "1" || lookupTreeDef(conf.opts, "log-all", "") == "1") {
		deferred(\-> ruScriptLogDirect(msg, conf));
	}
}

ruClientLog(msg : string, conf : RuConf) -> void {
	if (lookupTreeDef(conf.opts, "log-client", "") == "1" || lookupTreeDef(conf.opts, "log-all", "") == "1") {
		deferred(\-> ruClientLogDirect(msg, conf));
	}
}

ruDebugLog(msg : string) -> void {
	deferred(\-> ruDebugLogDirect(msg));
}

ruHttpServerLogDirect = synchronizedBinaryFn(http_log_lock, ruDoHttpServerLog);
ruLspServerLogDirect = synchronizedBinaryFn(lsp_log_lock, ruDoLspServerLog);
ruConsoleLogDirect = synchronizedBinaryFn(console_log_lock, ruDoConsoleLog);
ruScriptLogDirect = synchronizedBinaryFn(script_log_lock, ruDoScriptLog);
ruClientLogDirect = synchronizedBinaryFn(client_log_lock, ruDoClientLog);

ruDebugLogDirect = synchronizedUnaryFn(debug_log_lock, ruDoDebugLog);


http_log_lock = true;
lsp_log_lock = true;
console_log_lock = true;
script_log_lock = true;
crash_log_lock = true;
client_log_lock = true;
debug_log_lock = true;

ruDoHttpServerLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "http", conf, 256);
}

ruDoLspServerLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "lsp", conf, 256);
}

ruDoConsoleLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "console", conf, 256);
}

ruDoScriptLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "script", conf, 256);
}

ruDoClientLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "client", conf, 256);
}

ruDoDebugLog(message : string) -> void {
	ruCustomLog(message, "debug", ruMakeConfDef(), 10000);
}

ruDoCrashLog(message : string) -> void {
	ruCustomLog(message, "crash", ruEmptyConf, 256);
}

ruCrashLog = synchronizedUnaryFn(crash_log_lock, ruDoCrashLog);

ruCrash(message : string) -> void {
	log = if (java) message + "\n" + captureStringCallstack() else message;
	ruCrashLog(log);
	fail(log);
}

ruCustomLog(message : string, name : string, conf : RuConf, def_size : int) -> void {
	log_file = lookupTreeDef(conf.opts, name + "-log", getRussellDir() + "/log/russell_" + name + ".log");
	log_dir = ruDirName(log_file);
	if (log_dir != "") {
		err = ensureDirectoryExists(log_dir);
	}
	if (log_file != "") {
		log_size = s2i(lookupTreeDef(conf.opts, name + "log-size", i2s(def_size)));
		ruWriteLogMessage(message, log_file, log_size);
	}
}

ruWriteLogMessage(message : string, log_name : string, log_size : int) -> void {
	message_with_limestamp = "[" + time2string(timestamp()) + "] " + message;
	log_file = if (fileExists(log_name)) getFileContent(log_name) else "";
	log_lines = strSplit(log_file, "\n");
	log_lines_cut = if (length(log_lines) > log_size) tailFrom(log_lines, log_size / 8) else log_lines;
	updated_log_lines = concat(log_lines_cut, [message_with_limestamp]);
	updated_log_file = strGlue(updated_log_lines, "\n");
	setFileContent(log_name, updated_log_file);
	{}
}
import base/conf;
import base/dir;
import sys/concurrent;

export {
	ruHttpServerLog = synchronizedBinaryFn(http_log_lock, ruDoHttpServerLog);
	ruLspServerLog = synchronizedBinaryFn(lsp_log_lock, ruDoLspServerLog);
	ruConsoleLog = synchronizedBinaryFn(console_log_lock, ruDoConsoleLog);
	ruDebugLog = synchronizedUnaryFn(debug_log_lock, ruDoDebugLog);
	ruScriptLog = synchronizedBinaryFn(script_log_lock, ruDoScriptLog);
	ruClientLog = synchronizedBinaryFn(client_log_lock, ruDoClientLog);

	ruCrash(message : string) -> void;
}

http_log_lock = true;
debug_log_lock = true;
lsp_log_lock = true;
console_log_lock = true;
script_log_lock = true;
crash_log_lock = true;
client_log_lock = true;

ruDoHttpServerLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "http", conf, 256);
}

ruDoLspServerLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "lsp", conf, 256);
}

ruDoConsoleLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "console", conf, 256);
}

ruDoDebugLog(message : string) -> void {
	ruCustomLog(message, "debug", ruMakeConfDef(), 10000);
}

ruDoScriptLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "script", conf, 256);
}

ruDoClientLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "client", conf, 256);
}

ruDoCrashLog(message : string) -> void {
	ruCustomLog(message, "crash", ruEmptyConf, 256);
}

ruCrashLog = synchronizedUnaryFn(crash_log_lock, ruDoCrashLog);

ruCrash(message : string) -> void {
	log = message + "\n" + captureStringCallstack();
	ruCrashLog(log);
	fail(log);
}

ruCustomLog(message : string, name : string, conf : RuConf, def_size : int) -> void {
	log_file = lookupTreeDef(conf.opts, name + "-log", getRussellDir() + "/log/russell_" + name + ".log");
	log_dir = ruDirName(log_file);
	if (log_dir != "") {
		err = ensureDirectoryExists(log_dir);
		if (err != "") {
			println(err);
		}
	}
	if (log_file != "") {
		log_size = s2i(lookupTreeDef(conf.opts, name + "log-size", i2s(def_size)));
		ruWriteLogMessage(message, log_file, log_size);
	}
}

ruWriteLogMessage(message : string, log_name : string, log_size : int) -> void {
	message_with_limestamp = "[" + time2string(timestamp()) + "] " + message;
	log_file = if (fileExists(log_name)) getFileContent(log_name) else "";
	log_lines = strSplit(log_file, "\n");
	log_lines_cut = if (length(log_lines) > log_size) tailFrom(log_lines, log_size / 8) else log_lines;
	updated_log_lines = concat(log_lines_cut, [message_with_limestamp]);
	updated_log_file = strGlue(updated_log_lines, "\n");
	setFileContent(log_name, updated_log_file);
	{}
}
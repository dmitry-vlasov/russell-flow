import base/conf;
import base/dir;

export {
	ruCustomLog(message : string, name : string, conf : RuConf) -> void;
	ruHttpServerLog(message : string, conf : RuConf) -> void;
	ruLspServerLog(message : string, conf : RuConf) -> void;
	ruConsoleLog(message : string, conf : RuConf) -> void;
	ruDebugLog(message : string, conf : RuConf) -> void;
	ruScriptLog(message : string, conf : RuConf) -> void;

	ruCrash(message : string) -> void;
}

ruHttpServerLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "http", conf);
}

ruLspServerLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "lsp", conf);
}

ruConsoleLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "console", conf);
}

ruDebugLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "debug", conf);
}

ruScriptLog(message : string, conf : RuConf) -> void {
	ruCustomLog(message, "script", conf);
}

ruCrashLog(message : string) -> void {
	ruCustomLog(message, "crash", ruEmptyConf);
}

ruCrash(message : string) -> void {
	log = message + "\n" + captureStringCallstack();
	ruCrashLog(log);
	fail(log);
}

ruCustomLog(message : string, name : string, conf : RuConf) -> void {
	log_file = lookupTreeDef(conf.opts, name + "-log", getRussellDir() + "/log/russell_" + name + ".log");
	log_dir = ruDirName(log_file);
	if (log_dir != "") {
		err = ensureDirectoryExists(log_dir);
		if (err != "") {
			println(err);
		}
	}
	if (log_file != "") {
		log_size = s2i(lookupTreeDef(conf.opts, name + "log-size", "256"));
		ruWriteLogMessage(message, log_file, log_size);
	}
}

ruWriteLogMessage(message : string, log_name : string, log_size : int) -> void {
	message_with_limestamp = "[" + time2string(timestamp()) + "] " + message;
	log_file = if (fileExists(log_name)) getFileContent(log_name) else "";
	log_lines = strSplit(log_file, "\n");
	log_lines_cut = if (length(log_lines) > log_size) tailFrom(log_lines, log_size / 8) else log_lines;
	updated_log_lines = concat(log_lines_cut, [message_with_limestamp]);
	updated_log_file = strGlue(updated_log_lines, "\n");
	setFileContent(log_name, updated_log_file);
	{}
}
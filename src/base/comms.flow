import base/concurrent;
import base/conf;
import base/mem_tracker;
import comm;

export {
	ruBaseCommands : [RuComm];
	ruRunGC(unit : RuUnit) -> Maybe<RuState>;
}

ruBaseCommands = concat(
	concat3(ruConfCommands, ruMiscCommands, ruStatsTableCommands), 
	ruMemTrackerCommands
);

ru_conf_stack : ref List<RuConf> = ref makeList();

ruMiscCommands = [
	RuComm(RuCommInfo("run-gc", "misc", "force garbage collection", "", false, false, [], []), ruRunGC),
	RuComm(RuCommInfo("wait-for-enter", "misc", "stops execution until enter is pressed", "", false, false, [], []), ruRunWaitForEnterPressed),
	RuComm(RuCommInfo("russell-dir", "misc", "prints a russell distribution directory", "", false, false, [], []), 
		\unit -> { unit.out.println(findRussellDir()); Some(unit.state); }
	),
	RuComm(RuCommInfo("cwd", "misc", "show true current working directory", "", false, false, [], []),
		\unit -> { unit.out.println(ruCurrentWorkingDir()); Some(unit.state); }
	),
	RuComm(RuCommInfo("clear-ids", "misc", "clear the id tables", "", false, false, [], []),
		\unit -> { ruClearIds(); Some(unit.state); }
	),
	RuComm(RuCommInfo("clear-runtime-functions", "misc", "clear the dynamically loaded table of usable functions", "", false, false, [], []),
		\unit -> { clearRuntimeFunctions(); Some(unit.state); }
	),
	RuComm(
		RuCommInfo(
			"threads-num", "misc", "set the concurrency level", "num", false, false, 
			[RuCommArg("num", false, "number of threads to use", i2s(availableProcessors()))], []
		),
		\unit -> { 
			threads = ruTaskIntArg(unit.task, "num", availableProcessors()); 
			setThreadPoolSize(max(threads, 0));
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommInfo(
			"concurrency", "misc", "enable or disable concurrency", "enabled", false, false, 
			[RuCommArg("enabled", false, "project directory with config file", "1")], []
		),
		\unit -> { 
			ruSetConcurrencyEnabled(ruTaskBoolArg(unit.task, "enabled", true));
			Some(unit.state); 
		}
	)
];

ruConfCommands = [
	RuComm(RuCommInfo("conf-set", "conf", "update configuration", "", false, false, [], []), 
		\unit -> Some(RuState(unit.state with conf = ruSetConf(unit.state.conf, ruTaskArgs2Tree(unit.task.args))))
	),
	RuComm(RuCommInfo("conf-unset", "conf", "remove a configuration option", "", false, false, [], []), 
		\unit -> Some(RuState(unit.state with conf = ruUnsetConf(unit.state.conf, ruTaskArgs2Tree(unit.task.args))))
	),
	RuComm(RuCommInfo("conf", "conf", "a shortcut for 'conf-set'", "", false, false, [], []), 
		\unit -> Some(RuState(unit.state with conf = ruSetConf(unit.state.conf, ruTaskArgs2Tree(unit.task.args)))) 
	),
	RuComm(RuCommInfo("conf-merge", "conf", "merge current and given configs", "", false, false, [], []), 
		\unit -> Some(RuState(unit.state with conf = ruMergeConfs(unit.state.conf, ruTree2Conf(ruTaskArgs2Tree(unit.task.args))))) 
	),
	RuComm(RuCommInfo("conf-clear", "conf", "clear configuration", "", false, false, [], []),
		\unit -> Some(RuState(unit.state with conf = ruTree2Conf(makeTree())))
	),
	RuComm(RuCommInfo("conf-show", "conf", "show current configuration key-value pairs", "", false, false, [], []), 
		\unit -> {
			conf_str = ruConf2s(unit.state.conf);
			unit.out.println(
				"Config: " + (if (conf_str == "") "<EMPTY>" else "\n" + strIndent(conf_str))
			);
			Some(unit.state);
		}
	),
	RuComm(
		RuCommInfo(
			"conf-load", "conf", "load config file from given directory", "dir", false, false,
			[RuCommArg("dir", false, "project directory with config file", "")], []
		), 
		\unit -> {
			conf = unit.state.conf;
			conf_dir = ruResolveRelativePath(ruTaskStringArg(unit.task, "dir", "."), conf.workingDir);
			file_conf = ruReadConfFromDir(conf_dir);
			Some(RuState(unit.state with conf = ruSetConf(conf, file_conf)));
		}
	),
	RuComm(
		RuCommInfo(
			"conf-save", "conf", "save values to the config file", "dir", false, false,
			[RuCommArg("dir", true, "project directory", ".")], []
		), 
		\unit -> {
			conf = unit.state.conf;
			dir0 = ruTaskStringArg(unit.task, "dir", ".");
			dir = if (conf.workingDir == "") dir0 else conf.workingDir + "/" + dir0;
			ruEnsureDirectoryExists(dir, unit.out);
			if (setFileContent(dir + "/russell.conf", ruConf2s(conf))) {
				Some(unit.state);
			} else {
				unit.out.error("Failed to save config", []);
				None();
			}
		}
	),
	RuComm(RuCommInfo("conf-push", "conf", "push current conf onto a stack, current conf will be created from command arguments", "", false, false, [], []),
		\unit -> {
			ru_conf_stack := Cons(unit.state.conf, ^ru_conf_stack);
			Some(RuState(unit.state with conf = ruTree2Conf(ruTaskArgs2Tree(unit.task.args))));
		}
	),
	RuComm(RuCommInfo("conf-pop", "conf", "pop a conf from a stack", "", false, false, [], []),
		\unit -> {
			if (isEmptyList(^ru_conf_stack)) {
				unit.out.error("Attempt to pop an empty conf stack", []);
			}
			conf = headList(^ru_conf_stack, ruTree2Conf(ruTaskArgs2Tree(unit.task.args)));
			ru_conf_stack := tailList(^ru_conf_stack);
			Some(RuState(unit.state with conf = conf));
		}
	),
];

ruRunGC(unit : RuUnit) -> Maybe<RuState> {
	gc();
	Some(unit.state);
}

ruRunWaitForEnterPressed(unit : RuUnit) -> Maybe<RuState> {
	readUntil("\n");
	Some(unit.state);
}

ruStatsTableCommands = [
	RuComm(RuCommInfo("stats-mem", "stats", "show memory usage statistics", "", false, false, 
			[RuCommArg("show", true, "set this option to '1' in order to print memory statistics to the output", "")], []
		),
		\unit -> {
			if (ruTaskBoolArg(unit.task, "show", false)) {
				unit.out.println(
					memory2s(usedMemory()) + " + " + memory2s(freeMemory()) + " free = " + memory2s(totalMemory())
				);
			}
			unit.out.respond(
				JsonObject([
					Pair("used", JsonDouble(usedMemory())),
					Pair("free", JsonDouble(freeMemory())),
					Pair("total", JsonDouble(totalMemory())),
				])
			);
			Some(RuState(unit.state with
				vars = setTree(unit.state.vars, "stats-mem", pairs2tree([
					Pair("used", flow(usedMemory())),
					Pair("free", flow(freeMemory())),
					Pair("total", flow(totalMemory()))
				]))
			)); 
		}
	),
	
	RuComm(
		RuCommInfo(
			"stats-num", "stats", "show number of data records", "table", false, false, 
			[
				RuCommArg("table", false, "the name of a statistics data table", ""),
				RuCommArg("fields", true, "the CSV names of field, on which statistics is shown. If skiped, all fields are show", ""),
			], []
		),
		\unit -> {
			unit.out.println(ruRunStatsTable(unit, \table, field -> ruRunStatsNum(table)));
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommInfo(
			"stats-max", "stats", "show maximum value of field in a data table", "table", false, false, 
			[
				RuCommArg("table", false, "the name of a statistics data table", ""),
				RuCommArg("fields", true, "the CSV names of field, on which statistics is shown. If skiped, all fields are show", ""),
			], []
		),
		\unit -> {
			unit.out.println(ruRunStatsTable(unit, ruRunStatsMax));
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommInfo(
			"stats-min", "stats", "show minimum value of field in a data table", "table", false, false, 
			[
				RuCommArg("table", false, "the name of a statistics data table", ""),
				RuCommArg("fields", true, "the CSV names of field, on which statistics is shown. If skiped, all fields are show", ""),
			], []
		),
		\unit -> {
			unit.out.println(ruRunStatsTable(unit, ruRunStatsMin));
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommInfo(
			"stats-avg", "stats", "show average value of field in a data table", "table", false, false, 
			[
				RuCommArg("table", false, "the name of a statistics data table", ""),
				RuCommArg("fields", true, "the CSV names of field, on which statistics is shown. If skiped, all fields are show", ""),
			], []
		),
		\unit -> {
			unit.out.println(ruRunStatsTable(unit, ruRunStatsAvg));
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommInfo(
			"stats-sigma", "stats", "show average value of field in a data table", "table", false, false, 
			[
				RuCommArg("table", false, "the name of a statistics data table", ""),
				RuCommArg("fields", true, "the CSV names of field, on which statistics is shown. If skiped, all fields are show", ""),
			], []
		),
		\unit -> {
			unit.out.println(ruRunStatsTable(unit, ruRunStatsSigma));
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommInfo(
			"stats-distrib", "stats", "show the distribution of a field value in a data table", "table", false, false, 
			[
				RuCommArg("table", false, "the name of a statistics data table", ""),
				RuCommArg("fields", true, "the CSV names of field, on which statistics is shown. If skiped, all fields are show", ""),
				RuCommArg("key", true, "the field over which the distribution is considered", "size"),
				RuCommArg("kind", true, "the kind of distribution: lin (linear) or log (logarithmic)", "log"),
				RuCommArg("scale", false, "the scale of distribution", "2 for log and 10 for lin"),
			], []
		),
		\unit -> {
			key = ruTaskStringArg(unit.task, "key", "size");
			kind = ruTaskStringArg(unit.task, "kind", "log");
			scale0 = ruTaskIntArg(unit.task, "scale", -1);
			scale = if (scale0 != -1) scale0 else if (kind == "log") 2 else 10;
			unit.out.println(ruRunStatsTable(unit, \table, field -> 
				ruRunStatsDistrib(table, field, key, kind, scale)
			));
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommInfo(
			"stats-all", "stats", "show the distribution of a field value in a data table", "table", false, false, 
			[
				RuCommArg("table", false, "the name of a statistics data table", ""),
				RuCommArg("fields", true, "the CSV names of field, on which statistics is shown. If skiped, all fields are show", ""),
				RuCommArg("key", true, "the field over which the distribution is considered", "size"),
				RuCommArg("kind", true, "the kind of distribution: lin (linear) or log (logarithmic)", "log"),
				RuCommArg("scale", true, "the scale of distribution", "2 for log and 10 for lin"),
				RuCommArg("exclude", true, "CSV list of stats to exclude: num, max, avg, sigma, distrib", ""),
			], []
		),
		\unit -> {
			key = ruTaskStringArg(unit.task, "key", "size");
			kind = ruTaskStringArg(unit.task, "kind", "log");
			scale0 = ruTaskIntArg(unit.task, "scale", -1);
			scale = if (scale0 != -1) scale0 else if (kind == "log") 2 else 10;
			exclude = filtermap(strSplit(ruTaskStringArg(unit.task, "exclude", ""), ","), \excl -> {
				excl1 = trim2(excl, " \t\r\n");
				if (excl1 == "") None() else Some(excl1);
			});
			unit.out.println(ruRunStatsTable(unit, \table, field -> 
				strGlue(filtermap([
					if (contains(exclude, "distrib")) None() else Some(ruRunStatsDistrib(table, field, key, kind, scale)),
					if (contains(exclude, "num")) None() else Some(ruRunStatsNum(table)),
					if (contains(exclude, "max")) None() else Some(ruRunStatsMax(table, field)),
					if (contains(exclude, "min")) None() else Some(ruRunStatsMin(table, field)),
					if (contains(exclude, "avg")) None() else Some(ruRunStatsAvg(table, field)),
					if (contains(exclude, "sigma")) None() else Some(ruRunStatsSigma(table, field)),
				], idfn), "\n")
			));
			Some(unit.state); 
		}
	),
];

ruRunStatsTable(unit : RuUnit, proc : (string, string) -> string) -> string {
	table_name = ruTaskStringArg(unit.task, "table", "");
	if (!ruExistsStats(table_name)) {
		"no '" + table_name + "' statistics data table is found";
	} else {
		table = ruGetStats(table_name);
		if (^(table.size) == 0) {
			"statistics data table '" + table_name + "' contains no data";
		} else {
			task_fields = filtermap(strSplit(ruTaskStringArg(unit.task, "fields", ""), ","), \f -> {
				field = trim2(f, " \t\r\n");
				if (field != "") Some(field) else None();
			});
			fields = if (task_fields != []) task_fields else {
				getTreeKeys(ruGetStatsRow(table, 0).data);
			}
			strGlue(map(fields, \field -> 
				("statistics of table: '" + table_name + "', field: '" + field + "'\n") +
				strIndent(proc(table_name, field))
			), "\n");
		}
	}
}

ruRunStatsDistrib(table : string, field_val : string, field_key : string, kind : string, scale : int) -> string {
	"distribution: \n" + strIndent(
	if (kind == "lin") {
		ruShowStats(table, ruDistribLinSumStats(field_key, field_val, scale))
	} else if (kind == "log"){
		ruShowStats(table, ruDistribLogSumStats(field_key, field_val, scale))
	} else {
		ruShowStats(table, ruDistribLogSumStats(field_key, field_val, scale)) 
	});
}

ruRunStatsNum(table : string) -> string {
	"num:   " + ruShowStats(table, ruNumStats());
}

ruRunStatsMax(table : string, field : string) -> string {
	"max " + field + ":   " + ruShowStats(table, ruMaxStats(field));
}

ruRunStatsMin(table : string, field : string) -> string {
	"min " + field + ":   " + ruShowStats(table, ruMinStats(field));
}

ruRunStatsAvg(table : string, field : string) -> string {
	"avg " + field + ":   " + ruShowStats(table, ruAvgStats(field));
}

ruRunStatsSigma(table : string, field : string) -> string {
	"sigma " + field + ":   " + ruShowStats(table, ruSigmaStats(field));
}

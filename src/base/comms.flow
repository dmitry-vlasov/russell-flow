import base/conf;
import command;

export {
	ruBaseCommands : [RuComm];
	ruConfCommands : [RuComm];
	ruStatsCommands : [RuComm];
	ruFileSyncCommands : [RuComm];
	ruRunGC(task : ScTask, state : RuState) -> Maybe<RuState>;
}

ruBaseCommands = 
	concat(
		concat3(ruConfCommands, ruFileSyncCommands, ruStatsCommands), 
		[RuComm("run-gc", "misc", "force garbage collection", "", [], ruRunGC)]
	);

ruConfCommands = [
	RuComm("russell-dir", "conf", "prints a russell distribution directory", "", [], 
		\task, env -> {
			env.conf.onMessage(findRussellDir());
			Some(env);
		}
	),
	RuComm("update-conf", "conf", "update configuration", "", [], 
		\task, env -> Some(RuState(env with conf = ruUpdateConf(env.conf, ruTree2Conf(task.args))))
	),
	RuComm("conf", "conf", "a shortcut for 'update-conf'", "", [], 
		\task, env -> Some(RuState(env with conf = ruMergeConfs(env.conf, ruTree2Conf(task.args)))) 
	),
	RuComm("clear-conf", "conf", "clear configuration", "", [],
		\task, env -> Some(RuState(env with conf = ruTree2Conf(makeTree())))
	),
	RuComm("show-conf", "conf", "show current configuration key-value pairs", "", [], 
		\task, env -> {
			env.conf.onMessage("Config:\n" + strIndent(ruConf2s(env.conf)));
			Some(env);
		}
	),
	RuComm(
		"load-conf", "conf", "load config file from given directory", "dir",
		[RuCommArg("dir", false, "project directory with config file", "")], 
		\task, env -> {
			Some(RuState(env with 
				conf = ruMergeConfs(
					env.conf, 
					ruMakeConf(lookupTreeDef(task.args, "dir", ""), [])
				)
			));
		}
	),
	RuComm("save-conf", "conf", "save values to the config file", "dir", 
		[RuCommArg("dir", true, "project directory", "")], 
		\task, env -> {
			dir = lookupTreeDef(task.args, "dir", resolveRelativePath("."));
			ensureDirectoryExists(dir);
			conf = ruConf2s(env.conf);
			setFileContent(pathCombine(dir, "russell.conf"), conf);
			Some(env);
		}
	),
];

ruRunGC(task : ScTask, state : RuState) -> Maybe<RuState> {
	gc();
	Some(state);
}

ruStatsCommands = [
	RuComm("math-stats", "stats", "show math statistics", "", [],
		\task, env -> { 
			env.conf.onMessage("Mathematics statistics:");
			env.conf.onMessage("-----------------------");
			env.conf.onMessage(ruMathStats(env.ruMath));
			Some(env); 
		}
	),
	RuComm("mem-stats", "stats", "show memory usage statistics", "", [],
		\task, env -> {
			env.conf.onMessage(
				"Used: " + ruMemory2s(usedMemory()) + " " + 
				"Free: " + ruMemory2s(freeMemory()) + " " + 
				"Total: " + ruMemory2s(totalMemory())
			);
			Some(env); 
		}
	),
	RuComm("cache-stats", "stats", "show cache statistics", "", 
		[RuCommArg("full", true, "show cached names", "")], 
		\task, env -> {
			env.conf.onMessage(ruCacheInfo(lookupTreeDef(task.args, "full", "") == "1"));
			Some(env);
		}
	)
];

ruFileSyncCommands = [
	RuComm(
		"load-cache", "file-sync", "read cached sources", "file",
		[RuCommArg("file", true, "input file", "")],
		\task, env -> {
			conf = env.conf;
			file = lookupTreeDef(task.args, "file", "");
			start = timestamp();
			if (file != "") {
				ruLoadToMemCache(file, conf); 
			} else {
				ruLoadMemCacheFromDisk(conf);
			}
			if (conf.verbose > 0) {
				time = (timestamp() - start) / 1000.0;
				if (time > 0.1) {
					conf.onMessage("cache loaded in " + d2st(time, 3) + ".s");
				}
			}
			Some(env); 
		}
	),
	RuComm(
		"clear-cache", "file-sync", "clear up a cache: mem, disk or all", "cache",
		[RuCommArg("cache", false, "which cache: mem, disk or all to clear", "mem")],
		\task, env -> {
			cache = lookupTreeDef(task.args, "cache", "");
			if (cache == "mem") {
				ruClearMemCache();
			} else if (cache == "disk") {
				ruClearDiskCache(env.conf);
			} else if (cache == "all") {
				ruClearCache(env.conf);
			}
			Some(env); 
		}
	),
	RuComm(
		"save-cache", "file-sync", "save cached sources", "file",
		[RuCommArg("file", true, "input file", "")],
		\task, env -> { 
			file = lookupTreeDef(task.args, "file", "");
			if (file == "") {
				ruSaveCache(env.conf); 
			} else {
				ruSaveCacheFile(file, env.conf); 
			}
			Some(env); 
		}
	),
	RuComm(
		"file-source", "file-sync", "load an updated file source", "file",
		[RuCommArg("file", false, "input file", ""),  RuCommArg("text", false, "updated source", "")],
		\task, env -> { 
			ruSetFileSource(lookupTreeDef(task.args, "file", ""), 
			lookupTreeDef(task.args, "text", "")); 
			Some(env);
		}
	),
	RuComm(
		"file-changed", "file-sync", "apply changes to a file source", "file",
		[RuCommArg("file", false, "input file", ""),  RuCommArg("change", false, "change in JSON format", "")],
		\task, env -> {
			json = lookupTreeDef(task.args, "change-json", "");
			switch (json2LspDidChangeTextDocumentParams(parseJson(json))) {
				Some(params): {
					path = ruCorrectUriPath(params.textDocument.uri.path);
					contents = ruFileSource(path);
					changed = fold(params.contentChanges, contents, \acc, changes -> lspApplyContentChangeEvent(changes, acc));
					ruSetFileSource(path, changed);
				}
				None(): {
					env.conf.onMessage("file-change: An option 'change-json' must be a vaid Json-encoded LSP DidChangeTextDocimentParams");
				}
			}
			Some(env);
		}
	),
	RuComm(
		"file-saved", "file-sync", "file was saved", "file",
		[RuCommArg("file", false, "input file", "")],
		\task, env -> { 
			ruLoadFileSource(lookupTreeDef(task.args, "file", "")); 
			Some(env);
		}
	)
];

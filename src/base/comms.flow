import base/conf;
import command;

export {
	ruBaseCommands : [RuComm];
	ruConfCommands : [RuComm];
	ruStatsCommands : [RuComm];
	ruFileSyncCommands : [RuComm];
}

ruBaseCommands = 
	concat3(ruConfCommands, ruFileSyncCommands, ruStatsCommands);

ruConfCommands = [
	RuComm("update-conf", "conf", "update configuration", "", [], 
		\task, env -> RuEnv(env with conf = ruMergeConfs(env.conf, ruTree2Conf(task.args)))
	),
	RuComm("conf", "conf", "a shortcut for 'update-conf'", "", [], 
		\task, env -> RuEnv(env with conf = ruMergeConfs(env.conf, ruTree2Conf(task.args))) 
	),
	RuComm("show-conf", "conf", "show current configuration key-value pairs", "", [], 
		\task, env -> {
			env.conf.onMessage("Configuration:");
			traverseInOrder(ruConf2Tree(env.conf), \key, val -> env.conf.onMessage("\t" + key + "=" + val));
			env;
		}
	),
	RuComm(
		"load-conf", "conf", "load configuration from given directory", "dir",
		[RuCommArg("dir", false, "directory with config file", "")], 
		\task, env -> {
			RuEnv(env with 
				conf = ruMergeConfs(
					env.conf, 
					ruMakeConf(lookupTreeDef(task.args, "dir", ""), [])
				)
			);
		}
	),
	RuComm("clear-conf",  "conf", "clear configuration", "", [],
		\task, env -> RuEnv(env with conf = ruTree2Conf(makeTree()))
	)
];

ruFileSyncCommands = [
	RuComm(
		"load-cache", "file-sync", "read cached sources", "file",
		[RuCommArg("file", false, "input file", "")],
		\task, env -> { ruLoadToCache(lookupTreeDef(task.args, "file", ""), env.conf); env; }
	),
	RuComm(
		"save-cache", "file-sync", "save cached sources", "file",
		[RuCommArg("file", true, "input file", "")],
		\task, env -> { 
			file = lookupTreeDef(task.args, "file", "");
			if (file == "") {
				ruSaveCache(env.conf); 
			} else {
				ruSaveCacheFile(file, env.conf); 
			}
			env; 
		}
	),
	RuComm(
		"file-source", "file-sync", "load an updated file source", "file",
		[RuCommArg("file", false, "input file", ""),  RuCommArg("text", false, "updated source", "")],
		\task, env -> { ruSetFileSource(lookupTreeDef(task.args, "file", ""), lookupTreeDef(task.args, "text", "")); env; }
	),
	RuComm(
		"file-changed", "file-sync", "apply changes to a file source", "file",
		[RuCommArg("file", false, "input file", ""),  RuCommArg("change", false, "change in JSON format", "")],
		\task, env -> {
			json = lookupTreeDef(task.args, "change-json", "");
			switch (json2LspDidChangeTextDocumentParams(parseJson(json))) {
				Some(params): {
					path = ruCorrectUriPath(params.textDocument.uri.path);
					contents = ruFileSource(path);
					changed = fold(params.contentChanges, contents, \acc, changes -> lspApplyContentChangeEvent(changes, acc));
					ruSetFileSource(path, changed);
				}
				None(): {
					env.conf.onMessage("file-change: An option 'change-json' must be a vaid Json-encoded LSP DidChangeTextDocimentParams");
				}
			}
			env;
		}
	),
	RuComm(
		"file-saved", "file-sync", "file was saved", "file",
		[RuCommArg("file", false, "input file", "")],
		\task, env -> { ruLoadFileSource(lookupTreeDef(task.args, "file", "")); env; }
	)
];

ruStatsCommands = [
	RuComm("math-stats", "stats", "show math statistics", "", [],
		\task, env -> { 
			env.conf.onMessage("Mathematics statistics:");
			env.conf.onMessage("-----------------------");
			env.conf.onMessage(ruMathStats(env.ruMath));
			env; 
		}
	),
	RuComm("mem-stats", "stats", "show memory usage statistics", "", [],
		\task, env -> { 
			start = timestamp();
			n = s2i(lookupTreeDef(task.args, "delay", "0"));
			m = s2i(lookupTreeDef(task.args, "count", "0"));
			for(0, \a -> a < m, \a -> {
				for(0, \b -> b < n, \b -> b + 1);
				a + 1
			});
			env.conf.onMessage(
				"Used: " + ruMemory2s(usedMemory()) + " " + 
				"Free: " + ruMemory2s(freeMemory()) + " " + 
				"Total: " + ruMemory2s(totalMemory()) + " in " + 
				d2st((timestamp() - start) / 1000.0, 2)
			);
			env; 
		}
	),
	RuComm("cache-stats", "stats", "show cache statistics", "", 
		[RuCommArg("full", true, "show cached names", "")], 
		\task, env -> {
			env.conf.onMessage(ruCacheInfo(lookupTreeDef(task.args, "full", "") == "1"));
			env;
		}
	)
];

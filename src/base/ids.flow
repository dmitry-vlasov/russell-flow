import ds/tree;
import string;

export {
	s2id(s : string) -> int;
	id2s(id : int) -> string;
	setId2s(id : int, s : string) -> void;
}

ru_s2id_map : ref Tree<string, int> = ref makeTree();
ru_id2s_map : ref Tree<int, string> = ref makeTree();

s2id(s : string) -> int {
	switch (lookupTree(^ru_s2id_map, s)) {
		Some(id): id;
		None(): {
			id = sizeTree(^ru_s2id_map);
			ru_s2id_map := setTree(^ru_s2id_map, s, id);
			ru_id2s_map := setTree(^ru_id2s_map, id, s);
			id;
		}
	}
}

id2s(id : int) -> string {
	if (!containsKeyTree(^ru_id2s_map, id)) {
		println("Id '" + i2s(id) + "' is not registred in the id-to-string map");
		"";
	} else {
		lookupTreeDef(^ru_id2s_map, id, "");
	}
}

setId2s(id : int, s : string) -> void {
	if (containsKeyTree(^ru_s2id_map, s)) {
		println("String '" + s + "' is already in the string-to-id map");
	} else if (containsKeyTree(^ru_id2s_map, id)) {
		println("Id '" + i2s(id) + "' is already in the id-to-string map");
	} else {
		ru_s2id_map := setTree(^ru_s2id_map, s, id);
		ru_id2s_map := setTree(^ru_id2s_map, id, s);
	}
}

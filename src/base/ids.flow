import sys/concurrent;
import text/binary;
import base/log;
import base/env;
import base/cache;

export {
	s2id_(s : string) -> int;
	s2id(string) -> int;
	id2s(id : int) -> string;
	ruSaveIds(env : RuEnv) -> void;
	ruReadIds(env : RuEnv) -> void;
	ruIds() -> [string];
	ruIdsVersion() -> double;
}

RuIds(
	s2id : native,
	id2s : native,
	id_counter : ref int,
	was_modified : ref bool,
	version : ref double, // ids version
);

ru_ids = RuIds(
	initConcurrentHashMap(),
	initConcurrentHashMap(),
	ref 0,
	ref false,
	ref 0.0
);

ruIdsVersion() -> double {
	^(ru_ids.version);
}

do_s2id = synchronizedUnaryFn(ru_ids, 
	\s ->
	if (containsConcurrentHashMap(ru_ids.s2id, s)) {
		getConcurrentHashMap(ru_ids.s2id, s, -1);
	} else {
		id = atomicRefIntAddition(ru_ids.id_counter, 1);
		sets2id(s, id);
		id;
	}
);

s2id(s : string) -> int {
	if (containsConcurrentHashMap(ru_ids.s2id, s)) {
		getConcurrentHashMap(ru_ids.s2id, s, -1);
	} else {
		ru_ids.was_modified := true;
		do_s2id(s);
	}
} 

s2id_(s : string) -> int {
	getConcurrentHashMap(ru_ids.s2id, s, -1);
}

id2s(id : int) -> string {
	if (id == -1) "" else
	if (!containsConcurrentHashMap(ru_ids.id2s, id)) {
		ruCrash("Id '" + i2s(id) + "' is not registred in the id-to-string map");
		"";
	} else {
		str = getConcurrentHashMap(ru_ids.id2s, id, "");
		if (str == "") {
			ruCrash("empty string for id: " + i2s(id));
		}
		str;
	}
}

sets2id(s : string, id : int) -> void {
	if (s == "" || id < 0) {
		if (s == "") {
			ruCrash("empty string for id: " + i2s(id));
		} else {
			ruCrash("id is less then 0: " + i2s(id));
		}
	} else if (containsConcurrentHashMap(ru_ids.s2id, s)) {
		ruCrash(
			"String '" + s + "' is already in the string-to-id map, corresponding id: " + i2s(s2id(s)) + ", new id: " + i2s(id)
		);
	} else if (containsConcurrentHashMap(ru_ids.id2s, id)) {
		ruCrash(
			"Id '" + i2s(id) + "' is already in the id-to-string map, corresponding string: '" + id2s(id) + "', new string: '" + s + "'"
		);
	} else {
		setConcurrentHashMap(ru_ids.s2id, s, id);
		setConcurrentHashMap(ru_ids.id2s, id, s);
	}
}

ruIds() -> [string] {
	valuesConcurrentHashMap(ru_ids.id2s);
}

ruSaveIds(env : RuEnv) -> void {
	if (^(ru_ids.was_modified) && ^(ru_ids.id_counter) > 0) {
		arr = map(enumFromTo(0, ^(ru_ids.id_counter) - 1), \id -> 
			getConcurrentHashMap(ru_ids.id2s, id, "")
		);
		cache_dir = ruCacheDir(env.conf, "");
		file = cache_dir + "/__ids.txt";
		lines = concatStrings(concat([d2s(ruIdsVersion()) + "\n"],
			mapi(arr, \i, s -> s + if (i + 1 < length(arr)) "\n" else "")
		));
		setFileContent(file, lines);
		ru_ids.was_modified := false;
	}
}

ruReadIds(env : RuEnv) -> void {
	cache_dir = ruCacheDir(env.conf, "");
	file = cache_dir + "/__ids.txt";
	if (fileExists(file)) {
		source = getFileContent(file);
		lines = strSplit(source, "\n");
		version = s2d(lines[0]);
		strings = tailFrom(lines, 1);
		iteri(strings, \i, s -> sets2id(s, i + 1));
		ru_ids.id_counter := length(strings) + 1;
		ru_ids.was_modified := false;
		ru_ids.version := version;
	} else {
		ru_ids.version := timestamp();
	}
}

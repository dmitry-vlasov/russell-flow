import sys/concurrent;
import text/binary;
import base/log;
import base/env;
import base/cache;

export {
	s2id_(s : string) -> int;
	s2id : (string) -> int = ruMakeS2id();
	id2s(id : int) -> string;
	ruSaveIds(env : RuEnv) -> void;
	ruReadIds(env : RuEnv) -> void;
	ruIds() -> [string];
	ruIdsVersion() -> double;
}

RuIds(
	s2id : native,
	id2s : native,
	id_counter : ref int,
	add_counter : ref int,
	version : ref double, // ids version
);

ru_ids = RuIds(
	initConcurrentHashMap(),
	initConcurrentHashMap(),
	ref 0,
	ref 0,
	ref 0.0
);

ruIdsVersion() -> double {
	^(ru_ids.version);
}

ruMakeS2id : () -> (string) -> int = \ -> 
	synchronizedUnaryFn(ru_ids, 
		\s ->
		if (containsConcurrentHashMap(ru_ids.s2id, s)) {
			getConcurrentHashMap(ru_ids.s2id, s, -1);
		} else {
			id = atomicRefIntAddition(ru_ids.id_counter, 1);
			sets2id(s, id);
			id;
		}
	);

s2id_(s : string) -> int {
	getConcurrentHashMap(ru_ids.s2id, s, -1);
}

id2s(id : int) -> string {
	if (id == -1) "" else
	if (!containsConcurrentHashMap(ru_ids.id2s, id)) {
		ruCrash("Id '" + i2s(id) + "' is not registred in the id-to-string map");
		"";
	} else {
		str = getConcurrentHashMap(ru_ids.id2s, id, "");
		if (str == "") {
			ruCrash("empty string for id: " + i2s(id));
		}
		str;
	}
}

sets2id(s : string, id : int) -> void {
	if (s == "" || id < 0) {
		if (s == "") {
			ruCrash("empty string for id: " + i2s(id));
		} else {
			ruCrash("id is less then 0: " + i2s(id));
		}
	} else if (containsConcurrentHashMap(ru_ids.s2id, s)) {
		ruCrash(
			"String '" + s + "' is already in the string-to-id map, corresponding id: " + i2s(s2id(s)) + ", new id: " + i2s(id)
		);
	} else if (containsConcurrentHashMap(ru_ids.id2s, id)) {
		ruCrash(
			"Id '" + i2s(id) + "' is already in the id-to-string map, corresponding string: '" + id2s(id) + "', new string: '" + s + "'"
		);
	} else {
		atomicRefIntAddition(ru_ids.add_counter, 1);
		setConcurrentHashMap(ru_ids.s2id, s, id);
		setConcurrentHashMap(ru_ids.id2s, id, s);
	}
}

RuIdMap(
	version : double, 
	map : [Pair<string, int>]
);

ruSaveIds(env : RuEnv) -> void {
	if (^(ru_ids.add_counter) > 0) {
		arr = map(keysConcurrentHashMap(ru_ids.s2id), \s -> 
			Pair(s, getConcurrentHashMap(ru_ids.s2id, s, -1))
		);
		cache_dir = ruCacheDir(env.conf, "");
		file = cache_dir + "/__ids.map";
		setFileContent(file, toBinary(RuIdMap(ruIdsVersion(), arr)));
		ru_ids.add_counter := 0;
	}
}

ruReadIds(env : RuEnv) -> void {
	cache_dir = ruCacheDir(env.conf, "");
	file = cache_dir + "/__ids.map";
	if (fileExists(file)) {
		raw = deserializeBinary(getFileContent(file), IllegalStruct());
		if (raw == IllegalStruct()) {
			env.out.onError("WARNING: Illegal structure of id maps file for '" + file + "'", []);
		} else {
			ids = cast(raw : flow -> RuIdMap);	
			iter(ids.map, \p -> sets2id(p.first, p.second));
			ru_ids.id_counter := length(ids.map);
			ru_ids.add_counter := 0;
			ru_ids.version := ids.version;
		}
	} else {
		ru_ids.version := timestamp();
	}
}

ruIds() -> [string] {
	valuesConcurrentHashMap(ru_ids.id2s);
}
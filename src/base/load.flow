import base/fileinfo;
import base/log;
import base/code;

export {
	RuLoadDescr(
		mlCommentBeg : string,
		mlCommentEnd : string,
		slCommentBeg : string,
		slCommentEnd : string,
		importBeg : string,
		importEnd : string,
		ext : string,
		codeLoader : (int, RuEnv) -> Maybe<RuCode>,
	);
	RuRawSource(imps : [int], src : string, info : RuFileInfo);

	ruLoadRawSource(module : int, env : RuEnv, descr : RuLoadDescr) -> Maybe<RuRawSource>;
	// Loads a source code from a filesystem
	ruFileCodeLoader(module : int, env : RuEnv) -> Maybe<RuCode>;
}

ruFileCodeLoader(module : int, env : RuEnv) -> Maybe<RuCode> {
	file = id2s(module);
	path = ruFindPath(file, env.conf, ".mm");
	if (fileExists(path)) {
		code = getFileContent(path);
		Some(RuCode(code, path, fileModified(path)));
	} else {
		env.out.onError("At loading: file '" + path + "' is not found for module '" + file + "'", []);
		None()
	}
}

ruLoadRawSource(module : int, env : RuEnv, descr : RuLoadDescr) -> Maybe<RuRawSource> {
	maybeMap(descr.codeLoader(module, env), \loaded -> 
		RuRawSource(
			ruParseLoad(loaded.code, descr), 
			loaded.code, 
			ruMakeFileInfo(loaded.path, env.conf)
		)
	);
}

RuParseLoadAcc(
	src : string,
	pos : int,
	imports : [int],
	state : RuParseLoadState
);

RuParseLoadState ::= RuParseLoadCommentML, RuParseLoadCommentSL, RuParseLoadSrc;
	RuParseLoadCommentML(); 
	RuParseLoadCommentSL();
	RuParseLoadSrc();
	
ruParseLoad(src : string, descr : RuLoadDescr) -> [int] {
	ruDoParseLoad(RuParseLoadAcc(src, 0, [], RuParseLoadSrc()), descr).imports
}

ruDoParseLoad(acc : RuParseLoadAcc, descr : RuLoadDescr) -> RuParseLoadAcc {
	if (acc.pos >= strlen(acc.src)) acc else {
		switch (acc.state) {
			RuParseLoadCommentSL(): {
				i = strRangeIndexOf(acc.src, descr.slCommentEnd, acc.pos, strlen(acc.src));
				if (i == -1) acc else 
				ruDoParseLoad(RuParseLoadAcc(acc with 
					pos = i + strlen(descr.slCommentEnd),
					state = RuParseLoadSrc()
				), descr)
			}
			RuParseLoadCommentML(): {
				i = strRangeIndexOf(acc.src, descr.mlCommentEnd, acc.pos, strlen(acc.src));
				if (i == -1) acc else 
				ruDoParseLoad(RuParseLoadAcc(acc with 
					pos = i + strlen(descr.mlCommentEnd),
					state = RuParseLoadSrc()
				), descr)
			}
			RuParseLoadSrc(): {
				if (descr.slCommentBeg != "" && substring(acc.src, acc.pos, strlen(descr.slCommentBeg)) == descr.slCommentBeg) {
					ruDoParseLoad(RuParseLoadAcc(acc with 
						pos = acc.pos + strlen(descr.slCommentBeg),
						state = RuParseLoadCommentSL()
					), descr)
				} else if (descr.mlCommentBeg != "" && substring(acc.src, acc.pos, strlen(descr.mlCommentBeg)) == descr.mlCommentBeg) {
					ruDoParseLoad(RuParseLoadAcc(acc with 
						pos = acc.pos + strlen(descr.mlCommentBeg),
						state = RuParseLoadCommentML()
					), descr)
				} else if (substring(acc.src, acc.pos, strlen(descr.importBeg)) == descr.importBeg) {
					i = strRangeIndexOf(acc.src, descr.importEnd, acc.pos + strlen(descr.importBeg), strlen(acc.src));
					if (i == -1) acc else
					ruDoParseLoad(RuParseLoadAcc(acc with 
						pos = i + strlen(descr.importEnd),
						imports = concat(acc.imports, [
							s2id(trim(substring(acc.src, acc.pos + strlen(descr.importBeg), i - (acc.pos + strlen(descr.importBeg)))))
						])
					), descr)
				} else {
					ruDoParseLoad(RuParseLoadAcc(acc with pos = acc.pos + 1), descr)
				}
			}
		}
	}
}


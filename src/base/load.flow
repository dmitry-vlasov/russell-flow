import base/util/fileinfo;
import base/log;
import base/code;

export {
	RuLoader(
		mlCommentBeg : string,
		mlCommentEnd : string,
		slCommentBeg : string,
		slCommentEnd : string,
		importBeg : string,
		importEnd : string,
		ext : string,
		codeLoader : (int, RuEnv) -> Maybe<RuCode>,
	);
	RuRawSource(imps : [int], src : string, info : RuFileInfo);

	ruLoadRawSource(module : int, env : RuEnv, loader : RuLoader) -> Maybe<RuRawSource>;
	// Loads a source code from a filesystem
	ruFileCodeLoader(module : int, env : RuEnv) -> Maybe<RuCode>;

	ruLoadRawSourceFromCode(code : RuCode, env : RuEnv, loader : RuLoader) -> RuRawSource;
}

ruFileCodeLoader(module : int, env : RuEnv) -> Maybe<RuCode> {
	file = id2s(module);
	path = ruFindPath(file, env.conf, ".mm");
	if (fileExists(path)) {
		code = getFileContent(path);
		Some(RuCode(code, path, fileModified(path)));
	} else {
		env.out.error("At loading: file '" + path + "' is not found for module '" + file + "'", []);
		None()
	}
}

ruLoadRawSource(module : int, env : RuEnv, loader : RuLoader) -> Maybe<RuRawSource> {
	maybeMap(loader.codeLoader(module, env), \loaded -> 
		RuRawSource(
			ruParseImports(loaded.code, loader), 
			loaded.code, 
			ruMakeFileInfo(loaded.path, env.conf)
		)
	);
}

ruParseImportsAcc(
	src : string,
	pos : int,
	imports : [int],
	state : ruParseImportsState
);

ruParseImportsState ::= ruParseImportsCommentML, ruParseImportsCommentSL, ruParseImportsSrc;
	ruParseImportsCommentML(); 
	ruParseImportsCommentSL();
	ruParseImportsSrc();
	
ruParseImports(src : string, loader : RuLoader) -> [int] {
	ruDoParseLoad(ruParseImportsAcc(src, 0, [], ruParseImportsSrc()), loader).imports
}

ruDoParseLoad(acc : ruParseImportsAcc, loader : RuLoader) -> ruParseImportsAcc {
	if (acc.pos >= strlen(acc.src)) acc else {
		switch (acc.state) {
			ruParseImportsCommentSL(): {
				i = strRangeIndexOf(acc.src, loader.slCommentEnd, acc.pos, strlen(acc.src));
				if (i == -1) acc else 
				ruDoParseLoad(ruParseImportsAcc(acc with 
					pos = i + strlen(loader.slCommentEnd),
					state = ruParseImportsSrc()
				), loader)
			}
			ruParseImportsCommentML(): {
				i = strRangeIndexOf(acc.src, loader.mlCommentEnd, acc.pos, strlen(acc.src));
				if (i == -1) acc else 
				ruDoParseLoad(ruParseImportsAcc(acc with 
					pos = i + strlen(loader.mlCommentEnd),
					state = ruParseImportsSrc()
				), loader)
			}
			ruParseImportsSrc(): {
				if (loader.slCommentBeg != "" && substring(acc.src, acc.pos, strlen(loader.slCommentBeg)) == loader.slCommentBeg) {
					ruDoParseLoad(ruParseImportsAcc(acc with 
						pos = acc.pos + strlen(loader.slCommentBeg),
						state = ruParseImportsCommentSL()
					), loader)
				} else if (loader.mlCommentBeg != "" && substring(acc.src, acc.pos, strlen(loader.mlCommentBeg)) == loader.mlCommentBeg) {
					ruDoParseLoad(ruParseImportsAcc(acc with 
						pos = acc.pos + strlen(loader.mlCommentBeg),
						state = ruParseImportsCommentML()
					), loader)
				} else if (substring(acc.src, acc.pos, strlen(loader.importBeg)) == loader.importBeg) {
					i = strRangeIndexOf(acc.src, loader.importEnd, acc.pos + strlen(loader.importBeg), strlen(acc.src));
					if (i == -1) acc else
					ruDoParseLoad(ruParseImportsAcc(acc with 
						pos = i + strlen(loader.importEnd),
						imports = concat(acc.imports, [
							s2id(trim(substring(acc.src, acc.pos + strlen(loader.importBeg), i - (acc.pos + strlen(loader.importBeg)))))
						])
					), loader)
				} else {
					ruDoParseLoad(ruParseImportsAcc(acc with pos = acc.pos + 1), loader)
				}
			}
		}
	}
}

ruLoadRawSourceFromCode(code : RuCode, env : RuEnv, loader : RuLoader) -> RuRawSource { 
	RuRawSource(
		ruParseImports(code.code, loader), 
		code.code, 
		ruMakeFileInfo(code.path, env.conf)
	);
}

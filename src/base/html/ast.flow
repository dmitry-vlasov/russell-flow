import lingo/compiler/syntaxtree_types;
import base/html/ast_mnemonics;

export {
	get_html_source_html_element_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_text(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_comment(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_entity(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_dec_entity(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_hex_entity(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_code_entity(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_tag(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_tag_clopen(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_tag_open(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_tag_close(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_attrib1(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib2(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib3(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib4(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_dec_digit(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_dec_digit_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_hex_digit_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_letter(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_letter_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_id(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_val(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_ws(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_ws__s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_any(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_text__choice26(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_text__choice27(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_id__choice28(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_id__choice28_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_val__choice29(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_val__choice29_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_text__auto30(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_text__auto30_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_comment__auto31(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_comment__auto31_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_comment__auto32(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_dec_entity__auto33(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_dec_entity__auto33_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_hex_entity__auto34(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_hex_entity__auto34_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_code_entity__auto35(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_code_entity__auto35_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_attrib1__auto36(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib1__auto36_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_attrib2__auto37(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib2__auto37_s(st : SyntaxTree) -> [SyntaxTree];

}

get_html_source_html_text(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_html_element) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_comment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_html_element) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_entity(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_element) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_dec_entity(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_entity) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_hex_entity(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_html_entity) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_code_entity(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_html_entity) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_tag(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_html_element) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_tag_clopen(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_tag) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_tag_open(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_html_tag) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_tag_close(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_html_tag) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_attrib1(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_attrib) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_attrib2(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_html_attrib) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_attrib3(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_html_attrib) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_attrib4(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_html_attrib) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_dec_digit(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_hex_digit) {
		st.children[0][0];
	} else if (get_html_source_html_id__choice28(st) != failSyntaxTree) {
		get_html_source_html_id__choice28(st);
	} else if (get_html_source_html_val__choice29(st) != failSyntaxTree) {
		get_html_source_html_val__choice29(st);
	} else failSyntaxTree
}
get_html_source_html_letter(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_id) {
		st.children[0][0];
	} else if (get_html_source_html_text__choice26(st) != failSyntaxTree) {
		get_html_source_html_text__choice26(st);
	} else if (get_html_source_html_text__choice26(st).choice == 1) {
		get_html_source_html_text__choice26(st).children[0][0];
	} else if (get_html_source_html_id__choice28(st) != failSyntaxTree) {
		get_html_source_html_id__choice28(st);
	} else if (get_html_source_html_val__choice29(st) != failSyntaxTree) {
		get_html_source_html_val__choice29(st);
	} else failSyntaxTree
}
get_html_source_html_id(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_tag_clopen) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_tag_open) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_tag_close) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib4) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_val(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[3][0];
	} else failSyntaxTree
}
get_html_source_html_ws(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_source) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_tag_clopen) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_tag_clopen) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_tag_open) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_tag_open) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_tag_close) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_tag_close) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib4) {
		st.children[1][0];
	} else if (get_html_source_html_dec_entity__auto33(st).choice == 0) {
		get_html_source_html_dec_entity__auto33(st).children[0][0];
	} else if (get_html_source_html_hex_entity__auto34(st).choice == 0) {
		get_html_source_html_hex_entity__auto34(st).children[0][0];
	} else if (get_html_source_html_code_entity__auto35(st).choice == 0) {
		get_html_source_html_code_entity__auto35(st).children[0][0];
	} else failSyntaxTree
}
get_html_source_html_any(st : SyntaxTree) -> SyntaxTree {
	if (get_html_source_html_text__auto30(st).choice == 0) {
		get_html_source_html_text__auto30(st).children[0][0];
	} else if (get_html_source_html_comment__auto31(st).choice == 0) {
		get_html_source_html_comment__auto31(st).children[0][0];
	} else if (get_html_source_html_attrib1__auto36(st).choice == 0) {
		get_html_source_html_attrib1__auto36(st).children[0][0];
	} else if (get_html_source_html_attrib2__auto37(st).choice == 0) {
		get_html_source_html_attrib2__auto37(st).children[0][0];
	} else failSyntaxTree
}
get_html_source_html_text__choice26(st : SyntaxTree) -> SyntaxTree {
	if (get_html_source_html_text__choice27(st).choice == 0) {
		get_html_source_html_text__choice27(st).children[0][0];
	} else failSyntaxTree
}
get_html_source_html_text__choice27(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_id__choice28(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_val__choice29(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_text__auto30(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_comment__auto31(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_comment__auto32(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_dec_entity__auto33(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_hex_entity__auto34(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_code_entity__auto35(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_attrib1__auto36(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_attrib2__auto37(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}

get_html_source_html_element_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_source) {
		st.children[1];
	} else []
}
get_html_source_html_attrib_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_tag_clopen) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_html_tag_open) {
		st.children[3];
	} else []
}
get_html_source_html_dec_digit_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_dec_entity) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_html_hex_digit) {
		st.children[0];
	} else if (get_html_source_html_id__choice28(st).choice == 1) {
		get_html_source_html_id__choice28(st).children[0];
	} else if (get_html_source_html_val__choice29(st).choice == 1) {
		get_html_source_html_val__choice29(st).children[0];
	} else []
}
get_html_source_html_hex_digit_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_hex_entity) {
		st.children[0];
	} else []
}
get_html_source_html_letter_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_code_entity) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_html_id) {
		st.children[0];
	} else if (get_html_source_html_text__choice26(st).choice == 0) {
		get_html_source_html_text__choice26(st).children[0];
	} else if (get_html_source_html_text__choice26(st).choice == 1) {
		get_html_source_html_text__choice26(st).children[0];
	} else if (get_html_source_html_id__choice28(st).choice == 0) {
		get_html_source_html_id__choice28(st).children[0];
	} else if (get_html_source_html_val__choice29(st).choice == 0) {
		get_html_source_html_val__choice29(st).children[0];
	} else []
}
get_html_source_html_ws__s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_s) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_html_ws) {
		st.children[0];
	} else []
}
get_html_source_html_id__choice28_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_id) {
		st.children[1];
	} else []
}
get_html_source_html_val__choice29_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_val) {
		st.children[0];
	} else []
}
get_html_source_html_text__auto30_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_text) {
		st.children[0];
	} else []
}
get_html_source_html_comment__auto31_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_html_source_html_comment__auto32(st).choice == 0) {
		get_html_source_html_comment__auto32(st).children[0];
	} else []
}
get_html_source_html_dec_entity__auto33_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_dec_entity) {
		st.children[1];
	} else []
}
get_html_source_html_hex_entity__auto34_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_hex_entity) {
		st.children[1];
	} else []
}
get_html_source_html_code_entity__auto35_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_code_entity) {
		st.children[1];
	} else []
}
get_html_source_html_attrib1__auto36_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[3];
	} else []
}
get_html_source_html_attrib2__auto37_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[3];
	} else []
}


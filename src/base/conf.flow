import base/util;

export {
	RuPlace(file : string, pos : int);

	// Syntax of a command line task:
	//   do=<command> <arg_1>=<val_1> ... <arg_n>=<val_n>
	//
	// Syntax of a command line:
	//   <task_1> ... <task_m>

	RuConf(
		importRoots : [string],
		projectRoots : [string],
		workingDir : string,
        verbose : int,
		opts : Tree<string, string>,
		onError : (string, [RuPlace]) -> void,
		onMessage : (string) -> void
	);

	RuTask(
		command : string,
		args : Tree<string, string>
	);

	RuJob(
		tasks : [RuTask]
	);

	ruTrimPath(file : string, conf : RuConf, ext : string) -> string;
	ruFindPath(file : string, conf : RuConf, ext : string) -> string;
	ruIncVerbose(conf : RuConf) -> RuConf;
	ruDecVerbose(conf : RuConf) -> RuConf;
	ruAddErr2Conf(conf : RuConf, msg : string) -> RuConf;
	ruAddErrCounter(conf : RuConf, err_count : ref int) -> RuConf;
	ruPlace2s(place : RuPlace) -> string;
	getRussellDir() -> string;
	ruFindConfDir(dir : string) -> string;

	ruMakeJob(params : [[string]]) -> RuJob;
	ruMakeConf(dir_ : string, params : [[string]]) -> RuConf;
	ruMakeOnError(opts : Tree<string, string>, onMessage : (string) -> void) -> (string, [RuPlace]) -> void;
	ruJob2Json(job : RuJob) -> Json;
	ruJson2Job(json : Json) -> Maybe<RuJob>;
	ruMergeOpts(opts1 : Tree<string, string>, opts2 : Tree<string, string>) -> Tree<string, string>;

	ruReadConfFileFromDir(dir : string) -> Tree<string, string>;
	ruConf2Tree(conf : RuConf) -> Tree<string, string>;
	ruTree2Conf(opts : Tree<string, string>) -> RuConf;
	ruMergeConfs(conf1 : RuConf, conf2 : RuConf) -> RuConf;

	ruTask2s(task : RuTask) -> string;
	ruJob2s(job : RuJob) -> string;
	ruJobSmall2s(job : RuJob) -> string;
}

ruTrimPath(file : string, conf : RuConf, ext0 : string) -> string {
	//ruDebugLog1("file: " + file);
	//ruDebugLog1("ext: " + ext);
	ext = if (startsWith(ext0, ".")) ext0 else "." + ext0;
	noext = strReplace(ruRemoveExt(file, ext), "\\", "/");
	//ruDebugLog1("noext: " + noext);
	shift = if (conf.workingDir == "") "" else relatingPath(conf.workingDir, resolveRelativePath("."));
	pathShift = if (shift == "") shift else shift + "/";
	processImportRoot = \acc, impRoot -> {
		resolved = strReplace(resolveRelativePath(impRoot), "\\", "/");
		if (startsWith(toLowerCase(acc), toLowerCase(resolved))) {
			strRight(acc, strlen(resolved));
		} else if (startsWith(toLowerCase(acc), toLowerCase(impRoot))) {
			strRight(acc, strlen(impRoot));
		} else acc
	};
	trimmed = fold(conf.importRoots, noext, \acc, impRoot -> {
		acc1 = if (pathShift != "") {
			processImportRoot(acc, pathShift + impRoot)
		} else acc;
		processImportRoot(acc1, impRoot)
	});
	if (trimmed == noext) file else trim2(trimmed, "/");
}

ruFindPath(file : string, conf : RuConf, ext0 : string) -> string {
	ext = if (startsWith(ext0, ".")) ext0 else "." + ext0;
	withRus = if (endsWith(file, ext)) file else file + ext;
	shift = if (conf.workingDir == "") "" else relatingPath(conf.workingDir, resolveRelativePath("."));
	if (fileExists(withRus)) {
		resolveRelativePath(withRus);
	} else {
		ruDoFindPath(withRus, if (shift == "") shift else shift + "/", conf.importRoots);
	}
}

ruDoFindPath(withRus : string, pathShift : string, importRoots : [string]) -> string {
	if (importRoots == []) withRus
	else {
		head = importRoots[0];
		directPath = head + (if (endsWith(head, "/")) "" else "/") + withRus;
		if (fileExists(directPath)) {
			resolveRelativePath(directPath);
		} else {
			shiftedPath = pathShift + directPath;
			if (fileExists(shiftedPath)) {
				resolveRelativePath(shiftedPath);
			} else {
				ruDoFindPath(withRus, pathShift, tail(importRoots));
			}
		}
	}
}

ruIncVerbose(conf : RuConf) -> RuConf {
	RuConf(conf with verbose = conf.verbose + 1);
}

ruDecVerbose(conf : RuConf) -> RuConf {
	RuConf(conf with verbose = max(0, conf.verbose - 1));
}

ruAddErr2Conf(conf : RuConf, msg : string) -> RuConf {
	RuConf(conf with onError = \str, pos -> conf.onError(str + msg, pos))
}

ruAddErrCounter(conf : RuConf, err_count : ref int) -> RuConf {
	RuConf(conf with onError = 
		\err, places -> {
			err_count := ^err_count + 1;
			conf.onError(err, places);
		}
	)
}

ruPlace2s(place : RuPlace) -> string {
	if (place.file == "" || place.pos == -1) "" else {
		code = getFileContent(place.file);
		resolver = makeLineResolver(code);
		pos = findLine(resolver, place.pos);
		"file " + place.file + ": line " + i2s(pos.lineno) + ", col " + i2s(pos.column)
	}
}

ruRussellDir : ref Maybe<string> = ref None();

getRussellDir() -> string {
	init_dir = \-> {
		// Use the path of the executable
		appPath = strReplace(getApplicationPath(), "\\", "/");
		russellDefDir = if (strContains(appPath, "russell/bin/")) {
			takeBefore(appPath, "/bin/", appPath) + "/"
		} else if (strContains(appPath, "russell-flow/bin/")) {
			takeBefore(appPath, "/bin/", appPath)
		} else if (strContains(appPath, "russell-flow/src/russell")) {
			takeBefore(appPath, "src/russell", appPath)
		} else if (strContains(appPath, "russell/src/russell")) {
			takeBefore(appPath, "src/russell", appPath)
		} else if (strContains(appPath, "bin/")) {
			takeBefore(appPath, "bin/", appPath)
		} else {
			ruPrintln("WARNING: Could not determine the russell directory.");
			ruPrintln("Defaults to ../flow9/. Use bin-dir=<path> to specify where the flow folder is");
			"../russell/";
		}
		binDir = getUrlParameter("bin-dir");
		russelldir = if (binDir == "") {
			russellDefDir
		} else {
			if (endsWith(binDir, "bin/") || endsWith(binDir, "bin\\"))
				substring(binDir, 0, strlen(binDir)-4)
			else
				substring(binDir, 0, strlen(binDir)-3);
		}
		strReplace(russelldir, "\\", "/");
    }
    onlyOnce(ruRussellDir, init_dir);
}

ruFindConfDir(dir : string) -> string {
	path = dir + "/russell.conf";
	if (fileExists(path)) dir else 
	if (dir == "/" || dir == "") "" else {
		ruFindConfDir(ruDirName(dir));
	}
}

ruMergeOpts(opts1 : Tree<string, string>, opts2 : Tree<string, string>) -> Tree<string, string> {
	mergeTreeCustom(opts1, opts2, \opt, val1, val2 -> if (val1 == "") val2 else val1 + "," + val2);
}

ruImportRoots(opts : Tree<string, string>) -> [string] {
	switch (lookupTree(opts, "import-roots")) {
		Some(roots): {
			filtermap(strSplit(roots, ","), \imp -> {
				imp_dir = rtrim2(strReplace(imp, "\\", "/"), "/") + "/";
				if (!isDirectory(imp_dir)) {
					None();
				} else {
					Some(strReplace(resolveRelativePath(imp_dir), "\\", "/"));
				}
			});
		}
		None(): [];
	}
}

ruProjectRoots(opts : Tree<string, string>) -> [string] {
	switch (lookupTree(opts, "project-roots")) {
		Some(roots): {
			filtermap(strSplit(roots, ","), \imp -> {
				root = rtrim2(strReplace(imp, "\\", "/"), "/") + "/";
				if (!fileExists(root)) {
					None();
				} else {
					Some(strReplace(resolveRelativePath(root), "\\", "/"));
				}
			});
		}
		None(): [];
	}
}

ruMakeOnError(opts : Tree<string, string>, onMessage : (string) -> void) -> (string, [RuPlace]) -> void {
	\err, places -> {
		onMessage("Error: " + err + (if (places == []) "" else "\n" + strGlue(map(places, ruPlace2s), "\n")));
		if (lookupTreeDef(opts, "halt-on-errors", "") == "1") {
			onMessage("Aborting russell run, because halt-on-errors=1");
			quit(-1);
		}
	}
}

ruMakeConf(dir_ : string, params : [[string]]) -> RuConf {
	dir = rtrim2(strReplace(resolveRelativePath(dir_), "\\", "/"), "/");
	conf_dir = ruFindConfDir(dir);
	opts = ruMergeOpts(
		ruReadConfFileFromDir(conf_dir), 
		fold(params, makeTree(), \acc, p -> if (p[0] == "") acc else setTree(acc, p[0], p[1]))
	);
	RuConf(
		uniq(ruImportRoots(opts)),
		uniq(ruProjectRoots(opts)),
		lookupTreeDef(opts, "working-dir", ""), 
		s2i(lookupTreeDef(opts, "verbose", "1")), 
		opts,
		ruMakeOnError(opts, ruPrintln),
		ruPrintln
	);
}

ruMakeJob(ps : [[string]]) -> RuJob {
	str = strGlue(filtermap(ps, \p ->
		if (length(p) == 0) None() else {
			k = trim2(p[0], " \t\r\n"); 
			if (length(p) == 1) {
				if (k == "") None() else Some(k);
			} else {
				v = trim2(p[1], " \t\n\r");
				if (k == "") None() else 
				if (v == "") Some(k) else Some(k + "=" + v);
			}
		}
	), " ");
	RuJob(filtermap(
		strSplit(str, ";"),
		\s -> {
			task_str = trim2(s, " \t\n\r");
			if (task_str == "") None() else {
				parts = strSplit2(task_str, [" ", "\n", "\r", "\t"]);
				Some(RuTask(
					parts[0], 
					fold(tail(parts), makeTree(), \acc, p -> {
						part = trim2(p, " \n\r\t");
						if (part == "") acc else {
							param = strSplit(part, "=");
							setTree(acc, param[0], if (length(param) == 1) "" else param[1]);
						}
					})
				));
			}
		}
	));
}

ruReadConfFileFromDir(dir : string) -> Tree<string, string> {
	path = dir + "/russell.conf";
	if (!fileExists(path)) makeTree() else {
		config = getFileContent(path);
		lines = strSplit(config, "\n");
		fold(lines, makeTree(), \acc, l -> {
			// Skip comment lines in russell.conf
			if (!startsWith(ltrim2(l, " \t"), "#") && !startsWith(ltrim2(l, " \t"), "//")) {
				opts = strSplit(l, "=");
				if (length(opts) == 1) {
					opt = trim2(opts[0], " \t\r");
					if (opt == "") acc else setTree(acc, opt, "");
				} else if (length(opts) == 2) {
					opt = trim2(opts[0], " \t\r");
					val = trim2(opts[1], " \t\r");
					setTree(acc, opt, val)
				} else acc;
			} else acc;
		});
	}
}

ruConf2Json(conf : RuConf) -> Json {
	JsonObject([
		Pair("importRoots", JsonArray(map(conf.importRoots, \root -> JsonString(root)))),
		Pair("workingDir", JsonString(conf.workingDir)),
		Pair("verbose", JsonString(i2s(conf.verbose))),
		Pair("opts", JsonArray(map(tree2pairs(conf.opts), 
			\opt -> JsonObject([
				Pair("key", JsonString(opt.first)),
				Pair("value", JsonString(opt.second))
			])
		)))
	]);
}

ruTask2Json(task : RuTask) -> Json {
	JsonObject([
		Pair("command", JsonString(task.command)),
		Pair("args", JsonArray(map(tree2pairs(task.args), 
			\arg -> JsonObject([
				Pair("key", JsonString(arg.first)),
				Pair("value", JsonString(arg.second))
			])
		)))
	]);
}

ruJob2Json(job : RuJob) -> Json {
	JsonObject([Pair("tasks", JsonArray(map(job.tasks, ruTask2Json)))]);
}

ruJson2Conf(json : Json) -> Maybe<RuConf> {
	if (exists(["importRoots", "projectRoots", "workingDir", "verbose", "opts"], \field -> !jsonObjectHasField(json, field))) None() else {
		opts = pairs2tree(map(getJsonArrayField(json, "opts"), 
			\opt -> Pair(getJsonStringField(opt, "key", ""), getJsonStringField(opt, "value", ""))
		));
		Some(RuConf(
			map(getJsonArrayField(json, "importRoots"), \root -> getJsonStringValue(root, "")),
			map(getJsonArrayField(json, "projectRoots"), \root -> getJsonStringValue(root, "")),
			getJsonStringField(json, "workingDir", ""),
			s2i(getJsonStringField(json, "verbose", "1")),
			opts,
			ruMakeOnError(opts, ruPrintln),
			ruPrintln
		));
	}
}

ruJson2Task(json : Json) -> Maybe<RuTask> {
	if (exists(["command", "args"], \field -> !jsonObjectHasField(json, field))) None() else {
		Some(RuTask(
			getJsonStringField(json, "command", ""),
			pairs2tree(map(getJsonArrayField(json, "args"), 
				\opt -> Pair(getJsonStringField(opt, "key", ""), getJsonStringField(opt, "value", ""))
			))
		));
	}
}

ruJson2Job(json : Json) -> Maybe<RuJob> {
	if (!jsonObjectHasField(json, "tasks")) None() else {
		Some(RuJob(filtermap(getJsonArrayField(json, "tasks"), ruJson2Task)));
	}
}

ruConf2Tree(conf : RuConf) -> Tree<string, string> {
	mergeTree(
		conf.opts,
		pairs2tree([
			Pair("import-roots", strGlue(conf.importRoots, ",")),
			Pair("working-dir", conf.workingDir),
			Pair("verbose", i2s(conf.verbose))
		])
	);
}

ruTree2Conf(opts : Tree<string, string>) -> RuConf {
	RuConf(
		filter(strSplit(lookupTreeDef(opts, "import-roots", ""), ","), \imp -> imp != ""),
		filter(strSplit(lookupTreeDef(opts, "project-roots", ""), ","), \imp -> imp != ""),
		lookupTreeDef(opts, "working-dir", ""),
		s2i(lookupTreeDef(opts, "verbose", "1")),
		opts,
		ruMakeOnError(opts, ruPrintln),
		ruPrintln
	);
}

ruMergeConfs(conf1 : RuConf, conf2 : RuConf) -> RuConf {
	RuConf(
		uniq(concat(conf1.importRoots, conf2.importRoots)),
		uniq(concat(conf1.projectRoots, conf2.projectRoots)),
		if (conf2.workingDir != "") conf2.workingDir else conf1.workingDir,
		if (conf2.verbose != -1) conf2.verbose else conf1.verbose,
		mergeTree(conf1.opts, conf2.opts),
		conf2.onError,
		conf2.onMessage
	);
}

ruTask2s(task : RuTask) -> string {
	task.command + " " + 
	strGlue(map(tree2pairs(task.args), \p -> p.first + "=" + ruCutLongStringUpTo(p.second, 128)), " ");
}

ruJob2s(job : RuJob) -> string {
	strGlue(map(job.tasks, ruTask2s), ";\n");
}

ruJobSmall2s(job : RuJob) -> string {
	strGlue(map(job.tasks, \task -> task.command), ", ");
}
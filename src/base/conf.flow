import base/util;

export {
	RuPlace(file : string, pos : int);

	RuConf(
		importRoots : [string],
		projectRoots : [string],
		workingDir : string,
        verbose : int,
		opts : Tree<string, string>,
		onError : (string, [RuPlace]) -> void,
		onMessage : (string) -> void
	);

	ruTrimPath(file : string, conf : RuConf, ext : string) -> string;
	ruFindPath(file : string, conf : RuConf, ext : string) -> string;
	ruIncVerbose(conf : RuConf) -> RuConf;
	ruDecVerbose(conf : RuConf) -> RuConf;
	ruAddErr2Conf(conf : RuConf, msg : string) -> RuConf;
	ruAddErrCounter(conf : RuConf, err_count : ref int) -> RuConf;
	ruPlace2s(place : RuPlace) -> string;
	getRussellDir() -> string;
	findRussellDir() -> string; // silent version of getRussellDir
	ruFindConfDir(dir : string) -> string;

	ruParams2Tree(params : [[string]]) -> Tree<string, string>;
	ruMakeConf(dir_ : string, params : [[string]]) -> RuConf;
	ruMakeConfDef() -> RuConf;
	ruMakeOnError(opts : Tree<string, string>, onMessage : (string) -> void) -> (string, [RuPlace]) -> void;
	ruMergeOpts(opts1 : Tree<string, string>, opts2 : Tree<string, string>) -> Tree<string, string>;

	ruReadConfFromDir(dir : string) -> Tree<string, string>;
	ruConf2Tree(conf : RuConf) -> Tree<string, string>;
	ruTree2Conf(opts : Tree<string, string>) -> RuConf;
	ruMergeConfs(conf1 : RuConf, conf2 : RuConf) -> RuConf;
	ruUpdateConf(conf1 : RuConf, conf2 : RuConf) -> RuConf;
	ruConf2s(conf : RuConf) -> string;

	ruCacheDir(conf : RuConf) -> string;
	ruCachedPath(file : string, conf : RuConf) -> string;
	ruCachedFile(path : string, conf : RuConf) -> string;
}

ruTrimPath(file : string, conf : RuConf, ext0 : string) -> string {
	//ruDebugLog1("file: " + file);
	//ruDebugLog1("ext: " + ext);
	ext = if (startsWith(ext0, ".")) ext0 else "." + ext0;
	noext = strReplace(ruRemoveExt(file, ext), "\\", "/");
	//ruDebugLog1("noext: " + noext);
	shift = if (conf.workingDir == "") "" else relatingPath(conf.workingDir, resolveRelativePath("."));
	pathShift = if (shift == "") shift else shift + "/";
	processImportRoot = \acc, impRoot -> {
		resolved = strReplace(resolveRelativePath(impRoot), "\\", "/");
		if (startsWith(toLowerCase(acc), toLowerCase(resolved))) {
			strRight(acc, strlen(resolved));
		} else if (startsWith(toLowerCase(acc), toLowerCase(impRoot))) {
			strRight(acc, strlen(impRoot));
		} else acc
	};
	trimmed = fold(conf.importRoots, noext, \acc, impRoot -> {
		acc1 = if (pathShift != "") {
			processImportRoot(acc, pathShift + impRoot)
		} else acc;
		processImportRoot(acc1, impRoot)
	});
	if (trimmed == noext) noext else trim2(trimmed, "/");
}

ruFindPath(file : string, conf : RuConf, ext0 : string) -> string {
	ext = if (startsWith(ext0, ".")) ext0 else "." + ext0;
	with_ext = if (endsWith(file, ext)) file else file + ext;
	shift = if (conf.workingDir == "") "" else relatingPath(conf.workingDir, resolveRelativePath("."));
	if (fileExists(with_ext) && length(conf.importRoots) == 0 /*lookupTreeDef(conf.opts, "strict-file-names", "0") != "1"*/) {
		resolveRelativePath(with_ext);
	} else {
		ruDoFindPath(with_ext, if (shift == "") shift else shift + "/", conf.importRoots);
	}
}

ruDoFindPath(with_ext : string, pathShift : string, importRoots : [string]) -> string {
	if (importRoots == []) with_ext
	else {
		head = importRoots[0];
		directPath = head + (if (endsWith(head, "/")) "" else "/") + with_ext;
		if (fileExists(directPath)) {
			resolveRelativePath(directPath);
		} else {
			shiftedPath = pathShift + directPath;
			if (fileExists(shiftedPath)) {
				resolveRelativePath(shiftedPath);
			} else {
				ruDoFindPath(with_ext, pathShift, tail(importRoots));
			}
		}
	}
}

ruIncVerbose(conf : RuConf) -> RuConf {
	RuConf(conf with verbose = conf.verbose + 1);
}

ruDecVerbose(conf : RuConf) -> RuConf {
	RuConf(conf with verbose = max(0, conf.verbose - 1));
}

ruAddErr2Conf(conf : RuConf, msg : string) -> RuConf {
	RuConf(conf with onError = \str, pos -> conf.onError(str + msg, pos))
}

ruAddErrCounter(conf : RuConf, err_count : ref int) -> RuConf {
	RuConf(conf with onError = 
		\err, places -> {
			err_count := ^err_count + 1;
			conf.onError(err, places);
		}
	)
}

ruPlace2s(place : RuPlace) -> string {
	if (place.file == "") "" else {
		if (fileExists(place.file)) {
			if (place.pos == -1) {
				"file '" + place.file + "'";
			} else {
				code = getFileContent(place.file);
				resolver = makeLineResolver(code);
				pos = findLine(resolver, place.pos);
				"file '" + place.file + "': line " + i2s(pos.lineno) + ", col " + i2s(pos.column);
			}
		} else {
			"file '" + place.file + "' doesn't exist. Position is : " + i2s(place.pos);
		}
	}
}

ruRussellDir : ref Maybe<string> = ref None();

getRussellDir() -> string {
	russell_dir = findRussellDir();
	if (russell_dir != "") russell_dir else {
		ruPrintln("WARNING: Could not determine the russell directory.");
		ruPrintln("Defaults to ../russell/. Use bin-dir=<path> to specify where the flow folder is");
		"../russell/";
	}
}

findRussellDir() -> string {
	init_dir = \-> {
		// Use the 'print-flow-dir=1' option of flowc
		appPath = strReplace(getApplicationPath(), "\\", "/");
		russellDirByRussell = \-> {
			if (fileNameOnly(appPath) == "russell.jar") {
				// russell must not use itsef in this function, 
				// otherwise there's a fork bomb.
				"" 
			} else {
				dir_lines = ref "";
				err_lines = ref "";
				code = execSystemProcess("russell", ["russell-dir"], ".", 
					\out -> dir_lines := ^dir_lines + out, 
					\err -> {
						println(err);
						err_lines := err;
					}
				);
				filtered = filtermap(strSplit(^dir_lines, "\n"), \line -> {
					line1 = trim2(line, " \n\t\r");
					if (line1 == "") None() else Some(line1);
				});
				if (code != 0 || ^err_lines != "" || length(filtered) != 1) "" else {
					filtered[0];
				}
			}
		}
		// Use the path of the executable
		russellDefDir = \-> {
			if (strContains(appPath, "russell/bin/")) {
				takeBefore(appPath, "/bin/", appPath) + "/"
			} else if (strContains(appPath, "russell-flow/bin/")) {
				takeBefore(appPath, "/bin/", appPath)
			} else if (strContains(appPath, "russell-flow/src/russell")) {
				takeBefore(appPath, "src/russell", appPath)
			} else if (strContains(appPath, "russell/src/russell")) {
				takeBefore(appPath, "src/russell", appPath)
			} else if (strContains(appPath, "bin/")) {
				takeBefore(appPath, "bin/", appPath)
			} else {
				russellDirByRussell();
			}
		}
		binDir = getUrlParameter("bin-dir");
		russelldir = if (binDir == "") {
			russellDefDir();
		} else {
			if (endsWith(binDir, "bin/") || endsWith(binDir, "bin\\"))
				substring(binDir, 0, strlen(binDir)-4)
			else
				substring(binDir, 0, strlen(binDir)-3);
		}
		strReplace(russelldir, "\\", "/");
    }
    onlyOnce(ruRussellDir, init_dir);
}

ruFindConfDir(dir : string) -> string {
	path = dir + "/russell.conf";
	if (fileExists(path)) dir else 
	if (dir == "/" || dir == "") "" else {
		ruFindConfDir(ruDirName(dir));
	}
}

ruMergeOpts(opts1 : Tree<string, string>, opts2 : Tree<string, string>) -> Tree<string, string> {
	mergeTreeCustom(opts1, opts2, \opt, val1, val2 -> if (val1 == "") val2 else val1 + "," + val2);
}
/*
ruImportRoots(opts : Tree<string, string>) -> [string] {
	switch (lookupTree(opts, "import-roots")) {
		Some(roots): {
			filtermap(strSplit(roots, ","), \imp -> {
				imp_dir = rtrim2(strReplace(imp, "\\", "/"), "/") + "/";
				if (!isDirectory(imp_dir)) {
					None();
				} else {
					Some(strReplace(resolveRelativePath(imp_dir), "\\", "/"));
				}
			});
		}
		None(): [];
	}
}

ruProjectRoots(opts : Tree<string, string>) -> [string] {
	switch (lookupTree(opts, "project-roots")) {
		Some(roots): {
			filtermap(strSplit(roots, ","), \imp -> {
				root = rtrim2(strReplace(imp, "\\", "/"), "/") + "/";
				if (!fileExists(root)) {
					None();
				} else {
					Some(strReplace(resolveRelativePath(root), "\\", "/"));
				}
			});
		}
		None(): [];
	}
}
*/
ruOptionPathArray(opts : Tree<string, string>, opt : string) -> [string] {
	switch (lookupTree(opts, opt)) {
		Some(paths): {
			filtermap(strSplit(paths, ","), \p -> {
				path = rtrim2(strReplace(p, "\\", "/"), "/") + "/";
				if (path == "") None() else Some(resolveRelativePath(path));
			});
		}
		None(): [];
	}
}

ruMakeOnError(opts : Tree<string, string>, onMessage : (string) -> void) -> (string, [RuPlace]) -> void {
	\err, places -> {
		onMessage("Error: " + err + (if (places == []) "" else "\n" + strGlue(map(places, ruPlace2s), "\n")));
		if (lookupTreeDef(opts, "halt-on-errors", "") == "1") {
			onMessage("Aborting russell run, because halt-on-errors=1");
			quit(-1);
		}
	}
}

ruMakeConf(dir_ : string, params : [[string]]) -> RuConf {
	dir = rtrim2(strReplace(resolveRelativePath(dir_), "\\", "/"), "/");
	conf_dir = ruFindConfDir(dir);
	opts = ruMergeOpts(
		ruReadConfFromDir(conf_dir), 
		//fold(params, makeTree(), \acc, p -> if (p[0] == "") acc else setTree(acc, p[0], p[1]))
		ruParams2Tree(params)
	);
	RuConf(
		//uniq(ruImportRoots(opts)),
		//uniq(ruProjectRoots(opts)),
		uniq(ruOptionPathArray(opts, "import-roots")),
		uniq(ruOptionPathArray(opts, "project-roots")),
		lookupTreeDef(opts, "working-dir", ""), 
		s2i(lookupTreeDef(opts, "verbose", "1")), 
		opts,
		ruMakeOnError(opts, ruPrintln),
		ruPrintln
	);
}

ruMakeConfDef() -> RuConf {
	ruMakeConf(resolveRelativePath("."), []);
}

ruParams2Tree(params : [[string]]) -> Tree<string, string> {
	fold(params, makeTree(), \acc, param ->
		if (length(param) == 0) {
			acc;
		} else {
			key = trim2(param[0], " \t\r\n");
			if (strlen(key) == 0) acc else {
				val = if (length(param) > 1) trim2(param[1], " \t\r\n") else "";
				setTree(acc, key, val);
			}
		}
	);
}

ruReadConfFromDir(dir : string) -> Tree<string, string> {
	path = dir + "/russell.conf";
	if (!fileExists(path)) makeTree() else {
		config = getFileContent(path);
		lines = strSplit(config, "\n");
		fold(lines, makeTree(), \acc, l -> {
			// Skip comment and empty lines in russell.conf
			line = trim2(l, " \t\r");
			if (line != "" && !startsWith(line, "#") && !startsWith(line, "//")) {
				opts = strSplit(line, "=");
				if (length(opts) == 1) {
					opt = trim2(opts[0], " \t\r");
					if (opt == "") acc else setTree(acc, opt, "");
				} else if (length(opts) == 2) {
					opt = trim2(opts[0], " \t\r");
					val = trim2(opts[1], " \t\r");
					setTree(acc, opt, val)
				} else acc;
			} else acc;
		});
	}
}

ruConf2Json(conf : RuConf) -> Json {
	JsonObject([
		Pair("importRoots", JsonArray(map(conf.importRoots, \root -> JsonString(root)))),
		Pair("workingDir", JsonString(conf.workingDir)),
		Pair("verbose", JsonString(i2s(conf.verbose))),
		Pair("opts", JsonArray(map(tree2pairs(conf.opts), 
			\opt -> JsonObject([
				Pair("key", JsonString(opt.first)),
				Pair("value", JsonString(opt.second))
			])
		)))
	]);
}

ruJson2Conf(json : Json) -> Maybe<RuConf> {
	if (exists(["importRoots", "projectRoots", "workingDir", "verbose", "opts"], \field -> !jsonObjectHasField(json, field))) None() else {
		opts = pairs2tree(map(getJsonArrayField(json, "opts"), 
			\opt -> Pair(getJsonStringField(opt, "key", ""), getJsonStringField(opt, "value", ""))
		));
		Some(RuConf(
			map(getJsonArrayField(json,  "importRoots"), \root -> getJsonStringValue(root, "")),
			map(getJsonArrayField(json,  "projectRoots"), \root -> getJsonStringValue(root, "")),
			getJsonStringField(json,     "workingDir", ""),
			s2i(getJsonStringField(json, "verbose", "1")),
			opts,
			ruMakeOnError(opts, ruPrintln),
			ruPrintln
		));
	}
}

ruConf2Tree(conf : RuConf) -> Tree<string, string> {
	mergeTree(
		conf.opts,
		pairs2tree([
			Pair("import-roots", strGlue(conf.importRoots, ",")),
			Pair("working-dir", conf.workingDir),
			Pair("verbose", i2s(conf.verbose))
		])
	);
}

ruTree2Conf(opts : Tree<string, string>) -> RuConf {
	RuConf(
		//uniq(filter(strSplit(lookupTreeDef(opts, "import-roots", ""), ","), \imp -> imp != "")),
		//uniq(filter(strSplit(lookupTreeDef(opts, "project-roots", ""), ","), \imp -> imp != "")),
		uniq(ruOptionPathArray(opts, "import-roots")),
		uniq(ruOptionPathArray(opts, "project-roots")),
		lookupTreeDef(opts, "working-dir", ""),
		s2i(lookupTreeDef(opts, "verbose", "1")),
		filterTree(opts, \opt,__ -> 
			!contains(["import-roots", "project-roots", "working-dir", "verbose"], opt)
		),
		ruMakeOnError(opts, ruPrintln),
		ruPrintln
	);
}

ruMergeConfs(conf1 : RuConf, conf2 : RuConf) -> RuConf {
	RuConf(
		uniq(concat(conf1.importRoots, conf2.importRoots)),
		uniq(concat(conf1.projectRoots, conf2.projectRoots)),
		if (conf2.workingDir != "") conf2.workingDir else conf1.workingDir,
		if (conf2.verbose != -1) conf2.verbose else conf1.verbose,
		mergeTree(conf1.opts, conf2.opts),
		conf2.onError,
		conf2.onMessage
	);
}
ruUpdateConf(conf1 : RuConf, conf2 : RuConf) -> RuConf {
	RuConf(
		if (conf2.importRoots != []) conf2.importRoots else conf1.importRoots,
		if (conf2.projectRoots != []) conf2.projectRoots else conf1.projectRoots,
		if (conf2.workingDir != "") conf2.workingDir else conf1.workingDir,
		if (conf2.verbose != -1) conf2.verbose else conf1.verbose,
		if (!isEmptyTree(conf2.opts)) conf2.opts else conf1.opts,
		conf2.onError,
		conf2.onMessage
	);
}

ruConf2s(conf : RuConf) -> string {
	(if (length(conf.importRoots) == 0)  "" else "import-roots=" + strGlue(conf.importRoots, ",") + "\n") +
	(if (length(conf.projectRoots) == 0) "" else "project-roots=" + strGlue(conf.projectRoots, ",") + "\n") +
	(if (conf.workingDir == "")          "" else "working-dir=" + conf.workingDir + "\n") +
	(if (conf.verbose == 1)              "" else "verbose=" + i2s(conf.verbose) + "\n") +
	(if (sizeTree(conf.opts) == 0)       "" else 
		strGlue(filtermap(tree2pairs(conf.opts), \p -> 
			if (contains(["import-roots", "project-roots", "working-dir", "verbose", "file", "path", "target", "module"], p.first)) None() else
			Some(if (p.second == "") p.first else p.first + "=" + p.second)
		), "\n")
	);
}

ruCacheDir(conf : RuConf) -> string {
	lookupTreeDef(conf.opts, "cache-dir", getRussellDir() + "/cache");
}

ruCachedPath(file : string, conf : RuConf) -> string {
	dir = ruCacheDir(conf) + "/" + ruDirName(file);
	ensureDirectoryExists(dir);
	ruCacheDir(conf) + "/" + strReplace(file, ":", "_CCOOLLOONN_")  + ".cache";
}

ruCachedFile(path : string, conf : RuConf) -> string {
	cache_dir = ruCacheDir(conf);
	if (!startsWith(path, cache_dir)) "" else {
		changeFileExt(
			strReplace(
				strRight(path, strlen(cache_dir)),
				"_CCOOLLOONN_", ":"
			),
			""
		);
	}
}

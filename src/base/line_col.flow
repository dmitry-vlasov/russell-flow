import string;
import algorithms;
import ds/tree;

export {
    RuLineCol(line : int, col : int);

    ruPos2LineCol(pos : int, code : string) -> RuLineCol;
    ruPosArray2LineColTree(pos_s : [int], code : string) -> Tree<int, RuLineCol>;
    ruLineCol2Pos(line_col : RuLineCol, code : string) -> int;
    ruLineColArray2PosTree(line_cols : [RuLineCol], code : string) -> Tree<RuLineCol, int>;
}

ruPos2LineCol(pos : int, code : string) -> RuLineCol {
    if (pos < 0) RuLineCol(-1, -1) else {
        ruDoPos2LineCol(pos, code, 0, 0, 0);
    }
}

ruDoPos2LineCol(pos : int, code : string, i : int, line : int, col : int) -> RuLineCol {
    if (pos == i) RuLineCol(line, col) else {
        char = getCharAt(code, i);
        if (char == "\n") {
            ruDoPos2LineCol(pos, code, i + 1, line + 1, 0);
        } else {
            ruDoPos2LineCol(pos, code, i + 1, line, col + 1);
        }
    }
}

ruPosArray2LineColTree(ps : [int], code : string) -> Tree<int, RuLineCol> {
    pos_s = sort(ps);
    arr = ruDoPosArray2LineColArray(pos_s, 0, code, 0, 0, 0, []);
    foldi(pos_s, makeTree(), \i, acc, pos -> setTree(acc, pos, arr[i]));
}

ruDoPosArray2LineColArray(pos_s : [int], k : int, code : string, i : int, line : int, col : int, acc : [RuLineCol]) -> [RuLineCol] {
    if (length(pos_s) == k) acc else {
        pos_is_found = (pos_s[k] == i);
        new_k = if (!pos_is_found) k else k + 1;
        new_acc = if (!pos_is_found) acc else {
            concat(acc, [RuLineCol(line, col)]);
        } 
        char = getCharAt(code, i);
        if (char == "\n") {
            ruDoPosArray2LineColArray(pos_s, new_k, code, i + 1, line + 1, 0, new_acc);
        } else {
            ruDoPosArray2LineColArray(pos_s, new_k, code, i + 1, line, col + 1, new_acc);
        }
    }
}

ruLineCol2Pos(lc : RuLineCol, code : string) -> int {
    ruDoLineCol2Pos(lc, code, 0, 0, 0);
}

ruDoLineCol2Pos(lc : RuLineCol, code : string, i : int, line : int, col : int) -> int {
    if (lc.line == line && lc.col == col) i else {
        char = getCharAt(code, i);
        if (char == "\n") {
            ruDoLineCol2Pos(lc, code, i + 1, line + 1, 0);
        } else {
            ruDoLineCol2Pos(lc, code, i + 1, line, col + 1);
        }
    }
}

ruLineColArray2PosTree(ls : [RuLineCol], code : string) -> Tree<RuLineCol, int> {
    max_line = ruMaxLineLength(code);
    lc_s = sortCustom(ls, \lc -> lc.col + lc.line * max_line, true);
    arr = ruDoLineColArray2PosArray(lc_s, 0, code, 0, 0, 0, []);
    foldi(lc_s, makeTree(), \i, acc, lc -> setTree(acc, lc, arr[i]));
}

ruDoLineColArray2PosArray(lc_s : [RuLineCol], k : int, code : string, i : int, line : int, col : int, acc : [int]) -> [int] {
    if (length(lc_s) == k) acc else {
        pos_is_found = (lc_s[k].line == line && lc_s[k].col == col);
        new_k = if (!pos_is_found) k else k + 1;
        new_acc = if (!pos_is_found) acc else {
            concat(acc, [i]);
        } 
        char = getCharAt(code, i);
        if (char == "\n") {
            ruDoLineColArray2PosArray(lc_s, new_k, code, i + 1, line + 1, 0, new_acc);
        } else {
            ruDoLineColArray2PosArray(lc_s, new_k, code, i + 1, line, col + 1, new_acc);
        }
    }
}

ruMaxLineLength(code : string) -> int {
    ruDoMaxLineLength(code, 0, 0, 0);
}

ruDoMaxLineLength(code : string, i : int, len : int, mx : int) -> int {
    if (i == strlen(code)) mx else {
        char = getCharAt(code, i);
        if (char == "\n") {
            ruDoMaxLineLength(code, i + 1, 0, mx);
        } else {
            ruDoMaxLineLength(code, i + 1, len + 1, max(len + 1, mx));
        }
    }
}
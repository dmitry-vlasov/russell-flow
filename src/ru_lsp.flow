import math/uuid;
import text/utf8;
import formats/lsp;
import ru_run;
import ru_log;

export {
	ruDecodeJsonRequest(s : string) -> Json;
	ruLspReadRequest() -> Maybe<RuLspRequest>;
	RuLspRequest(
		request : string, // the whole request string
		length : int,  // Content-Length
		type : string, // Content-Type
		json : string  // the Json description of request
	);
	ruLspProcessRequest(
		conf : RuConf, json : Json,  
		out_cb : (string) ->  void, 
		loop_cb : () -> void, 
		exit_cb : () -> void, 
		run : (RuJob, (string) -> void, (int) -> void) -> void
	) -> void;
}

ruDecodeJsonRequest(s : string) -> Json {
	json = parseJsonSafe(s);
	switch (json) {
		JsonObject(members): if (jsonObjectHasField(json, "jsonrpc")) json else JsonNull();
		default: JsonNull();
	}
}

ruLspReadRequest() -> Maybe<RuLspRequest> {
	header = readUntil("\r\n\r\n"); // \r\n\r\n is included into header
	lines = filtermap(strSplit(header, "\n"), \line -> {
		trimmed = trim2(line, " \r\n\t");
		if (trimmed != "") Some(line) else None();
	});
	key_value = pairs2tree(map(lines, \line -> {
			key_val = strSplit(line, ":");
			if (length(key_val) == 1) {
				Pair(line, line);
			} else {
				Pair(trim2(key_val[0], " \t\n\r"), trim2(key_val[1], " \t\n\r"));
			}
	}));
	switch (lookupTree(key_value, "Content-Length")) {
		Some(len): {
			json = readBytes(s2i(len));
			Some(RuLspRequest(
				header + json,
				s2i(len), 
				lookupTreeDef(key_value, "Content-Type", ""),
				json
			));
		}
		None(): None();
	}
}

RuLspMethodCall(
	conf : RuConf,
	id : Json, 
	params : Json, 
	out_cb : (Json) ->  void, 
	loop_cb : () -> void, 
	exit_cb : () -> void,
	run : (RuJob, (string) -> void, (int) -> void) -> void
);

ruLspMethods = pairs2tree([
	Pair("initialize", ruLspInitialize),
	Pair("initialized", ruLspInitialized),
	Pair("shutdown", ruLspShutdown),
	Pair("exit", ruLspExit),
	Pair("textDocument/didOpen", ruLspTextDocumentDidOpen),
	Pair("textDocument/didChange", ruLspTextDocumentDidChange),
	Pair("textDocument/didSave",ruLspTextDocumentDidSave),
	Pair("textDocument/documentSymbol", ruLspTextDocumentDocumentSymbol),
	Pair("textDocument/declaration", ruLspTextDocumentDeclaration),
	Pair("textDocument/definition", ruLspTextDocumentDefinition),
	Pair("textDocument/references", ruLspTextDocumentReferences),
	Pair("textDocument/hover", ruLspTextDocumentHover),
	Pair("textDocument/rename", ruLspTextDocumentRename),
	Pair("workspace/symbol", ruLspWorkspaceSymbol),
	Pair("workspace/executeCommand", ruLspWorkspaceExecuteCommand),
]);

RuServerRequest(
	request : LspRequestMessage,
	callback : (LspResponseMessage) -> void
);

RuLspServerState(
	mutable clientConf : Json,
	mutable currId : int,
	mutable requests : Tree<Json, RuServerRequest>
);

ruLspServerState = RuLspServerState(JsonNull(), 1, makeTree());

ruLspErrorResponse(id : Json, code : int, msg : string) -> Json {
	lspResponseMessage2Json(LspResponseMessage("2.0", id, JsonNull(), 
		Some(LspResponseError(code, msg, JsonNull()))
	));
}

ruLspNormalResponse(id : Json, result : Json) -> Json {
	lspResponseMessage2Json(LspResponseMessage("2.0", id, result, None()));
}

ruLspNotification(method : string, params : Json) -> Json {
	lspNotificationMessage2Json(LspNotificationMessage("2.0", method, params));
}

ruLspProcessRequest(
	conf : RuConf, json : Json, 
	str_out_cb : (string) ->  void, 
	loop_cb : () -> void, 
	exit_cb : () -> void, 
	run : (RuJob, (string) -> void, (int) -> void) -> void
) -> void {
	out_cb = \msg -> {
		js_out = json2string(msg);
		js_len = strlen(expandUtf8(js_out));
		str_out_cb("Content-Length: " + i2s(js_len) + "\r\n\r\n" + js_out);
	}
	switch (json2LspRequestMessage(json)) {
		Some(request): {
			if (request.method == "") {
				out_cb(ruLspErrorResponse(request.id, 1, "request method is not set"));
				loop_cb();
			} else {
				switch (lookupTree(ruLspMethods, request.method)) {
					Some(m): m(RuLspMethodCall(conf, request.id, request.params, out_cb, loop_cb, exit_cb, run));
					None(): {
						out_cb(ruLspErrorResponse(request.id, 1, "request method " + request.method + " is not found"));
						loop_cb();
					}
				}
			}
		}
		None(): {
			switch (json2LspResponseMessage(json)) {
				Some(response): {
					switch (lookupTree(ruLspServerState.requests, response.id)) {
						Some(req): req.callback(response);
						None(): {
							ruServerLog("Server: unknown request: " + json2string(response.id), conf);
						}
					}
					loop_cb();
				}
				None(): {
					out_cb(ruLspErrorResponse(getJsonFieldValue(json, "id", JsonNull()), 1, "illegal request '" + json2string(json) + "'"));
					loop_cb();
				}
			}
		}
	}
}

ruLspShutdown(call : RuLspMethodCall) -> void {
	ruLspServerState.clientConf ::= JsonNull();
	ruLspServerState.currId ::= 1;
	ruLspServerState.requests ::= makeTree();
	ruClearCache(); // reset module cache
	call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
	call.loop_cb();
}

ruLspExit(call : RuLspMethodCall) -> void {
	call.exit_cb();
}

ruMakeServerRequest(method : string, params : Json, out_cb : (Json) -> void, callback : (LspResponseMessage) -> void) -> void {
	request = LspRequestMessage("2.0", JsonDouble(i2d(ruLspServerState.currId)), method, params);
	ruLspServerState.requests ::= setTree(ruLspServerState.requests, request.id, 
		RuServerRequest(request, callback)
	);
	ruLspServerState.currId ::= ruLspServerState.currId + 1;
	out_cb(lspRequestMessage2Json(request));
}

ruLspInitialized(call: RuLspMethodCall) -> void {
	if (getJsonBoolField(getJsonNestedField(ruLspServerState.clientConf, ["capabilities", "workspace", "didChangeConfiguration"]), "dynamicRegistration", false)) {
		params = lspRegistrationParams2Json(LspRegistrationParams([
			LspRegistration(makeUuid(), "textDocument/didChange", 
				lspTextDocumentChangeRegistrationOptions2Json(
					LspTextDocumentChangeRegistrationOptions([LspDocumentFilter("flow", "file", "*.{flow}")], 1)
				)
			),
			//LspRegistration(makeUuid(), "workspace/executeCommand", ruExecuteCommandOptions)
		]));
		ruMakeServerRequest("client/registerCapability", params, call.out_cb, nop1);
	}
	call.loop_cb(); // It's a notification, no response.
}

ruExecuteCommandOptions = JsonObject([
	Pair("commands", 
		JsonArray([
			JsonString("verify"), 
			JsonString("metamath"),
			JsonString("math-info"),
			JsonString("find-symbol"),
			JsonString("command"),
		])
	),
	Pair("workDoneProgress", JsonBool(true))
]);

ruLspInitialize(call: RuLspMethodCall) -> void {
	ruLspServerState.clientConf ::= call.params;
	call.out_cb(ruLspNormalResponse(call.id, 
		JsonObject([
			Pair("capabilities", JsonObject([
					Pair("declarationProvider", JsonBool(true)),
					Pair("definitionProvider", JsonBool(true)),
					Pair("referencesProvider", JsonBool(true)),
					Pair("workspaceSymbolProvider", JsonBool(true)),
					Pair("documentSymbolProvider", JsonBool(true)),
					Pair("hoverProvider", JsonBool(true)),
					Pair("renameProvider", JsonBool(true)),
					Pair("workspaceSymbolProvider", JsonBool(true)),
					Pair("executeCommandProvider", ruExecuteCommandOptions),
					Pair("textDocumentSync",
						JsonObject([
							Pair("openClose", JsonBool(true)),
							Pair("change", JsonDouble(2.0))
						])
					)
				])
			)
		])
	));
	call.loop_cb();
}

ruLspTextDocumentDidOpen(call: RuLspMethodCall) -> void {
	switch (json2LspTextDocumentItem(getJsonObjectField(call.params, "textDocument"))) {
		Some(textitem): {
			file = ruCorrectUriPath(textitem.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)), 
					RuTask("load-cache", makeTree1("file", file)), 
					RuTask("file-source", setTree(makeTree1("file", file), "text", textitem.text))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (code != 0) {
						call.out_cb(ruLspErrorResponse(call.id, 1, "error at opening: " + file + "\n" + strGlue(^out_lines, "\n")));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspTextDocumentDidChange(call: RuLspMethodCall) -> void {
	switch (json2LspTextDocumentItem(getJsonObjectField(call.params, "textDocument"))) {
		Some(textitem): {
			file = ruCorrectUriPath(textitem.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)),
					RuTask("file-changed", setTree(makeTree1("file", file), "change", json2string(call.params)))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (code != 0) {
						call.out_cb(ruLspErrorResponse(call.id, 1, "error at applying changes to: " + file + "\n" + strGlue(^out_lines, "\n")));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspTextDocumentDidSave(call: RuLspMethodCall) -> void {
	switch (json2LspDidSaveTextDocumentParams(call.params)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)),
					RuTask("file-saved", makeTree1("file", file))
				]),
				\msg -> refArrayPush(out_lines, msg), 
				\code -> {
					if (code != 0) {
						call.out_cb(ruLspErrorResponse(call.id, 1, "error at saving: " + file + "\n" + strGlue(^out_lines, "\n")));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspTextDocumentDocumentSymbol(call: RuLspMethodCall) -> void {
	switch (json2LspTextDocumentIdentifier(getJsonObjectField(call.params, "textDocument"))) {
		Some(textid): {
			file = ruCorrectUriPath(textid.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)),
					RuTask("info-outline", makeTree1("file", file))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (ruDetectLspError(^out_lines, call.conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						symbols = ruLspParseSymbols(^out_lines);
						call.out_cb(ruLspNormalResponse(call.id, JsonArray(symbols)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document id is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspTextDocumentDeclaration(call: RuLspMethodCall) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)),
					RuTask("info-decl", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(textpos.position.line)), 
						Pair("col", i2s(textpos.position.character))
					]))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (ruDetectLspError(^out_lines, call.conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = ruLspParseLocations(^out_lines);
						call.out_cb(ruLspNormalResponse(call.id, JsonArray(locations)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspTextDocumentDefinition(call: RuLspMethodCall) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)),
					RuTask("info-decl", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(textpos.position.line)), 
						Pair("col", i2s(textpos.position.character))
					]))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (ruDetectLspError(^out_lines, call.conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = ruLspParseLocations(^out_lines);
						call.out_cb(ruLspNormalResponse(call.id, JsonArray(locations)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspTextDocumentReferences(call: RuLspMethodCall) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)),
					RuTask("info-uses", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(textpos.position.line)), 
						Pair("col", i2s(textpos.position.character))
					]))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (ruDetectLspError(^out_lines, call.conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = ruLspParseLocations(^out_lines);
						call.out_cb(ruLspNormalResponse(call.id, JsonArray(locations)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspTextDocumentHover(call: RuLspMethodCall) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)),
					RuTask("info-hover", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(textpos.position.line)), 
						Pair("col", i2s(textpos.position.character))
					]))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (ruDetectLspError(^out_lines, call.conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						out = strGlue(^out_lines, "\n");
						if (isNotSpace(out)) {
							hover = LspHover([LspMarkedString("russell", out)], None());
							call.out_cb(ruLspNormalResponse(call.id, lspHover2Json(hover)));
						} else {
							call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
						}
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspTextDocumentRename(call: RuLspMethodCall) -> void {
	switch (json2LspRename(call.params)) {
		Some(rename): {
			file = ruCorrectUriPath(rename.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(conf)),
					RuTask("rename", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(rename.position.line)), 
						Pair("col", i2s(rename.position.character)),
						Pair("to", rename.newName)
					]))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (ruDetectLspError(^out_lines, call.conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}


ruLspWorkspaceSymbol(call: RuLspMethodCall) -> void {
	switch (json2LspWorkspaceSymbolParams(call.params)) {
		Some(symbol): {
			out_lines = ref [];
			call.run(
				RuJob([
					RuTask("info-symbol", makeTree1("name", symbol.query))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (ruDetectLspError(^out_lines, call.conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						out = strGlue(^out_lines, "\n");
						call.out_cb(ruLspNormalResponse(call.id, parseJson(out)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

ruLspWorkspaceExecuteVerify(call : RuLspMethodCall, commandParams: LspExecuteCommandParams) -> void {
	if (length(commandParams.arguments) == 0) {
		call.out_cb(ruLspErrorResponse(call.id, 1, "no file for verification is provided"));
		call.loop_cb();
	} else {
		file = ruCorrectUriPath(getJsonStringValue(commandParams.arguments[0], ""));
		out_lines = ref [];
		if (file == "") {
			call.out_cb(ruLspErrorResponse(call.id, 1, "no file for verification"));
			call.loop_cb();
		} else {
			conf = ruLspFileConfig(call.conf, file);
			call.run(
				RuJob([
					RuTask("update-conf", ruConf2Tree(RuConf(conf with verbose=1))),
					RuTask("read", makeTree1("file", file)),
					RuTask("verify", makeTree1("target", file))
				]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					out = strGlue(^out_lines, "\n");
					call.out_cb(ruLspNormalResponse(call.id, JsonString(out)));
					call.loop_cb();
				}
			);
		}
	}
}

ruLspWorkspaceExecuteMetamath(call : RuLspMethodCall, commandParams: LspExecuteCommandParams) -> void {
	// TODO
}

ruLspWorkspaceExecuteFindSymbol(call : RuLspMethodCall, commandParams: LspExecuteCommandParams) -> void {
	if (length(commandParams.arguments) == 1) {
		name = getJsonStringValue(commandParams.arguments[0], "");
		if (name != "") {
			out_lines = ref [];
			call.run(
				RuJob([RuTask("info-find", makeTree1("name", name))]),
				\msg -> refArrayPush(out_lines, msg),
				\code -> {
					if (ruDetectLspError(^out_lines, call.conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = ruLspParseLocations(^out_lines);
						if (length(locations) != 1) {
							call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
						} else {
							call.out_cb(ruLspNormalResponse(call.id, locations[0]));
						}
					}
					call.loop_cb();
				}
			);
		} else {
			call.out_cb(ruLspErrorResponse(call.id, 1, "find-symbol first parameter must be a non-empty string"));
			call.loop_cb();
		}
	} else {
		call.out_cb(ruLspErrorResponse(call.id, 1, "find-symbol takes a parameter: a symbol name. Passed " + i2s(length(commandParams.arguments)) + " args."));
		call.loop_cb();
	}
}

ruLspWorkspaceExecuteMathInfo(call: RuLspMethodCall, commandParams: LspExecuteCommandParams) -> void {
	if (length(commandParams.arguments) == 1) {
		kind = getJsonStringValue(commandParams.arguments[0], "");
		out_lines = ref [];
		call.run(
			RuJob([RuTask("info-math", makeTree1("kind", kind))]),
			\msg -> refArrayPush(out_lines, msg),
			\code -> {
				out = strGlue(^out_lines, "\n");
				if (ruDetectLspError(^out_lines, call.conf)) {
					call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
				} else {
					call.out_cb(ruLspNormalResponse(call.id, parseJson(out)));
				}
				call.loop_cb();
			}
		);
	} else {
		call.out_cb(ruLspErrorResponse(call.id, 1, "math-info takes a parameter: info kind. Passed " + i2s(length(commandParams.arguments)) + " args."));
		call.loop_cb();
	}
}

ruLspWorkspaceExecuteACommand(call: RuLspMethodCall, commandParams: LspExecuteCommandParams) -> void {
	if (length(commandParams.arguments) > 1) {
		params = map(commandParams.arguments, \param -> getJsonStringValue(param, ""));
		if (!startsWith(params[0], "file=")) {
			call.out_cb(ruLspErrorResponse(call.id, 1, "command args must start with file=<path> option"));
			call.loop_cb();
		} else {
			file = strSplit(params[0], "=")[1];
			args = map(
				filtermap(tail(params), \arg -> if (arg == "") None() else Some(arg)), 
				\arg -> strSplit(arg, "=")
			);
			// Update tasks with 'file=' arg.
			job = RuJob(concatA(map(ruMakeJob(args).tasks, \task -> 
				[	
					RuTask("update-conf", makeTree1("verbose", "1")),
					if (containsKeyTree(task.args, "file")) task else RuTask(task with args = setTree(task.args, "file", file))
				]
			)));
			token = makeUuid();
			ruMakeServerRequest("window/workDoneProgress/create",
				lspWorkDoneProgressCreateParams2Json(LspWorkDoneProgressCreateParams(token)),
				call.out_cb,
				\response -> {
					out_lines = ref [];
					call.out_cb(ruLspNotification("$/progress", 
						lspProgressParams2Json(LspProgressParams(token, 
							lspWorkDoneProgressBegin2Json(LspWorkDoneProgressBegin(
								"begin", "command " + params[1] + " started", false, "", 0.0
							))
						))
					));
					call.run(
						job,
						\msg -> {
							call.out_cb(ruLspNotification("$/progress", 
								lspProgressParams2Json(LspProgressParams(token, 
									lspWorkDoneProgressReport2Json(LspWorkDoneProgressReport(
										"report", false, "command " + params[1] + " in progress: " + msg, 0.0
									))
								))
							));
							refArrayPush(out_lines, msg)
						},
						\code -> {
							call.out_cb(ruLspNotification("$/progress", 
								lspProgressParams2Json(LspProgressParams(token, 
									lspWorkDoneProgressEnd2Json(LspWorkDoneProgressEnd("end", "command " + params[1] + " ended"))
								))
							));
							if (ruDetectLspError(^out_lines, call.conf)) {
								call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
							} else {
								out = strGlue(^out_lines, "\n");
								call.out_cb(ruLspNormalResponse(call.id, JsonString(out)));
							}
							call.loop_cb();
						}
					);
				}
			);
			call.loop_cb();
		}
	} else {
		call.out_cb(ruLspErrorResponse(call.id, 1, "command takes at least one parameter: the command itself. Passed " + i2s(length(commandParams.arguments)) + " args."));
		call.loop_cb();
	}
}

ruLspWorkspaceExecuteCommand(call: RuLspMethodCall) -> void {
	switch (json2LspExecuteCommandParams(call.params)) {
		Some(commandParams): {
			if (commandParams.command == "verify") {
				ruLspWorkspaceExecuteVerify(call, commandParams);
			} else if (commandParams.command == "metamath") {
				ruLspWorkspaceExecuteMetamath(call, commandParams);
			} else if (commandParams.command == "find-symbol") {
				ruLspWorkspaceExecuteFindSymbol(call, commandParams);
			} else if (commandParams.command == "math-info") {
				ruLspWorkspaceExecuteMathInfo(call, commandParams);
			} else if (commandParams.command == "command") {
				ruLspWorkspaceExecuteACommand(call, commandParams);
			} else {
				call.out_cb(ruLspErrorResponse(call.id, 1, "command '" + commandParams.command + "' is unknown"));
				call.loop_cb();
			}
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "ExecuteCommand request is illegal"));
			call.loop_cb();
		}
	}
}

ruDetectLspError(lines : [string], conf : RuConf) -> bool {
	if (exists(lines, \l -> strContains(l, "Error: ") || strContains(l, "Fail: "))) {
		ruServerLog("Server error: " + strGlue(lines, "\\n"), conf);
		true
	} else false;
}

ruLspFileConfig(def : RuConf, path : string) -> RuConf {
	cwd_dir = strReplace(resolveRelativePath("."), "\\", "/");
	ext = getFileExt(path);
	file_dir = dirName(path);
	conf_dir = ruFindConfDir(file_dir);
	if (conf_dir == "") def else {
		conf = ruMakeConf(conf_dir, []);
		RuConf(conf with 
			importRoots = uniq(concat(def.importRoots, map(conf.importRoots, \inc ->
				if (isAbsolutePath(inc)) inc else {
					if (inc == ".") {
						conf_dir;
					} else {
						conf_dir + "/" + inc;
					}
				}
			))),
			workingDir = cwd_dir,
			opts = mergeTree(def.opts, conf.opts)
		);
	}
}

ruLspParseLocations(lines : [string]) -> [Json] {
	filtermap(lines, \l -> maybeMap(ruLspParseLocation(l), \p -> lspLocation2Json(p.first)));
}

ruString2SymbolKind(str : string) -> int {
	if (str == "const") {
		lookupTreeDef(lspSymbolKindName2id, "Object", 0);
	} else if (str == "import") {
		lookupTreeDef(lspSymbolKindName2id, "Package", 0);
	} else if (str == "type") {
		lookupTreeDef(lspSymbolKindName2id, "Enum", 0);
	} else if (str == "theorem") {
		lookupTreeDef(lspSymbolKindName2id, "Function", 0);
	} else if (str == "axiom") {
		lookupTreeDef(lspSymbolKindName2id, "Interface", 0);
	} else if (str == "rule") {
		lookupTreeDef(lspSymbolKindName2id, "Variable", 0);
	} else if (str == "def") {
		lookupTreeDef(lspSymbolKindName2id, "Method", 0);
	} else {
		0
	}
}

ruLspParseSymbols(lines : [string]) -> [Json] {
	filtermap(lines, \l -> 
		maybeBind(ruLspParseLocation(l), \p -> {
			loc = p.first;
			descr_parts = strSplit(trim(p.second), " ");
			if (length(descr_parts) == 1) {
				Some(lspSymbol2Json(LspSymbol(p.second, "", 0, false, loc.range, loc.range, [])))
			} else if (length(descr_parts) > 1) {
				name = descr_parts[1];
				kind = ruString2SymbolKind(descr_parts[0]);
				Some(lspSymbol2Json(LspSymbol(name, "", kind, false, loc.range, loc.range, [])));
			} else {
				None();
			}
		})
	);
}

ruLspParseLocation(s : string) -> Maybe<Pair<LspLocation, string>> {
	isNum = \st -> st != "" && isDigits(st);
	parts0 = strSplit(s, ":");
	if (length(parts0) < 3 || strContains(s, "Error: ") || strContains(s, "Fail: ")) None() else {
		// Windows path may start with C:/... and 
		parts = if (!hasTargetName("windows") || !isLetter(parts0[0])) parts0 else {
			concat(["/" + parts0[0] + ":" + parts0[1]], tailFrom(parts0, 2));
		}
		if (length(parts) < 3 || parts[0] == "" || !isNum(parts[1]) || !isNum(parts[2])) {
			None() ;
		} else {
			path = strReplace(parts[0], "\\", "/");
			sline = s2i(parts[1]) - 1;
			schar = s2i(parts[2]) - 1;
			if (length(parts) < 5 || !isNum(parts[3]) || !isNum(parts[4])) {
				Some(Pair(LspLocation(
					URI("file", URIAuthority("", "", ""), path, "", ""),
					LspRange(LspPosition(sline, schar), LspPosition(sline, schar + 1))
					), trim(parts[3]))
				);
			} else {
				eline = s2i(parts[3]) - 1;
				echar = s2i(parts[4]) - 1;
				Some(Pair(LspLocation(
					URI("file", URIAuthority("", "", ""), path, "", ""),
					LspRange(LspPosition(sline, schar), LspPosition(eline, echar))
					), trim(parts[5]))
				);
			}
		}
	}
}

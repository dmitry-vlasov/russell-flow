import fs/filesystem;
import sys/concurrent;
import math/stringmath;
import lingo/compiler/syntaxtree_util;
import ru_conf;
import ru_fileinfo;
import ru_log;

export {
	RuLoadDescr(
		mlCommentBeg : string,
		mlCommentEnd : string,
		slCommentBeg : string,
		slCommentEnd : string,
		importBeg : string,
		importEnd : string,
		ext : string
	);
	RuRawSource(imps : [string], src : string, info : RuFileInfo);

	ruLoadRawSource(module : string, conf : RuConf, descr : RuLoadDescr) -> Maybe<RuRawSource>;
}

ruLoadRawSource(module : string, conf : RuConf, descr : RuLoadDescr) -> Maybe<RuRawSource> {
	start = timestamp();
	path = ruFindPath(module, conf, descr.ext);
	if (fileExists(path)) {
		src_str = getFileContent(path);
		imports = ruParseLoad(src_str, descr);
		Some(RuRawSource(imports, src_str, ruMakeFileInfo(path, conf)));
	} else {
		conf.onError("file '" + path + "' is not found", []);
		None()
	}
}

RuParseLoadAcc(
	src : string,
	pos : int,
	imports : [string],
	state : RuParseLoadState
);

RuParseLoadState ::= RuParseLoadCommentML, RuParseLoadCommentSL, RuParseLoadSrc;
	RuParseLoadCommentML(); 
	RuParseLoadCommentSL();
	RuParseLoadSrc();
	
ruParseLoad(src : string, descr : RuLoadDescr) -> [string] {
	ruDoParseLoad(RuParseLoadAcc(src, 0, [], RuParseLoadSrc()), descr).imports
}

ruDoParseLoad(acc : RuParseLoadAcc, descr : RuLoadDescr) -> RuParseLoadAcc {
	if (acc.pos >= strlen(acc.src)) acc else {
		switch (acc.state) {
			RuParseLoadCommentSL(): {
				i = strRangeIndexOf(acc.src, descr.slCommentEnd, acc.pos, strlen(acc.src));
				if (i == -1) acc else 
				ruDoParseLoad(RuParseLoadAcc(acc with 
					pos = i + strlen(descr.slCommentEnd),
					state = RuParseLoadSrc()
				), descr)
			}
			RuParseLoadCommentML(): {
				i = strRangeIndexOf(acc.src, descr.mlCommentEnd, acc.pos, strlen(acc.src));
				if (i == -1) acc else 
				ruDoParseLoad(RuParseLoadAcc(acc with 
					pos = i + strlen(descr.mlCommentEnd),
					state = RuParseLoadSrc()
				), descr)
			}
			RuParseLoadSrc(): {
				if (descr.slCommentBeg != "" && substring(acc.src, acc.pos, strlen(descr.slCommentBeg)) == descr.slCommentBeg) {
					ruDoParseLoad(RuParseLoadAcc(acc with 
						pos = acc.pos + strlen(descr.slCommentBeg),
						state = RuParseLoadCommentSL()
					), descr)
				} else if (descr.mlCommentBeg != "" && substring(acc.src, acc.pos, strlen(descr.mlCommentBeg)) == descr.mlCommentBeg) {
					ruDoParseLoad(RuParseLoadAcc(acc with 
						pos = acc.pos + strlen(descr.mlCommentBeg),
						state = RuParseLoadCommentML()
					), descr)
				} else if (substring(acc.src, acc.pos, strlen(descr.importBeg)) == descr.importBeg) {
					i = strRangeIndexOf(acc.src, descr.importEnd, acc.pos + strlen(descr.importBeg), strlen(acc.src));
					if (i == -1) acc else
					ruDoParseLoad(RuParseLoadAcc(acc with 
						pos = i + strlen(descr.importEnd),
						imports = concat(acc.imports, [trim(substring(acc.src, acc.pos + strlen(descr.importBeg), i - (acc.pos + strlen(descr.importBeg))))])
					), descr)
				} else {
					ruDoParseLoad(RuParseLoadAcc(acc with pos = acc.pos + 1), descr)
				}
			}
		}
	}
}


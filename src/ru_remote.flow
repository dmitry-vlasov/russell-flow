import text/serialize;
import net/http;
import ru_run;

export {
	// Run a task, described by a config, on a remote flowc server
	ruRunRemote(
		conf : Ruconf, 
		onData: (flow) -> void, 
		onError : (string) -> void, 
		onRunComplete : (int) -> void,
		onServerError : (int) -> void
	) -> void;

	ruRun(conf : RuConf) -> void;
	mmRun(conf : RuConf) -> void;
}

ruRun(conf : RuConf, globalEnv : FcTypeEnvGlobal, onRunComplete : (int) -> void) -> void {
	if (isOptIsTrue(config.config, "local")) {
		runConfigLocally(config, globalEnv, onRunComplete);
	} else {
		runConfigRemote(
			config, 
			\msg -> fcPrintln(msg, config.threadId), 
			\msg -> fcPrintln(msg, config.threadId), 
			onRunComplete, 
			\__ -> runConfigLocally(config, globalEnv, onRunComplete)
		)
	}
}

ruRunRemote(conf : Ruconf, onData: (flow) -> void, onError : (string) -> void, onRunComplete : (int) -> void, onServerError : (int) -> void) -> void {
	serverUrl = 
		"http://localhost:" +
		ruOptDef(conf, "server-port", "10001");
	cwd = strReplace(resolveRelativePath("."), "\\", "/");
	patchedConf = RuConf(conf with opts =
		setTree(
			setTree(
				switch (lookupTree(conf.opts, "output-dir")) {
					Some(__): conf.opts;
					None():   setTree(conf.opts, "output-dir", cwd);
				},
				"file",
				conf.file
			),
			"working-dir",
			lookupTreeDef(conf.opts, "working-dir", cwd)
		)
	);
	httpCustomRequest(
		serverUrl,
		GET(), [], RequestPayload("config_" + serialize(patchedConf)),
		\status, data, headers -> {
			code = status - 200;
			if (code == 0) {
				onData(data);
				onRunComplete(0);
			} else if (0 < code && code < 64) {
				onError("Compilation error " + i2s(code) + "\n" + data);
				onRunComplete(code);
			} else {
				onServerError(status);
			}
		},
		false
	)
}

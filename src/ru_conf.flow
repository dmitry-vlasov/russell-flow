import ru_util;
import lingo/linecolumn;
import math/stringmath;

export {
	RuPlace(file : string, pos : int);
	
	RuConf(
		file : string,
		ext : string,
		importRoots : [string],
		workingDir : string,
        verbose : int,
		opts : Tree<string, string>,
		threadId : int,
		onError : (string, [RuPlace]) -> void
	);

	ruNoConf = RuConf("__no", "__no", [], "", 0, makeTree(), 0, nop2);

	RuCommand(
		name : string,
		conf : RuConf
	);

	ruMakeConf(onError : (string, [RuPlace]) -> void) -> Maybe<RuConf>;
	ruTrimPath(file : string, conf : RuConf, ext : string) -> string;
	ruFindPath(file : string, conf : RuConf, ext : string) -> string;
	ruAddErr2Conf(conf : RuConf, msg : string) -> RuConf;
	ruAddErrCounter(conf : RuConf, err_count : ref int) -> RuConf;
	ruPlace2s(place : RuPlace) -> string;
	ruOptIsSet(opt : string, conf : RuConf) -> bool;
	ruAllOptsAreSet(opt : [string], conf : RuConf) -> bool;
	ruSomeOptsAreSet(opt : [string], conf : RuConf) -> bool;
	ruOptIsTrue(opt : string, conf : RuConf) -> bool;
	ruOptIsFalse(opt : string, conf : RuConf) -> bool;
	ruAllOptsAreTrue(opt : [string], conf : RuConf) -> bool;
	ruSomeOptsAreTrue(opt : [string], conf : RuConf) -> bool;
	ruSetOpt(opt : string, val : string, conf : RuConf) -> RuConf;
	ruRemoveOpt(opt : string, conf : RuConf) -> RuConf;
	ruRemoveOpts(opts : [string], conf : RuConf) -> RuConf;
	ruOpt(opt : string, conf : RuConf) -> string;
	ruOptDef(opt : string, def : string, conf : RuConf) -> string;
	ruConf2Commands(conf : RuConf) -> [RuCommand];
	ruMakeOpts(args : [string]) -> Tree<string, string>;
}

ruMakeConf(onError : (string, [RuPlace]) -> void) -> Maybe<RuConf> {
	err_count = ref 0;
	conf_dir = ruFindConfDir(resolveRelativePath(".")); 
	conf_opts = ruReadConfFileFromDir(conf_dir);
	opts = fold(getAllUrlParametersArray(), conf_opts, \acc, p -> setTree(acc, p[0], p[1]));
	file = foldTree(opts, "", \name, val, acc -> {
		if (name == "file" || val == "") {
			if (acc == "") {
				if (name == "file") val else name
			} else if (acc != val) {
				onError("target file is set up more then once: '" + val + "' and '" + acc + "'", []);
				err_count := ^err_count + 1;
				""
			} else acc;
		} else acc
	});
	if (file == "" && lookupTreeDef(opts, "help", "") != "1") {
		onError("target file is not set", []);
		err_count := ^err_count + 1;
	}
	ext = getFileExt(file);
	verbose = s2i(lookupTreeDef(opts, "verbose", "0"));
	importRoots = filtermap(strSplit(lookupTreeDef(opts, "import-roots", ""), ","), \imp -> {
		dir = rtrim2(strReplace(imp, "\\", "/"), "/") + "/";
		if (!isDirectory(dir)) {
			onError("import root directory " + dir + " does not exist", []);
			err_count := ^err_count + 1;
			None();
		} else {
			Some(strReplace(resolveRelativePath(dir), "\\", "/"));
		}
	});
	workingDir = lookupTreeDef(opts, "working-dir", "");
	conf1 = RuConf(file, ext, importRoots, workingDir, verbose, opts, s2i(getThreadId()), onError);
	trimmed = ruTrimPath(resolveRelativePath(file), conf1, ext);
	if (^err_count > 0) {
		None() 
	} else {
		Some(RuConf(
			trimmed, ext,
			importRoots, workingDir, verbose, opts, s2i(getThreadId()), onError
		));
	}
}

ruFindConfDir(dir : string) -> string {
	path = dir + "/russell.conf";
	if (fileExists(path)) dir else 
	if (dir == "/" || dir == "") "/" else {
		ruFindConfDir(ruDirName(dir));
	}
}

ruReadConfFileFromDir(dir : string) -> Tree<string, string> {
	path = dir + "/russell.conf";
	if (!fileExists(path)) makeTree() else {
		config = getFileContent(path);
		lines = strSplit(config, "\n");
		opts = fold(lines, makeTree(), \acc, l -> {
			// Skip comment lines in russell.conf
			if (!startsWith(ltrim2(l, " \t"), "#") && !startsWith(ltrim2(l, " \t"), "//")) {
				opts = strSplit(l, "=");
				if (length(opts) == 1) {
					opt = trim2(opts[0], " \t\r");
					setTree(acc, opt, "");
				} else if (length(opts) == 2) {
					opt = trim2(opts[0], " \t\r");
					val = trim2(opts[1], " \t\r");
					setTree(acc, opt, val)
				} else acc;
			} else acc;
		});
		if (containsKeyTree(opts, "cache-dir")) opts else
		setTree(opts, "cache-dir", dir + "/cache");
	}
}

ruTrimPath(file : string, conf : RuConf, ext : string) -> string {
	noext = strReplace(ruRemoveExt(file, ext), "\\", "/");
	shift = if (conf.workingDir == "") "" else relatingPath(conf.workingDir, resolveRelativePath("."));
	pathShift = if (shift == "") shift else shift + "/";
	processImportRoot = \acc, impRoot -> {
		resolved = strReplace(resolveRelativePath(impRoot), "\\", "/");
		if (startsWith(toLowerCase(acc), toLowerCase(resolved))) {
			strRight(acc, strlen(resolved));
		} else if (startsWith(toLowerCase(acc), toLowerCase(impRoot))) {
			strRight(acc, strlen(impRoot));
		} else acc
	};
	trimmed = fold(conf.importRoots, noext, \acc, impRoot -> {
		acc1 = if (pathShift != "") {
			processImportRoot(acc, pathShift + impRoot)
		} else acc;
		processImportRoot(acc1, impRoot)
	});
	if (trimmed == file) file else trim2(trimmed, "/");
}

ruFindPath(file : string, conf : RuConf, ext : string) -> string {
	withRus = if (endsWith(file, ext)) file else file + ext;
	shift = if (conf.workingDir == "") "" else relatingPath(conf.workingDir, resolveRelativePath("."));
	if (fileExists(withRus)) {
		resolveRelativePath(withRus);
	} else {
		ruDoFindPath(withRus, if (shift == "") shift else shift + "/", conf.importRoots);
	}
}

ruDoFindPath(withRus : string, pathShift : string, importRoots : [string]) -> string {
	if (importRoots == []) withRus
	else {
		head = importRoots[0];
		directPath = head + (if (endsWith(head, "/")) "" else "/") + withRus;
		if (fileExists(directPath)) {
			resolveRelativePath(directPath);
		} else {
			shiftedPath = pathShift + directPath;
			if (fileExists(shiftedPath)) {
				resolveRelativePath(shiftedPath);
			} else {
				ruDoFindPath(withRus, pathShift, tail(importRoots));
			}
		}
	}
}

ruAddErr2Conf(conf : RuConf, msg : string) -> RuConf {
	RuConf(conf with onError = \str, pos -> conf.onError(str + msg, pos))
}

ruAddErrCounter(conf : RuConf, err_count : ref int) -> RuConf {
	RuConf(conf with onError = 
		\err, places -> {
			err_count := ^err_count + 1;
			conf.onError(err, places);
		}
	)
}

ruPlace2s(place : RuPlace) -> string {
	if (place.file == "" || place.pos == -1) "" else {
		code = getFileContent(place.file);
		resolver = makeLineResolver(code);
		pos = findLine(resolver, place.pos);
		"file " + place.file + ": line " + i2s(pos.lineno) + ", col " + i2s(pos.column)
	}
}

ruOptIsSet(opt : string, conf : RuConf) -> bool {
	containsKeyTree(conf.opts, opt)
}

ruAllOptsAreSet(opts : [string], conf : RuConf) -> bool {
	forall(opts, \opt -> ruOptIsSet(opt, conf))
}

ruSomeOptsAreSet(opts : [string], conf : RuConf) -> bool {
	exists(opts, \opt -> ruOptIsSet(opt, conf))
}

ruOptIsTrue(opt : string, conf : RuConf) -> bool {
	lookupTreeDef(conf.opts, opt, "") == "1"
}

ruOptIsFalse(opt : string, conf : RuConf) -> bool {
	lookupTreeDef(conf.opts, opt, "1") == "0"
}

ruAllOptsAreTrue(opts : [string], conf : RuConf) -> bool {
	forall(opts, \opt -> ruOptIsTrue(opt, conf))
}

ruSomeOptsAreTrue(opts : [string], conf : RuConf) -> bool {
	exists(opts, \opt -> ruOptIsTrue(opt, conf))
}

ruSetOpt(opt : string, val : string, conf : RuConf) -> RuConf {
	RuConf(conf with opts = setTree(conf.opts, opt, val))
}

ruRemoveOpt(opt : string, conf : RuConf) -> RuConf {
	RuConf(conf with opts = removeFromTree(conf.opts, opt));
}

ruRemoveOpts(opts : [string], conf : RuConf) -> RuConf {
	fold(opts, conf, \acc, opt -> ruRemoveOpt(opt, acc));
}

ruOpt(opt : string, conf : RuConf) -> string {
	lookupTreeDef(conf.opts, opt, "")
}

ruOptDef(opt : string, def : string, conf : RuConf) -> string {
	lookupTreeDef(conf.opts, opt, def)
}

ruConf2Commands(conf : RuConf) -> [RuCommand] {
	getTreeValues(foldTree(conf.opts, makeTree(), \id, opt, acc ->
		if (!isDigits(id)) acc else {
			splitted = strSplit(opt, ",");
			if (length(splitted) == 0) acc else {
				setTree(acc, s2i(id), 
					RuCommand(splitted[0], RuConf(conf with opts = ruMakeOpts(tail(splitted))))
				);
			}
		}
	));
}

ruMakeOpts(args : [string]) -> Tree<string, string> {
	fold(args, makeTree(), \acc, opt -> {
		eqi = strIndexOf(opt, "=");
		if (eqi == -1) {
			setTree(acc, "default", opt);
		} else {
			key = substring(opt, 0, eqi);
			val = substring(opt, eqi + 1, strlen(opt));
			setTree(acc, key, val);
		}
	});
}

import lingo/linecolumn;
import math/stringmath;
import formats/json/json;
import ru_util;

export {
	RuPlace(file : string, pos : int);

	// Syntax of a command line task:
	//   do=<command> <arg_1>=<val_1> ... <arg_n>=<val_n>
	//
	// Syntax of a command line:
	//   <opt_1>=<val_1> ... <opt_k>=<val_k> ; <task_1> ; ... ; <task_m>

	RuConf(
		importRoots : [string],
		workingDir : string,
        verbose : int,
		opts : Tree<string, string>,
		threadId : int,
		onError : (string, [RuPlace]) -> void
	);

	RuTask(
		command : string,
		args : Tree<string, string>
	);

	RuJob(
		conf : RuConf,
		tasks : [RuTask]
	);

	ruTrimPath(file : string, conf : RuConf, ext : string) -> string;
	ruFindPath(file : string, conf : RuConf, ext : string) -> string;
	ruAddErr2Conf(conf : RuConf, msg : string) -> RuConf;
	ruAddErrCounter(conf : RuConf, err_count : ref int) -> RuConf;
	ruPlace2s(place : RuPlace) -> string;
	getRussellDir() -> string;

/*	ruOptIsSet(opt : string, opts : Tree<string, string>) -> bool;
	ruAllOptsAreSet(opt : [string], opts : Tree<string, string>) -> bool;
	ruSomeOptsAreSet(opt : [string], opts : Tree<string, string>) -> bool;
	ruOptIsTrue(opt : string, conf : RuConf) -> bool;
	ruOptIsFalse(opt : string, conf : RuConf) -> bool;
	ruAllOptsAreTrue(opt : [string], conf : RuConf) -> bool;
	ruSomeOptsAreTrue(opt : [string], conf : RuConf) -> bool;
	ruSetOpt(opt : string, val : string, conf : RuConf) -> RuConf;

	ruRemoveOpt(opt : string, conf : RuConf) -> RuConf;
	ruRemoveOpts(opts : [string], conf : RuConf) -> RuConf;*/

//	ruOpt(opt : string, opts : Tree<string, string>) -> string;
//	ruOptDef(opt : string, def : string, conf : RuConf) -> string;
}

ruTrimPath(file : string, conf : RuConf, ext0 : string) -> string {
	//ruDebugLog1("file: " + file);
	//ruDebugLog1("ext: " + ext);
	ext = if (startsWith(ext0, ".")) ext0 else "." + ext0;
	noext = strReplace(ruRemoveExt(file, ext), "\\", "/");
	//ruDebugLog1("noext: " + noext);
	shift = if (conf.workingDir == "") "" else relatingPath(conf.workingDir, resolveRelativePath("."));
	pathShift = if (shift == "") shift else shift + "/";
	processImportRoot = \acc, impRoot -> {
		resolved = strReplace(resolveRelativePath(impRoot), "\\", "/");
		if (startsWith(toLowerCase(acc), toLowerCase(resolved))) {
			strRight(acc, strlen(resolved));
		} else if (startsWith(toLowerCase(acc), toLowerCase(impRoot))) {
			strRight(acc, strlen(impRoot));
		} else acc
	};
	trimmed = fold(conf.importRoots, noext, \acc, impRoot -> {
		acc1 = if (pathShift != "") {
			processImportRoot(acc, pathShift + impRoot)
		} else acc;
		processImportRoot(acc1, impRoot)
	});
	if (trimmed == file) file else trim2(trimmed, "/");
}

ruFindPath(file : string, conf : RuConf, ext0 : string) -> string {
	ext = if (startsWith(ext0, ".")) ext0 else "." + ext0;
	withRus = if (endsWith(file, ext)) file else file + ext;
	shift = if (conf.workingDir == "") "" else relatingPath(conf.workingDir, resolveRelativePath("."));
	if (fileExists(withRus)) {
		resolveRelativePath(withRus);
	} else {
		ruDoFindPath(withRus, if (shift == "") shift else shift + "/", conf.importRoots);
	}
}

ruDoFindPath(withRus : string, pathShift : string, importRoots : [string]) -> string {
	if (importRoots == []) withRus
	else {
		head = importRoots[0];
		directPath = head + (if (endsWith(head, "/")) "" else "/") + withRus;
		if (fileExists(directPath)) {
			resolveRelativePath(directPath);
		} else {
			shiftedPath = pathShift + directPath;
			if (fileExists(shiftedPath)) {
				resolveRelativePath(shiftedPath);
			} else {
				ruDoFindPath(withRus, pathShift, tail(importRoots));
			}
		}
	}
}

ruAddErr2Conf(conf : RuConf, msg : string) -> RuConf {
	RuConf(conf with onError = \str, pos -> conf.onError(str + msg, pos))
}

ruAddErrCounter(conf : RuConf, err_count : ref int) -> RuConf {
	RuConf(conf with onError = 
		\err, places -> {
			err_count := ^err_count + 1;
			conf.onError(err, places);
		}
	)
}

ruPlace2s(place : RuPlace) -> string {
	if (place.file == "" || place.pos == -1) "" else {
		code = getFileContent(place.file);
		resolver = makeLineResolver(code);
		pos = findLine(resolver, place.pos);
		"file " + place.file + ": line " + i2s(pos.lineno) + ", col " + i2s(pos.column)
	}
}

/*
ruOptIsSet(opt : string, conf : RuConf) -> bool {
	containsKeyTree(conf.opts, opt)
}

ruAllOptsAreSet(opts : [string], conf : RuConf) -> bool {
	forall(opts, \opt -> ruOptIsSet(opt, conf))
}

ruSomeOptsAreSet(opts : [string], conf : RuConf) -> bool {
	exists(opts, \opt -> ruOptIsSet(opt, conf))
}

ruOptIsTrue(opt : string, conf : RuConf) -> bool {
	lookupTreeDef(conf.opts, opt, "") == "1"
}

ruOptIsFalse(opt : string, conf : RuConf) -> bool {
	lookupTreeDef(conf.opts, opt, "1") == "0"
}

ruAllOptsAreTrue(opts : [string], conf : RuConf) -> bool {
	forall(opts, \opt -> ruOptIsTrue(opt, conf))
}

ruSomeOptsAreTrue(opts : [string], conf : RuConf) -> bool {
	exists(opts, \opt -> ruOptIsTrue(opt, conf))
}

ruSetOpt(opt : string, val : string, conf : RuConf) -> RuConf {
	RuConf(conf with opts = setTree(conf.opts, opt, val))
}

ruRemoveOpt(opt : string, conf : RuConf) -> RuConf {
	RuConf(conf with opts = removeFromTree(conf.opts, opt));
}

ruRemoveOpts(opts : [string], conf : RuConf) -> RuConf {
	fold(opts, conf, \acc, opt -> ruRemoveOpt(opt, acc));
}

ruOpt(opt : string, conf : RuConf) -> string {
	lookupTreeDef(conf.opts, opt, "")
}

ruOptDef(opt : string, def : string, conf : RuConf) -> string {
	lookupTreeDef(conf.opts, opt, def)
}
*/
ruRussellDir : ref Maybe<string> = ref None();

getRussellDir() -> string {
	init_dir = \-> {
		// Use the path of the executable
		appPath = strReplace(getApplicationPath(), "\\", "/");
		russellDefDir = if (strContains(appPath, "russell/bin/")) {
			takeBefore(appPath, "/bin/", appPath) + "/"
		} else if (strContains(appPath, "russell-flow/bin/")) {
			takeBefore(appPath, "/bin/", appPath)
		} else if (strContains(appPath, "russell-flow/src/russell")) {
			takeBefore(appPath, "src/russell", appPath)
		} else if (strContains(appPath, "russell/src/russell")) {
			takeBefore(appPath, "src/russell", appPath)
		} else if (strContains(appPath, "bin/")) {
			takeBefore(appPath, "bin/", appPath)
		} else {
			println("WARNING: Could not determine the russell directory.");
			println("Defaults to ../flow9/. Use bin-dir=<path> to specify where the flow folder is");
			"../russell/";
		}
		binDir = getUrlParameter("bin-dir");
		russelldir = if (binDir == "") {
			russellDefDir
		} else {
			if (endsWith(binDir, "bin/") || endsWith(binDir, "bin\\"))
				substring(binDir, 0, strlen(binDir)-4)
			else
				substring(binDir, 0, strlen(binDir)-3);
		}
		strReplace(russelldir, "\\", "/");
    }
    onlyOnce(ruRussellDir, init_dir);
}

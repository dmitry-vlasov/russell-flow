import math/math;
import ds/tree;

export {
	// f(x) = a[0] * exp(x) + a[1] + a[2] * x + ... + a[k] * x^{k - 1}
	RuApprox(a : [double]);

	RuPlanner(
		start : double, // When the task group is started
		limit : double, // Time limit for the task group
		num : int,      // Number of tasks in the group
		approx : RuApprox // Appproximation for the time
	);

	RuApproxStats(
		stats : Tree<double, double>
	);

	ruEvalApprox(approx : RuApprox, x : double) -> double;
	ruApproxDiscrepancy(stats : RuApproxStats, approx : RuApprox) -> double;
	ruEnhanceApprox(stats : RuApproxStats, approx : RuApprox) -> RuApprox;
	ruApprox2s(app : RuApprox) -> string;
}

ruApprox2s(app : RuApprox) -> string {
	// f(x) = a[0] * exp(x) + a[1] + a[2] * x + ... + a[k] * x^{k - 1}
	if (length(app.a) == 0) "" else {
		(if (app.a[0] == 0.0) "" else d2s(app.a[0]) + " * exp(x) ") + 
		strGlue(filtermapi(tail(app.a), \i, c -> 
			if (c == 0.0) None() else Some(d2s(c) + (if (i == 0) "" else " * x^" + i2s(i)))
		), " + ");
	}
}

ruEvalApprox(approx : RuApprox, x : double) -> double {
	approx.a[0] * exp(x) + foldi(approx.a, 0.0, \i, acc, c -> if (i == 0) acc else acc + c * dpow(x, i2d(i - 1)));
}

ruApproxDiscrepancy(s : RuApproxStats, approx : RuApprox) -> double {
	foldTree(s.stats, 0.0, \x, y, acc -> {
		delta = y - ruEvalApprox(approx, x);
		acc + delta * delta;
	});
}

ruEnhanceApprox(stats : RuApproxStats, app : RuApprox) -> RuApprox {
	//ruDoEnhanceApprox(stats, RuApproxEnhaceEnv(app, map(app.a, \__ -> 1.0), 0)).app;
	ruDoEnhanceApprox1(stats, RuApproxEnhaceEnv1(app, 1.0, 0)).app;
}

RuApproxEnhaceEnv(
	app : RuApprox, 
	deltas : [double],
	count : int,
);

ruDoEnhanceApprox(stats : RuApproxStats, env : RuApproxEnhaceEnv) -> RuApproxEnhaceEnv {
	d0 = ruApproxDiscrepancy(stats, env.app);
	env1 = ruDoEnhanceApproxIteration(stats, env);
	d1 = ruApproxDiscrepancy(stats, env1.app);
	if (d1 > d0) {
		println("ruDoEnhanceApprox: d1 > d0: somth. wrond - should not be");
		quit(-1);
	}
	if (d0 - d1 < 0.001) env1 else {
		println("approx iteration: " + i2s(env.count) + ", discrepacy: " + d2s(d1) + ", delta: " + d2s(d0 - d1));
		ruDoEnhanceApprox(stats, RuApproxEnhaceEnv(env1 with count = env1.count + 1));
	}
}

ruDoEnhanceApproxIteration(stats : RuApproxStats, env : RuApproxEnhaceEnv) -> RuApproxEnhaceEnv {
	foldi(env.app.a, env, \i, acc, __ -> ruDoEnhanceApproxStep(stats, i, acc));
}

ruDoEnhanceApproxStep(stats : RuApproxStats, i : int, env : RuApproxEnhaceEnv) -> RuApproxEnhaceEnv {
	d0 = ruApproxDiscrepancy(stats, env.app);
	aDP = RuApprox(env.app with a = replace(env.app.a, i, env.app.a[i] + env.deltas[i] * 2.0));
	aDM = RuApprox(env.app with a = replace(env.app.a, i, env.app.a[i] - env.deltas[i] * 2.0));
	aHP = RuApprox(env.app with a = replace(env.app.a, i, env.app.a[i] + env.deltas[i] / 2.0));
	aHM = RuApprox(env.app with a = replace(env.app.a, i, env.app.a[i] - env.deltas[i] / 2.0));
	dDP = ruApproxDiscrepancy(stats, aDP);
	dDM = ruApproxDiscrepancy(stats, aDM);
	dHP = ruApproxDiscrepancy(stats, aHP);
	dHM = ruApproxDiscrepancy(stats, aHM);
	minD = min(d0, min(dDP, min(dDM, min(dHP, dHM))));
	if (minD == dDP) RuApproxEnhaceEnv(aDP, replace(env.deltas, i, env.deltas[i] * 2.0), env.count) else
	if (minD == dDM) RuApproxEnhaceEnv(aDM, replace(env.deltas, i, env.deltas[i] * 2.0), env.count) else
	if (minD == dHP) RuApproxEnhaceEnv(aHP, replace(env.deltas, i, env.deltas[i] / 2.0), env.count) else
	if (minD == dHM) RuApproxEnhaceEnv(aHM, replace(env.deltas, i, env.deltas[i] / 2.0), env.count) else env;
}


RuApproxEnhaceEnv1(
	app : RuApprox, 
	delta : double,
	count : int
);

ruDoEnhanceApprox1(stats : RuApproxStats, env : RuApproxEnhaceEnv1) -> RuApproxEnhaceEnv1 {
	d0 = ruApproxDiscrepancy(stats, env.app);
	app1 = ruDoEnhanceApproxIteration1(stats, env);
	d1 = ruApproxDiscrepancy(stats, app1);
	if (d1 > d0) {
		println("ruDoEnhanceApprox1: d1 > d0: somth. wrond - should not be");
		quit(-1);
	}
	if (d0 - d1 < 0.001 && env.delta < 0.001) {
		println("approx last iteration: " + i2s(env.count) + ", discrepacy: " + d2s(d1) + ", delta: " + d2s(d0 - d1) + " D=" + d2s(env.delta));
		RuApproxEnhaceEnv1(env with app = app1);
	} else {
		println("approx iteration: " + i2s(env.count) + ", discrepacy: " + d2s(d1) + ", delta: " + d2s(d0 - d1) + " D=" + d2s(env.delta));
		if (app1 == env.app) {
			ruDoEnhanceApprox1(stats, RuApproxEnhaceEnv1(env with app = app1, count = env.count + 1, delta = env.delta / 1.5));
		} else {
			ruDoEnhanceApprox1(stats, RuApproxEnhaceEnv1(env with app = app1, count = env.count + 1));
		}
	}
}

ruDoEnhanceApproxIteration1(stats : RuApproxStats, env : RuApproxEnhaceEnv1) -> RuApprox {
	foldi(env.app.a, env.app, \i, acc, __ -> ruDoEnhanceApproxStep1(stats, i, env.delta, acc));
}

ruDoEnhanceApproxStep1(stats : RuApproxStats, i : int, delta : double, app : RuApprox) -> RuApprox {
	d0 = ruApproxDiscrepancy(stats, app);
	aDP = RuApprox(env.app with a = replace(app.a, i, app.a[i] + delta));
	aDM = RuApprox(env.app with a = replace(app.a, i, app.a[i] - delta));
	dDP = ruApproxDiscrepancy(stats, aDP);
	dDM = ruApproxDiscrepancy(stats, aDM);
	minD = min(d0, min(dDP, dDM));
	if (minD == dDP) aDP else
	if (minD == dDM) aDM else app;
}



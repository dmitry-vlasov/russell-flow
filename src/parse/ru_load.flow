import ru_load;
import ru_src;

export {
	//RuLoaded ::= RuRawSource, RuSource;

	ruLoad(conf : RuConf, file : string) -> Maybe<Tree<string, RuRawSource>>;
}

ruLoadDescr = RuLoadDescr("/*", "*/", "//", "\n", "import", ";;", ".ru");

ruLoad(conf : RuConf, file : string) -> Maybe<Tree<string, RuRawSource>> {
	err_count = ref 0;
	start = timestamp();
	if (conf.verbose > 1) {
		println("loading: " + file);
	}
	loaded = ruLoadImports([file], ruAddErrCounter(conf, err_count), makeTree());
	if (conf.verbose > 1) {
		println(strRight(ruLoadDescr.ext, 1) + " loaded " +i2s(sizeTree(loaded)) + " files in: " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	if (^err_count == 0) {
		Some(loaded);
	} else {
		None();
	}
}

ruLoadImports(imports : [string], conf : RuConf, acc : Tree<string, RuRawSource>) -> Tree<string, RuRawSource> {
	if (imports == []) acc else {
		loaded = filtermap(ruConcurrent(map(imports, \imp -> \ -> ruLoadRawSource(imp, conf, ruLoadDescr))), idfn);
		acc1 = fold(loaded, acc, \ac, l -> setTree(ac, l.info.file, l));
		new_imports = fold(loaded, makeSet(), \ac, l -> 
			fold(l.imps, ac, \a, p ->
				if (containsKeyTree(acc1, ruTrimPath(p, conf, ruLoadDescr.ext))) a else insertSet(a, p)
			)
		);
		ruLoadImports(set2array(new_imports), conf, acc1)
	}
}

import ru_src;
import ru_conf;
import parse/ru_trie;

export {
	RuTypeEnv(
		type : RuType,
		trie   : RuTrie<string, RuRuleRef>,
		supers : Tree<string, RuRule>,
		infers : Tree<string, RuRule>
	);
	ruNoTypeEnv = RuTypeEnv(ruNoType, ruTrieEmpty, makeTree(), makeTree());

	ruAddTerm2RuTrie(term : RuTerm, rule : Maybe<RuRuleRef>, trie : RuTrie<string, RuRuleRef>, conf : RuConf) -> RuTrie<string, RuRuleRef> {
		term_key = \x -> switch (x) {
			RuConstRef(c):  c;
			RuVar(v, t): t;
		}
		ruAdd2Trie(map(term.expr, term_key), rule, trie, 
			\a1, a2 -> {
				conf.onError("rule term: " + ruTerm2s(term.expr) + " is already used", []);
				a1
			}
		)
	}

	ruMergeRuTypeEnv(e1 : RuTypeEnv, e2 : RuTypeEnv) -> RuTypeEnv {
		RuTypeEnv(
			e1.type,
			ruMergeRuTrie(e1.trie, e2.trie, \a1, a2 -> a1),
			mergeTree(e1.supers, e2.supers),
			mergeTree(e1.infers, e2.infers),
		)
	}
}

import formats/lsp;
import lsp/io;
import lsp/state;
import base/env;
import script/script;

export {
	RuLspMessage(
		raw : string,                  // the whole message raw string
		header : Tree<string, string>, // All key-value pairs from a header of a message
		message : LspMessage           // Content of a message
	);

	ruLspReadMessage(env : RuEnv, log : RuLspLog) -> Maybe<RuLspMessage>;

	ruLspWriteNotification(method : string, params : Json, log : RuLspLog) -> void;
	ruLspWriteResponse(id : Json, result : Json, log : RuLspLog) -> void;
	ruLspWriteRequest(id : Json, method : string, params : Json, log : RuLspLog) -> void;
	ruLspWriteError(id : Json, code : int, message : string, data : Json, log : RuLspLog) -> void;
	ruMakeServerRequest(method : string, params : Json, callback : (Json, RuLsp) -> RuLsp, state : RuLsp) -> RuLsp;
}

ruLspWriteNotification(method : string, params : Json, log : RuLspLog) -> void {
	notification = LspNotificationMessage("2.0", method, params);
	ruLspWriteJson(lspNotificationMessage2Json(notification), log);
}

ruLspWriteResponse(id : Json, result : Json, log : RuLspLog) -> void {
	response = LspResponseMessage("2.0", id, result, None());
	ruLspWriteJson(lspResponseMessage2Json(response), log);
}

ruLspWriteRequest(id : Json, method : string, params : Json, log : RuLspLog) -> void {
	request = LspRequestMessage("2.0", id, method, params);
	ruLspWriteJson(lspRequestMessage2Json(request), log);
}

ruLspWriteError(id : Json, code : int, message : string, data : Json, log : RuLspLog) -> void {
	error = LspResponseMessage("2.0", id, JsonNull(), Some(LspResponseError(code, message, data)));
	ruLspWriteJson(lspResponseMessage2Json(error), RuLspLog(log.error, log.error, log.trace));
}

ruLspReadMessage(env : RuEnv, log : RuLspLog) -> Maybe<RuLspMessage> {
	switch (ruLspReadRawMessage(log)) {
		RuLspRawMessage(raw, header, json): {
			switch (json2LspRequestMessage(json)) {
				Some(request): {
					Some(RuLspMessage(raw, header.fields, request));
				}
				None(): {
					switch (json2LspResponseMessage(json)) {
						Some(response): {
							Some(RuLspMessage(raw, header.fields, response));
						}
						None(): {
							switch (json2LspNotificationMessage(json)) {
								Some(notification): {
									Some(RuLspMessage(raw, header.fields, notification));
								}
								None(): {
									id = getJsonFieldValue(json, "id", JsonNull());
									ruLspWriteError(id, lspInvalidRequest, "Illegal message: \n" + raw, JsonNull(), log);
									None();
								}
							}
						}
					}
				}
			}
		}
		RuLspRawError(header, content): {
			ruLspWriteError(JsonNull(), lspInvalidRequest, 
				"Failed to read a request.\nHeader:\n" + header + "\nContent:\n" + content, 
				JsonNull(), log
			);
			None();
		}
	}
}

ruMakeServerRequest(method : string, params : Json, callback : (Json, RuLsp) -> RuLsp, state : RuLsp) -> RuLsp {
	id = JsonDouble(i2d(state.currId));
	request = LspRequestMessage("2.0", id, method, params);
	ruLspWriteRequest(request.id, method, params, state.log);
	RuLsp(state with 
		requests = setTree(state.requests, request.id, 
			RuLspRequest(request, callback)
		),
		currId = state.currId + 1
	);
}

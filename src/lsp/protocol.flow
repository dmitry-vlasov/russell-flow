import formats/lsp;
import lsp/io;
import base/env;
import script/script;

export {
	RuLspMessage(
		raw : string,                  // the whole message raw string
		header : Tree<string, string>, // All key-value pairs from a header of a message
		message : LspMessage           // Content of a message
	);

	ruLspReadMessage(env : RuEnv, conf : RuConf) -> Maybe<RuLspMessage>;

	ruLspWriteNotification(method : string, params : Json, log : bool, conf : RuConf) -> void;
	ruLspWriteResponse(id : Json, result : Json, log : bool, conf : RuConf) -> void;
	ruLspWriteRequest(id : Json, method : string, params : Json, log : bool, conf : RuConf) -> void;
	ruLspWriteError(id : Json, code : int, message : string, data : Json, conf : RuConf) -> void;

	LspMethod(
		request2script : (Json, RuEnv) -> ScComm,
		responses : bool,
		callback : () -> void
	);
}

ruLspWriteNotification(method : string, params : Json, log : bool, conf : RuConf) -> void {
	notification = LspNotificationMessage("2.0", method, params);
	ruLspWriteJson(lspNotificationMessage2Json(notification), log, conf);
}

ruLspWriteResponse(id : Json, result : Json, log : bool, conf : RuConf) -> void {
	response = LspResponseMessage("2.0", id, result, None());
	ruLspWriteJson(lspResponseMessage2Json(response), log, conf);
}

ruLspWriteRequest(id : Json, method : string, params : Json, log : bool, conf : RuConf) -> void {
	request = LspRequestMessage("2.0", id, method, params);
	ruLspWriteJson(lspRequestMessage2Json(request), log, conf);
}

ruLspWriteError(id : Json, code : int, message : string, data : Json, conf : RuConf) -> void {
	error = LspResponseMessage("2.0", id, JsonNull(), 
		Some(LspResponseError(code, message, data))
	);
	ruLspWriteJson(lspResponseMessage2Json(error), true, conf);
}

ruLspReadMessage(env : RuEnv, conf : RuConf) -> Maybe<RuLspMessage> {
	switch (ruLspReadRawMessage(conf)) {
		RuLspRawMessage(raw, header, json): {
			switch (json2LspRequestMessage(json)) {
				Some(request): {
					Some(RuLspMessage(raw, header.fields, request));
				}
				None(): {
					switch (json2LspResponseMessage(json)) {
						Some(response): {
							Some(RuLspMessage(raw, header.fields, response));
						}
						None(): {
							switch (json2LspNotificationMessage(json)) {
								Some(notification): {
									Some(RuLspMessage(raw, header.fields, notification));
								}
								None(): {
									id = getJsonFieldValue(json, "id", JsonNull());
									ruLspWriteError(id, lspInvalidRequest, "Illegal message: \n" + raw, JsonNull(), conf);
									None();
								}
							}
						}
					}
				}
			}
		}
		RuLspRawError(header, content): {
			ruLspWriteError(JsonNull(), lspInvalidRequest, 
				"Failed to read a request.\nHeader:\n" + header + "\nContent:\n" + content, 
				JsonNull(), conf
			);
			None();
		}
	}
}

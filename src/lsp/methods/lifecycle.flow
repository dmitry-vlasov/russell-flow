import process;
import lsp/protocol;
import lsp/state;
import lsp/methods/textDocument;
import lsp/methods/workspace;

export {
	ruLspLifecycleMethods() -> Tree<string, RuLspMethod>;
}

ruLspLifecycleMethods() -> Tree<string, RuLspMethod> {
	pairs2tree([
		Pair("initialize", RuLspMethod(ruLspInitializeScript, ruLspInitializeCallback, true, true)),
		Pair("initialized", RuLspMethod(ruLspDefScript, ruInitializedCallback, false, true)),
		Pair("shutdown", RuLspMethod(ruLspDefScript, ruLspShutdownCallback, true, false)),
		Pair("exit", RuLspMethod(ruLspDefScript, ruLspExitCallback, false, false)),
		Pair("$/cancelRequest", RuLspMethod(ruLspDefScript, ruLspCancelRequestCallback, false, false)),
		Pair("$/setTrace", RuLspMethod(ruLspDefScript, ruLspSetTraceCallback, false, false))
	]);
}

ruExecuteCommandOptions = JsonObject([
	Pair("commands", 
		JsonArray([
			JsonString("verify"), 
			JsonString("metamath"),
			JsonString("math-info"),
			JsonString("find-symbol"),
			JsonString("command"),
		])
	),
	Pair("workDoneProgress", JsonBool(true))
]);

ruLspInitializeScript(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspInitializeParams(json)) {
		Some(params): {
			ScOutput("output", ScString(json2string(
				JsonObject([
					Pair("capabilities", JsonObject([
							Pair("declarationProvider", JsonBool(true)),
							Pair("definitionProvider", JsonBool(true)),
							Pair("referencesProvider", JsonBool(true)),
							Pair("documentSymbolProvider", JsonBool(true)),
							Pair("hoverProvider", JsonBool(true)),
							Pair("renameProvider", JsonBool(true)),
							Pair("workspaceSymbolProvider", JsonBool(true)),
							Pair("executeCommandProvider", ruExecuteCommandOptions),
							/*Pair("codeActionProvider", 
								JsonObject([
									Pair("codeActionKinds", JsonArray([
										JsonString("verify"), JsonString("prove"), JsonString("reprove"), JsonString("generalize")
									])),
								])
							),*/
							//Pair("codeActionProvider", JsonBool(true)),
							Pair("textDocumentSync",
								JsonObject([
									Pair("openClose", JsonBool(true)),
									Pair("save", JsonBool(true)),
									Pair("change", JsonDouble(2.0))
								])
							)
						])
					)
				])
			)));
		}
		None(): {
			env.out.onError("text document item is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspInitializeCallback(json : Json, state : RuLsp) -> RuLsp {
	switch (json2LspInitializeParams(json)) {
		Some(params): {
			RuLsp(state with clientConf = params);
		}
		None(): {
			state;
		}
	}
}

ruInitializedCallback(response : Json, state : RuLsp) -> RuLsp {
	if (getJsonBoolField(getJsonNestedField(state.clientConf.capabilities, ["workspace", "didChangeConfiguration"]), "dynamicRegistration", false)) {
		params = lspRegistrationParams2Json(LspRegistrationParams([
			LspRegistration(makeUuid(), "textDocument/didChange", 
				lspTextDocumentChangeRegistrationOptions2Json(
					LspTextDocumentChangeRegistrationOptions([LspDocumentFilter("flow", "file", "*.{flow}")], 1)
				)
			)
		]));
		ruMakeServerRequest("client/registerCapability", params, ruLspDefCallback, state);
	} else {
		state;
	}
}

ruLspShutdownCallback(json : Json, state : RuLsp) -> RuLsp {
	ruMemCacheClear();
	RuLsp(state with exit = 1);
}

ruLspExitCallback(json : Json, state : RuLsp) -> RuLsp {
	RuLsp(state with exit = 2);
}

ruLspCancelRequestCallback(json : Json, state : RuLsp) -> RuLsp {
	switch (json2LspCancelParams(json)) {
		Some(params): {
			if (!containsSet(state.processed, params.id)) {
				ruLspWriteError(params.id, lspRequestCancelled, "request with id = '" + json2string(params.id) + "' is canceled", JsonNull(), state.env.conf);
				RuLsp(state with processed = insertSet(state.processed, params.id));
			} else {
				state;
			}
		}
		None(): {
			ruLspWriteError(JsonNull(), lspInvalidParams, "expecting the LspCancelParams, got: " + json2string(json), JsonNull(), state.env.conf);
			state;
		}
	}
}

ruLspSetTraceCallback(json : Json, state : RuLsp) -> RuLsp {
	switch (json2LspSetTrace(json)) {
		Some(params): {
			RuLsp(state with clientConf = LspInitializeParams(state.clientConf with trace = params.value));
		}
		None(): {
			ruLspWriteError(JsonNull(), lspInvalidParams, "expecting the SetTraceParams, got: " + json2string(json), JsonNull(), state.env.conf);
			state;
		}
	}
}

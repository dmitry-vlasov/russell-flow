import process;
import lsp/protocol;
import lsp/state;
import lsp/methods/textDocument;
import lsp/methods/workspace;

export {
	ruLspLifecycleMethods() -> Tree<string, RuLspMethod>;
}

ruLspLifecycleMethods() -> Tree<string, RuLspMethod> {
	pairs2tree([
		Pair("initialize", RuLspMethod(ruLspInitializeScript, ruLspInitializeCallback)),
		Pair("initialized", RuLspMethod(ruLspDefScript, ruInitializedCallback)),
		Pair("shutdown", RuLspMethod(ruLspDefScript, ruLspShutdownCallback)),
		Pair("exit", RuLspMethod(ruLspDefScript, ruLspExitCallback)),
		Pair("$/cancelRequest", RuLspMethod(ruLspDefScript, ruLspCancelRequestCallback)),
		Pair("$/setTrace", RuLspMethod(ruLspDefScript, ruLspSetTraceCallback))
	]);
}

ruExecuteCommandOptions = ScMap([
	Pair(ScString("commands"), ScArray([
		ScString("verify"), 
		ScString("metamath"),
		ScString("math-info"),
		ScString("find-symbol"),
		ScString("command"),
	])),
	Pair(ScString("workDoneProgress"), ScBool(true))
]);

ruLspInitializeScript(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspInitializeParams(json)) {
		Some(params): {
			ScOutput("output", ScMap([
					Pair(ScString("capabilities"), ScMap([
							Pair(ScString("declarationProvider"), ScBool(true)),
							Pair(ScString("definitionProvider"), ScBool(true)),
							Pair(ScString("referencesProvider"), ScBool(true)),
							Pair(ScString("documentSymbolProvider"), ScBool(true)),
							Pair(ScString("hoverProvider"), ScBool(true)),
							Pair(ScString("renameProvider"), ScBool(true)),
							Pair(ScString("workspaceSymbolProvider"), ScBool(true)),
							Pair(ScString("executeCommandProvider"), ruExecuteCommandOptions),
							/*Pair("codeActionProvider", 
								JsonObject([
									Pair("codeActionKinds", JsonArray([
										JsonString("verify"), JsonString("prove"), JsonString("reprove"), JsonString("generalize")
									])),
								])
							),*/
							//Pair("codeActionProvider", JsonBool(true)),
							Pair(ScString("completionProvider"),
								ScMap([
									Pair(ScString("triggerCharacters"), ScArray([ScString("\\")])),
									Pair(ScString("allCommitCharacters"), ScArray([])),
									Pair(ScString("resolveProvider"), ScBool(false)),
									Pair(ScString("workDoneProgress"), ScBool(false))
								])
							),
							Pair(ScString("textDocumentSync"),
								ScMap([
									Pair(ScString("openClose"), ScBool(true)),
									Pair(ScString("save"), ScBool(true)),
									Pair(ScString("change"), ScInt(2))
								])
							)
						])
					)
				])
			);
		}
		None(): {
			env.out.error("text document item is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspInitializeCallback(json : Json, state : RuLsp) -> RuLsp {
	switch (json2LspInitializeParams(json)) {
		Some(params): {
			RuLsp(state with clientConf = params);
		}
		None(): {
			state;
		}
	}
}

ruInitializedCallback(response : Json, state : RuLsp) -> RuLsp {
	if (getJsonBoolField(getJsonNestedField(state.clientConf.capabilities, ["workspace", "didChangeConfiguration"]), "dynamicRegistration", false)) {
		params = lspRegistrationParams2Json(LspRegistrationParams([
			LspRegistration(makeUuid(), "textDocument/didChange", 
				lspTextDocumentChangeRegistrationOptions2Json(
					LspTextDocumentChangeRegistrationOptions([LspDocumentFilter("flow", "file", "*.{flow}")], 1)
				)
			)
		]));
		ruMakeServerRequest("client/registerCapability", params, ruLspDefCallback, state);
	} else {
		state;
	}
}

ruLspShutdownCallback(json : Json, state : RuLsp) -> RuLsp {
	ruMemCacheClear();
	RuLsp(state with exit = 1);
}

ruLspExitCallback(json : Json, state : RuLsp) -> RuLsp {
	RuLsp(state with exit = 2);
}

ruLspCancelRequestCallback(json : Json, state : RuLsp) -> RuLsp {
	switch (json2LspCancelParams(json)) {
		Some(params): {
			if (!containsSet(state.processed, params.id)) {
				ruLspWriteError(params.id, lspRequestCancelled, "request with id = '" + json2string(params.id) + "' is canceled", JsonNull(), state.log);
				RuLsp(state with processed = insertSet(state.processed, params.id));
			} else {
				state;
			}
		}
		None(): {
			ruLspWriteError(JsonNull(), lspInvalidParams, "expecting the LspCancelParams, got: " + json2string(json), JsonNull(), state.log);
			state;
		}
	}
}

ruLspSetTraceCallback(json : Json, state : RuLsp) -> RuLsp {
	switch (json2LspSetTrace(json)) {
		Some(params): {
			RuLsp(state with clientConf = LspInitializeParams(state.clientConf with trace = params.value));
		}
		None(): {
			ruLspWriteError(JsonNull(), lspInvalidParams, "expecting the SetTraceParams, got: " + json2string(json), JsonNull(), state.log);
			state;
		}
	}
}

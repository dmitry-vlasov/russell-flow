import lsp/util;
import lsp/args;

export {
	ruLspTextDocumentMethods : Tree<string, (RuLspArgs) -> void>;
}

ruLspTextDocumentMethods = pairs2tree([
	Pair("textDocument/didOpen", ruLspTextDocumentDidOpen),
	Pair("textDocument/didClose", ruLspTextDocumentDidClose),
	Pair("textDocument/didChange", ruLspTextDocumentDidChange),
	Pair("textDocument/didSave",ruLspTextDocumentDidSave),
	Pair("textDocument/documentSymbol", ruLspTextDocumentDocumentSymbol),
	Pair("textDocument/declaration", ruLspTextDocumentDeclaration),
	Pair("textDocument/definition", ruLspTextDocumentDefinition),
	Pair("textDocument/references", ruLspTextDocumentReferences),
	Pair("textDocument/hover", ruLspTextDocumentHover),
	Pair("textDocument/rename", ruLspTextDocumentRename),
	Pair("textDocument/codeAction", ruLspTextDocumentCodeAction),
]);

ruLspTextDocumentDidOpen(call: RuLspArgs) -> void {
	switch (json2LspTextDocumentItem(getJsonObjectField(call.params, "textDocument"))) {
		Some(textitem): {
			file = ruCorrectUriPath(textitem.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)), 
					ScTask("cache-load", makeTree1("file", file)), 
					ScTask("sync-file-source", setTree(makeTree1("file", file), "text", textitem.text))
				]),
				\code -> {
					if (code != 0) {
						call.out_cb(ruLspErrorResponse(call.id, 1, "error at opening: " + file + "\n" + strGlue(^out_lines, "\n")));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentDidClose(call: RuLspArgs) -> void {
	switch (json2LspTextDocumentItem(getJsonObjectField(call.params, "textDocument"))) {
		Some(textitem): {
			// Do nothing
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentDidChange(call: RuLspArgs) -> void {
	switch (json2LspDidChangeTextDocumentParams(call.params)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("sync-file-changed", setTree(makeTree1("file", file), "change-json", json2string(call.params)))
				]),
				\code -> {
					if (code != 0) {
						call.out_cb(ruLspErrorResponse(call.id, 1, "error at applying changes to: " + file + "\n" + strGlue(^out_lines, "\n")));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentDidSave(call: RuLspArgs) -> void {
	switch (json2LspDidSaveTextDocumentParams(call.params)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("sync-file-saved", makeTree1("file", file))
				]),
				\code -> {
					if (code != 0) {
						call.out_cb(ruLspErrorResponse(call.id, 1, "error at saving: " + file + "\n" + strGlue(^out_lines, "\n")));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentDocumentSymbol(call: RuLspArgs) -> void {
	switch (json2LspTextDocumentIdentifier(getJsonObjectField(call.params, "textDocument"))) {
		Some(textid): {
			file = ruCorrectUriPath(textid.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("info-outline", makeTree1("file", file))
				]),
				\code -> {
					if (ruDetectLspError(^out_lines, conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						symbols = ruLspParseSymbols(^out_lines);
						call.out_cb(ruLspNormalResponse(call.id, JsonArray(symbols)));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text document id is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentDeclaration(call: RuLspArgs) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("info-decl", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(textpos.position.line)), 
						Pair("col", i2s(textpos.position.character))
					]))
				]),
				\code -> {
					if (ruDetectLspError(^out_lines, conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = ruLspParseLocations(^out_lines);
						call.out_cb(ruLspNormalResponse(call.id, JsonArray(locations)));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentDefinition(call: RuLspArgs) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("info-decl", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(textpos.position.line)), 
						Pair("col", i2s(textpos.position.character))
					]))
				]),
				\code -> {
					if (ruDetectLspError(^out_lines, conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = ruLspParseLocations(^out_lines);
						call.out_cb(ruLspNormalResponse(call.id, JsonArray(locations)));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentReferences(call: RuLspArgs) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("info-uses", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(textpos.position.line)), 
						Pair("col", i2s(textpos.position.character))
					]))
				]),
				\code -> {
					if (ruDetectLspError(^out_lines, conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = ruLspParseLocations(^out_lines);
						call.out_cb(ruLspNormalResponse(call.id, JsonArray(locations)));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentHover(call: RuLspArgs) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("info-hover", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(textpos.position.line)), 
						Pair("col", i2s(textpos.position.character))
					]))
				]),
				\code -> {
					if (ruDetectLspError(^out_lines, conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						out = strGlue(^out_lines, "\n");
						if (isNotSpace(out)) {
							hover = LspHover([LspMarkedString("russell", out)], None());
							call.out_cb(ruLspNormalResponse(call.id, lspHover2Json(hover)));
						} else {
							call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
						}
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentRename(call: RuLspArgs) -> void {
	switch (json2LspRename(call.params)) {
		Some(rename): {
			file = ruCorrectUriPath(rename.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("rename", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(rename.position.line)), 
						Pair("col", i2s(rename.position.character)),
						Pair("to", rename.newName)
					]))
				]),
				\code -> {
					if (ruDetectLspError(^out_lines, conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
		}
	}
}

ruLspTextDocumentCodeAction(call: RuLspArgs) -> void {
	switch (json2LspCodeActionParams(call.params)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(call.conf, file);
			out_lines = ref [];
			call.process(
				ScSeq([
					ScTask("conf-set", ruConf2Tree(conf)),
					ScTask("actions", pairs2tree([
						Pair("file", file),
						Pair("line", i2s(params.range.start.line)), 
						Pair("col", i2s(params.range.start.character)),
					]))
				]),
				\code -> {
					if (ruDetectLspError(^out_lines, conf)) {
						call.out_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						out = strGlue(^out_lines, "\n");
						call.out_cb(ruLspNormalResponse(call.id, parseJson(out)));
					}
				},
				ruLspMakeOut(out_lines, conf)
			);
		}
		None(): {
			call.out_cb(ruLspErrorResponse(call.id, 1, "code action params are invalid: " + json2string(call.params)));
		}
	}
}

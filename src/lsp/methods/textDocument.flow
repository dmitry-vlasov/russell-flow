import lsp/util;
import lsp/method;

export {
	ruLspTextDocumentMethods : Tree<string, RuLspMethod>;
}

ruLspTextDocumentMethods = pairs2tree([
	Pair("textDocument/didOpen", RuLspMethod(ruLspTextDocumentDidOpen, false, nop1)),
	Pair("textDocument/didClose", RuLspMethod(ruLspTextDocumentDidClose, false, nop1)),
	Pair("textDocument/didChange", RuLspMethod(ruLspTextDocumentDidChange, false, nop1)),
	Pair("textDocument/didSave", RuLspMethod(ruLspTextDocumentDidSave, false, nop1)),
	Pair("textDocument/documentSymbol", RuLspMethod(ruLspTextDocumentDocumentSymbol, true, nop1)),
	Pair("textDocument/declaration", RuLspMethod(ruLspTextDocumentDeclaration, true, nop1)),
	Pair("textDocument/definition", RuLspMethod(ruLspTextDocumentDefinition, true, nop1)),
	Pair("textDocument/references", RuLspMethod(ruLspTextDocumentReferences, true, nop1)),
	Pair("textDocument/hover", RuLspMethod(ruLspTextDocumentHover, true, nop1)),
	Pair("textDocument/rename", RuLspMethod(ruLspTextDocumentRename, true, nop1)),
	Pair("textDocument/codeAction", RuLspMethod(ruLspTextDocumentCodeAction, true, nop1)),
]);

ruLspTextDocumentDidOpen(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentItem(getJsonObjectField(json, "textDocument"))) {
		Some(textitem): {
			file = ruCorrectUriPath(textitem.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)), 
				ScTask("cache-load", makeTree1("file", file)), 
				ScTask("sync-file-source", setTree(makeTree1("file", file), "text", textitem.text))
			]);
		}
		None(): {
			env.out.onError("text document item is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentDidClose(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentItem(getJsonObjectField(json, "textDocument"))) {
		Some(textitem): {
			// Do nothing
			ScStop();
		}
		None(): {
			env.out.onError("text document item is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentDidChange(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspDidChangeTextDocumentParams(json)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("sync-file-changed", setTree(makeTree1("file", file), "change-json", json2string(json)))
			]);
		}
		None(): {
			env.out.onError("text document item is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentDidSave(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspDidSaveTextDocumentParams(json)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("sync-file-saved", makeTree1("file", file))
			]);
		}
		None(): {
			env.out.onError("text document item is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentDocumentSymbol(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument"))) {
		Some(textid): {
			file = ruCorrectUriPath(textid.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("info-outline", makeTree1("file", file))
			]);
		}
		None(): {
			env.out.onError("text document id is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentDeclaration(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentPositionParams(json)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("info-decl", pairs2tree([
					Pair("file", file),
					Pair("line", i2s(textpos.position.line)), 
					Pair("col", i2s(textpos.position.character))
				]))
			]);
		}
		None(): {
			env.out.onError("text position is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentDefinition(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentPositionParams(json)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("info-decl", pairs2tree([
					Pair("file", file),
					Pair("line", i2s(textpos.position.line)), 
					Pair("col", i2s(textpos.position.character))
				]))
			]);
		}
		None(): {
			env.out.onError("text position is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentReferences(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentPositionParams(json)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("info-uses", pairs2tree([
					Pair("file", file),
					Pair("line", i2s(textpos.position.line)), 
					Pair("col", i2s(textpos.position.character))
				]))
			]);
		}
		None(): {
			env.out.onError("text position is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentHover(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentPositionParams(json)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("info-hover", pairs2tree([
					Pair("file", file),
					Pair("line", i2s(textpos.position.line)), 
					Pair("col", i2s(textpos.position.character))
				]))
			]);
		}
		None(): {
			env.out.onError("text position is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentRename(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspRename(json)) {
		Some(rename): {
			file = ruCorrectUriPath(rename.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("rename", pairs2tree([
					Pair("file", file),
					Pair("line", i2s(rename.position.line)), 
					Pair("col", i2s(rename.position.character)),
					Pair("to", rename.newName)
				]))
			]);
		}
		None(): {
			env.out.onError("text position is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspTextDocumentCodeAction(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspCodeActionParams(json)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScSeq([
				ScTask("conf-set", ruConf2Tree(conf)),
				ScTask("actions", pairs2tree([
					Pair("file", file),
					Pair("line", i2s(params.range.start.line)), 
					Pair("col", i2s(params.range.start.character)),
				]))
			]);
		}
		None(): {
			env.out.onError("code action params are invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

import lsp/util;
import lsp/method;

export {
	ruLspTextDocumentMethods() -> Tree<string, RuLspMethod>;
}

ruLspTextDocumentMethods()-> Tree<string, RuLspMethod> {
	pairs2tree([
		Pair("textDocument/didOpen", RuLspMethod(ruLspTextDocumentDidOpen, ruLspDefCallback)),
		Pair("textDocument/didClose", RuLspMethod(ruLspTextDocumentDidClose, ruLspDefCallback)),
		Pair("textDocument/didChange", RuLspMethod(ruLspTextDocumentDidChange, ruLspDefCallback)),
		Pair("textDocument/didSave", RuLspMethod(ruLspTextDocumentDidSave, ruLspDefCallback)),
		Pair("textDocument/documentSymbol", RuLspMethod(ruLspTextDocumentDocumentSymbol, ruLspDefCallback)),
		Pair("textDocument/declaration", RuLspMethod(ruLspTextDocumentDeclaration, ruLspDefCallback)),
		Pair("textDocument/definition", RuLspMethod(ruLspTextDocumentDefinition, ruLspDefCallback)),
		Pair("textDocument/references", RuLspMethod(ruLspTextDocumentReferences, ruLspDefCallback)),
		Pair("textDocument/hover", RuLspMethod(ruLspTextDocumentHover, ruLspDefCallback)),
		Pair("textDocument/rename", RuLspMethod(ruLspTextDocumentRename, ruLspDefCallback)),
		Pair("textDocument/codeAction", RuLspMethod(ruLspTextDocumentCodeAction, ruLspDefCallback)),
	]);
}

ruLspTextDocumentDidOpen(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentItem(getJsonObjectField(json, "textDocument"))) {
		Some(textitem): {
			file = ruCorrectUriPath(textitem.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))), 
				ScTask("cache-load", [ScTaskArg("file", ScString(file))]), 
				ScTask("sync-file-source", [
					ScTaskArg("file", ScString(file)), 
					ScTaskArg("text", ScString(textitem.text))
				])
			]);
		}
		None(): {
			env.out.error("text document item is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentDidClose(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument"))) {
		Some(textidentifier): {
			// Do nothing
			ScAction("stop", []);
		}
		None(): {
			env.out.error("text document item is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentDidChange(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspDidChangeTextDocumentParams(json)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("sync-file-changed", [
					ScTaskArg("file", ScString(file)), 
					ScTaskArg("change-json", ScString(json2string(json)))
				])
			]);
		}
		None(): {
			env.out.error(": " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentDidSave(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspDidSaveTextDocumentParams(json)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("sync-file-saved", [ScTaskArg("file", ScString(file))])
			]);
		}
		None(): {
			env.out.error("text document item is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentDocumentSymbol(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument"))) {
		Some(textid): {
			file = ruCorrectUriPath(textid.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("info-outline", [ScTaskArg("file", ScString(file))])
			]);
		}
		None(): {
			env.out.error("text document id is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentDeclaration(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentPositionParams(json)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("info-decl", [
					ScTaskArg("file", ScString(file)),
					ScTaskArg("line", ScInt(textpos.position.line)), 
					ScTaskArg("col", ScInt(textpos.position.character))
				])
			]);
		}
		None(): {
			env.out.error("text position is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentDefinition(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentPositionParams(json)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("info-decl", [
					ScTaskArg("file", ScString(file)),
					ScTaskArg("line", ScInt(textpos.position.line)), 
					ScTaskArg("col", ScInt(textpos.position.character))
				])
			]);
		}
		None(): {
			env.out.error("text position is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentReferences(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentPositionParams(json)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("info-uses", [
					ScTaskArg("file", ScString(file)),
					ScTaskArg("line", ScInt(textpos.position.line)), 
					ScTaskArg("col", ScInt(textpos.position.character))
				])
			]);
		}
		None(): {
			env.out.error("text position is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentHover(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspTextDocumentPositionParams(json)) {
		Some(textpos): {
			file = ruCorrectUriPath(textpos.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("info-hover", [
					ScTaskArg("file", ScString(file)),
					ScTaskArg("line", ScInt(textpos.position.line)), 
					ScTaskArg("col", ScInt(textpos.position.character))
				])
			]);
		}
		None(): {
			env.out.error("text position is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentRename(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspRename(json)) {
		Some(rename): {
			file = ruCorrectUriPath(rename.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("rename", [
					ScTaskArg("file", ScString(file)),
					ScTaskArg("line", ScInt(rename.position.line)), 
					ScTaskArg("col", ScInt(rename.position.character)),
					ScTaskArg("to", ScString(rename.newName))
				])
			]);
		}
		None(): {
			env.out.error("text position is invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

ruLspTextDocumentCodeAction(json : Json, env : RuEnv) -> ScComm {
	switch (json2LspCodeActionParams(json)) {
		Some(params): {
			file = ruCorrectUriPath(params.textDocument.uri.path);
			conf = ruLspFileConfig(env.conf, file);
			ScCommSeq([
				ScTask("conf-set", ruTree2ScTaskArgs(ruConf2Tree(conf))),
				ScTask("actions", [
					ScTaskArg("file", ScString(file)),
					ScTaskArg("line", ScInt(params.range.start.line)), 
					ScTaskArg("col", ScInt(params.range.start.character)),
				])
			]);
		}
		None(): {
			env.out.error("code action params are invalid: " + json2string(json), []);
			ScAction("stop", []);
		}
	}
}

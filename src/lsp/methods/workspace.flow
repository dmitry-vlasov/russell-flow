import lsp/util;
import lsp/args;
import base/env;

export {
	ruLspWorkspaceMethods : Tree<string, (RuLspArgs) -> void>;
}

ruLspWorkspaceMethods = pairs2tree([
	Pair("workspace/symbol", ruLspWorkspaceSymbol),
	Pair("workspace/executeCommand", ruLspWorkspaceExecuteCommand),
]);

ruLspWorkspaceSymbol(call: RuLspArgs) -> void {
	switch (json2LspWorkspaceSymbolParams(call.params)) {
		Some(symbol): {
			lines = ref [];
			datas = ref [];
			call.process(
				ScTask("info-symbol", makeTree1("name", symbol.query)),
				\code -> {
					if (ruDetectLspError(^lines, call.conf)) {
						call.data_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						out = strGlue(^lines, "\n");
						call.data_cb(ruLspNormalResponse(call.id, parseJson(out)));
					}
				},
				ruLspMakeOut(lines, datas, call.conf)
			);
		}
		None(): {
			call.data_cb(ruLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
		}
	}
}

ruLspWorkspaceExecuteVerify(call : RuLspArgs, commandParams: LspExecuteCommandParams) -> void {
	if (length(commandParams.arguments) == 0) {
		call.data_cb(ruLspErrorResponse(call.id, 1, "no file for verification is provided"));
	} else {
		params = map(commandParams.arguments, \param -> getJsonStringValue(param, ""));
		switch (find(params, \param -> startsWith(param, "file="))) {
			Some(param): {
				file = substring(param, 5, strlen(param) - 5);
				conf = ruLspFileConfig(call.conf, file);
				target = if (length(params) < 2) file else params[1];
				lines = ref [];
				datas = ref [];
				env = RuEnv(conf, ruLspMakeOutMessage(lines, datas, conf, call.data_cb));
				call.process(
					ScSeq([
						ScTask("conf-set", ruConf2Tree(RuConf(conf with verbose=1))),
						ScTask("read", makeTree1("file", file)),
						ScTask("verify", makeTree1("target", target))
					]),
					nop1,
					env.out
				);
			}
			None(): {
				call.data_cb(ruLspErrorResponse(call.id, 1, "verify command demands a file=... parameter"));
			}
		}
	}
}

ruLspWorkspaceExecuteFindSymbol(call : RuLspArgs, commandParams: LspExecuteCommandParams) -> void {
	if (length(commandParams.arguments) == 1) {
		name = getJsonStringValue(commandParams.arguments[0], "");
		if (name != "") {
			lines = ref [];
			datas = ref [];
			call.process(
				ScSeq([ScTask("info-find", makeTree1("name", name))]),
				\code -> {
					if (ruDetectLspError(^lines, call.conf)) {
						call.data_cb(ruLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = ruLspParseLocations(^lines);
						if (length(locations) != 1) {
							call.data_cb(ruLspNormalResponse(call.id, JsonNull()));
						} else {
							call.data_cb(ruLspNormalResponse(call.id, locations[0]));
						}
					}
				},
				ruLspMakeOut(lines, datas, call.conf)
			);
		} else {
			call.data_cb(ruLspErrorResponse(call.id, 1, "find-symbol first parameter must be a non-empty string"));
		}
	} else {
		call.data_cb(ruLspErrorResponse(call.id, 1, "find-symbol takes a parameter: a symbol name. Passed " + i2s(length(commandParams.arguments)) + " args."));
	}
}

ruLspWorkspaceExecuteMathInfo(call: RuLspArgs, commandParams: LspExecuteCommandParams) -> void {
	kind = if (length(commandParams.arguments) > 0) getJsonStringValue(commandParams.arguments[0], "") else "";
	lines = ref [];
	datas = ref [];
	call.process(
		ScTask("info-math", makeTree1("kind", kind)),
		\code -> {
			out = strGlue(^lines, "\n");
			if (ruDetectLspError(^lines, call.conf)) {
				call.data_cb(ruLspNotification("console/message", JsonString(out)));
				call.data_cb(ruLspNormalResponse(call.id, JsonNull()));
			} else {
				//call.data_cb(ruLspNormalResponse(call.id, parseJson(out)));
				math_info = parseJsonSafe(concatStrings(^datas));
				call.data_cb(ruLspNormalResponse(call.id, math_info));
			}
		},
		ruLspMakeOut(lines, datas, call.conf)
	);
}

ruLspWorkspaceExecuteGeneralize(call: RuLspArgs, commandParams: LspExecuteCommandParams) -> void {
	kind = if (length(commandParams.arguments) > 0) getJsonStringValue(commandParams.arguments[0], "") else "";
	lines = ref [];
	datas = ref [];
	call.process(
		ScTask("generalize", makeTree1("kind", kind)),
		\code -> {
			out = strGlue(^lines, "\n");
			if (ruDetectLspError(^lines, call.conf)) {
				call.data_cb(ruLspNotification("console/message", JsonString(out)));
				call.data_cb(ruLspNormalResponse(call.id, JsonNull()));
			} else {
				call.data_cb(ruLspNormalResponse(call.id, parseJson(out)));
			}
		},
		ruLspMakeOut(lines, datas, call.conf)
	);
}

ruLspWorkspaceExecuteACommand(call: RuLspArgs, commandParams: LspExecuteCommandParams) -> void {
	if (length(commandParams.arguments) > 0) {
		script_src = getJsonStringValue(commandParams.arguments[0], "");
		do_not_log = strContains(script_src, "do_not_log_this");
		lines = ref [];
		datas = ref [];
		switch (ruParseScript(script_src)) {
			Some(src): {
				call.process(
					src.script,
					\code -> {
						out = strGlue(^lines, "\n");
						if (ruDetectLspError(^lines, call.conf)) {
							if (do_not_log) {
								call.data_cb(ruLspNotification("console/message", JsonString(out)));
							}
							call.data_cb(ruLspNormalResponse(call.id, JsonNull()));
						} else {
							call.data_cb(ruLspNormalResponse(call.id, JsonString(out)));
						}
					},
					if (do_not_log) {
						ruLspMakeOut(lines, datas, call.conf);
					} else {
						ruLspMakeOutMessage(lines, datas, call.conf, call.data_cb);
					}
				);
			}
			None(): {
				ruLspServerLog("Syntax error in script: \n" + script_src + "\n", call.conf);
				call.data_cb(ruLspNormalResponse(call.id, JsonNull()));
			}
		}
	} else {
		call.data_cb(ruLspErrorResponse(call.id, 1, "command takes at least one parameter: the command name itself. Passed " + i2s(length(commandParams.arguments)) + " args."));
	}
}

ruLspWorkspaceExecuteCommand(call: RuLspArgs) -> void {
	switch (json2LspExecuteCommandParams(call.params)) {
		Some(commandParams): {
			if (commandParams.command == "verify") {
				ruLspWorkspaceExecuteVerify(call, commandParams);
			} else if (commandParams.command == "find-symbol") {
				ruLspWorkspaceExecuteFindSymbol(call, commandParams);
			} else if (commandParams.command == "math-info") {
				ruLspWorkspaceExecuteMathInfo(call, commandParams);
			//} else if (commandParams.command == "generalize") {
			//	ruLspWorkspaceExecuteGeneralize(call, commandParams);
			} else if (commandParams.command == "command") {
				ruLspWorkspaceExecuteACommand(call, commandParams);
			} else {
				call.data_cb(ruLspErrorResponse(call.id, 1, "command '" + commandParams.command + "' is unknown"));
			}
		}
		None(): {
			call.data_cb(ruLspErrorResponse(call.id, 1, "ExecuteCommand request is illegal"));
		}
	}
}

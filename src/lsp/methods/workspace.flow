import lsp/util;
import lsp/method;

export {
	ruLspWorkspaceMethods : Tree<string, RuLspMethod>;
}

ruLspWorkspaceMethods = pairs2tree([
	Pair("workspace/symbol", RuLspMethod(ruLspWorkspaceSymbol, true, nop1)),
	Pair("workspace/executeCommand", RuLspMethod(ruLspWorkspaceExecuteCommand, true, nop1)),
]);

ruLspWorkspaceSymbol(json : Json, env : RuEnv) -> ScScript {
	switch (json2LspWorkspaceSymbolParams(json)) {
		Some(symbol): {
			ScTask("info-symbol", makeTree1("name", symbol.query));
		}
		None(): {
			env.out.onError("text position is invalid: " + json2string(json), []);
			ScStop();
		}
	}
}

ruLspWorkspaceExecuteVerify(json : Json, env : RuEnv, commandParams: LspExecuteCommandParams) -> ScScript {
	if (length(commandParams.arguments) == 0) {
		env.out.onError("no file for verification is provided", []);
		ScStop();
	} else {
		params = map(commandParams.arguments, \param -> getJsonStringValue(param, ""));
		switch (find(params, \param -> startsWith(param, "file="))) {
			Some(param): {
				file = substring(param, 5, strlen(param) - 5);
				conf = ruLspFileConfig(env.conf, file);
				target = if (length(params) < 2) file else params[1];
				ScSeq([
					ScTask("conf-set", ruConf2Tree(RuConf(conf with verbose=1))),
					ScTask("read", makeTree1("file", file)),
					ScTask("verify", makeTree1("target", target))
				]);
			}
			None(): {
				env.out.onError("verify command demands a file=... parameter", []);
				ScStop();
			}
		}
	}
}

ruLspWorkspaceExecuteFindSymbol(json : Json, env : RuEnv, commandParams: LspExecuteCommandParams) -> ScScript {
	if (length(commandParams.arguments) == 1) {
		name = getJsonStringValue(commandParams.arguments[0], "");
		if (name != "") {
			ScSeq([ScTask("info-find", makeTree1("name", name))]);
		} else {
			env.out.onError("find-symbol first parameter must be a non-empty string", []);
			ScStop();
		}
	} else {
		env.out.onError("find-symbol takes a parameter: a symbol name. Passed " + i2s(length(commandParams.arguments)) + " args.", []);
		ScStop();
	}
}

ruLspWorkspaceExecuteMathInfo(json : Json, env : RuEnv, commandParams: LspExecuteCommandParams) -> ScScript {
	kind = if (length(commandParams.arguments) > 0) getJsonStringValue(commandParams.arguments[0], "") else "";
	ScTask("info-math", makeTree1("kind", kind));
}

ruLspWorkspaceExecuteMathOntology(json : Json, env : RuEnv, commandParams: LspExecuteCommandParams) -> ScScript {
	ScTask("info-ontology", makeTree());
}

ruLspWorkspaceExecuteGeneralize(json : Json, env : RuEnv, commandParams: LspExecuteCommandParams) -> ScScript {
	kind = if (length(commandParams.arguments) > 0) getJsonStringValue(commandParams.arguments[0], "") else "";
	ScTask("generalize", makeTree1("kind", kind));
}

ruLspWorkspaceExecuteACommand(json : Json, env : RuEnv, commandParams: LspExecuteCommandParams) -> ScScript {
	if (length(commandParams.arguments) > 0) {
		script_src = getJsonStringValue(commandParams.arguments[0], "");
		switch (ruParseScript(script_src)) {
			Some(src): {
				src.script;
			}
			None(): {
				ruLspServerLog("Syntax error in script: \n" + script_src + "\n", env.conf);
				ScStop();
			}
		}
	} else {
		env.out.onError("command takes at least one parameter: the command name itself. Passed " + i2s(length(commandParams.arguments)) + " args.", []);
		ScStop();
	}
}

ruLspWorkspaceExecuteCommand(json : Json, env : RuEnv) -> ScScript {
	switch (json2LspExecuteCommandParams(json)) {
		Some(commandParams): {
			if (commandParams.command == "verify") {
				ruLspWorkspaceExecuteVerify(json, env, commandParams);
			} else if (commandParams.command == "find-symbol") {
				ruLspWorkspaceExecuteFindSymbol(json, env, commandParams);
			} else if (commandParams.command == "math-info") {
				ruLspWorkspaceExecuteMathInfo(json, env, commandParams);
			} else if (commandParams.command == "math-ontology") {
				ruLspWorkspaceExecuteMathOntology(json, env, commandParams);
			//} else if (commandParams.command == "generalize") {
			//	ruLspWorkspaceExecuteGeneralize(call, commandParams);
			} else if (commandParams.command == "command") {
				ruLspWorkspaceExecuteACommand(json, env, commandParams);
			} else {
				env.out.onError("command '" + commandParams.command + "' is unknown", []);
				ScStop();
			}
		}
		None(): {
			env.out.onError("ExecuteCommand request is illegal", []);
			ScStop();
		}
	}
}

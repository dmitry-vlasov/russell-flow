import text/utf8;
import formats/json/json;
import sys/system;

export {
	ruLspDecodeJsonRequest(s : string) -> Json;
	ruLspReadRequest() -> Maybe<RuLspRequest>;
	RuLspRequest(
		request : string, // the whole request string
		length : int,  // Content-Length
		type : string, // Content-Type
		json : string  // the Json description of request
	);
}

ruLspDecodeJsonRequest(s : string) -> Json {
	json = parseJsonSafe(s);
	switch (json) {
		JsonObject(members): if (jsonObjectHasField(json, "jsonrpc")) json else JsonNull();
		default: JsonNull();
	}
}

ruLspReadRequest() -> Maybe<RuLspRequest> {
	header = readUntil("\r\n\r\n"); // \r\n\r\n is included into header
	lines = filtermap(strSplit(header, "\n"), \line -> {
		trimmed = trim2(line, " \r\n\t");
		if (trimmed != "") Some(line) else None();
	});
	key_value = pairs2tree(map(lines, \line -> {
			key_val = strSplit(line, ":");
			if (length(key_val) == 1) {
				Pair(line, line);
			} else {
				Pair(trim2(key_val[0], " \t\n\r"), trim2(key_val[1], " \t\n\r"));
			}
	}));
	switch (lookupTree(key_value, "Content-Length")) {
		Some(len): {
			json = readBytes(s2i(len));
			Some(RuLspRequest(
				header + json,
				s2i(len), 
				lookupTreeDef(key_value, "Content-Type", ""),
				json
			));
		}
		None(): None();
	}
}

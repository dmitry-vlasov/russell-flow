import text/utf8;
import formats/json/json_parse;
import sys/system;
import base/log;
import lsp/log;

export {
	RuLspRawHeader(
		raw : string, // the whole header raw string
		fields : Tree<string, string> // All key-value pairs from a header of a message
	);
	RuLspRaw ::= RuLspRawError, RuLspRawMessage;
	RuLspRawError(
		header : string,
		content : string
	);
	RuLspRawMessage(
		raw : string, // the whole message raw string
		header : RuLspRawHeader, 
		content : Json  // the Json description of request as a string
	);
	ruLspReadRawMessage(log : RuLspLog) -> RuLspRaw;

	ruLspWriteJson(json : Json, log : RuLspLog) -> void;

	native ruPrinted : io () -> string = Native.printed;
	native ruSetDebugOut : io () -> void = Native.setDebugOut;
}

ruLspReadRawMessage(log : RuLspLog) -> RuLspRaw {
	header = ruLspDecodeRawHeader(readUntil("\r\n\r\n")); // \r\n\r\n is included into header
	raw = ruLspDecodeRawMessage(header);
	switch (raw) {
		RuLspRawError(head, content): {
			log.error("Error while reading:\n" + head + content);
		}
		RuLspRawMessage(msg,__, content): {
			if (!strContains(msg, "do_not_log_this")) {
				log.message("Read: " + ruJson2sketch(content));
			}
		}
	}
	raw;
}

ruLspDecodeRawHeader(raw : string) -> RuLspRawHeader {
	lines = filtermap(strSplit(raw, "\n"), \line -> {
		trimmed = trim2(line, " \r\n\t");
		if (trimmed != "") Some(line) else None();
	});
	fields = pairs2tree(map(lines, \line -> {
			key_val = strSplit(line, ":");
			if (length(key_val) == 1) {
				Pair(line, line);
			} else {
				Pair(trim2(key_val[0], " \t\n\r"), trim2(key_val[1], " \t\n\r"));
			}
	}));
	RuLspRawHeader(raw, fields);
}

ruLspDecodeRawMessage(header : RuLspRawHeader) -> RuLspRaw {
	switch (lookupTree(header.fields, "Content-Length")) {
		Some(len): {
			raw = readBytes(s2i(len));
			switch (parseJsonSafer(raw)) {
				Some(json): RuLspRawMessage(raw, header, json);
				None(): RuLspRawError(header.raw, raw);
			}
		}
		None(): {
			RuLspRawError(header.raw, "");
		}
	}
}

ruLspWriteJson(json : Json, log : RuLspLog) -> void {
	log.message("Sent: " + ruJson2sketch(json));
	js_out = json2string(json);
	js_len = strlen(expandUtf8(js_out));
	print("Content-Length: " + i2s(js_len) + "\r\n\r\n" + js_out);
}

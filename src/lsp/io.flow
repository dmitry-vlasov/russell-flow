import text/utf8;
import formats/json/json;
import sys/system;

export {
	RuLspRawMessage(
		raw : string,                  // the whole message raw string
		header : Tree<string, string>, // All key-value pairs from a header of a message
		json : string                  // the Json description of request as a string
	);
	ruLspReadRawMessage() -> Maybe<RuLspRawMessage>;

	ruLspWriteJson(json : Json) -> void;
}

ruLspReadRawMessage() -> Maybe<RuLspRawMessage> {
	header = readUntil("\r\n\r\n"); // \r\n\r\n is included into header
	lines = filtermap(strSplit(header, "\n"), \line -> {
		trimmed = trim2(line, " \r\n\t");
		if (trimmed != "") Some(line) else None();
	});
	key_value = pairs2tree(map(lines, \line -> {
			key_val = strSplit(line, ":");
			if (length(key_val) == 1) {
				Pair(line, line);
			} else {
				Pair(trim2(key_val[0], " \t\n\r"), trim2(key_val[1], " \t\n\r"));
			}
	}));
	switch (lookupTree(key_value, "Content-Length")) {
		Some(len): {
			json = readBytes(s2i(len));
			Some(RuLspRawMessage(
				header + json,
				//s2i(len), 
				//lookupTreeDef(key_value, "Content-Type", ""),
				key_value,
				json
			));
		}
		None(): None();
	}
}

ruLspWriteJson(json : Json) -> void {
	js_out = json2string(json);
	js_len = strlen(expandUtf8(js_out));
	print("Content-Length: " + i2s(js_len) + "\r\n\r\n" + js_out);
}

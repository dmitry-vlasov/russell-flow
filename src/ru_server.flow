import server/http;
import ru_lsp;
import ru_run;
import ru_log;

export {
	// A language server working over http.
	ruHttpServer(conf : RuConf) -> void;

	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	ruConsoleServer(conf : RuConf) -> void;
}

ruDecodeConfigRequest(s : string) -> Maybe<RuConf> {
	conf = deserialize(s, IllegalStruct());
	if (conf == IllegalStruct()) None() else {
		switch (conf) {
			RuConf(__,__,__,__,__,__,__,__,__): {
				Some(RuConf(conf with threadId = s2i(getThreadId())));
			}
			default: None();
		}
	}
}

ruProcessRequest(serverConf : RuConf, req : string, out_cb : (int, string) ->  void, loop_cb : () -> void, exit_cb : () -> void, run : (RuConf, (int) -> void) -> void) -> void {
	switch (ruJson2Conf(parseJsonSafe(req))) {
		Some(conf): {
			if (ruOptIsTrue("shutdown-server", conf)) {
				exit_cb();
			} else {
				if (!ruOptIsSet("hover", conf) && ruOpt("server", serverConf) == "http") {
					ruPrintln("Processing '" + conf.file + "' on http server.", conf);
					ruPrintln("Conf: " + ruOptsDescr(conf.opts), conf);
				}
				start_time = timestamp();
				run(conf, \code -> {
					if (!ruOptIsSet("hover", conf) && ruOpt("server", serverConf) == "http") {
						ruPrintln("finished '" + conf.file + "' in " + d2st((timestamp() - start_time) / 1000.0, 2) + " s.", conf);
					}
					out_cb(code, ruOutput(conf));
					ruClearOutput(conf);
					loop_cb();
				});
			}
		}
		None(): {
			json = ruDecodeJsonRequest(req);
			if (json == JsonNull()) {
				out_cb(200, "WARNING: Illegal request.");
				loop_cb();
			} else {
				ruLspProcessRequest(serverConf, json, \msg -> out_cb(0, msg), loop_cb, exit_cb, run);
			}
		}
	}
}

ruConsoleServer(conf : RuConf) -> void { 
	ruServerLog("Console server started.", conf);
	ruSetSkipPrinting(conf, true);
	ruRunConsoleServer(conf);
}

ruRunConsoleServer(conf : RuConf) -> void {
	switch (ruLspReadRequest()) {
		Some(req): {
			ruServerLog("Console Request: " + ruCutLongString(ruServerEscapeString(req.request)), conf);
			start_time = timestamp();
			ruProcessRequest(conf, req.json, 
				\__, resp -> {
					ruServerLog("Console Response[" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + ruCutLongString(ruServerEscapeString(resp)), conf);
					print(resp);
				},
				\-> ruRunConsoleServer(conf),
				\-> {
					ruServerLog("Console server stopped.", conf);
					quit(0);
				},
				ruRun
			);
		}
		None(): {
			ruServerLog("Failed to read a request.", conf);
			ruRunConsoleServer(conf);
		}
	}
}

ruHttpServer(conf : RuConf) -> void {
	port = s2i(ruOptDef("server-port", "20001", conf));
	server = ref nop;
	server := createHttpServer(port,
		\-> {
			ruServerLog("Http server started.", conf);
			ruPrintln("Http server started.", conf)
		},
		\request, response -> {
			start_time = timestamp();
			req_string = ruServerEscapeString(request.body);
			ruServerLog("Http Request: " + ruCutLongString(ruServerEscapeString(request.body)), conf);
			ruProcessRequest(conf, request.body,
				\code, output -> {
					ruServerLog("Http Response[" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + ruCutLongString(ruServerEscapeString(output)), conf);
					HttpResponse(200 + code, output, []) |> response
				},
				nop,
				\-> {
					ruPrintln("Http server stopped.", conf);
					ruServerLog("Http server stopped.", conf);
					HttpResponse(200, ruOutput(conf), []) |> response;
					^server();
					quit(0);
				},
				ruRunLocal
			)
		}
	);
}

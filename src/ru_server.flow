import server/http;
import ru_lsp;
import ru_run;
import ru_log;

export {
	// A language server working over http.
	ruHttpServer(conf : RuConf) -> void;

	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	ruLspServer(conf : RuConf) -> void;

	ruConsoleServer(conf : RuConf) -> void;
}

ruProcessRequest(serverConf : RuConf, req : string, out_cb : (int, string) ->  void, loop_cb : () -> void, exit_cb : () -> void, run : (RuJob, (int) -> void) -> void) -> void {
	switch (ruJson2Job(parseJsonSafe(req))) {
		Some(job): {
			if (exists(job.tasks, \task -> task.command == "shutdown-server")) {
				exit_cb();
			} else {
				//if (!ruOptIsSet("hover", conf) && ruOpt("server", serverConf) == "http") {
				//	ruPrintln("Processing '" + conf.file + "' on http server.", conf);
				//	ruPrintln("Conf: " + ruOptsDescr(conf.opts), conf);
				//}
				start_time = timestamp();
				run(job, \code -> {
					//if (!ruOptIsSet("hover", conf) && ruOpt("server", serverConf) == "http") {
					//	ruPrintln("finished '" + conf.file + "' in " + d2st((timestamp() - start_time) / 1000.0, 2) + " s.", conf);
					//}
					out_cb(code, ruOutput());
					ruClearOutput();
					loop_cb();
				});
			}
		}
		None(): {
			json = ruDecodeJsonRequest(req);
			if (json == JsonNull()) {
				out_cb(200, "WARNING: Illegal request.");
				loop_cb();
			} else {
				ruLspProcessRequest(serverConf, json, \msg -> out_cb(0, msg), loop_cb, exit_cb, run);
			}
		}
	}
}

ruLspServer(conf : RuConf) -> void { 
	ruServerLog("Server started.", conf);
	ruSkipPrinting := true;
	ruRunLspServer(conf);
}

ruRunLspServer(conf : RuConf) -> void {
	switch (ruLspReadRequest()) {
		Some(req): {
			ruServerLog("Request: " + ruCutLongString(ruServerEscapeString(req.request)), conf);
			start_time = timestamp();
			ruProcessRequest(conf, req.json, 
				\__, resp -> {
					ruServerLog("Response[" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + ruCutLongString(ruServerEscapeString(resp)), conf);
					print(resp);
				},
				\-> ruRunLspServer(conf),
				\-> {
					ruServerLog("Server stopped.", conf);
					quit(0);
				},
				ruRun
			);
		}
		None(): {
			ruServerLog("Failed to read a request.", conf);
			ruRunLspServer(conf);
		}
	}
}

ruHttpServer(conf : RuConf) -> void {
	port = s2i(lookupTreeDef(conf.opts, "server-port", "20001"));
	server = ref nop;
	server := createHttpServer(port,
		\-> {
			ruServerLog("Server started.", conf);
			ruPrintln("Http server started.")
		},
		\request, response -> {
			start_time = timestamp();
			req_string = ruServerEscapeString(request.body);
			ruServerLog("Request: " + ruCutLongString(ruServerEscapeString(request.body)), conf);
			ruProcessRequest(conf, request.body,
				\code, output -> {
					ruServerLog("Response[" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + ruCutLongString(ruServerEscapeString(output)), conf);
					HttpResponse(200 + code, output, []) |> response
				},
				nop,
				\-> {
					ruPrintln("Http server stopped.");
					ruServerLog("Server stopped.", conf);
					HttpResponse(200, ruOutput(), []) |> response;
					^server();
					quit(0);
				},
				ruRunLocal
			)
		}
	);
}

ruConsoleServer(conf : RuConf) -> void {
	ruServerLog("Server started.", conf);
	ruPrintln("Type 'do=help' and press enter to get more information about REPL mode.");
	ruRunConsoleServer(conf);
	quit(0);
}

ruRunConsoleServer(conf : RuConf) -> void {
	command = ruReplReadCommand();
	if (command != [["exit"]]) {
		job = ruMakeJob(command);
		ruServerLog("Job: " + ruJob2s(job), conf);
		ruRun(job, \code -> ruRunConsoleServer(conf));
	} else {
		ruServerLog("Server stopped.", conf);
		ruPrintln("Bye.");
	}
}

ruReplReadCommand() -> [[string]] {
	print("> ");
	command = ltrim2(readUntil("\n"), " \r\n\t");
	if (command == "") ruReplReadCommand() else {
		filtermap(strSplit(command, " "), \s -> {
			param = trim2(s, " \t\n\r");
			if (param == "") None() else Some(strSplit(param, "="));
		});
	}
}

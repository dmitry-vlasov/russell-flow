import prover/ru_prover_util;
import ru_verify;

export {

	RuProverEnv(
		theorem : RuTheorem,
		tree : RuProverTree,
		unifyAssertion : (hyp : RuProverHyp) -> [RuUnified<RuAssertion>],
		unifyPremise   : (hyp : RuProverHyp) -> [RuUnified<RuHyp>],
		math : RuMath,
		fresher : (RuVar) -> RuVar,
		unconst : (RuExp) -> RuExp,
		proofs : ref [RuProof]
	);

	ruInitProver(theorem : RuTheorem, math : RuMath) -> RuProverEnv;
	ruExpandProp(prop : RuProverProp, env : RuProverEnv) -> RuProverEnv;
	ruProve(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv;

	ruCommandReproveTask(math : RuMath) -> RuMath;
}

ruInitProver(th : RuTheorem, math0 : RuMath) -> RuProverEnv {
	cth = ruConstTheorem(th, math0);
	math = cth.math;
	assertions = ruInitAssertionsIndex(th.name, math);
	premises = ruInitPremisesIndex(cth.const);
	vars = ref makeTree();
	root = RuProverRoot(ref [], cth.const.prop, ref []);
	env = RuProverEnv(
		th, //cth.const,
		RuProverTree([], root),
		\hyp -> ruUnifyIndex(hyp.expr, assertions, makeTree(), math),
		\hyp -> ruUnifyIndex(hyp.expr, premises, makeTree(), math),
		math,
		\v -> {
			vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
			RuVar(v.name + "_" + i2s(lookupTreeDef(^vars, v, 0)), v.type);
		},
		cth.unconst,
		ref []
	);
	ruExpandHyp(root, env);
}

ruExpandHyp(hyp : RuProverHyp, env : RuProverEnv) -> RuProverEnv {
	make_fresh = \vars, fresher -> foldSet(vars, makeTree(), \acc, v -> setTree(acc, v, RuExp([fresher(v)], -1)));
	iter(env.unifyAssertion(hyp), \unif -> {
			a_vars  = ruAssertion2Vars(unif.data);
			fresher = make_fresh(differenceSets(a_vars, buildSet(getTreeKeys(unif.sub))), env.fresher);
			maybeApply(ruCompose(unif.sub, fresher), \s_all -> {
				sub = filterTree(s_all, \v, __ -> !containsSet(a_vars, v));
				refArrayPush(
					hyp.children,
					RuProverProp(unif.data, ref [], 
						filterTree(s_all, \v, __ -> !containsSet(a_vars, v)),
						filterTree(s_all, \v, __ -> containsSet(a_vars, v)),
						ref [],
						hyp
					)
				);
			})
		}
	);
	leafs = switch (hyp) {
		RuProverExp(__,__,__, parent): removeFirst(env.tree.leafs, parent);
		RuProverRoot(__,__,__): [];
	}
	RuProverEnv(env with tree = RuProverTree(
		fold(^(hyp.children), leafs, \acc, p -> concat(acc, [p])),
		env.tree.root
	));
}

ruExpandProp(prop : RuProverProp, env : RuProverEnv) -> RuProverEnv {
	if (length(prop.assertion.hyps) == 0) {
		refArrayPush(prop.proofs, RuProverProofProp(prop, prop.sub, []));
		RuProverEnv(env with tree = RuProverTree(env.tree with leafs = removeFirst(env.tree.leafs, prop)));
	} else {
		env1 = fold(prop.assertion.hyps, env, \acc, h -> {
			ex = ruApplySubst(ruApplySubst(h.expr, prop.sub), prop.outer);
			hyp = RuProverExp(ref [], ex, ref [], prop);
			refArrayPush(prop.children, hyp);
			iter(env.unifyPremise(hyp), \unif -> {
				hex = ruApplySubst(unif.data.expr, unif.sub);
				hypProof = RuProverProofTop(hyp, hex, unif.data, unif.sub);
				refArrayPush(hyp.proofs, hypProof);
				ruAddProof(prop, hypProof, acc);
			});
			
			ruExpandHyp(hyp, acc);
		});
		RuProverEnv(env1 with tree = RuProverTree(env1.tree with leafs = removeFirst(env1.tree.leafs, prop)));
	}
}

ruAddProof(prop : RuProverProp, hypProof : RuProverProofHyp, env : RuProverEnv) -> void {
	if (length(^(prop.children)) == ruArity(prop.assertion)) {
		prod = map(^(prop.children), \hyp ->
			if (hyp == hypProof.node) [hypProof] else ^(hyp.proofs)
		);
		if (ruSizeCart(prod) > 0) {
			/*if (ruCardCart(prod) > 1000) {
				println("ruSizeCart(prod)=" + i2s(ruSizeCart(prod)));
			}*/
			if (ruSizeCart(prod) > 100000) {
				println("ruSizeCart(prod)=" + i2s(ruSizeCart(prod)));
			} else {
				ruAddProofVariant(prop, ruInitCart(prod), prod, env);
			}
		}
	}
}

ruAddProofVariant(prop : RuProverProp, v : [int], prod : [[RuProverProofHyp]], env : RuProverEnv) -> void {
	hypProofs = mapi(v, \i, n -> prod[i][n]);
	switch (ruUnifySubstVect(map(hypProofs, \hp -> hp.sub), env.math)) {
		Some(s):
			maybeApply(ruCompose(prop.sub, s), \theta ->
				if (ruCheckDisjs(theta, prop.assertion.disjs)) {
					refArrayPush(prop.proofs, RuProverProofProp(prop, theta, hypProofs));
				}
			);
		None(): { }
	}
	switch(ruNextCart(v, prod)) {
		Some(n): ruAddProofVariant(prop, n, prod, env);
		None(): { }
	}
}

ruBuildPropProofs(parent : RuProverHyp, proofs : [RuProverProofProp], env : RuProverEnv) -> void {
	n = length(^(parent.proofs));
	iter(proofs, \proof -> 
		refArrayPush(parent.proofs, 
			RuProverProofExp(
				parent,
				ruApplySubst(parent.expr, proof.sub),
				proof.sub,
				proof
			)
		)
	);
	switch (parent) {
		RuProverExp(__,__,__,grand): 
			ruBuildHypProofs(grand, tailFrom(^(parent.proofs), n), env);
		RuProverRoot(__,__,__):
			iter(tailFrom(^(parent.proofs), n), \root -> {
				steps = map(ruMakeLinearProof(ruMakeProofNode(root)), \step -> RuStep(step with expr = env.unconst(step.expr)));
				vars = values2tree(set2array(differenceSets(
					fold(steps, makeSet(), \acc, step -> mergeSets(acc, ruExp2Vars(step.expr.nodes))),
					ruAssertion2Vars(env.theorem)
				)), \v -> v.name);
				proof = RuProof(vars, makeSet(), steps, -1);
				switch (ruVerifyTheorem(RuTheorem(env.theorem with proof = proof), env.math)) {
					Some(th): refArrayPush(env.proofs, proof);
					None(): {
						println("wrong proof");
						println(ruProofNode2s(ruMakeProofNode(root), env.math));
						quit(-1);
					}
				}
			});
	}
}

ruBuildHypProofs(parent : RuProverProp, proofs : [RuProverProofHyp], env : RuProverEnv) -> void {
	n = length(^(parent.proofs));
	iter(proofs, \proof -> ruAddProof(parent, proof, env));
	ruBuildPropProofs(parent.parent, tailFrom(^(parent.proofs), n), env);
}

ruProve(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv {
	switch (tactic(env.tree)) {
		Some(prop): {
			env1 = ruExpandProp(prop, env);
			ruBuildPropProofs(prop.parent, ^(prop.proofs), env1);
			ruProve(env1, tactic);
		}
		None(): env;
	}
}

ruReproveTactic(theorem : RuTheorem, math : RuMath) -> (RuProverTree) -> Maybe<RuProverProp> {
	proof = ruMakeTreeProof(theorem, math);
	mapping = ref makeTree();
	\tree -> {
		switch (fold(tree.leafs, None(), \acc, n : RuProverProp -> 
			if (isSome(acc)) acc else {
				switch (n.parent) {
					RuProverExp(__,__,children, grand):
						switch (lookupTree(^mapping, grand)) {
							Some(m): {
								i = findiDef(^(grand.children), \x -> x == n.parent, -1);
								ch = m.children[i];
								switch (ch) {
									RuProofStep(assertion,__,__): 
										if (n.assertion == assertion) {
											Some(Pair(n, ch));
										} else None();
									RuProofHyp(__,__): None();
								}
							}
							None(): None();
						}
					RuProverRoot(__,__,__): 
						if (n.assertion == proof.assertion) {
							Some(Pair(n, proof));
						} else None();
				}
			}
		)) {
			Some(p): {
				mapping := setTree(^mapping, p.first, p.second);
				Some(p.first);
			}
			None(): None();
		}
	}
}

ruCommandReproveTask(math : RuMath) -> RuMath {
	target = lookupTreeDef(math.conf.opts, "default", "1");
	min_size = ref 10000;
	reproved_count = ref 0;
	failed_count = ref 0;
	failed_th_names = ref [];
	max_time = ref 0.0;
	max_th_name = ref "";
	reprove_th = \th -> {
		start = timestamp();
		env = ruInitProver(th, math);
		ruProve(env, ruReproveTactic(th, math));
		time = (timestamp() - start)/ 1000.0;
		if (time > ^max_time) {
			max_time := time;
			max_th_name := th.name;
		}
		if (^(env.proofs) == []) {
			atomicRefIntAddition(failed_count, 1);
			println("theorem " + th.name + " was NOT reproved in " + d2st(time, 2) + "s");
			if (length(th.proof.steps) < ^min_size + 10) {
				println(ru2s(th, math.rules));
				min_size := length(th.proof.steps);
			}
			refArrayPush(failed_th_names, th.name);
			//quit(-1);
			false;
		} else {
			if (math.conf.verbose > 0) {
				atomicRefIntAddition(reproved_count, 1);
				println(i2s(^reproved_count) + " theorem " + th.name + " was REPROVED in " + d2st(time, 2) + "s");
			}
			true;
		}
	}
	reprove_ass = \ass -> 
		switch (ass) {
			RuTheorem(__,__,__,__,__,__,__,__): reprove_th(ass);
			default: true;
		}
	reprove_decl = \decl ->
		switch (decl) {
			RuTheorem(__,__,__,__,__,__,__,__): reprove_th(decl);
			default: true;
		}
	reprove_decls = \decls ->
		all(ruConcurrent(map(decls, \d -> \-> reprove_decl(d))));
	start = timestamp();
	ret = if (target == "1" || target == "all") {
		reprove_decls(concatA(map(ruOrderSources(math), \src -> src.decls)));
	} else {
		switch (lookupTree(math.sources, target)) {
			Some(src): reprove_decls(src.decls);
			None(): {
				switch (lookupTree(math.assertions, target)) {
					Some(ass): reprove_ass(ass);
					None(): {
						println("no target for reproving");
						false
					}
				}
			}
		}
	}
	if (math.conf.verbose > 0) {
		println("ru reproved in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
		println("Max time: " + d2st(^max_time, 2) + "s for a theorem: " + ^max_th_name);
	}
	if (math.conf.verbose > 0 || ^failed_count > 0) {
		println("Reproved: " + i2s(^reproved_count) + " theorems,");
		println("Failed to reprove: " + i2s(^failed_count) + " theorems:");
		iter(^failed_th_names, \th -> println("\t" + th));
	}
	math
}

ruInitGeneralizer(th : RuTheorem, math : RuMath) -> RuProverEnv {
	dag = ruProofToDAG(th.proof);
	ass = lookupTreeDef(math.assertions, dag.data, ruNoAxiom);
	mapping = ref makeTree();
	vars = ref makeTree();
	root = RuProverRoot(ref [], ass.prop, ref []);
	mapping := setTree(^mapping, root, dag);
	hyps = ref [];
	env = RuProverEnv(
		th,
		RuProverTree([], root),
		\hyp -> {
			switch (lookupTree(^mapping, hyp)) {
				Some(node): {
					a = lookupTreeDef(math.assertions, node.data, ruNoAxiom);
					switch (ruUnifyExps([hyp.expr, a.prop], makeTree(), math)) {
						Some(theta): [RuUnified(theta, a)];
						None(): [];
					}
				}
				None(): {
					println("must not happen");
					quit(-1);
					[];
				}
			}
		},
		\hyp -> {
			switch (hyp) {
				RuProverExp(__,__,__,parent):
					switch (lookupTree(^mapping, parent.parent)) {
						Some(node): {
							if (node.data != "") [] else {
								switch (find(^hyps, \h -> h.expr == hyp.expr)) {
									Some(h): [RuUnified(makeTree(), h)];
									None(): {
										h = RuHyp(length(^hyps), hyp.expr, -1);
										refArrayPush(hyps, h);
										[RuUnified(makeTree(), h)];
									}
								}
							}
						}
						None(): {
							println("must not happen");
							quit(-1);
							[];
						}
					}
				default: {
					println("must not happen");
					quit(-1);
					[];
				}
			}
		},
		math,
		\v -> {
			vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
			RuVar(v.name + "_" + i2s(lookupTreeDef(^vars, v, 0)), v.type);
		},
		idfn,
		ref []
	);
	ruExpandHyp(root, env);
}


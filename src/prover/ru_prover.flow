import prover/ru_prover_util;
import ru_verify;
import ru_stats;
import ru_subs;

export {

	RuProverEnv(
		timeLimit : () -> bool,
		maxExLen : int,
		theorem : RuTheorem,
		tree : RuProverTree,
		unifyAssertion : (hyp : RuProverHyp) -> [RuUnified<RuAssertion>],
		unifyPremise   : (hyp : RuProverHyp) -> [RuUnified<RuHyp>],
		math : RuMath,
		fresher : (RuVar) -> RuVar,
		unconst : (RuExp) -> RuExp,
		proofs : ref [RuProof]
	);

	ruInitProver(theorem : RuTheorem, math : RuMath, asses : Maybe<RuIndex<RuAssertion>>) -> RuProverEnv;
	ruExpandProp(prop : RuProverProp, env : RuProverEnv) -> RuProverEnv;
	ruProve(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv;

	ruCommandReproveTask(math : RuMath) -> RuMath;
	ruCommandExpressionLenStats(math : RuMath) -> void;
}

ruEstimateMaxExp(index : RuIndex<RuAssertion>) -> int {
	len_num_max = ruFoldIndex(index, Triple(0.0, 0, 0), \acc, ass ->
		eitherMap(ruAssertion2Theorem(ass), \th ->
			fold(th.proof.steps, acc, \ac, step -> {
				len = length(step.expr.nodes);
				Triple(ac.first + cast(len : int -> double), ac.second + 1, max(acc.third, len))
			}),
			acc
		)
	);
	if (len_num_max.second < 4096) 256 else {
		avg_len = len_num_max.first / cast(len_num_max.second : int -> double);
		sigma_sum = ruFoldIndex(index, 0.0, \acc, ass ->
			eitherMap(ruAssertion2Theorem(ass), \th ->
				fold(th.proof.steps, acc, \ac, step -> {
					delta = cast(length(step.expr.nodes) : int -> double) - avg_len;
					ac + delta * delta;
				}),
				acc
			)
		);
		sigma = sqrt(sigma_sum / cast(len_num_max.second : int -> double));
		cast(avg_len + 3.0 * sigma : double -> int);
	}
	len_num_max.third + 64;
}

ruInitProver(th : RuTheorem, math0 : RuMath, asses : Maybe<RuIndex<RuAssertion>>) -> RuProverEnv {
	cth = ruConstTheorem(th, math0);
	math = cth.math;
	assertions = eitherFn(asses, idfn, \ -> ruInitAssertionsIndex(th.name, math));	
	premises = ruInitPremisesIndex(cth.const);
	vars = ref makeTree();
	root = RuProverRoot(ref [], cth.const.prop, ref []);
	env = RuProverEnv(
		{
			started = timestamp();
			limit = cast(s2i(ruOptDef("prove-time-limit", "5", math.conf)) * 1000 : int -> double);
			\-> timestamp() - started > limit
		},
		ruEstimateMaxExp(assertions),
		th, //cth.const,
		RuProverTree([], root),
		\hyp -> ruUnifyIndex(hyp.expr, assertions, makeTree(), math),
		\hyp -> ruUnifyIndex(hyp.expr, premises, makeTree(), math),
		math,
		\v -> {
			vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
			RuVar(v.name + "_" + i2s(lookupTreeDef(^vars, v, 0)), v.type);
		},
		cth.unconst,
		ref []
	);
	ruExpandHyp(root, env);
}

ruExpandHyp(hyp : RuProverHyp, env : RuProverEnv) -> RuProverEnv {
	make_fresh = \vars, fresher -> foldSet(vars, makeTree(), \acc, v -> setTree(acc, v, RuExp([fresher(v)], -1)));
	iter(env.unifyAssertion(hyp), \unif -> {
			a_vars  = ruAssertion2Vars(unif.data);
			fresher = make_fresh(differenceSets(a_vars, buildSet(getTreeKeys(unif.sub))), env.fresher);
			maybeApply(ruCompose(unif.sub, fresher), \s_all -> {
				sub = filterTree(s_all, \v, __ -> !containsSet(a_vars, v));
				refArrayPush(
					hyp.children,
					RuProverProp(unif.data, ref [], 
						filterTree(s_all, \v, __ -> !containsSet(a_vars, v)),
						filterTree(s_all, \v, __ -> containsSet(a_vars, v)),
						ref [],
						hyp
					)
				);
			})
		}
	);
	leafs = switch (hyp) {
		RuProverExp(__,__,__, parent): removeFirst(env.tree.leafs, parent);
		RuProverRoot(__,__,__): [];
	}
	RuProverEnv(env with tree = RuProverTree(
		fold(^(hyp.children), leafs, \acc, p -> concat(acc, [p])),
		env.tree.root
	));
}

ruExpandProp(prop : RuProverProp, env : RuProverEnv) -> RuProverEnv {
	if (length(prop.assertion.hyps) == 0) {
		refArrayPush(prop.proofs, RuProverProofProp(prop, prop.sub, []));
		RuProverEnv(env with tree = RuProverTree(env.tree with leafs = removeFirst(env.tree.leafs, prop)));
	} else {
		env1 = fold(prop.assertion.hyps, env, \acc, h -> {
			ex = ruApplySubst(ruApplySubst(h.expr, prop.sub), prop.outer);
			if (!ruExpIsLess(ex, env.maxExLen)) acc else {
				hyp = RuProverExp(ref [], ex, ref [], prop);
				refArrayPush(prop.children, hyp);
				iter(env.unifyPremise(hyp), \unif -> {
					//hex = ruApplySubst(unif.data.expr, unif.sub);
					hypProof = RuProverProofTop(hyp, unif.expr, unif.data, unif.sub);
					refArrayPush(hyp.proofs, hypProof);
					ruAddProof(prop, hypProof, acc);
				});
				ruExpandHyp(hyp, acc);
			}
		});
		RuProverEnv(env1 with tree = RuProverTree(env1.tree with leafs = removeFirst(env1.tree.leafs, prop)));
	}
}

ruCheckTests(test1 : Tree<[RuProverProofHyp], RuProverProofProp>, test2 : Tree<[RuProverProofHyp], RuProverProofProp>) -> bool {
	ret = ref true;
	traverseInOrder(test1, \k1, p1 -> {
		switch (lookupTree(test2, k1)) {
			None(): ret := false;
			Some(p2): {
				switch (ruSubsAreSim(p1.sub, p2.sub)) {
					Some(__): { }
					None(): ret := false;
				}
			}
		}
	});
	^ret;
}

ruAddProof(prop : RuProverProp, hypProof : RuProverProofHyp, env : RuProverEnv) -> void {
	if (length(^(prop.children)) == ruArity(prop.assertion)) {
	
		prod = map(^(prop.children), \hyp ->
			if (hyp == hypProof.node) [hypProof] else ^(hyp.proofs)
		);
		size = ruSizeCart(prod);
		new_proofs = if (size < 1024) {
			t = timestamp();
			new_proofs = ruAddProof1(prop, hypProof, env);
			time = cast(timestamp() - t : double -> int);
			stats = RuStatsRow("prod " + ruProd2s(prod), 
				pairs2tree([Pair("size", size), Pair("time", time), Pair("rets", length(new_proofs))])
			);
			ruAddStats("add_proof", stats);
			ruAddStats("add_proof_prod", stats);
			new_proofs;
		} else {
			t = timestamp();
			new_proofs = ruAddProof2(prop, hypProof, env);
			iter(new_proofs, \p -> refArrayPush(prop.proofs, p));
			time = cast(timestamp() - t : double -> int);
			stats = RuStatsRow("tree " + ruProd2s(prod), 
				pairs2tree([Pair("size", size), Pair("time", time), Pair("rets", length(new_proofs))])
			);
			ruAddStats("add_proof", stats);
			ruAddStats("add_proof_tree", stats);
			new_proofs;
		}
		iter(new_proofs, \p -> 
			if (length(^(prop.proofs)) <= 128 || !env.timeLimit()) {
				refArrayPush(prop.proofs, p)
			}
		);
		/*
		if (size <= 100000) {
		k = ruLogN(size, 10);
			max_k := max(^max_k, k);
			max_size := max(^max_size, size);
		
			t1 = timestamp();
			proofs1 = ruAddProof1(prop, hypProof, env);
			time1 = timestamp() - t1;
			setConcurrentHashMap(prod_times, k, getConcurrentHashMap(prod_times, k, 0.0) + time1);

			t2 = timestamp();
			proofs2 = ruAddProof2(prop, hypProof, env);
			time2 = timestamp() - t2;
			setConcurrentHashMap(tree_times, k, getConcurrentHashMap(tree_times, k, 0.0) + time2);

			test1 = values2tree(proofs1, \p -> p.children);
			test2 = values2tree(proofs2, \p -> p.children);
			if (proofs1 != [] && (!ruCheckTests(test1, test2) || !ruCheckTests(test2, test1))) {
				println("proofs differ:\n");
				println("proofs1:");
				iteri(proofs1, \i, pr -> println(i2s(i) + "\n" + ruIndent(ruSubst2s(pr.sub, env.math))));
				println("proofs2:");
				iteri(proofs2, \i, pr -> println(i2s(i) + "\n" + ruIndent(ruSubst2s(pr.sub, env.math))));
				
				println("matrix:");
				subs = map(^(prop.children), \hyp ->
					if (hyp == hypProof.node) [RuSubData(hypProof.sub, hypProof)] else 
					map(^(hyp.proofs), \p -> RuSubData(p.sub, p))
				);
				println(ruSubsMatrix2s(ruMakeSubsMatrix(subs), env.math));
				debugUnifySubsProd := true;
				ruAddProof2(prop, hypProof, env);
				quit(-1);
			}
			iter(proofs1, \p -> refArrayPush(prop.proofs, p));
		}*/
	}
}

ruAddProof2(prop : RuProverProp, hypProof : RuProverProofHyp, env : RuProverEnv) -> [RuProverProofProp] {
	subs = map(^(prop.children), \hyp ->
		if (hyp == hypProof.node) [RuSubData(hypProof.sub, hypProof)] else 
		map(^(hyp.proofs), \p -> RuSubData(p.sub, p))
	);
	filtermap(ruUnifySubsProd(subs, env.maxExLen, env.timeLimit, env.math), \unif ->
		maybeBind(ruCompose(prop.sub, unif.sub), \theta ->
			if (!ruCheckDisjs(theta, prop.assertion.disjs)) None() else {
				Some(RuProverProofProp(prop, theta, unif.data));
			}
		)
	);
}

ruAddProof1(prop : RuProverProp, hypProof : RuProverProofHyp, env : RuProverEnv) -> [RuProverProofProp] {
	prod = map(^(prop.children), \hyp ->
		if (hyp == hypProof.node) [hypProof] else ^(hyp.proofs)
	);
	if (ruSizeCart(prod) == 0) [] else {
		if (ruSizeCart(prod) > 100000) {
			println("ruSizeCart(prod)=" + i2s(ruSizeCart(prod)));
			[]
		} else {
			ruFiltermapCart(prod, \hypProofs -> 
				maybeBind(ruUnifySubs(map(hypProofs, \hp -> hp.sub), env.math),
					\s ->
						maybeBind(ruCompose(prop.sub, s), \theta ->
							if (!ruCheckDisjs(theta, prop.assertion.disjs)) None() else {
								Some(RuProverProofProp(prop, theta, hypProofs))
							} 
						)
				)
			)
		}
	}
}

ruBuildPropProofs(parent : RuProverHyp, proofs : [RuProverProofProp], env : RuProverEnv) -> void {
	n = length(^(parent.proofs));
	iter(proofs, \proof -> 
		refArrayPush(parent.proofs, 
			RuProverProofExp(
				parent,
				ruApplySubst(parent.expr, proof.sub),
				proof.sub,
				proof
			)
		)
	);
	switch (parent) {
		RuProverExp(__,__,__,grand): 
			ruBuildHypProofs(grand, tailFrom(^(parent.proofs), n), env);
		RuProverRoot(__,__,__):
			iter(tailFrom(^(parent.proofs), n), \root -> {
				steps = map(ruMakeLinearProof(ruMakeProofNode(root)), \step -> RuStep(step with expr = env.unconst(step.expr)));
				vars = values2tree(set2array(differenceSets(
					fold(steps, makeSet(), \acc, step -> mergeSets(acc, ruExp2Vars(step.expr.nodes))),
					ruAssertion2Vars(env.theorem)
				)), \v -> v.name);
				proof = RuProof(vars, makeSet(), steps, -1);
				err_message = ref "";
				check_math = RuMath(env.math with conf = RuConf(env.math.conf with onError = \msg, __ -> err_message := ^err_message + msg));
				switch (ruVerifyTheorem(RuTheorem(env.theorem with proof = proof), check_math)) {
					Some(th): refArrayPush(env.proofs, proof);
					None(): {
						if (strContains(^err_message, "step match failed")) {
							println("wrong proof found: \n" + ^err_message);
							println(ruProofNode2s(ruMakeProofNode(root), env.math));
							quit(-1);
						}
					}
				}
			});
	}
}

ruBuildHypProofs(parent : RuProverProp, proofs : [RuProverProofHyp], env : RuProverEnv) -> void {
	n = length(^(parent.proofs));
	iter(proofs, \proof -> ruAddProof(parent, proof, env));
	ruBuildPropProofs(parent.parent, tailFrom(^(parent.proofs), n), env);
}

ruProve(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv {
	switch (tactic(env.tree)) {
		Some(prop): {
			env1 = ruExpandProp(prop, env);
			ruBuildPropProofs(prop.parent, ^(prop.proofs), env1);
			ruProve(env1, tactic);
		}
		None(): env;
	}
}

ruReproveTactic(theorem : RuTheorem, math : RuMath) -> (RuProverTree) -> Maybe<RuProverProp> {
	proof = ruMakeTreeProof(theorem, math);
	mapping = ref makeTree();
	\tree -> {
		switch (fold(tree.leafs, None(), \acc, n : RuProverProp -> 
			if (isSome(acc)) acc else {
				switch (n.parent) {
					RuProverExp(__,__,children, grand):
						switch (lookupTree(^mapping, grand)) {
							Some(m): {
								i = findiDef(^(grand.children), \x -> x == n.parent, -1);
								ch = m.children[i];
								switch (ch) {
									RuProofStep(assertion,__,__): 
										if (n.assertion == assertion) {
											Some(Pair(n, ch));
										} else None();
									RuProofHyp(__,__): None();
								}
							}
							None(): None();
						}
					RuProverRoot(__,__,__): 
						if (n.assertion == proof.assertion) {
							Some(Pair(n, proof));
						} else None();
				}
			}
		)) {
			Some(p): {
				mapping := setTree(^mapping, p.first, p.second);
				Some(p.first);
			}
			None(): None();
		}
	}
}

ruCommandExpressionLenStats(math : RuMath) -> void {
	traverseInOrder(ruMathTheorems(math), \__, th ->
		iter(th.proof.steps, \step ->
			ruAddStats("expr_lens", RuStatsRow(
					ru2s(step.expr, math.rules), 
					pairs2tree([Pair("size", length(step.expr.nodes)), Pair("count", 1)])
				)
			)
		)
	);
	println("<< expression lens stats >>");
	println("distrib lens: ");
	println(ruIndent(ruProcStats("expr_lens", ruDistribLinSumStats("size", "count", 10))));
	println("max size:   " + ruProcStats("expr_lens", ruMaxStats("size")));
	println("avg size:   " + ruProcStats("expr_lens", ruAvgStats("size")));
	println("sigma size: " + ruProcStats("expr_lens", ruSigmaStats("size")));
}

ruCommandReproveTask(math : RuMath) -> RuMath {
	target = lookupTreeDef(math.conf.opts, "default", "1");
	reproved_count = ref 0;
	failed_count = ref 0;
	failed_th_names = ref [];
	max_time = ref 0.0;
	max_th_name = ref "";
	reprove_th = \th, index -> {
		start = timestamp();
		env = ruInitProver(th, math, index);
		init_stats = RuStatsRow("reprove init " + th.name, 
			pairs2tree([Pair("size", length(th.proof.steps)), Pair("time", cast(timestamp() - start : double -> int))])
		);
		ruAddStats("reprove_init", init_stats);
		
		t = timestamp();
		ruProve(env, ruReproveTactic(th, math));
		tm = cast(timestamp() - start : double -> int);
		time = (timestamp() - start)/ 1000.0;
		if (time > ^max_time) {
			max_time := time;
			max_th_name := th.name;
		}
		reprove_stats = RuStatsRow("reprove do " + th.name, 
			pairs2tree([Pair("size", length(th.proof.steps)), Pair("time", cast(timestamp() - t : double -> int))])
		);
		ruAddStats("reprove_do", reprove_stats);
		
		stats = RuStatsRow("reproved all " + th.name, 
			pairs2tree([Pair("size", length(th.proof.steps)), Pair("time", tm)])
		);
		ruAddStats("reprove_all", stats);
		
		if (^(env.proofs) == []) {
			atomicRefIntAddition(failed_count, 1);
			println("theorem " + th.name + " was NOT reproved in " + d2st(time, 2) + "s");
			println(ru2s(th, math.rules));
			refArrayPush(failed_th_names, th.name);
			//quit(-1);
			false;
		} else {
			if (math.conf.verbose > 0) {
				atomicRefIntAddition(reproved_count, 1);
				println(i2s(^reproved_count) + " theorem " + th.name + " was REPROVED in " + d2st(time, 2) + "s");
			}
			true;
		}
	}
	reprove_ass = \ass : RuAssertion -> 
		switch (ass) {
			RuTheorem(__,__,__,__,__,__,__,__): reprove_th(ass, None());
			default: true;
		}
	reprove_decl = \decl : RuBlock ->
		switch (decl) {
			RuTheorem(__,__,__,__,__,__,__,__): reprove_th(decl, None());
			default: true;
		}
	reprove_decls = \decls ->
		all(ruConcurrent(map(decls, \d -> \-> reprove_decl(d))));
	start = timestamp();
	ret = if (target == "all" || target == "1") {
		decls = filtermap(concatA(map(ruOrderSources(math), \src -> src.decls)), ruBlock2Assertion);
		chunks = splitByNumber(decls, s2i(ruOptDef("reprove-split-num", "256", math.conf)));
		fold(chunks, Pair(ruMakeIndex(), true), \acc, chunk -> {
			indexes = foldi(chunk, Pair(acc.first, []), \i, ac, ass ->
				Pair(ruSetIndex(ass.prop, ass, ac.first), concat(ac.second, [ac.first]))
			);
			ret = all(ruConcurrent(mapi(chunk, \i, ass -> 
					\-> eitherMap(ruAssertion2Theorem(ass), \th -> reprove_th(th, Some(indexes.second[i])), true)
			)));
			Pair(indexes.first, ret && acc.second)
		}).second;
	} else if (target == "1-seq" || target == "all-seq") {
		reprove_decls(concatA(map(ruOrderSources(math), \src -> src.decls)));
	} else {
		switch (lookupTree(math.sources, target)) {
			Some(src): reprove_decls(src.decls);
			None(): {
				switch (lookupTree(math.assertions, target)) {
					Some(ass): reprove_ass(ass);
					None(): {
						println("no target for reproving");
						false
					}
				}
			}
		}
	}
	if (math.conf.verbose > 0) {
		println("ru reproved in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
		println("Max time: " + d2st(^max_time, 2) + "s for a theorem: " + ^max_th_name);
	}
	if (math.conf.verbose > 0 || ^failed_count > 0) {
		println("Reproved: " + i2s(^reproved_count) + " theorems,");
		println("Failed to reprove: " + i2s(^failed_count) + " theorems:");
		iter(^failed_th_names, \th -> println("\t" + th));
	}
	if (math.conf.verbose > 0) {
		println("<< reprove all >>");
		println("complete reprove distrib: ");
		println(ruIndent(ruProcStats("reprove_all", ruDistribLogSumStats("size", "time", 2))));
		println("sum reprove all time: " + ruProcStats("reprove_all", ruSumStats("time")));
		println("max size: " + ruProcStats("reprove_all", ruMaxStats("size")));
		println("max time: " + ruProcStats("reprove_all", ruMaxStats("time")));
		println("");
	
		println("<< reprove init >>");
		println("reprove init distrib: ");
		println(ruIndent(ruProcStats("reprove_init", ruDistribLogSumStats("size", "time", 2))));
		println("sum init time: " + ruProcStats("reprove_init", ruSumStats("time")));
		println("max size: " + ruProcStats("reprove_init", ruMaxStats("size")));
		println("max time: " + ruProcStats("reprove_init", ruMaxStats("time")));
		println("");
	
		println("<< reprove do >>");
		println("do reprove distrib sum: ");
		println(ruIndent(ruProcStats("reprove_do", ruDistribLogSumStats("size", "time", 2))));
		println("do reprove distrib avg: ");
		println(ruIndent(ruProcStats("reprove_do", ruDistribLogAvgStats("size", "time", 2))));
		println("sum do reprove: " + ruProcStats("reprove_do", ruSumStats("time")));
		println("max size: " + ruProcStats("reprove_do", ruMaxStats("size")));
		println("max time: " + ruProcStats("reprove_do", ruMaxStats("time")));
		println("avg time: " + ruProcStats("reprove_do", ruAvgStats("time")));
		println("");
	
		/*println("<< init_assertion_index >>");
		println("init_assertion_index times: ");
		println(ruIndent(ruProcStats("init_assertion_index", ruDistribLogSumStats("size", "time", 2))));
		println("sum init_assertion_index time: " + ruProcStats("init_assertion_index", ruSumStats("time")));
		println("max size: " + ruProcStats("init_assertion_index", ruMaxStats("size")));
		println("max time: " + ruProcStats("init_assertion_index", ruMaxStats("time")));
		println("");*/
	
		println("<< add_proof >>");
		println("prod times: ");
		println(ruIndent(ruProcStats("add_proof_prod", ruDistribLogSumStats("size", "time", 10))));
		println("sum prod time: " + ruProcStats("add_proof_prod", ruSumStats("time")));
		println("tree times: ");
		println(ruIndent(ruProcStats("add_proof_tree", ruDistribLogSumStats("size", "time", 10))));
		println("sum tree time: " + ruProcStats("add_proof_tree", ruSumStats("time")));
		println("max size: " + ruProcStats("add_proof", ruMaxStats("size")));
		println("max time: " + ruProcStats("add_proof", ruMaxStats("time")));
		println("max rets: " + ruProcStats("add_proof", ruMaxStats("rets")));
		//println("data len: " + ruProcStats("add_proof", \rows -> i2s(length(rows))));
		println("");

		println("<< unif_index_prod >>");
		println("max size: " + ruProcStats("unif_index_prod", ruMaxStats("size")));
		println("max time: " + ruProcStats("unif_index_prod", ruMaxStats("time")));
		println("max rets: " + ruProcStats("unif_index_prod", ruMaxStats("rets")));
		println("sum time: " + ruProcStats("unif_index_prod", ruSumStats("time")));
		println("");

		println("<< intersect_index_prod >>");
		println("max size: " + ruProcStats("intersect_index_prod", ruMaxStats("size")));
		println("max time: " + ruProcStats("intersect_index_prod", ruMaxStats("time")));
		println("max rets: " + ruProcStats("intersect_index_prod", ruMaxStats("rets")));
		println("sum time: " + ruProcStats("intersect_index_prod", ruSumStats("time")));
		println("");

		println("<< unfy_subs_index_prod >>");
		println("max size: " + ruProcStats("unfy_subs_index_prod", ruMaxStats("size")));
		println("max time: " + ruProcStats("unfy_subs_index_prod", ruMaxStats("time")));
		println("max rets: " + ruProcStats("unfy_subs_index_prod", ruMaxStats("rets")));
		println("sum time: " + ruProcStats("unfy_subs_index_prod", ruSumStats("time")));
		println("");
	}
	math
}

ruInitGeneralizer(th : RuTheorem, math : RuMath) -> RuProverEnv {
	dag = ruProofToDAG(th.proof);
	ass = lookupTreeDef(math.assertions, dag.data, ruNoAxiom);
	mapping = ref makeTree();
	vars = ref makeTree();
	root = RuProverRoot(ref [], ass.prop, ref []);
	mapping := setTree(^mapping, root, dag);
	hyps = ref [];
	env = RuProverEnv(
		{
			started = timestamp();
			limit = cast(s2i(ruOptDef("prove-time-limit", "5", math.conf)) * 1000 : int -> double);
			\-> timestamp() - started > limit
		},
		-1,
		th,
		RuProverTree([], root),
		\hyp -> {
			switch (lookupTree(^mapping, hyp)) {
				Some(node): {
					a = lookupTreeDef(math.assertions, node.data, ruNoAxiom);
					switch (ruUnifyExps([hyp.expr, a.prop], makeTree(), math)) {
						Some(theta): [RuUnified(theta, a, ruApplySubst(a.prop, theta))];
						None(): [];
					}
				}
				None(): {
					println("must not happen");
					quit(-1);
					[];
				}
			}
		},
		\hyp -> {
			switch (hyp) {
				RuProverExp(__,__,__,parent):
					switch (lookupTree(^mapping, parent.parent)) {
						Some(node): {
							if (node.data != "") [] else {
								switch (find(^hyps, \h -> h.expr == hyp.expr)) {
									Some(h): [RuUnified(makeTree(), h, h.expr)];
									None(): {
										h = RuHyp(length(^hyps), hyp.expr, -1);
										refArrayPush(hyps, h);
										[RuUnified(makeTree(), h, h.expr)];
									}
								}
							}
						}
						None(): {
							println("must not happen");
							quit(-1);
							[];
						}
					}
				default: {
					println("must not happen");
					quit(-1);
					[];
				}
			}
		},
		math,
		\v -> {
			vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
			RuVar(v.name + "_" + i2s(lookupTreeDef(^vars, v, 0)), v.type);
		},
		idfn,
		ref []
	);
	ruExpandHyp(root, env);
}


import prover/ru_prover_prove;

export {
	ruCommandExpressionLenStats(math : RuMath) -> void;
	ruCommandReproveStats(math : RuMath) -> void;
	ruCommandProofsStats(math : RuMath) -> void;
}

ruCommandExpressionLenStats(math : RuMath) -> void {
	traverseInOrder(ruMathTheorems(math), \__, th ->
		iter(th.proof.steps, \step ->
			ruAddStats("expr_lens", RuStatsRow(
					ru2s(step.expr, math.rules), 
					pairs2tree([Pair("size", length(step.expr.nodes)), Pair("count", 1)])
				)
			)
		)
	);
	println("<< expression lens stats >>");
	println("distrib lens: ");
	println(ruIndent(ruProcStats("expr_lens", ruDistribLinSumStats("size", "count", 10))));
	println("max size:   " + ruProcStats("expr_lens", ruMaxStats("size")));
	println("avg size:   " + ruProcStats("expr_lens", ruAvgStats("size")));
	println("sigma size: " + ruProcStats("expr_lens", ruSigmaStats("size")));
	println("");
}

ruCommandProofsStats(math : RuMath) -> void {
	traverseInOrder(ruMathTheorems(math), \__, th ->
		ruAddStats("proof_stats", RuStatsRow(
				th.name, 
				pairs2tree([
					Pair("size", length(th.proof.steps)), 
					Pair("vol", fold(th.proof.steps, 0, \acc, step ->
						acc + length(step.expr.nodes)
					)),
					Pair("count", 1)
				])
			)
		)
	);
	println("<< proof stats >>");
	println("distrib proofs size: ");
	println(ruIndent(ruProcStats("proof_stats", ruDistribLogSumStats("size", "count", 2))));
	println("");
	println("distrib proofs vol: ");
	println(ruIndent(ruProcStats("proof_stats", ruDistribLogSumStats("vol", "count", 2))));
	println("");
	println("distrib proofs (size - vol): ");
	println(ruIndent(ruProcStats("proof_stats", ruDistribLogSumStats("size", "vol", 10))));
	println("");
	println("distrib proofs (vol - size): ");
	println(ruIndent(ruProcStats("proof_stats", ruDistribLogSumStats("vol", "size", 10))));
	println("");
	println("num size:   " + ruProcStats("proof_stats", ruNumStats("size")));
	println("max size:   " + ruProcStats("proof_stats", ruMaxStats("size")));
	println("avg size:   " + ruProcStats("proof_stats", ruAvgStats("size")));
	println("sigma size: " + ruProcStats("proof_stats", ruSigmaStats("size")));
	println("");
	println("num vol:   " + ruProcStats("proof_stats", ruNumStats("vol")));
	println("max vol:   " + ruProcStats("proof_stats", ruMaxStats("vol")));
	println("avg vol:   " + ruProcStats("proof_stats", ruAvgStats("vol")));
	println("sigma vol: " + ruProcStats("proof_stats", ruSigmaStats("vol")));
	println("");
}

ruCommandReproveStats(math : RuMath) -> void {
	if (ruOptIsTrue("reprove-stats", math.conf)) {
		println("<< reprove all >>");
		println("complete reprove distrib: ");
		println(ruIndent(ruProcStats("reprove_all", ruDistribLogSumStats("size", "time", 2))));
		println("sum reprove all time: " + ruProcStats("reprove_all", ruSumStats("time")));
		println("max size: " + ruProcStats("reprove_all", ruMaxStats("size")));
		println("max time: " + ruProcStats("reprove_all", ruMaxStats("time")));
		println("");
	/*
		println("<< reprove init >>");
		println("reprove init distrib: ");
		println(ruIndent(ruProcStats("reprove_init", ruDistribLogSumStats("size", "time", 2))));
		println("sum init time: " + ruProcStats("reprove_init", ruSumStats("time")));
		println("max size: " + ruProcStats("reprove_init", ruMaxStats("size")));
		println("max time: " + ruProcStats("reprove_init", ruMaxStats("time")));
		println("");
	
		println("<< unify_assertion >>");
		println(ruIndent(ruProcStats("unify_assertion", ruDistribLogSumStats("size", "time", 2))));
		println("sum unify_assertion time: " + ruProcStats("unify_assertion", ruSumStats("time")));
		println("max size: " + ruProcStats("unify_assertion", ruMaxStats("size")));
		println("max rets: " + ruProcStats("unify_assertion", ruMaxStats("rets")));
		println("max time: " + ruProcStats("unify_assertion", ruMaxStats("time")));
		println("");

		println("<< unify_premise >>");
		println(ruIndent(ruProcStats("unify_premise", ruDistribLogSumStats("size", "time", 2))));
		println("sum unify_premise time: " + ruProcStats("unify_premise", ruSumStats("time")));
		println("max size: " + ruProcStats("unify_premise", ruMaxStats("size")));
		println("max rets: " + ruProcStats("unify_premise", ruMaxStats("rets")));
		println("max time: " + ruProcStats("unify_premise", ruMaxStats("time")));
		println("");

		println("<< ruExpandProp >>");
		println(ruIndent(ruProcStats("ruExpandProp", ruDistribLogSumStats("time", "count", 2))));
		println("sum ruExpandProp time: " + ruProcStats("ruExpandProp", ruSumStats("time")));
		println("max time: " + ruProcStats("ruExpandProp", ruMaxStats("time")));
		println("");
		
		println("<< choice >>");
		println(ruIndent(ruProcStats("choice", ruDistribLogSumStats("size", "time", 2))));
		println("sum choice time: " + ruProcStats("choice", ruSumStats("time")));
		println("max time: " + ruProcStats("choice", ruMaxStats("time")));
		println("max size: " + ruProcStats("choice", ruMaxStats("size")));
		println("");

		println("<< ruExpandHyp >>");
		println(ruIndent(ruProcStats("ruExpandHyp", ruDistribLogSumStats("time", "count", 2))));
		println("sum ruExpandHyp time: " + ruProcStats("ruExpandHyp", ruSumStats("time")));
		println("max time: " + ruProcStats("ruExpandHyp", ruMaxStats("time")));
		println("");

		println("<< removeFirst >>");
		println(ruIndent(ruProcStats("removeFirst", ruDistribLogSumStats("time", "count", 2))));
		println("sum removeFirst time: " + ruProcStats("removeFirst", ruSumStats("time")));
		println("max time: " + ruProcStats("removeFirst", ruMaxStats("time")));
		println("");
		*/
		/*
		println("<< add_unified >>");
		println(ruIndent(ruProcStats("add_unified", ruDistribLogSumStats("time", "count", 2))));
		println(ruIndent(ruProcStats("add_unified", ruDistribLogSumStats("size", "time", 2))));
		println("sum add_unified count: " + ruProcStats("add_unified", ruSumStats("count")));
		println("sum add_unified time: " + ruProcStats("add_unified", ruSumStats("time")));
		println("sum add_unified time2: " + ruProcStats("add_unified", ruSumStats("time2")));
		println("sum add_unified time3: " + ruProcStats("add_unified", ruSumStats("time3")));
		println("sum add_unified time4: " + ruProcStats("add_unified", ruSumStats("time4")));
		println("sum add_unified time5: " + ruProcStats("add_unified", ruSumStats("time5")));
		println("sum add_unified time6: " + ruProcStats("add_unified", ruSumStats("time6")));
		println("max time: " + ruProcStats("add_unified", ruMaxStats("time")));
		println("max time2: " + ruProcStats("add_unified", ruMaxStats("time2")));
		println("max time3: " + ruProcStats("add_unified", ruMaxStats("time3")));
		println("max time4: " + ruProcStats("add_unified", ruMaxStats("time4")));		
		println("max time5: " + ruProcStats("add_unified", ruMaxStats("time5")));
		println("max time6: " + ruProcStats("add_unified", ruMaxStats("time6")));
		println("");
*/
		println("<< ruBuildPropProofs >>");
		println(ruIndent(ruProcStats("ruBuildPropProofs", ruDistribLogSumStats("time", "count", 10))));
		println("sum ruBuildPropProofs time: " + ruProcStats("ruBuildPropProofs", ruSumStats("time")));
		println("max time: " + ruProcStats("ruBuildPropProofs", ruMaxStats("time")));
		println("");
		
		println("<< ruBuildHypProofs >>");
		println(ruIndent(ruProcStats("ruBuildHypProofs", ruDistribLogSumStats("time", "size", 10))));
		println("sum ruBuildHypProofs time: " + ruProcStats("ruBuildHypProofs", ruSumStats("time")));
		println("max time: " + ruProcStats("ruBuildHypProofs", ruMaxStats("time")));
		println("max size: " + ruProcStats("ruBuildHypProofs", ruMaxStats("size")));
		println("");
/*
		println("<< ruAddProof1 - A >>");
		println(ruIndent(ruProcStats("ruAddProof1", ruDistribLogSumStats("time", "size", 10))));
		println("<< ruAddProof1 - B >>");
		println(ruIndent(ruProcStats("ruAddProof1", ruDistribLogSumStats("size", "time", 10))));
		println("sum ruAddProof1 time: " + ruProcStats("ruAddProof1", ruSumStats("time")));
		println("max time: " + ruProcStats("ruAddProof1", ruMaxStats("time")));
		println("max size: " + ruProcStats("ruAddProof1", ruMaxStats("size")));
		println("");
*/
		println("<< ruAddProof0: (time -> size) >>");
		println(ruIndent(ruProcStats("ruAddProof0", ruDistribLogSumStats("time", "size", 10))));
		println("<< ruAddProof0: (size -> time) >>");
		println(ruIndent(ruProcStats("ruAddProof0", ruDistribLogSumStats("size", "time", 10))));
		println("<< ruAddProof0: (time -> cplx) >>");
		println(ruIndent(ruProcStats("ruAddProof0", ruDistribLogSumStats("time", "cplx", 10))));
		println("<< ruAddProof0: (cplx -> time) >>");
		println(ruIndent(ruProcStats("ruAddProof0", ruDistribLogSumStats("cplx", "time", 10))));
		println("sum ruAddProof0 time: " + ruProcStats("ruAddProof0", ruSumStats("time")));
		println("max time: " + ruProcStats("ruAddProof0", ruMaxStats("time")));
		println("max size: " + ruProcStats("ruAddProof0", ruMaxStats("size")));
		println("max cplx: " + ruProcStats("ruAddProof0", ruMaxStats("cplx")));
		println("");

		println("<< ruUnifySubs-split: (time -> size) >>");
		println(ruIndent(ruProcStats("ruUnifySubs-split", ruDistribLogSumStats("time", "size", 10))));
		println("<< ruUnifySubs-split: (size -> time) >>");
		println(ruIndent(ruProcStats("ruUnifySubs-split", ruDistribLogSumStats("size", "time", 10))));
		println("<< ruUnifySubs-split: (time -> cplx) >>");
		println(ruIndent(ruProcStats("ruUnifySubs-split", ruDistribLogSumStats("time", "cplx", 10))));
		println("<< ruUnifySubs-split: (cplx -> time) >>");
		println(ruIndent(ruProcStats("ruUnifySubs-split", ruDistribLogSumStats("cplx", "time", 10))));
		println("sum ruUnifySubs-split time: " + ruProcStats("ruUnifySubs-split", ruSumStats("time")));
		println("max time: " + ruProcStats("ruUnifySubs-split", ruMaxStats("time")));
		println("max size: " + ruProcStats("ruUnifySubs-split", ruMaxStats("size")));
		println("max cplx: " + ruProcStats("ruUnifySubs-split", ruMaxStats("cplx")));
		println("");
		
		println("<< ruUnifySubs-ruDoUnifySubs: (time -> size) >>");
		println(ruIndent(ruProcStats("ruUnifySubs-ruDoUnifySubs", ruDistribLogSumStats("time", "size", 10))));
		println("<< ruUnifySubs-ruDoUnifySubs: (size -> time) >>");
		println(ruIndent(ruProcStats("ruUnifySubs-ruDoUnifySubs", ruDistribLogSumStats("size", "time", 10))));
		println("<< ruUnifySubs-ruDoUnifySubs: (time -> cplx) >>");
		println(ruIndent(ruProcStats("ruUnifySubs-ruDoUnifySubs", ruDistribLogSumStats("time", "cplx", 10))));
		println("<< ruUnifySubs-ruDoUnifySubs: (cplx -> time) >>");
		println(ruIndent(ruProcStats("ruUnifySubs-ruDoUnifySubs", ruDistribLogSumStats("cplx", "time", 10))));
		println("sum ruUnifySubs-ruDoUnifySubs time: " + ruProcStats("ruUnifySubs-ruDoUnifySubs", ruSumStats("time")));
		println("max time: " + ruProcStats("ruUnifySubs-ruDoUnifySubs", ruMaxStats("time")));
		println("max size: " + ruProcStats("ruUnifySubs-ruDoUnifySubs", ruMaxStats("size")));
		println("max cplx: " + ruProcStats("ruUnifySubs-ruDoUnifySubs", ruMaxStats("cplx")));
		println("");
		
		println("<< ruCompose: (time -> size) >>");
		println(ruIndent(ruProcStats("ruCompose", ruDistribLogSumStats("time", "size", 10))));
		println("<< ruCompose: (size -> time) >>");
		println(ruIndent(ruProcStats("ruCompose", ruDistribLogSumStats("size", "time", 10))));
		println("<< ruCompose: (time -> cplx) >>");
		println(ruIndent(ruProcStats("ruCompose", ruDistribLogSumStats("time", "cplx", 10))));
		println("<< ruCompose: (cplx -> time) >>");
		println(ruIndent(ruProcStats("ruCompose", ruDistribLogSumStats("cplx", "time", 10))));
		println("sum ruCompose time: " + ruProcStats("ruCompose", ruSumStats("time")));
		println("max time: " + ruProcStats("ruCompose", ruMaxStats("time")));
		println("max size: " + ruProcStats("ruCompose", ruMaxStats("size")));
		println("max cplx: " + ruProcStats("ruCompose", ruMaxStats("cplx")));
		println("");
		
		println("<< ruAdd2Subst: (time -> size) >>");
		println(ruIndent(ruProcStats("ruAdd2Subst", ruDistribLogSumStats("time", "size", 10))));
		println("<< ruAdd2Subst: (size -> time) >>");
		println(ruIndent(ruProcStats("ruAdd2Subst", ruDistribLogSumStats("size", "time", 10))));
		println("<< ruAdd2Subst: (time -> cplx) >>");
		println(ruIndent(ruProcStats("ruAdd2Subst", ruDistribLogSumStats("time", "cplx", 10))));
		println("<< ruAdd2Subst: (cplx -> time) >>");
		println(ruIndent(ruProcStats("ruAdd2Subst", ruDistribLogSumStats("cplx", "time", 10))));
		println("sum ruAdd2Subst time: " + ruProcStats("ruAdd2Subst", ruSumStats("time")));
		println("max time: " + ruProcStats("ruAdd2Subst", ruMaxStats("time")));
		println("max size: " + ruProcStats("ruAdd2Subst", ruMaxStats("size")));
		println("max cplx: " + ruProcStats("ruAdd2Subst", ruMaxStats("cplx")));
		println("");
		
		println("<< ruApplySubst: >>");
		println(ruIndent(ruShowTime("ruApplySubst")));
		//println(ruIndent(ruShowTime("ruApplyComputeLen")));
		println("");
	
		println("<< ruApplySubst1: >>");
		println(ruIndent(ruShowTime("ruApplySubst1")));
		//println(ruIndent(ruShowTime("ruApplyComputeLen")));
		println("");
		
		println("<< ruApplySubst2: >>");
		println(ruIndent(ruShowTime("ruApplySubst2")));
		//println(ruIndent(ruShowTime("ruApplyComputeLen")));
		println("");
		
		/*println("<< reprove do >>");
		println("do reprove distrib sum: ");
		println(ruIndent(ruProcStats("reprove_do", ruDistribLogSumStats("size", "time", 2))));
		println("do reprove distrib avg: ");
		println(ruIndent(ruProcStats("reprove_do", ruDistribLogAvgStats("size", "time", 2))));
		println("sum do reprove: " + ruProcStats("reprove_do", ruSumStats("time")));
		println("max size: " + ruProcStats("reprove_do", ruMaxStats("size")));
		println("max time: " + ruProcStats("reprove_do", ruMaxStats("time")));
		println("avg time: " + ruProcStats("reprove_do", ruAvgStats("time")));
		println("");*/
	
		/*println("<< init_assertion_index >>");
		println("init_assertion_index times: ");
		println(ruIndent(ruProcStats("init_assertion_index", ruDistribLogSumStats("size", "time", 2))));
		println("sum init_assertion_index time: " + ruProcStats("init_assertion_index", ruSumStats("time")));
		println("max size: " + ruProcStats("init_assertion_index", ruMaxStats("size")));
		println("max time: " + ruProcStats("init_assertion_index", ruMaxStats("time")));
		println("");*/
	
		println("<< add_proof >>");
		println("prod times: ");
		println(ruIndent(ruProcStats("add_proof_prod", ruDistribLogSumStats("size", "time", 10))));
		println("sum prod time: " + ruProcStats("add_proof_prod", ruSumStats("time")));
		println("tree times: ");
		println(ruIndent(ruProcStats("add_proof_tree", ruDistribLogSumStats("size", "time", 10))));
		println("sum tree time: " + ruProcStats("add_proof_tree", ruSumStats("time")));
		println("max size: " + ruProcStats("add_proof_tree", ruMaxStats("size")));
		println("max time: " + ruProcStats("add_proof_tree", ruMaxStats("time")));
		println("max rets: " + ruProcStats("add_proof_tree", ruMaxStats("rets")));
		//println("data len: " + ruProcStats("add_proof", \rows -> i2s(length(rows))));
		println("");
/*
		println("<< unif_index_prod >>");
		println("max size: " + ruProcStats("unif_index_prod", ruMaxStats("size")));
		println("max time: " + ruProcStats("unif_index_prod", ruMaxStats("time")));
		println("max rets: " + ruProcStats("unif_index_prod", ruMaxStats("rets")));
		println("sum time: " + ruProcStats("unif_index_prod", ruSumStats("time")));
		println("");

		println("<< intersect_index_prod >>");
		println("max size: " + ruProcStats("intersect_index_prod", ruMaxStats("size")));
		println("max time: " + ruProcStats("intersect_index_prod", ruMaxStats("time")));
		println("max rets: " + ruProcStats("intersect_index_prod", ruMaxStats("rets")));
		println("sum time: " + ruProcStats("intersect_index_prod", ruSumStats("time")));
		println("");

		println("<< unfy_subs_index_prod >>");
		println("max size: " + ruProcStats("unfy_subs_index_prod", ruMaxStats("size")));
		println("max time: " + ruProcStats("unfy_subs_index_prod", ruMaxStats("time")));
		println("max rets: " + ruProcStats("unfy_subs_index_prod", ruMaxStats("rets")));
		println("sum time: " + ruProcStats("unfy_subs_index_prod", ruSumStats("time")));
		println("");*/
	}
}

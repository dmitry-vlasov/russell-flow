import prover/ru_prover_prove;
import prover/ru_prover_stats;

export {
	ruCommandReproveTask(math : RuMath) -> RuMath;
}

ruReproveTactic(theorem : RuTheorem, math : RuMath, mapping : ref Tree<RuProverProp, RuProofStep>) -> (RuProverTree) -> Maybe<RuProverProp> {
	proof = ruMakeTreeProof(theorem, math);
	leafs = ref [];
	queue = ref [];
	\tree -> {
		if (length(^queue) == 0) {
			if (sizeTree(^mapping) == 0) {
				traverseInOrder(tree.leafs, \__, n -> 
					if (length(^queue) == 0) {
						switch (n.parent) {
							RuProverRoot(__,__,__):
								if (n.assertion == proof.assertion) {
									queue := [Pair(n, proof)];
								}
							default: {}
						}
					}
				);
			} else if (length(^leafs) > 0) {
				n = ^leafs[0].first;
				s = ^leafs[0].second;
				leafs := tail(^leafs);
				iteri(^(n.children), \i, child -> {
					step_child = s.children[i];
					switch (step_child) {
						RuProofStep(assertion,__,__) : {
							iter(^(child.children), \grand ->
								if (grand.assertion == assertion) {
									refArrayPush(queue, Pair(grand, step_child));
								}
							);
						}
						default: { }
					}
				});
			}
		}
		if (length(^queue) > 0) {
			n = ^queue[0].first;
			s = ^queue[0].second;
			queue := tail(^queue);
			if (exists(s.children, \ch -> switch (ch) { RuProofStep(__,__,__): true; default: false; })) {
				refArrayPush(leafs, Pair(n, s));
			}
			mapping := setTree(^mapping, n, s);
			Some(n);
		} else {
			None();
		}
	}
}

ruReproveUnifyPremise(unify : (RuProverHyp) -> [RuUnified<RuHyp>], mapping : ref Tree<RuProverProp, RuProofStep>, math : RuMath) -> (RuProverHyp) -> [RuUnified<RuHyp>] {
	if (ruOptIsTrue("reprove-singletons", math.conf)) {
		\hyp : RuProverHyp ->  {
			unif = unify(hyp);
			switch (hyp) {
				RuProverExp(i, __,__,__, parent): {
					switch (lookupTree(^mapping, parent)) {
						Some(step): {
							switch (step.children[i]) {
								RuProofStep(__,__,__): [];
								RuProofHyp(h,__): filter(unif, \un -> un.data.ind == h.ind);
							}
						}
						None(): {
							println("must not happen");
							quit(-1);
							[]; // must not be
						}
					}
				}
				RuProverRoot(__,__,__): unif;
			}
		}
	} else unify;
}

ruReproveUnifyAssertion(unify : (RuProverHyp) -> [RuUnified<RuAssertion>], mapping : ref Tree<RuProverProp, RuProofStep>, math : RuMath) -> (RuProverHyp) -> [RuUnified<RuAssertion>] {
	if (ruOptIsTrue("reprove-singletons", math.conf)) {
		\hyp : RuProverHyp ->  {
			switch (hyp) {
				RuProverExp(i, __,__,__, parent): {
					switch (lookupTree(^mapping, parent)) {
						Some(step): {
							switch (step.children[i]) {
								RuProofStep(assertion, children, expr): {
									e1 = hyp.expr;
									e2 = assertion.prop;
									eitherMap(
										ruUnifyExps([e1, e2],makeTree(), math),
										\sub -> [RuUnified(sub, assertion, ruApplySubst(e1, sub))], []
									);
								}
								RuProofHyp(h,__): [];
							}
						}
						None(): {
							println("must not happen");
							quit(-1);
							[]; // must not be
						}
					}
				}
				RuProverRoot(__,__,__): unify(hyp);
			}
		}
	} else unify;
}

ruCommandReproveTask(math : RuMath) -> RuMath {
	target = lookupTreeDef(math.conf.opts, "default", "1");
	if (math.conf.verbose > 0) {
		println("repoving target: " + target);
	}
	reproved_count = ref 0;
	failed_count = ref 0;
	failed_th_names = ref [];
	max_time = ref 0.0;
	max_th_name = ref "";
	ms_time_limit = i2d(s2i(ruOptDef("reprove-time-limit", "600", math.conf)) * 1000);
	if (math.conf.verbose > 0) {
		println("reprove time limit: " + d2s(ms_time_limit / 1000.0) + ".s");
	}
	reprove_th = \th, index, time_limit -> {
		//if (math.conf.verbose > 0) {
		//	println("going to reprove theorem " + th.name);
		//}
		start = timestamp();
		mapping = ref makeTree();
		env0 = ruInitProver(th, math, index, time_limit);
		env = RuProverEnv(env0 with
			reproveMap = mapping,
			unifyAssertion = ruReproveUnifyAssertion(env0.unifyAssertion, mapping, math),
			unifyPremise = ruReproveUnifyPremise(env0.unifyPremise, mapping, math),
		);
		if (ruOptIsTrue("reprove-stats", env.math.conf)) {
			init_stats = RuStatsRow("reprove init " + th.name, 
				pairs2tree([Pair("size", i2d(length(th.proof.steps))), Pair("time", timestamp() - start)])
			);
			ruAddStats("reprove_init", init_stats);
		}
		t = timestamp();
		ruProve(env, ruReproveTactic(th, math, mapping));
		tm = timestamp() - start;
		time = (timestamp() - start)/ 1000.0;
		if (time > ^max_time) {
			max_time := time;
			max_th_name := th.name;
		}
		if (ruOptIsTrue("reprove-stats", env.math.conf)) {
			reprove_stats = RuStatsRow("reprove do " + th.name, 
				pairs2tree([
					Pair("size", i2d(ruSizeProverTree(env.tree.root))),
					Pair("proof-size", i2d(length(th.proof.steps))), 
					Pair("proof-vol", i2d(fold(th.proof.steps, 0, \acc, step -> acc + length(step.expr.nodes)))), 
					Pair("time", timestamp() - t)
				])
			);
			ruAddStats("reprove_time", reprove_stats);
			stats = RuStatsRow("reproved all " + th.name, 
				pairs2tree([Pair("size", i2d(ruSizeProverTree(env.tree.root))), Pair("time", tm)])
			);
			ruAddStats("reprove_all", stats);
			/*println("max_cplx = " + i2s(^max_cplx));
			println("length(max_cplx_subs) = " + i2s(length(^max_cplx_subs)));
			println("max_cplx_subs:");
			iteri(^max_cplx_subs, \i, sub -> {
				println("sub: " + i2s(i));
				println("dom: " + i2s(sizeTree(sub)));
				println("cplx: " + i2s(ruSubComplexity(sub)));
				println(ruSubst2s(sub, env.math));
				println("");
			});
			println("max_cplx_expr:");
			println(ru2s(^max_cplx_expr, env.math.rules));*/
		}
		if (^(env.proofs) == []) {
			atomicRefIntAddition(failed_count, 1);
			println("theorem " + th.name + " was NOT reproved in " + d2st(time, 2) + "s");
			println(ru2s(th, math.rules));
			refArrayPush(failed_th_names, th.name);
			//quit(-1);
			false;
		} else {
			if (math.conf.verbose > 0) {
				atomicRefIntAddition(reproved_count, 1);
				println(i2s(^reproved_count) + " theorem " + th.name + " was REPROVED in " + d2st(time, 2) + "s");
			}
			true;
		}
	}
	reprove_ass = \ass : RuAssertion, time_limit -> 
		switch (ass) {
			RuTheorem(__,__,__,__,__,__,__,__): reprove_th(ass, None(), time_limit);
			default: true;
		}
	reprove_decl = \decl : RuBlock, time_limit ->
		switch (decl) {
			RuTheorem(__,__,__,__,__,__,__,__): reprove_th(decl, None(), time_limit);
			default: true;
		}
	reprove_decls = \decls, time_limit -> {
		proof_lens = map(decls, \d -> {
			switch (d) {
				RuTheorem(__,__,__,__,__,__,proof,__): length(proof.steps);
				default: 0;
			}
		});
		sum_proof_lens = i2d(fold(proof_lens, 0, \acc, len -> acc + len));
		all(ruConcurrent(mapi(decls, \i, d -> {
			limit = time_limit * i2d(availableProcessors()) * i2d(proof_lens[i]) / sum_proof_lens;
			\-> reprove_decl(d, limit)
		})));
	}
	start = timestamp();
	ret = if (target == "all" || target == "1") {
		decls = filtermap(concatA(map(ruOrderSources(math), \src -> src.decls)), ruBlock2Assertion);
		chunks = splitByNumber(decls, s2i(ruOptDef("reprove-split-num", "256", math.conf)));
		//time_limit = ms_time_limit * i2d(availableProcessors());
		//println("reprove concurrent time limit: " + d2s(time_limit / 1000.0) + ".s");
		proof_lens = map(chunks, \chunk ->
			map(chunk, \d ->
				switch (d) {
					RuTheorem(__,__,__,__,__,__,proof,__): length(proof.steps);
					default: 0;
				}
			)
		);
		sum_proof_lens = map(proof_lens, \lens -> i2d(fold(lens, 0, \ac, len -> ac + len)));
		total_steps = fold(sum_proof_lens, 0.0, \acc, len -> acc + len);
		
		
		foldi(chunks, Pair(ruMakeIndex(), true), \n, acc, chunk -> {
			indexes = foldi(chunk, Pair(acc.first, []), \i, ac, ass ->
				Pair(ruSetIndex(ass.prop, ass, ac.first), concat(ac.second, [ac.first]))
			);
			left_time = ms_time_limit - (timestamp() - start);
			if (left_time <= 0.0) Pair(indexes.first, false) else {
				time_left_on_chunk = left_time * i2d(availableProcessors()) * sum_proof_lens[n] / total_steps;
				//control_sum = foldi(chunk, 0.0, \i, ac, __ -> 
				//	ac + time_left_on_chunk * i2d(proof_lens[n][i]) / sum_proof_lens[n]
				//);
				//println("time_left_on_chunk: " + d2s(time_left_on_chunk) + ", control_sum: " + d2s(control_sum));
				ret = all(ruConcurrent(mapi(chunk, \i, ass -> 
						\-> eitherMap(ruAssertion2Theorem(ass), 
							\th -> {
								limit = time_left_on_chunk * i2d(proof_lens[n][i]) / sum_proof_lens[n];
								reprove_th(th, Some(indexes.second[i]), limit);
							}, 
							true
						)
				)));
				Pair(indexes.first, ret && acc.second);
			}
		}).second;
	} else if (target == "1-seq" || target == "all-seq") {
		decls = concatA(map(ruOrderSources(math), \src -> src.decls));
		all(mapi(decls, \i, d -> {
			passed = (timestamp() - start);
			left_time = ms_time_limit - passed;
			if (left_time <= 0.0) false else { 
				limit_on_one = left_time / i2d(length(decls) - i);
				//println("limit_on_one: " + d2s(limit_on_one / 1000.0) + ".s");
				reprove_decl(d, limit_on_one);
			}
		}));
	} else {
		switch (lookupTree(math.sources, target)) {
			Some(src): {
				reprove_decls(src.decls, ms_time_limit);
			}
			None(): {
				switch (lookupTree(math.assertions, target)) {
					Some(ass): reprove_ass(ass, ms_time_limit);
					None(): {
						println("no target for reproving");
						false
					}
				}
			}
		}
	}
	if (math.conf.verbose > 0) {
		println("ru reproved in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
		println("Max time: " + d2st(^max_time, 2) + "s for a theorem: " + ^max_th_name);
	}
	if (/*math.conf.verbose > 0 ||*/ ^failed_count > 0) {
		println("Reproved: " + i2s(^reproved_count) + " theorems,");
		println("Failed to reprove: " + i2s(^failed_count) + " theorems:");
		iter(^failed_th_names, \th -> println("\t" + th));
	}
	if (ruOptIsTrue("reprove-stats", math.conf)) {
		//ruCommandReproveAllStats(math);
		ruCommandReproveTimeStats(math);
	}
	math
}

import prover/ru_prover_util;
import unify/ru_unify_indexes;
import ru_verify;

export {

	RuProverEnv(
		timeLimit : () -> bool,
		admitExp : (RuExp) -> bool,
		tree : RuProverTree,
		unifyAssertion : (hyp : RuProverHyp) -> [RuUnified<RuAssertion>],
		unifyPremise   : (hyp : RuProverHyp) -> [RuUnified<RuHyp>],
		tactic : (RuProverTree) -> Maybe<RuProverProp>,
		math : RuMath,
		conf : RuConf,
		fresher : (RuVar) -> RuVar,
		unconst : (RuExp) -> RuExp,
		onProof : ([RuStep]) -> void,
		idxer : () -> int
	);
	ruInitProverEnv(
		theorem : RuTheorem, 
		math : RuMath, 
		conf : RuConf, 
		asses : Maybe<RuIndex<RuAssertion>>, 
		ms_time_limit : double,
		proofs : ref [RuProof]
	) -> RuProverEnv;
}

ruEstimateMaxExp(index : RuIndex<RuAssertion>) -> int {
	len_num_max = ruFoldIndex(index, Triple(0.0, 0, 0), \acc, ass ->
		eitherMap(ruAssertion2Theorem(ass), \th ->
			fold(th.proof.steps, acc, \ac, step -> {
				len = length(step.expr.nodes);
				Triple(ac.first + cast(len : int -> double), ac.second + 1, max(acc.third, len))
			}),
			acc
		)
	);
	if (len_num_max.second < 4096) 256 else {
		avg_len = len_num_max.first / cast(len_num_max.second : int -> double);
		sigma_sum = ruFoldIndex(index, 0.0, \acc, ass ->
			eitherMap(ruAssertion2Theorem(ass), \th ->
				fold(th.proof.steps, acc, \ac, step -> {
					delta = cast(length(step.expr.nodes) : int -> double) - avg_len;
					ac + delta * delta;
				}),
				acc
			)
		);
		sigma = sqrt(sigma_sum / cast(len_num_max.second : int -> double));
		cast(avg_len + 3.0 * sigma : double -> int);
	}
	len_num_max.third + 64;
}

ruInitProverEnv(
	th : RuTheorem, 
	math0 : RuMath, 
	conf : RuConf, 
	asses : Maybe<RuIndex<RuAssertion>>, 
	ms_time_limit : double,
	proofs : ref [RuProof]
) -> RuProverEnv {
	cth = ruConstTheorem(th, math0);
	math = cth.math;
	assertions = eitherFn(asses, idfn, \ -> ruInitAssertionsIndex(th.name, math, conf));	
	premises = ruInitPremisesIndex(cth.const);
	vars = ref makeTree();
	root = RuProverRoot(ref [], cth.const.prop, ref []);
	id = ref 0;
	max_expr_len = ruEstimateMaxExp(assertions);
	RuProverEnv(
		{ 
			started = timestamp(); 
			\-> {
				passed = timestamp() - started;
				if (passed <= ms_time_limit) false else {
					conf.onMessage("time limit: " + d2s(ms_time_limit / 1000.0) + ".s for " + th.name + " has expired, " + d2s(passed / 1000.0) + ".s passed");
					true;
				} 
			}
		},
		\expr -> length(expr.nodes) < max_expr_len,
		RuProverTree(makeTree(), root),
		\hyp -> ruUnifyIndex(hyp.expr, assertions, makeTree(), math, conf),
		\hyp -> ruUnifyIndex(hyp.expr, premises, makeTree(), math, conf),
		\tree -> {
			switch (tree.leafs) {
				TreeNode(__,prop,__,__,__): Some(prop);
				TreeEmpty(): None();
			}
		},
		math, conf,
		\v -> {
			vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
			RuVar(v.name + "_" + i2s(lookupTreeDef(^vars, v, 0)), v.type);
		},
		cth.unconst,
		\steps : [RuStep] -> {
			vs = values2tree(set2array(differenceSets(
				fold(steps, makeSet(), \acc, step -> mergeSets(acc, ruExp2Vars(step.expr.nodes))),
				ruAssertion2Vars(th)
			)), \v -> v.name);
			proof = RuProof(vs, makeSet(), steps, -1);
			err_message = ref "";
			check_conf = RuConf(conf with onError = \msg, __ -> err_message := ^err_message + msg);
			switch (ruVerifyTheorem(RuTheorem(th with proof = proof), math, check_conf)) {
				Some(__): refArrayPush(proofs, proof);
				None(): {
					if (strContains(^err_message, "step match failed")) {
						conf.onMessage("wrong proof found: \n" + ^err_message);
						conf.onMessage(ru2s(proof, math.rules));
						quit(-1);
					}
				}
			}
		},
		\-> { ret = ^id; id := ^id + 1; ret; }
	);
}

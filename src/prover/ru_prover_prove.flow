import prover/ru_prover_expand;

export {
	ruInitProver(theorem : RuTheorem, math : RuMath, asses : Maybe<RuIndex<RuAssertion>>, ms_time_limit : double) -> RuProverEnv;
	ruInitGeneralizer(theorem : RuTheorem, math : RuMath, ms_time_limit : double) -> RuProverEnv;
	
	ruProve(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv;
}

ruInitProver(th : RuTheorem, math : RuMath, asses : Maybe<RuIndex<RuAssertion>>, ms_time_limit : double) -> RuProverEnv {
	env = ruInitProverEnv(th, math, asses, ms_time_limit);
	ruExpandHyp(env.tree.root, env);
}

ruInitGeneralizer(th : RuTheorem, math : RuMath, ms_time_limit : double) -> RuProverEnv {
	env = ruInitGeneralizerEnv(th, math, ms_time_limit);
	ruExpandHyp(env.tree.root, env);
}

ruProve(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv {
	t0 = timestamp();
	choice = if (env.timeLimit()) None() else tactic(env.tree);
	if (ruOptIsTrue("reprove-stats", env.math.conf)) {
		ruAddStats("choice", RuStatsRow("choice ", 
			pairs2tree([
				Pair("size", i2d(sizeTree(env.tree.leafs))), 
				Pair("time", timestamp() - t0), 
				Pair("count", 1.0)
			])
		));
	}
	switch (choice) {
		Some(prop): {
			t1 = timestamp();
			env1 = ruExpandProp(prop, env);
			if (ruOptIsTrue("reprove-stats", env.math.conf)) {
				ruAddStats("ruExpandProp", RuStatsRow("expanding " + prop.assertion.name, 
					pairs2tree([
						Pair("time", timestamp() - t1), 
						Pair("count", 1.0)
					])
				));
			}
			t2 = timestamp();
			ruBuildPropProofs(prop.parent, ^(prop.proofs), env1);
			if (ruOptIsTrue("reprove-stats", env.math.conf)) {
				ruAddStats("ruBuildPropProofs", RuStatsRow("building proofs for " + prop.assertion.name, 
					pairs2tree([
						Pair("time", timestamp() - t2), 
						Pair("count", 1.0)
					])
				));
			}
			ruProve(env1, tactic);
		}
		None(): env;
	}
}

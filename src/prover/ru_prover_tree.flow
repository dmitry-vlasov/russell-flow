import ru_math;

export {

	RuProverProof ::= RuProverProofHyp, RuProverProofProp;
	RuProverProofHyp ::= RuProverProofTop, RuProverProofExp;

		RuProverProofTop(
			node : RuProverHyp,
			hyp  : RuHyp, 
			sub  : Tree<RuVar, RuExp>,
			//mutable parent : RuProverProofProp
		);
		RuProverProofExp(
			node : RuProverHyp,
			expr  : RuExp, 
			sub   : Tree<RuVar, RuExp>,
			child : RuProverProofProp,
			//mutable parent : RuProverProofProp
		);

	RuProverProofProp(
		node      : RuProverProp,
		assertion : RuAssertion,
		sub       : Tree<RuVar, RuExp>,
		children  : [RuProverProofHyp],
		// mutable parent : RuProverProofExp,
	);

	RuProverProp(
		assertion : RuAssertion,
		proofs    : ref [RuProverProofProp],
		sub       : Tree<RuVar, RuExp>,
		outer     : Tree<RuVar, RuExp>,
		children  : ref [RuProverExp],
		parent    : RuProverHyp,
	);

	RuProverHyp ::= RuProverExp, RuProverRoot;

	RuProverExp(
		proofs   : ref [RuProverProofHyp],
		expr     : RuExp,
		children : ref [RuProverProp],
		parent   : RuProverProp,
	);

	RuProverRoot(
		proofs   : ref [RuProverProofHyp],
		expr     : RuExp,
		children : ref [RuProverProp]
	);

	RuProverTree(
		leafs : Set<RuProverProp>,
		root  : RuProverRoot
	);
}

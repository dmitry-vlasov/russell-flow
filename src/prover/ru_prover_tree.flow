import ru_math;

export {

	RuProverProofHyp ::= RuProverProofTop, RuProverProofExp;
		RuProverProofTop(
			ind : int, 
			sub : Tree<RuVar, RuExp>,
			//mutable parent : RuProverProofProp
		);
		RuProverProofExp(
			expr : RuExp, 
			sub : Tree<RuVar, RuExp>,
			child : RuProverProofProp,
			//mutable parent : RuProverProofProp
		);
	RuProverProofProp(
		assertion : RuAssertion,
		sub : Tree<RuVar, RuExp>,
		children : [RuProverProofHyp],
		// mutable parent : RuProverProofExp,
	);

	RuProverProp(
		assertion : RuAssertion,
		proofs : ref [RuProverProofProp],
		sub : Tree<RuVar, RuExp>,
		outer : Tree<RuVar, RuExp>,
		fresher : Tree<RuVar, RuExp>,
		children : ref [RuProverExp],
		parent : RuProverHyp,
	);

	RuProverHyp ::= RuProverExp, RuProverRoot;

	RuProverExp(
		proofs : ref [RuProverProofHyp],
		expr : RuExp,
		children : [RuProverProp],
		parent : Maybe<RuProverProp>,
	);

	RuProverRoot(
		proofs : ref [RuProverProofHyp],
		expr : RuExp,
		children : [RuProverProp]
	);

	RuProverTree(
		leafs : [RuProverProp],
		root : RuProverRoot
	);
}

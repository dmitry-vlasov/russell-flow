import ru_math;
import ru_cache;

export {
	ruSplitMath(math : RuMath) -> RuMath;
}

ruSplitMath(math : RuMath) -> RuMath {
	start = timestamp();
	num1 = sizeTree(math.sources);
	split_sources = foldTree(math.sources, makeTree(), \name, src, acc -> {
			if (math.conf.verbose > 1) {
				ruPrintln("going to split file: " + src.info.file, math.conf);
			}
			mergeTree(acc, ruSplitSources(src, math.conf))
		}
	);
	ret = ruCollectMathNames(RuMath(math with sources = split_sources));
	created = timestamp();
	src = RuSource(
		map(getTreeValues(ret.sources), \src -> RuImport(src.info.file, -1)),
		[],
		ruMakeFileInfo(math.conf.file, math.conf.file + ".ru")
	);
	ruToCache(src, math.conf);
	if (math.conf.verbose > 0) {
		ruPrintln("ru split " + i2s(num1) + " files into " + i2s(sizeTree(ret.sources)) + " in " + d2st((timestamp() - start)/ 1000.0, 2) + "s", math.conf);
	}
	RuMath(ret with sources = setTree(ret.sources, math.conf.file, src))
}

RuSplitSource(
	pattern : string,
	header : string,
	path : string,
	decls : ref [RuBlock],
	subs : ref [RuSplitSource]
);

strReplaceAll(str : string, chars : string, onto : string) -> string {
	char_codes = buildSet(s2a(chars));
	under_code = getCharCodeAt(onto, 0);
	fold(
		map(s2a(str), \i -> if (containsSet(char_codes, i)) under_code else i),
		"",
		\ac, i -> ac + fromCharCode(i)
	)
}

ruSplitLevel(src : RuSplitSource, pattern : string) -> RuSplitSource {
	makePath = \h -> strReplaceAll(h, " /:.?!;$\\\"'`#", "_");
	addBlock = \acc, block -> { refArrayPush(lastElement(^(acc.subs), acc).decls, block); acc }
	addSrc = \acc, h -> {
		path = (if (src.path != "") src.path + "/" else "") + makePath(h);
		refArrayPush(acc.subs, RuSplitSource(pattern, h, path, ref [], ref [])); 
		acc 
	}
	getHeader = \txt -> trim2(strSplit(txt, "\n")[2], " \t\n\r");
	isHeader = \txt -> {
		if (!(strContains(txt, pattern) && strCountOf(txt, "\n") > 1)) false else {
			getHeader(txt) != "";
		}
	}
	fold(^(src.decls), RuSplitSource(src with decls = ref [], subs = ref []), \acc, block ->
		switch (block) {
			RuComment(text, __): {
				if (!isHeader(text)) {
					addBlock(acc, block)
				} else {
					addBlock(addSrc(acc, getHeader(text)), block);
				}
			}
			default: addBlock(acc, block);
		}
	)
}

RuSplitPattern(
	pattern : string, 
	child : Maybe<RuSplitPattern>
);

ruSplitSourceRec(src : RuSplitSource, p : RuSplitPattern) -> RuSplitSource {
	parts = ruSplitLevel(src, p.pattern);
	switch (p.child) {
		None(): parts;
		Some(ch_p):
			RuSplitSource(parts with
				subs = ref map(^(parts.subs), \part -> ruSplitSourceRec(part, ch_p))
			);
	}
}

ruDoSplitSource(src : RuSource, conf : RuConf) -> RuSplitSource {
	ruSplitSourceRec(
		RuSplitSource("", "", "", ref src.decls, ref []), 
		RuSplitPattern("######", 
			Some(RuSplitPattern("#*#*#*#",
				Some(RuSplitPattern("=-=-=-=", 
					Some(RuSplitPattern("-.-.-.-.", 
						None()
					))
				))
			))
		)
	)
}

RuLinearizeAcc(
	srcs : Tree<string, RuSource>,
	last : Maybe<RuSource>
);

ruMakeSplittedFile(file : string, acc : RuLinearizeAcc) -> string {
	if (!containsKeyTree(acc.srcs, file)) file else {
		ruMakeSplittedFile(file + "1", acc)
	}
}

ruLinearizeSplitSources(src : RuSplitSource, acc : RuLinearizeAcc, conf : RuConf) -> RuLinearizeAcc {
	file = ruMakeSplittedFile(if (src.path == "") conf.file + "_init" else src.path, acc);
	header_pattern = lpad("", src.pattern, 40);
	curr_src = RuSource(
		eitherMap(acc.last, \last -> [RuImport(last.info.file, -1)], []),
		^(src.decls),
		ruMakeFileInfo(file, resolveRelativePath(".") + "/" + file + ".ru")
	);
	ruToCache(curr_src, conf);
	if (conf.verbose > 1) {
		ruPrintln("\tru splitted file: " + curr_src.info.file, conf);
	}
	fold(^(src.subs), 
		RuLinearizeAcc(setTree(acc.srcs, file, curr_src), Some(curr_src)), 
		\ac, sub -> ruLinearizeSplitSources(sub, ac, conf)
	);
}

ruSplitSources(src : RuSource, conf : RuConf) -> Tree<string, RuSource> {
	ruLinearizeSplitSources(ruDoSplitSource(src, conf), RuLinearizeAcc(makeTree(), None()), conf).srcs
}

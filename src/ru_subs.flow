import ru_index;

export {
	ruUnifyCartSubs(subs : [[RuUnified<?>]], math : RuMath) -> [RuUnifiedVect<?>];
}

RuSubsColumn(
	rows : [RuIndex<int>]
);

RuSubsMatrix(
	cols : [RuSubsColumn]
);

ruMakeSubsMatrix(subs : [[RuUnified<?>]]) -> RuSubsMatrix {
	vars = set2array(fold(subs, makeSet(), \acc, ss ->
		fold(ss, acc, \ac, s ->
			mergeSets(ac, buildSet(getTreeKeys(s.sub)))
		)
	));
	make_cell = \v, ss -> {
		foldi(ss, ruMakeIndex(), \i, c, s ->
			switch (lookupTree(s.sub, v)) {
				Some(ex): ruSetIndex(ex, i, ac);
				None(): ruSetIndex(RuExp([v], -1), i, ac);
			}
		)
	}
	RuSubsMatrix(
		fold(vars, [], \acc, v ->
			concat(acc, 
				[RuSubsColumn(
					fold(subs, [], \ac, ss ->
						concat(ac, [make_cell(v, ss)])
					)
				)]
			)
		)
	);
}

ruIntersectCols(col1 : [RuUnifiedVect<?>], col2 : [RuUnifiedVect<?>]) -> [RuUnifiedVect<?>] {
	foldTree(col1, [], \acc, unif1 ->
		foldTree(col2, [], \acc, unif2 ->
			switch (lookupTree(col2, vect)) {
				Some(unif2): {
					setTree(acc, vect, )
				}
				None(): acc;
			}
		)
	);
}

ruUnifyCartSubs(subs : [[RuUnified<?>]], math : RuMath) -> [RuUnifiedVect<?>] {
	matrix = ruMakeSubsMatrix(subs);
	unified = map(matrix.cols, \col -> ruUnifyIndexes(col.rows, makeTree(), math));
	fold(tail(unified), unified[0], \acc, col -> ruIntersectCols(acc, col));
}


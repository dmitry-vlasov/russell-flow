import base/util/timer;
import script/script;
import script/value;
import unit;

export {
	RuCommArg(
		name : string,
		optional : bool,
		help : string,
		defval : string
	);
	// Commands may affect script variables and set some of them to specific return values.
	RuCommRet(
		name : string,
		type : string,
		help : string
	);
	RuCommDescr(
		name : string,
		category : string,
		help : string,
		defarg : string,
		autofile : bool,
		autoindent : bool,
		args : [RuCommArg],
		rets : [RuCommRet],
	);
	RuComm(
		descr : RuCommDescr,
		run : (RuUnit) -> Maybe<RuState>
	);

	ruVars2s(vars : Tree<string, ValValue>) -> string;
	ruCommArg2s(arg : RuCommArg) -> string;
	ruCommDescr2s(descr : RuCommDescr, with_args : bool) -> string;
	ruComm2s(comm : RuComm, with_args : bool) -> string;
	ruComms2s(comms : [RuComm], with_args : bool) -> string;
	ruApplyToProjectRoots(comm : RuComm) -> RuComm;
}

ruVars2s(vars : Tree<string, ValValue>) -> string {
	strGlue(map(tree2pairs(vars), \p -> p.first + "=" + ruValue2s(p.second)), "\n");
}

ruCommArg2s(arg : RuCommArg) -> string {
	arg.name + " " + 
	(if (arg.optional) "(optional) " else "") + arg.help + 
	(if (arg.defval == "") "" else " defval: " + arg.defval);
}

ruCommArgs2s(args : [RuCommArg]) -> string {
	has_defval = exists(args, \arg -> arg.defval != "");
	arg_matr = filtermap([
		Some(map(args, \arg -> arg.name)),
		Some(map(args, \arg -> b2s(arg.optional))),
		Some(map(args, \arg -> arg.help)),
		if (has_defval) Some(map(args, \arg -> arg.defval)) else None(),
	], idfn);
	headers = filtermap([
		Some("Name"), 
		Some("Optional"),
		Some("Help"),
		if (has_defval) Some("Default") else None()
	], idfn);
	ruStringTable2s(arg_matr, Some(headers));
}

ruCommRets2s(rets : [RuCommRet]) -> string {
	arg_matr = [
		map(rets, \ret -> ret.name),
		map(rets, \ret -> ret.type),
		map(rets, \ret -> ret.help)
	];
	headers = ["Name", "Type", "Help"];
	ruStringTable2s(arg_matr, Some(headers));
}

ruCommDescr2s(descr : RuCommDescr, with_args : bool) -> string {
	"Command:\n\t" + descr.name + "\n" + 
	(if (descr.category == "") "" else "Category:\n\t" + descr.category + "\n") + 
	(if (descr.defarg == "") "" else "Default argument:\n\t" + descr.defarg + "\n") + 
	"Description:\n" + strIndent(descr.help) + "\n" +
	(if (!with_args || descr.args == []) "" else {
		"Arguments:\n" + strIndent(ruCommArgs2s(descr.args)) + "\n";
	}) +
	(if (!with_args || descr.rets == []) "" else {
		"Return values:\n" + strIndent(ruCommRets2s(descr.rets)) + "\n";
	})
}

ruComm2s(comm : RuComm, with_args : bool) -> string {
	ruCommDescr2s(comm.descr, with_args);
}

ruComms2s(comms : [RuComm], with_args : bool) -> string {
	comm_matr = filtermap([
		Some(map(comms, \comm -> comm.descr.name)),
		Some(map(comms, \comm -> comm.descr.category)),
		Some(map(comms, \comm -> comm.descr.help)),
		if (with_args) Some(map(comms, \comm -> strGlue(map(comm.descr.args, ruCommArg2s), ", "))) else None()
	], idfn);
	headers = filtermap([
		Some("Command name"), 
		Some("Category"),
		Some("Help"),
		if (with_args) Some("Arguments") else None()
	], idfn);
	ruStringTable2s(comm_matr, Some(headers)) + "\n";
}

ruApplyToProjectRoots(comm : RuComm) -> RuComm {
	RuComm(comm with
		descr = RuCommDescr(comm.descr with
			args = map(comm.descr.args, \arg -> if (arg.name != "file") arg else RuCommArg(arg with optional = true))
		),
		run = \unit -> {
			task = unit.task;
			state = unit.state;
			if (containsKeyTree(task.args, "file")) {
				comm.run(unit);
			} else {
				fold(state.conf.projectRoots, Some(state), \acc, file ->
					maybeBind(acc, \s -> 
						comm.run(RuUnit(ScTask(task with args = setTree(task.args, "file", file)), s, unit.out))
					)
				);
			}
		}
	);
}

import base/fileinfo;
import base/ids;

// At each change of any source struct/union bump ruCacheVersion in ru/cache/disk.

export {
	// Source components
	RuSource(imports : [RuImport], decls : [RuDecl], comments : [RuComment], info : RuFileInfo);
	RuImport(id : int, pos : int);

	// A declaration - toplevel entry in a source
	RuDecl ::= RuLangDecl, RuAssertion;

	// Declarations which define a language (formal grammar)
	RuLangDecl ::= RuConst, RuType, RuRule;

	// Statements (assertions, propositions) of three kinds
	RuAssertion ::= RuAxiom, RuTheorem, RuDef;

	RuComment(text : string, annotation : JsonObject, pos : int);
	RuDeclInfo(id : int, src : int, comments : [RuComment], pos : int);
	RuStatement(vars : RuVarsDisjs, hyps : [RuHyp], prop : RuTermExp);

	// Declarations
	RuConst(info : RuDeclInfo, ascii : int, latex : string);
	RuType(info : RuDeclInfo, supers : [int]);
	RuRule(info : RuDeclInfo, vars : Tree<int, RuVar>, term : RuTerm);
	RuAxiom(info : RuDeclInfo, stat : RuStatement);
	RuTheorem(info : RuDeclInfo, stat : RuStatement, meta : Set<int>, proof : RuProof);
	RuDef(info : RuDeclInfo, stat : RuStatement, defm : RuTermExp, defs : RuTermExp);

	// Declaration components
	RuVar(id : int, type : int);
	RuHyp(ind : int, expr : RuTermExp, pos : int);
	RuDisj(v1 : RuVar, v2 : RuVar);
	RuVarsDisjs(vars : Tree<int, RuVar>, disjs : Set<RuDisj>);
	RuProof(vars : RuVarsDisjs, steps : [RuStep], pos : int);
	RuStep(ind : int, assertion : int, refs : [RuRef], expr : RuTermExp, proof : RuProof, pos : int);
	RuRef ::= RuHypRef, RuStepRef;
	RuHypRef(ind : int);
	RuStepRef(ind : int);

	// Expression components
	RuTerm(type : int, nodes : [RuTermNode], pos : int);
	RuExp(nodes : [RuExpNode], pos : int);
	RuExpNode ::= RuRuleNode, RuVar;
	RuTermNode ::= RuConstRef, RuVar;
	RuRuleNode(rule : int, type : int, arity : int, len : int);
	RuConstRef(id : int);

	RuPremise ::= RuHyp, RuStep;
	RuTermExp ::= RuTerm, RuExp;

	// Step in a theorem
	RuTheoremStep(theorem : RuTheorem, step : RuStep);

	// Unions
	RuAny ::= 
		RuSource, RuImport, RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem, RuComment,
		RuStep, RuExp, RuHyp, RuProof, RuDisj, RuVarsDisjs, RuHypRef, RuStepRef, RuTerm, RuVar, RuConstRef, RuExpNode, RuTermNode;

	// Structs with 'pos' field
	RuPositioned ::= 
		RuImport, RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem, RuComment,
		RuStep, RuExp, RuHyp, RuProof, RuTerm;

	// Default 'no'-values
	ruNoVar = RuVar(-1, -1);
	ruNoDeclInfo = RuDeclInfo(-1, -1, [], -1);
	ruNoComment = RuComment("", JsonObject([]), -1);

	ruNoConst = RuConst(ruNoDeclInfo, -1, "");
	ruNoType = RuType(ruNoDeclInfo, []);
	ruNoRule = RuRule(ruNoDeclInfo, makeTree(), ruNoTerm);
	ruNoStatement = RuStatement(ruEmptyVarsDisjs, [], ruNoExp);
	ruNoAxiom = RuAxiom(ruNoDeclInfo, ruNoStatement);
	ruNoTheorem = RuTheorem(ruNoDeclInfo, ruNoStatement, makeSet(), ruNoProof);

	ruNoProof = RuProof(ruEmptyVarsDisjs, [], -1);
	ruNoHyp = RuHyp(-1, ruNoExp, -1);
	ruNoStep = RuStep(-1, -1, [], ruNoExp, ruNoProof, -1);
	ruNoSource = RuSource([], [], [], ruNoFileInfo);
	ruEmptyVarsDisjs = RuVarsDisjs(makeTree(), makeSet());
	
	ruNoTerm = RuTerm(-1, [], -1);
	ruNoExpNode = ruNoVar;
	ruNoExp = RuExp([], -1);

	// Special values of step.assertion: lemma (subproof) or a problem (not yet proved)
	ruStepLemma = -1;
	ruStepProblem = -2;

	ruSuperTypeName(super : int, infer : int) -> int;
}

ruSuperTypeName(super : int, infer : int) -> int {
	s2id(id2s(infer) + "-" + id2s(super));
}

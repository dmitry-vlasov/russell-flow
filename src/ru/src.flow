import base/fileinfo;
import base/ids;

// At each change of any source struct/union bump ruCacheVersion in ru/cache.

export {
	// Source components
	RuSource(imports : [RuImport], decls : [RuDecl], comments : [RuComment], info : RuFileInfo);
	RuImport(id : int, pos : int);

	RuDecl ::= RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem;
	RuAssertion ::= RuAxiom, RuTheorem, RuDef;
	RuBlock ::= RuDecl, RuComment;

	RuComment(text : string, annotation : JsonObject, pos : int);
	RuDescr(name : string, id : int, src : int, comments : [RuComment], pos : int);
	RuStatement(vars : Tree<int, RuVar>, disjs : Set<RuDisj>, hyps : [RuHyp], prop : RuExp);

	// Declarations
	RuConst(descr : RuDescr, ascii : int, latex : int);
	RuType(descr : RuDescr, supers : [int]);
	RuRule(descr : RuDescr, vars : Tree<int, RuVar>, term : RuTerm);
	RuAxiom(descr : RuDescr, stat : RuStatement);
	RuTheorem(descr : RuDescr, stat : RuStatement, meta : Set<int>, proof : RuProof);
	RuDef(descr : RuDescr, stat : RuStatement, defm : RuExp, defs : RuExp);

	// Declaration components
	RuVar(name : string, id : int, type : string, type_id : int);
	RuHyp(ind : int, expr : RuExp, pos : int);
	RuDisj(v1 : RuVar, v2 : RuVar);
	RuProof(vars : Tree<int, RuVar>, disjs : Set<RuDisj>, steps : [RuStep], pos : int);
	RuStep(ind : int, assertion : string, assertion_id : int, refs : [RuRef], expr : RuExp, pos : int);
	RuRef ::= RuHypRef, RuStepRef;
	RuHypRef(ind : int, pos : int);
	RuStepRef(ind : int, pos : int);

	// Expression components
	RuTerm(type_id : int, nodes : [RuTermNode], pos : int);
	RuExp(nodes : [RuExpNode], pos : int);
	RuExpNode ::= RuRuleNode, RuVar;
	RuTermNode ::= RuConstRef, RuVar;
	RuRuleNode(name : string, id : int, type : string, type_id : int, arity : int, len : int);
	RuConstRef(name : string, id : int);

	// Unions
	RuAny ::= 
		RuSource, RuImport, RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem, RuComment,
		RuStep, RuExp, RuHyp, RuProof, RuDisj, RuHypRef, RuStepRef, RuTerm, RuVar, RuConstRef, RuExpNode, RuTermNode;

	// Default 'no'-values
	ruNoVar = RuVar("", -1, "", -1);
	ruNoDescr = RuDescr("", -1, -1, [], -1);
	ruNoComment = RuComment("", JsonObject([]), -1);

	ruNoConst = RuConst(ruNoDescr, -1, -1);
	ruNoType = RuType(ruNoDescr, []);
	ruNoRule = RuRule(ruNoDescr, makeTree(), ruNoTerm);
	ruNoStatement = RuStatement(makeTree(), makeSet(), [], ruNoExp);
	ruNoAxiom = RuAxiom(ruNoDescr, ruNoStatement);
	ruNoTheorem = RuTheorem(ruNoDescr, ruNoStatement, makeSet(), ruNoProof);

	ruNoProof = RuProof(makeTree(), makeSet(), [], -1);
	ruNoHyp = RuHyp(-1, ruNoExp, -1);
	ruNoStep = RuStep(-1, "", -1, [], ruNoExp, -1);
	ruNoSource = RuSource([], [], [], ruNoFileInfo);
	
	ruNoTerm = RuTerm(-1, [], -1);
	ruNoExpNode = ruNoVar;
	ruNoExp = RuExp([], -1);
}

import base/fileinfo;

// At each change of any source struct/union bump ruCacheVersion in ru/cache.

export {
	// Source components
	RuSource(imports : [RuImport], decls : [RuDecl], comments : [RuComment], info : RuFileInfo);
	RuImport(module : string, pos : int);
	RuDeclRef ::= RuConstRef, RuTypeRef, RuRuleRef, RuAssertionRef;
	RuConstRef(name : string);
	RuTypeRef(name : string);
	RuRuleRef(name : string);
	RuAssertionRef(name : string);

	RuDecl ::= RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem;
	RuAssertion ::= RuAxiom, RuTheorem, RuDef;
	RuBlock ::= RuDecl, RuComment;

	RuComment(text : string, annotation : JsonObject, pos : int);
	RuDescr(name : string, source : string, comments : [RuComment]);

	// Declarations
	RuConst(descr : RuDescr, ascii : string, latex : string, pos : int);
	RuType(descr : RuDescr, supers : [string], pos : int);
	RuRule(descr : RuDescr, vars : Tree<string, RuVar>, term : RuTerm, pos : int);
	RuAxiom(descr : RuDescr, vars : Tree<string, RuVar>, disjs : Set<RuDisj>, hyps : [RuHyp], prop : RuExp, pos : int);
	RuTheorem(descr : RuDescr, vars : Tree<string, RuVar>, disjs : Set<RuDisj>, meta : Set<string>, hyps : [RuHyp], prop : RuExp, proof : RuProof, pos : int);
	RuDef(descr : RuDescr, vars : Tree<string, RuVar>, disjs : Set<RuDisj>, hyps : [RuHyp], defm : RuExp, defs : RuExp, prop : RuExp, pos : int);

	// Declaration components
	RuVar(name : string, type : string);
	RuHyp(ind : int, expr : RuExp, pos : int);
	RuDisj(v1 : RuVar, v2 : RuVar);
	RuProof(vars : Tree<string, RuVar>, disjs : Set<RuDisj>, steps : [RuStep], pos : int);
	RuStep(ind : int, assertion : string, refs : [RuRef], expr : RuExp, pos : int);
	RuRef ::= RuHypRef, RuStepRef;
	RuHypRef(ind : int, pos : int);
	RuStepRef(ind : int, pos : int);

	// Expression components
	RuTerm(type : string, nodes : [RuTermNode], pos : int);
	RuExp(nodes : [RuExpNode], pos : int);
	RuExpNode ::= RuRuleNode, RuVar;
	RuTermNode ::= RuConstRef, RuVar;
	RuRuleNode(name : string, type : string, arity : int, len : int);
	RuConstRef(name : string);

	// Unions
	
	RuAny ::= 
		RuSource, RuImport, RuConst, RuType, RuRule, RuAxiom, RuDef, RuTheorem, RuComment,
		RuStep, RuExp, RuHyp, RuProof, RuDisj, RuHypRef, RuStepRef, RuTerm, RuVar, RuConstRef;

	// Default 'no'-values
	ruNoVar = RuVar("__no", "__no");
	ruNoDescr = RuDescr("__no", "", []);
	ruNoComment = RuComment("", JsonObject([]), -1);

	ruNoConst = RuConst(ruNoDescr, "", "", -1);
	ruNoType = RuType(ruNoDescr, [], -1);
	ruNoRule = RuRule(ruNoDescr, makeTree(), ruNoTerm, -1);
	ruNoAxiom = RuAxiom(ruNoDescr, makeTree(), makeSet(), [], ruNoExp, -1);
	ruNoTheorem = RuTheorem(ruNoDescr, makeTree(), makeSet(), makeSet(), [], ruNoExp, ruNoProof, -1);

	ruNoProof = RuProof(makeTree(), makeSet(), [], -1);
	ruNoHyp = RuHyp(-1, ruNoExp, -1);
	ruNoStep = RuStep(-1, "__no", [], ruNoExp, -1);
	ruNoSource = RuSource([], [], [], ruNoFileInfo);
	
	ruNoTerm = RuTerm("__no", [], -1);
	ruNoExpNode = ruNoVar;
	ruNoExp = RuExp([], -1);
}

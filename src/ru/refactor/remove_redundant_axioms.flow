import ru/parse/write;
import ru/prover/stats;
import ru/prover/proof2theorem;
import ru/util/match_assertions;
import ru/util/target;
import ru/map_decls;

export {
	ruCommRemoveRedundantAxioms(exec : (ScComm, RuState, RuOut) -> RuState) -> RuComm;
}

ruCommRemoveRedundantAxioms(exec : (ScComm, RuState, RuOut) -> RuState) -> RuComm {
	RuComm(
		RuCommInfo(
			"remove-redundant-axioms", "refactor", "removes those axioms, which are proved independently", "target", false, false, 
			[
				RuCommArg("keep-axioms", true, "keep these axioms. Comma-separated list of  names", ""),
				RuCommArg("info", true, "show info about found redundant axioms. In this case math is not updated", ""),
				RuCommArg("try-to-prove", true, "try to prove axioms", ""), 
				//RuCommArg("save", true, "save the result. Default is 1", "1"),
				RuCommArg("target", true, "the target: a theorem, file or all", "all")
			], []
		),
		ruRunRemoveRedundantAxioms(exec)
	);
}

ruRunRemoveRedundantAxioms(exec : (ScComm, RuState, RuOut) -> RuState) -> (RuUnit) -> Maybe<RuState> {
	\unit -> {
		env = ruUnitEnv(unit);
		task = unit.task;
		state = unit.state;
		conf = state.conf;
		math = ruMathFromSources(state.ru, env);
		switch (ruDetermineTarget(unit.task, math, env)) {
			RuTargetMath(__): {
				axioms = ruDeclsAxioms(math.decls);
				ruRemoveRedundantAxioms(unit, axioms, exec);
			}
			RuTargetSource(source,__): {
				axioms = values2tree(
					filtermap(source.decls, ruDecl2Axiom), 
					\ax -> ax.info.id
				);
				ruRemoveRedundantAxioms(unit, axioms, exec);
			}
			RuTargetDecl(decl): {
				switch (decl) {
					RuAxiom(info,__): {
						ruRemoveRedundantAxioms(unit, makeTree1(info.id, decl), exec);
					}
					default:
						Some(state);
				}
			}
			RuTargetRandom(decls,__,__): {
				axioms = values2tree(
					filtermap(decls, ruDecl2Axiom), 
					\ax -> ax.info.id
				);
				ruRemoveRedundantAxioms(unit, axioms, exec);
			}
			RuTargetNone(): {
				Some(state);
			}
		}
	}
}

ruRemoveRedundantAxioms(unit : RuUnit, axioms : Tree<int, RuAxiom>, exec : (ScComm, RuState, RuOut) -> RuState) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	t0 = ruMakeTimer();
	if (ruVerbose(conf) > 0) {
		env.out.onMessage("starting removing redundant axioms ... ");
	}
	try_to_prove = ruTaskBoolArg(task, "try-to-prove", false);
	assertionsIndex = ruInitGlobalAssertionsIndex(math);
	if (ruVerbose(conf) >= 3) {
		env.out.onMessage("\t\tbuilding an assertion index: " + " in " + ruTimePassed2s(t0));
	}

	keep_axioms = mapSet(buildSet(filter(strSplit(ruTaskStringArg(task, "keep-axioms", ""), ","), isNotSpace)), s2id);
	if (ruVerbose(conf) >= 3) {
		env.out.onMessage("\tkeeping axioms:\n\t" + strGlue(map(set2array(keep_axioms), id2s), ","));
	}
	deps_timer = ruMakeTimer();
	dependencies = ruAssertionsAxioms(math.decls.assertions);
	if (ruVerbose(conf) >= 3) {
		env.out.onMessage("\tdependencies are built in " + ruTimePassed2s(deps_timer));
	}
	imported = ruSourcesAllImported(math.sources, env);
	check_preceeds = \a1, a2 -> ruDeclInfoPreceeds(a1.info, a2.info, imported);
	check_may_include = \a1, a2 -> !containsSet(lookupTreeDef(imported, a2.info.id, makeSet()), a1.info.id);
	redundant = foldTree(axioms, makeTree(), \ax_id, ax, acc -> {
		if (ruVerbose(conf) >= 3) {
			env.out.onMessage("\t\tChecking for redundancy of: '" + id2s(ax_id) + "' ... ");
		}
		c_ax = ruConstAssertion(ax, math);
		more_general = filtermap(ruUnifyIndex(c_ax.const.stat.prop, assertionsIndex, ruEmptySubst, math, env, ruMakeTaskTimer(1.0)), \unified ->
			if (ax_id == unified.data.info.id || containsSet(keep_axioms, ax_id)) None() else {
				deps = lookupTreeDef(dependencies, unified.data.info.id, makeSet());
				if (containsSet(deps, ax_id)) None() else {
					ruMatchAssertions(unified.data, ax, math, env);
				}
			}
		);
		if (more_general == []) {
			if (try_to_prove) acc else {
				ax_th_name = "th-" + id2s(ax.info.id);
				ax_th = RuTheorem(
					RuDeclInfo(ax.info with id = s2id(ax_th_name)),
					ax.stat, makeSet(), ruNoProof
				);
				ax_ind = ruIndexOfDecl(ax_id, lookupTreeDef(math.sources, ax.info.src, ruNoSource));
				math1 = ruMathInsertDecl(math, ax_th, ax_ind, env);
				state1 = RuState(state with ru = math1.sources);
				prove_task = ScTask("autoprove", [
					ScTaskArg("theorem", ScString(ax_th_name)),
					ScTaskArg("max_depth", ScInt(2)),
					ScTaskArg("forbidden", ScString(id2s(ax_id)))
				]);
				state2 = exec(prove_task, state1, env.out);
				acc
			}
		} else setTree(acc, ax_id, more_general);
	});
	to_remove = foldTree(redundant, makeTree(), \id, matches, acc -> {
		ok_matches = filter(matches, \match -> 
			check_preceeds(match.more, match.less)
			//|| check_may_include(match.less, match.more)
		);
		if (length(ok_matches) == 0) acc else setTree(acc, id, ok_matches);
	});
	info = ruTaskIntArg(task, "info", 0);
	if (info > 0) {
		ruRedundantAxiomsInfo(
			info,  axioms,  redundant,  to_remove,  dependencies,
			check_preceeds, check_may_include, math, env
		);
		Some(state);
	} else {
		name2thms = ruAssertionsUses(math.decls.assertions);
		new_math = foldTree(to_remove, math, \ax_id, matches, acc ->
			ruReplaceMatch(matches[0], acc, name2thms, env)
		);
		Some(RuState(state with ru = new_math.sources));
	}
}

ruRedundantAxiomsInfo(
	info : int, 
	axioms : Tree<int, RuAxiom>, 
	redundant : Tree<int, [RuAssertionMatch]>, 
	to_remove : Tree<int, [RuAssertionMatch]>, 
	dependencies : Tree<int, Set<int>>,
	check_preceeds : (RuAssertion, RuAssertion) -> bool,
	check_may_include : (RuAssertion, RuAssertion) -> bool,
	math : RuMath,
	env : RuEnv
) -> void {
	if (info > 0) {
		env.out.onMessage(
			"Redundant axioms (" + i2s(sizeTree(to_remove)) + " of " + i2s(sizeTree(axioms)) + "):\n---------------------\n" + 
			strIndent(strGlue(map(tree2pairs(to_remove), \p -> 
				id2s(p.first) + " <= " + 
				strGlue(map(p.second, \match -> 
					id2s(match.more.info.id) + 
					(if (ruSubstSize(match.sub) == 0) "" else " (sub != 0)")
					//(if (check_preceeds(match.more, match.less)) "" else " (!preceeeds)") +
					//(if (check_may_include(match.less, match.more)) "" else " (!may include)")
				), ", ")
			), "\n")) + "\n"
		);
	}
	if (info > 1) {
		env.out.onMessage(
			"Redundant axioms (" + i2s(sizeTree(redundant)) + " of " + i2s(sizeTree(axioms)) + "):\n---------------------\n" + 
			strIndent(strGlue(map(tree2pairs(redundant), \p -> 
				id2s(p.first) + " <=\n" +
				//"src: " + id2s(p.second[0].less.info.src) + ", pos: " + i2s(p.second[0].less.info.pos) + "\n" +
				strIndent(strGlue(map(p.second, \match -> 
					id2s(match.more.info.id) +
					(if (ruSubstSize(match.sub) == 0) "" else " (sub != 0)")
					//(if (check_preceeds(match.more, match.less)) "" else " (!preceeeds)") + 
					//(if (check_may_include(match.less, match.more)) "" else " (!may include)") + "\n"
					//"src: " + id2s(match.more.info.src) + ", pos: " + i2s(match.more.info.pos)
				), "\n"))
			), "\n")) + "\n"
		);
		non_redundant = filterTree(axioms, \id, ax -> !containsKeyTree(redundant, id));
		env.out.onMessage(
			"Non-redundant axioms (" + i2s(sizeTree(non_redundant)) + " of " + i2s(sizeTree(axioms)) + "):\n---------------------\n" + 
			strIndent(strGlue(map(tree2pairs(non_redundant), \p -> id2s(p.first)
			), "\n"))
		);
	}
	if (info > 2) {
		iter(tree2pairs(redundant), \p -> {
			env.out.onMessage("Axiom:\n" + 
				strIndent(ru2s(ruSetDeclComments(p.second[0].less, []), math)) + "\nis less general then:\n" +
				strIndent(strGlue(map(p.second, \match -> 
					ruDeclShort2s(ruSetDeclComments(match.more, []), math) + 
					(if (ruSubstSize(match.sub) == 0) "" else "\nsub:\n" +  ruSubst2s(match.sub, math)) +
					"\ndepends on:\n" + strIndent(strGlue(
							map(set2array(lookupTreeDef(dependencies, match.more.info.id, makeSet())), id2s),
							"\n"
						)) +
					"\n" 
				), "\n")) + 
				"\n\n"
			);
		});
	}
}
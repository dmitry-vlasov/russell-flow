import command;

export {
	ruCommRemoveEmptySources : RuComm;
}

ruCommRemoveEmptySources = RuComm(
	"remove-empty-sources", "refactor", "self evident", "",
	[RuCommArg("delete", true, "delete files from filesystem. To prevent deleting set to 0", "1")],
	ruRunRemoveEmptySources
);

ruRunRemoveEmptySources(task : ScTask, env : RuState) -> Maybe<RuState> {
	math = env.ruMath;
	conf = env.conf;
	delete_files = lookupTreeDef(task.args, "delete", "1") == "1";
	empty_removed = ruRemoveEmptySources(math, conf, delete_files);
	Some(RuState(env with ruMath = empty_removed));
}

ruRemoveEmptySources(math : RuMath, conf : RuConf, delete_files : bool) -> RuMath {
	start = ruTime();
	all_sources = getTreeValues(math.sources);

	empty_sources = filter(all_sources, \src -> 
		src.decls == [] && 
		src.comments == [] && 
		forall(conf.projectRoots, \root -> root != src.info.module && root != src.info.path)
	);
	if (ruVerbose(conf) > 1) {
		if (empty_sources != []) {
			conf.onMessage("empty sources (" + i2s(length(empty_sources)) + "):\n" + 
				strIndent(strGlue(map(empty_sources, \src -> 
					src.info.module + ": [" + i2s(length(src.decls)) + "] decls"
				), "\n"))
			);
		} else {
			conf.onMessage("no empty sources");
		}
	}
	ret = fold(empty_sources, math, \acc, src -> ruRemoveEmptySource(acc, src, conf, all_sources));
	if (delete_files) {
		iter(empty_sources, \src -> {
			err = deleteFile(src.info.path);
			if (err != "") {
				conf.onMessage(err + " while deleting " + src.info.path);
			} else {
				if (ruVerbose(conf) > 0) {
					conf.onMessage("\tfile " + src.info.path + " is deleted");
				}
			}
		});	
	}
	if (ruVerbose(conf) > 0 && empty_sources != []) {
		operation = if (delete_files) "deleted" else "removed";
		conf.onMessage("empty sources (" + i2s(length(empty_sources)) + ") are " + operation + " in " + ruTime2s(ruTime() - start));
	}
	ret;
}

ruRemoveEmptySource(math : RuMath, src : RuSource, conf : RuConf, all_sources : [RuSource]) -> RuMath {
	imported_by = filtermap(all_sources, \s -> 
		maybeMap(findi(s.imports, \imp -> imp.id == s.info.id), \i -> Pair(s, i))
	);
	ruRemoveFromCache(src.info.path, conf);
	m = fold(imported_by, math, \acc, pair -> {
		s = pair.first;
		ind = pair.second;
		import_replaced = concat(removeIndex(s.imports, ind), src.imports);
		new_s = RuSource(s with imports = import_replaced);
		RuMath(math with sources = setTree(math.sources, s.info.id, new_s));
	});
	RuMath(m with sources = removeFromTree(m.sources, src.info.id));
}

import command;

export {
	ruCommFixLeftRecursion : RuComm;
}

ruCommFixLeftRecursion = RuComm(
	"fix-left-recursion", "misc", "make all grammar rules non-left-recursive", "", [],
	ruRunFixLeftRecursion
);

ruRunFixLeftRecursion(task : RuTask, env : RuEnv) -> Maybe<RuEnv> {
	math = env.ruMath;
	conf = env.conf;
	start = timestamp();
	fixRule = \r -> 
		if (length(r.term.expr) <= 1) r else {
			switch (r.term.expr[0]) {
				RuVar(__,__):
					RuRule(r with term = RuTerm(r.term with expr = 
						concat3([RuConstRef("(")], r.term.expr, [RuConstRef(")")])
					));
				default: r;
			}
		}
	fixSource = \s -> 
		RuSource(s with
			decls = map(s.decls, \decl -> 
				switch (decl) {
					RuRule(__,__,__,__,__): fixRule(decl);
					default: decl;
				}
			)
		);
	if (conf.verbose > 0) {
		conf.onMessage("ru potentially left-recursive rules are fixed" + " in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	new_math = RuMath(math with
		rules = mapTree(math.rules, \r -> fixRule(r)),
		sources = mapTree(math.sources, fixSource)
	);
	Some(RuEnv(env with ruMath = new_math));
}

import command;

export {
	ruCommFixLeftRecursion : RuComm;
	ruFixLeftRecursion(math : RuMath) -> RuMath;
}

ruCommFixLeftRecursion = RuComm(
	"fix-left-recursion", "misc", "make all grammar rules non-left-recursive", "", [],
	ruRunFixLeftRecursion
);

ruRunFixLeftRecursion(task : ScTask, env : RuState) -> Maybe<RuState> {
	math = env.ruMath;
	conf = env.conf;
	start = timestamp();
	new_math = ruFixLeftRecursion(math);
	if (conf.verbose > 0) {
		conf.onMessage("ru left-recursive rules are fixed" + " in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	Some(RuState(env with ruMath = new_math));
}

ruFixLeftRecursion(math : RuMath) -> RuMath {
	fixSource = \s -> RuSource(s with
		decls = map(s.decls, \decl -> 
			switch (decl) {
				RuRule(__,__,__): ruFixLeftRecursiveRule(decl);
				default: decl;
			}
		)
	);
	RuMath(math with
		rules = mapTree(math.rules, \r -> ruFixLeftRecursiveRule(r)),
		sources = mapTree(math.sources, fixSource)
	);
}

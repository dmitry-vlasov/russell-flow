import comm;

export {
	ruCommFixLeftRecursion : RuComm;
	ruFixLeftRecursion(math : RuMath) -> RuMath;
}

ruCommFixLeftRecursion = RuComm(
	RuCommDescr("fix-left-recursion", "misc", "make all grammar rules non-left-recursive", "", false, false, [], []),
	ruRunFixLeftRecursion
);

ruRunFixLeftRecursion(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	math = ruMakeMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	new_math = ruFixLeftRecursion(math);
	if (ruVerbose(env.conf) > 0) {
		unit.out.onMessage("ru left-recursive rules are fixed" + " in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		ru = new_math.sources,
		vars = setTree(setTree(state.vars, 
			"fix-left-recursion.time", ValDouble(ruTimePassed(timer))), 
			"fix-left-recursion.size", ValInt(sizeTree(math.rules))
		)
	));
}

ruFixLeftRecursion(math : RuMath) -> RuMath {
	fixSource = \s -> RuSource(s with
		decls = map(s.decls, \decl -> 
			switch (decl) {
				RuRule(__,__,__): ruFixLeftRecursiveRule(decl);
				default: decl;
			}
		)
	);
	RuMath(math with
		rules = mapTree(math.rules, \r -> ruFixLeftRecursiveRule(r)),
		sources = mapTree(math.sources, fixSource)
	);
}

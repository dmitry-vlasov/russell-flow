import command;
import script/value;

export {
	ruCommRemoveUnusedHyps : RuComm;
}

ruCommRemoveUnusedHyps = RuComm(
	"remove-unused-hyps", "refactor", "self evident", "target", false, 
	[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
	ruRunRemoveUnusedHyps
);

ruRemoveTheoremUnusedHyps(theorem : RuTheorem, conf : RuConf) -> Maybe<Pair<RuTheorem, [bool]>> {
	proof = theorem.proof;
	used_hyps = ruFindUsedHyps(lastElement(proof.steps, ruNoStep), theorem.proof, makeSet());
	if (sizeSet(used_hyps) == length(theorem.stat.hyps)) None() else {
		p = foldi(theorem.stat.hyps, Pair([], makeTree()), \i, acc, hyp ->
			if (!containsSet(used_hyps, i)) acc else {
				new_hyp = RuHyp(length(acc.first), hyp.expr, hyp.pos);
				Pair(
					concat(acc.first, [new_hyp]),
					setTree(acc.second, i, length(acc.first))
				);
			}
		);
		mapping = mapi(theorem.stat.hyps, \i,__ -> containsSet(used_hyps, i));
		new_steps = map(proof.steps, \step ->
			RuStep(step with refs = map(step.refs, \r ->
					switch (r) {
						RuHypRef(i, pos): RuHypRef(lookupTreeDef(p.second, i, -1), pos);
						default: r;
					}
				)
			)
		);
		if (ruVerbose(conf) > 1) {
			unused = differenceSets(buildSet(enumFromTo(0, length(theorem.stat.hyps) - 1)), used_hyps);
			conf.onMessage("\ttheorem '" + id2s(theorem.descr.id) + "' has " + i2s(length(theorem.stat.hyps) - length(p.first)) + " unused hyps: " + 
			strGlue(map(set2array(unused), \i -> i2s(i + 1)), ", "));
		}
		Some(Pair(
			ruUpdateTheoremVars(RuTheorem(theorem with 
				stat = RuStatement(theorem.stat with hyps = p.first),
				proof = RuProof(proof with steps = new_steps)
			)),
			mapping
		));
	}
}

ruFindUsedHyps(step : RuStep, proof : RuProof, acc : Set<int>) -> Set<int> {
	fold(step.refs, acc, \ac, r ->
		switch (r) {
			RuStepRef(i, __): ruFindUsedHyps(proof.steps[i], proof, ac);
			RuHypRef(i, __): insertSet(ac, i);
		}
	)
}

ruRunRemoveUnusedHyps(task : ScTask, env : RuState) -> Maybe<RuState> {
	timer = ruMakeTimer();
	math = env.ruMath;
	conf = env.conf;
	reduced = filtermap(ruConcurrent(
		map(getTreeValues(ruMathTheorems(math)), 
			\th -> \ -> ruRemoveTheoremUnusedHyps(th, conf)
		)
	), idfn);
	name2thms = ruTheoremName2ReferringTheorems(math);
	ret = fold(
		reduced,
		fold(reduced, math, \acc, p -> ruReplaceAssertion(p.first, acc, conf)),
		\acc, p ->
			foldSet(lookupTreeDef(name2thms, p.first.descr.id, makeSet()), acc, \ac, n -> {	
					switch (lookupTree(ac.assertions, n)) {
						Some(ass): {
							ruReplaceAssertion(
								ruRemoveTheoremRedundantHyps(
									cast(ass : RuAssertion -> RuTheorem), 
									p.first.descr.id, p.second, ac
								), 
								ac,
								conf
							);
						}
						None(): ac;
					}
				}
			)
	);
	if (ruVerbose(conf) > 0) {
		conf.onMessage("found " + i2s(length(reduced)) + " theorems with unused hyps in " + ruTimePassed2s(timer));
	}
	Some(RuState(env with 
		ruMath = ret,
		vars = setTree(env.vars, "remove-unused-hyps.removed", ValInt(length(reduced)))
	));
}

ruRemoveTheoremRedundantHyps(theorem : RuTheorem, id : int, keep_hyp : [bool], math : RuMath) -> RuTheorem {
	proof = theorem.proof;
	new_steps = map(proof.steps, \step ->
		if (step.assertion != id) step else
		RuStep(step with 
			refs = foldi(step.refs, [], \i, acc, r ->
				if (keep_hyp[i]) concat(acc, [r]) else acc
			)
		)
	);
	ruUpdateTheoremVars(RuTheorem(theorem with 
		proof = RuProof(proof with steps = new_steps)
	));
}

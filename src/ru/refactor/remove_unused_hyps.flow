import comm;
import script/value;

export {
	ruCommRemoveUnusedHyps : RuComm;
}

ruCommRemoveUnusedHyps = RuComm(
	RuCommInfo(
		"remove-unused-hyps", "refactor", "self evident", "target", false, false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
		[
			RuCommRet("remove-unused-hyps.optimized-theorems", "int", "total number of theorems with unused hyps"),
			RuCommRet("remove-unused-hyps.optimized-hyps", "int", "total number of unused (removed) hyps")
		]
	),
	ruRunRemoveUnusedHyps
);

ruRemoveTheoremUnusedHyps(theorem : RuTheorem, env : RuEnv) -> Maybe<Pair<RuTheorem, [bool]>> {
	proof = theorem.proof;
	used_hyps = ruFindUsedHyps(lastElement(proof.steps, ruNoStep), theorem.proof, makeSet());
	if (sizeSet(used_hyps) == length(theorem.stat.hyps)) None() else {
		p = foldi(theorem.stat.hyps, Pair([], makeTree()), \i, acc, hyp ->
			if (!containsSet(used_hyps, i)) acc else {
				new_hyp = RuHyp(length(acc.first), hyp.expr, hyp.pos);
				Pair(
					concat(acc.first, [new_hyp]),
					setTree(acc.second, i, length(acc.first))
				);
			}
		);
		mapping = mapi(theorem.stat.hyps, \i,__ -> containsSet(used_hyps, i));
		new_steps = map(proof.steps, \step ->
			RuStep(step with refs = map(step.refs, \r ->
					switch (r) {
						RuHypRef(i): RuHypRef(lookupTreeDef(p.second, i, -1));
						default: r;
					}
				)
			)
		);
		if (ruVerbose(env.conf) > 1) {
			unused = differenceSets(buildSet(enumFromTo(0, length(theorem.stat.hyps) - 1)), used_hyps);
			env.out.onMessage("\ttheorem '" + id2s(theorem.info.id) + "' has " + i2s(length(theorem.stat.hyps) - length(p.first)) + " unused hyps: " + 
			strGlue(map(set2array(unused), \i -> i2s(i + 1)), ", ") + " of " + i2s(length(theorem.stat.hyps)));
		}
		Some(Pair(
			ruUpdateTheoremVars(RuTheorem(theorem with 
				stat = RuStatement(theorem.stat with hyps = p.first),
				proof = RuProof(proof with steps = new_steps)
			)),
			mapping
		));
	}
}

ruFindUsedHyps(step : RuStep, proof : RuProof, acc : Set<int>) -> Set<int> {
	fold(step.refs, acc, \ac, r ->
		switch (r) {
			RuStepRef(i): ruFindUsedHyps(proof.steps[i], proof, ac);
			RuHypRef(i):  insertSet(ac, i);
		}
	)
}

ruRunRemoveUnusedHyps(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	timer = ruMakeTimer();
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	reduced = filtermap(ruConcurrent(
		map(getTreeValues(ruDeclsTheorems(math.decls)), 
			\th -> \env1 -> ruRemoveTheoremUnusedHyps(th, env1)
		), env
	), idfn);
	name2uses = ruAssertionsUses(math.decls.assertions);
	ret = fold(
		reduced,
		fold(reduced, math, \acc, p -> ruMathReplaceDecl(acc, p.first, env)),
		\acc, p ->
			foldSet(lookupTreeDef(name2uses, p.first.info.id, makeSet()), acc, \ac, th_id ->
				switch (maybeBind(lookupTree(ac.decls.assertions, th_id), ruDecl2Theorem)) {
					Some(th): {
						ruMathReplaceDecl(ac,
							ruRemoveTheoremRedundantHyps(
								th, p.first.info.id, p.second, ac, env
							),
							env
						)
					}
					None(): {
						ruCrash("theorem '" + id2s(th_id) + "' is not found");
						ac;
					}
				}
			)
	);
	num_unused_hyps = fold(reduced, 0, \acc, p -> fold(p.second, acc, \ac, bit -> if (bit) acc else acc + 1));
	if (ruVerbose(conf) > 0) {
		unit.out.onMessage("found " + i2s(length(reduced)) + " theorems with " + i2s(num_unused_hyps) + " unused hyps in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		ru = ret.sources,
		vars = setTree(setTree(setTree(state.vars, 
			"remove-unused-hyps.optimized-theorems", scIntVal(length(reduced))),
			"remove-unused-hyps.optimized-hyps", scIntVal(num_unused_hyps)),
			"remove-unused-hyps.time", scDoubleVal(ruTimePassed(timer))
		)
	));
}

ruRemoveTheoremRedundantHyps(theorem : RuTheorem, id : int, keep_hyp : [bool], math : RuMath, env : RuEnv) -> RuTheorem {
	proof = theorem.proof;
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage(
			"\tremoving redundant refs in theorem '" + id2s(theorem.info.id) + "', " + 
			"with redundant: " + id2s(id) + ", keep_hyp: [" + strGlue(map(keep_hyp, b2s),  ", ") + "]"
		);
	}
	new_steps = map(proof.steps, \step ->
		if (step.assertion != id) step else
		RuStep(step with 
			refs = foldi(step.refs, [], \i, acc, r -> {
				if (i >= length(keep_hyp)) {
					ruCrash(
						"i >= length(keep_hyp): " + i2s(i) + " >= " + i2s(length(keep_hyp)) + ", " +
						"id: " + id2s(id) + "\n" +
						"theorem: " + id2s(theorem.info.id) + "\n" +
						"step: " + ru2s(step, math) + "\n"
					);
				}
				if (keep_hyp[i]) concat(acc, [r]) else acc
			})
		)
	);
	ruUpdateTheoremVars(RuTheorem(theorem with 
		proof = RuProof(proof with steps = new_steps)
	));
}

import command;

export {
	ruCommRemoveUnusedHyps : RuComm;
}

ruCommRemoveUnusedHyps = RuComm(
	"remove-unused-hyps", "refactor", "self evident", "target",
	[RuCommArg("target", false, "the target: a theorem, file or all", "")],
	ruRunRemoveUnusedHyps
);

ruRemoveTheoremUnusedHyps(theorem : RuTheorem, conf : RuConf) -> Maybe<Pair<RuTheorem, [bool]>> {
	proof = theorem.proof;
	used_hyps = ruFindUsedHyps(lastElement(proof.steps, ruNoStep), theorem.proof, makeSet());
	if (sizeSet(used_hyps) == length(theorem.hyps)) None() else {
		p = foldi(theorem.hyps, Pair([], makeTree()), \i, acc, hyp ->
			if (!containsSet(used_hyps, i)) acc else {
				new_hyp = RuHyp(length(acc.first), hyp.expr, hyp.pos);
				Pair(
					concat(acc.first, [new_hyp]),
					setTree(acc.second, i, length(acc.first))
				);
			}
		);
		mapping = mapi(theorem.hyps, \i,__ -> containsSet(used_hyps, i));
		new_steps = map(proof.steps, \step ->
			RuStep(step with refs = map(step.refs, \r ->
					switch (r) {
						RuHypRef(i, pos): RuHypRef(lookupTreeDef(p.second, i, -1), pos);
						default: r;
					}
				)
			)
		);
		if (conf.verbose > 1) {
			unused = differenceSets(buildSet(enumFromTo(0, length(theorem.hyps) - 1)), used_hyps);
			conf.onMessage("\ttheorem " + theorem.name + " has " + i2s(length(theorem.hyps) - length(p.first)) + " unused hyps: " + 
			strGlue(map(set2array(unused), \i -> i2s(i + 1)), ", "));
		}
		Some(Pair(
			ruUpdateTheoremVars(RuTheorem(theorem with 
				hyps = p.first, 
				proof = RuProof(proof with steps = new_steps)
			)),
			mapping
		));
	}
}

ruFindUsedHyps(step : RuStep, proof : RuProof, acc : Set<int>) -> Set<int> {
	fold(step.refs, acc, \ac, r ->
		switch (r) {
			RuStepRef(i, __): ruFindUsedHyps(proof.steps[i], proof, ac);
			RuHypRef(i, __): insertSet(ac, i);
		}
	)
}

ruRunRemoveUnusedHyps(task : RuTask, env : RuEnv) -> RuEnv {
	start = timestamp();
	math = env.ruMath;
	conf = env.conf;
	reduced = filtermap(ruConcurrent(
		map(getTreeValues(ruMathTheorems(math)), 
			\th -> \ -> ruRemoveTheoremUnusedHyps(th, conf)
		)
	), idfn);
	if (reduced == []) env else {
		name2thms = ruName2ReferringTheorems(math);
		ret = fold(
			reduced,
			fold(reduced, math, \acc, p -> ruReplaceAssertion(p.first, acc, conf)),
			\acc, p ->
				foldSet(lookupTreeDef(name2thms, p.first.name, makeSet()), acc, \ac, n -> {	
						switch (lookupTree(ac.assertions, n)) {
							Some(ass): {
								ruReplaceAssertion(
									ruRemoveTheoremRedundantHyps(
										cast(ass : RuAssertion -> RuTheorem), 
										p.first.name, p.second, ac
									), 
									ac,
									conf
								);
							}
							None(): ac;
						}
					}
				)
		);
		if (conf.verbose > 0) {
			conf.onMessage("found " + i2s(length(reduced)) + " theorems with unused hyps in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
		}
		RuEnv(env with ruMath = ret);
	}
}

ruName2ReferringTheorems(math : RuMath) -> Tree<string, Set<string>> {
	foldTree(math.assertions, makeTree(), \name, ass, acc ->
		switch (ass) {
			RuTheorem(__,__,__,__,__,__,__,proof,__): 
				fold(proof.steps, acc, \ac, step ->
					setTree(ac, step.assertion, 
						insertSet(lookupTreeDef(ac, step.assertion, makeSet()), name)
					)
				);
			default: acc;
		}
	);
}

ruRemoveTheoremRedundantHyps(theorem : RuTheorem, name : string, keep_hyp : [bool], math : RuMath) -> RuTheorem {
	proof = theorem.proof;
	new_steps = map(proof.steps, \step ->
		if (step.assertion != name) step else
		RuStep(step with 
			refs = foldi(step.refs, [], \i, acc, r ->
				if (keep_hyp[i]) concat(acc, [r]) else acc
			)
		)
	);
	ruUpdateTheoremVars(RuTheorem(theorem with 
		proof = RuProof(proof with steps = new_steps)
	));
}

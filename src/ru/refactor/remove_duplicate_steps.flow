import comm;
import script/value;

export {
	RuDuplicateStepsRemoved(
		larger  : RuTheorem,
		smaller : RuTheorem,
		removed : [int]
	);
	ruRemoveTheoremDuplicateSteps(theorem : RuTheorem, env : RuEnv) -> Maybe<RuDuplicateStepsRemoved>;
	ruCommRemoveDuplicateSteps : RuComm;
}

ruCommRemoveDuplicateSteps = RuComm(
	RuCommDescr(
		"remove-duplicate-steps", "refactor", "self evident", "target", false, false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")], 
		[
			RuCommRet("remove-duplicate-steps.optimized-theorems", "int", "total number of theorems, which contain duplicate steps"),
			RuCommRet("remove-duplicate-steps.optimized-steps", "int", "total number of diplicate steps, which were removed by optimization")
		]
	),
	ruRunRemoveDuplicateSteps
);

RuDuplicateStepsAcc(
	steps : [RuStep],
	exprMap : Tree<[RuExpNode], int>,
	stepMap : Tree<int, int>
);

ruRemoveTheoremDuplicateSteps(theorem : RuTheorem, env : RuEnv) -> Maybe<RuDuplicateStepsRemoved> {
	proof = theorem.proof;
	dup_steps_inds = ref [];
	new_steps = foldi(proof.steps, RuDuplicateStepsAcc([], makeTree(), makeTree()), \i, acc, step -> {
		new_step = RuStep(step with 
			ind = length(acc.steps),
			refs = map(step.refs, \r ->
				switch (r) {
					RuStepRef(j): RuStepRef(lookupTreeDef(acc.stepMap, j, -1));
					default: r;
				}
			)
		);
		switch (lookupTree(acc.exprMap, step.expr.nodes)) {
			Some(j): {
				refArrayPush(dup_steps_inds, i);
				RuDuplicateStepsAcc(acc with stepMap = setTree(acc.stepMap, i, j));
			}
			None(): {
				RuDuplicateStepsAcc(
					concat(acc.steps, [new_step]),
					setTree(acc.exprMap, step.expr.nodes, i),
					setTree(acc.stepMap, i, length(acc.steps))
				)
			}
		}
	}).steps;
	if (length(new_steps) == length(proof.steps)) None() else {
		if (ruVerbose(env.conf) > 1) {
			env.out.onMessage("\ttheorem '" + id2s(theorem.descr.id) + "' has " + i2s(length(^dup_steps_inds)) + " duplicate steps: " + strGlue(map(^dup_steps_inds, \i -> i2s(i + 1)), ", "));
		}
		Some(RuDuplicateStepsRemoved(
			theorem,
			RuTheorem(theorem with 
				proof = ruUpdateProofVars(RuProof(proof with steps = new_steps), theorem, theorem)
			),
			^dup_steps_inds
		));
	}
}

ruRunRemoveDuplicateSteps(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	timer = ruMakeTimer();
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	reduced = filtermap(ruConcurrent(
		map(getTreeValues(ruDeclsTheorems(math.decls)), 
			\th -> \ -> ruRemoveTheoremDuplicateSteps(th, env)
		)
	), idfn);
	ret = fold(reduced, math, \acc, red -> ruMathReplaceDecl(acc, red.smaller, env));
	if (ruVerbose(conf) > 0) {
		unit.out.onMessage("found " + i2s(length(reduced)) + " theorems with duplicate steps in " + ruTimePassed2s(timer));
	}
	duplicate_steps = fold(reduced, 0, \acc, red -> acc + length(red.removed));
	Some(RuState(state with 
		ru = ret.sources,
		vars = setTree(setTree(setTree(state.vars, 
			"remove-duplicate-steps.optimized-theorems", ValInt(length(reduced))),
			"remove-duplicate-steps.optimized-steps", ValInt(duplicate_steps)),
			"remove-duplicate-steps.time", ValDouble(ruTimePassed(timer))
		)
	));
}

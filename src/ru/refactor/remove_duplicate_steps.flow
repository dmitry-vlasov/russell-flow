import command;
import script/value;

export {
	ruRemoveTheoremDuplicateSteps(theorem : RuTheorem, conf : RuConf) -> Maybe<RuTheorem>;
	ruCommRemoveDuplicateSteps : RuComm;
}

ruCommRemoveDuplicateSteps = RuComm(
	RuCommDescr(
		"remove-duplicate-steps", "refactor", "self evident", "target", false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")]
	),
	ruRunRemoveDuplicateSteps
);

RuDuplicateStepsAcc(
	steps : [RuStep],
	exprMap : Tree<[RuExpNode], int>,
	stepMap : Tree<int, int>
);

ruRemoveTheoremDuplicateSteps(theorem : RuTheorem, conf : RuConf) -> Maybe<RuTheorem> {
	proof = theorem.proof;
	dup_steps_inds = ref [];
	new_steps = foldi(proof.steps, RuDuplicateStepsAcc([], makeTree(), makeTree()), \i, acc, step -> {
		new_step = RuStep(step with 
			ind = length(acc.steps),
			refs = map(step.refs, \r ->
				switch (r) {
					RuStepRef(j, pos): RuStepRef(lookupTreeDef(acc.stepMap, j, -1), pos);
					default: r;
				}
			)
		);
		switch (lookupTree(acc.exprMap, step.expr.nodes)) {
			Some(j): {
				refArrayPush(dup_steps_inds, i);
				RuDuplicateStepsAcc(acc with stepMap = setTree(acc.stepMap, i, j));
			}
			None(): {
				RuDuplicateStepsAcc(
					concat(acc.steps, [new_step]),
					setTree(acc.exprMap, step.expr.nodes, i),
					setTree(acc.stepMap, i, length(acc.steps))
				)
			}
		}
	}).steps;
	if (length(new_steps) == length(proof.steps)) None() else {
		if (ruVerbose(conf) > 1) {
			conf.onMessage("\ttheorem '" + id2s(theorem.descr.id) + "' has " + i2s(length(proof.steps) - length(new_steps)) + " duplicate steps: " + strGlue(map(^dup_steps_inds, \i -> i2s(i + 1)), ", "));
		}
		Some(RuTheorem(theorem with 
			proof = ruUpdateProofVars(RuProof(proof with steps = new_steps), theorem, theorem)
		));
	}
}

ruRunRemoveDuplicateSteps(task : ScTask, env : RuState) -> Maybe<RuState> {
	timer = ruMakeTimer();
	conf = env.conf;
	math = ruMakeMathFromSources(env.ru, conf);
	reduced = filtermap(ruConcurrent(
		map(getTreeValues(ruMathTheorems(math)), 
			\th -> \ -> ruRemoveTheoremDuplicateSteps(th, conf)
		)
	), idfn);
	ret = fold(reduced, math, \acc, th -> ruReplaceAssertion(th, acc, conf));
	if (ruVerbose(conf) > 0) {
		conf.onMessage("found " + i2s(length(reduced)) + " theorems with duplicate steps in " + ruTimePassed2s(timer));
	}
	Some(RuState(env with 
		ru = ret.sources,
		vars = setTree(env.vars, "remove-duplicate-steps.removed", ValInt(length(reduced)))
	));
}

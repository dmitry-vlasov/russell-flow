import command;

export {
	ruRemoveTheoremDuplicateSteps(theorem : RuTheorem, conf : RuConf) -> Maybe<RuTheorem>;
	ruCommRemoveDuplicateSteps : RuComm;
}

ruCommRemoveDuplicateSteps = RuComm(
	"remove-duplicate-steps", "refactor", "self evident", "target",
	[RuCommArg("target", false, "the target: a theorem, file or all", "")],
	ruRunRemoveDuplicateSteps
);

RuDuplicateStepsAcc(
	steps : [RuStep],
	exprMap : Tree<[RuExpNode], int>,
	stepMap : Tree<int, int>
);

ruRemoveTheoremDuplicateSteps(theorem : RuTheorem, conf : RuConf) -> Maybe<RuTheorem> {
	proof = theorem.proof;
	dup_steps_inds = ref [];
	new_steps = foldi(proof.steps, RuDuplicateStepsAcc([], makeTree(), makeTree()), \i, acc, step -> {
		new_step = RuStep(step with 
			ind = length(acc.steps),
			refs = map(step.refs, \r ->
				switch (r) {
					RuStepRef(j, pos): RuStepRef(lookupTreeDef(acc.stepMap, j, -1), pos);
					default: r;
				}
			)
		);
		switch (lookupTree(acc.exprMap, step.expr.nodes)) {
			Some(j): {
				refArrayPush(dup_steps_inds, i);
				RuDuplicateStepsAcc(acc with stepMap = setTree(acc.stepMap, i, j));
			}
			None(): {
				RuDuplicateStepsAcc(
					concat(acc.steps, [new_step]),
					setTree(acc.exprMap, step.expr.nodes, i),
					setTree(acc.stepMap, i, length(acc.steps))
				)
			}
		}
	}).steps;
	if (length(new_steps) == length(proof.steps)) None() else {
		if (conf.verbose > 1) {
			conf.onMessage("\ttheorem " + theorem.name + " has " + i2s(length(proof.steps) - length(new_steps)) + " duplicate steps: " + strGlue(map(^dup_steps_inds, \i -> i2s(i + 1)), ", "));
		}
		Some(RuTheorem(theorem with proof = ruUpdateProofVars(RuProof(proof with steps = new_steps))));
	}
}

ruRunRemoveDuplicateSteps(task : RuTask, env : RuEnv) -> Maybe<RuEnv> {
	start = timestamp();
	math = env.ruMath;
	conf = env.conf;
	
	reduced = filtermap(ruConcurrent(
		map(getTreeValues(ruMathTheorems(math)), 
			\th -> \ -> ruRemoveTheoremDuplicateSteps(th, conf)
		)
	), idfn);
	ret = fold(reduced, math, \acc, th -> ruReplaceAssertion(th, acc, conf));
	if (conf.verbose > 0) {
		conf.onMessage("found " + i2s(length(reduced)) + " theorems with duplicate steps in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	Some(RuEnv(env with ruMath = ret));
}

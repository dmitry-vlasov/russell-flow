import ru/refactor/split_math;
import ru/refactor/optimize_imports;
import ru/refactor/refactor;
import ru/refactor/shorten;
import command;

export {
	ruRefactorCommands() -> [RuComm];
}

ruRefactorCommands() -> [RuComm] {[
	RuComm(
		"split-math", "misc", "split a single file into a filesystem",
		[RuCommArg("file", false, "input file", "")],
		\task, env -> {
			file = lookupTreeDef(task.args, "file", "");
			module = ruTrimPath(file, env.conf, ".ru");
			RuEnv(env with ruMath = ruSplitMath(env.ruMath, env.conf, module));
		}
	),
	RuComm(
		"fix-left-recursion", "misc", "make all grammar rules non-left-recursive",
		[RuCommArg("file", false, "input file", "")],
		\task, env -> RuEnv(env with ruMath = ruFixLeftRecursiveRules(env.ruMath, env.conf))
	),
	RuComm(
		"optimize-imports", "misc", "optimize imports", [],
		\task, env -> RuEnv(env with ruMath = ruOptimizeImports(env.ruMath, env.conf))
	),
	RuComm(
		"shorten-proofs", "refactor", "try to make proofs shorter",
		[RuCommArg("target", false, "the target: a theorem, file or all", "")],
		ruCommShortenProofs
	),
	RuComm(
		"remove-duplicate-steps", "refactor", "self evident",
		[RuCommArg("target", false, "the target: a theorem, file or all", "")],
		ruCommRemoveMathDuplicateSteps
	),
	RuComm(
		"remove-unused-steps", "refactor", "self evident",
		[RuCommArg("target", false, "the target: a theorem, file or all", "")],
		ruCommRemoveMathUnusedSteps
	),
]}

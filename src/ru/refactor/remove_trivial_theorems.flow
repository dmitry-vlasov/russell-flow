import command;
import script/value;

export {
	ruCommRemoveTrivialTheorems : RuComm;
}

ruCommRemoveTrivialTheorems = RuComm(
	"remove-trivial-theorems", "refactor", "self evident", "target",
	[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
	ruRunRemoveTrivialTheorems
);

RuTrivialReplacement(
	trivial : RuTheorem,
	replacement: string,
	hypMapping : [int],
);

ruRemoveTrivialTheorem(repl : RuTrivialReplacement, math : RuMath, name2thms : Tree<string, Set<string>>, conf : RuConf) -> RuMath {
	uses = filtermap(
		set2array(lookupTreeDef(name2thms, repl.trivial.descr.name, makeSet())),
		\name -> maybeMap(lookupTree(math.assertions, name), \a -> cast(a : RuAssertion -> RuTheorem))
	);
	fold(uses, ruDeleteAssertion(repl.trivial, math, conf), \acc, th -> {
		conf.onMessage("\t\treplacing trivial " + repl.trivial.descr.name + " in theorem " + th.descr.name);
		new_proof = RuProof(th.proof with 
			steps = map(th.proof.steps, \step ->
				if (step.assertion != repl.trivial.descr.name) step else {
					conf.onMessage("\t\t\treplacing step " + i2s(step.ind + 1) + " from " + step.assertion + " to " + repl.replacement);
					RuStep(step with 
						assertion = repl.replacement,
						refs = map(repl.hypMapping, \i -> step.refs[i])
					);
				}
			)
		);
		conf.onMessage("new proof for " + th.descr.name + ":\n" + ru2s(new_proof, math));
		ruReplaceAssertion(RuTheorem(th with proof = new_proof), acc, conf);
	});
}

ruMakeTrivialReplacement(th : RuTheorem) -> Maybe<RuTrivialReplacement> {
	if (length(th.proof.steps) != 1) None() else {
		step = th.proof.steps[0];
		Some(RuTrivialReplacement(th, step.assertion,
			filtermap(step.refs, \href -> 
				switch (href) {
					RuHypRef(i,__): Some(i);
					default: None();
				}
			)
		));
	}
}

ruRunRemoveTrivialTheorems(task : ScTask, env : RuState) -> Maybe<RuState> {
	start = timestamp();
	math = env.ruMath;
	conf = RuConf(env.conf with 
		onError = \msg, pos -> {
			println("ERR!!: " + msg);
			env.conf.onError(msg, pos);
		}
	);
	println("verbose: " + i2s(conf.verbose));
	trivial = filtermap(getTreeValues(ruMathTheorems(math)), ruMakeTrivialReplacement);
	name2thms = ruTheoremName2ReferringTheorems(math);
	ret = fold(trivial, math, \acc, t -> {
		//if (conf.verbose > 1) {
			conf.onMessage("\tremoving trivial theorem " + t.trivial.descr.name);
		//}
		ruRemoveTrivialTheorem(t, acc, name2thms, conf)
	});
	if (conf.verbose > 0) {
		conf.onMessage("found " + i2s(length(trivial)) + " trivial theorems in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	Some(RuState(env with 
		ruMath = ret,
		vars = setTree(env.vars, "remove-trivial-theorems.removed", ValInt(length(trivial)))
	));
}

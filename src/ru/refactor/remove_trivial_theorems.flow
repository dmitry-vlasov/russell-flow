import comm;
import script/value;

export {
	ruCommRemoveTrivialTheorems : RuComm;
}

ruCommRemoveTrivialTheorems = RuComm(
	RuCommDescr(
		"remove-trivial-theorems", "refactor", "self evident", "target", false, false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
		[RuCommRet("remove-trivial-theorems.removed", "int", "total number of trivial theorems, which were removed by optimization")]
	),
	ruRunRemoveTrivialTheorems
);

RuTrivialReplacement(
	trivial : RuTheorem,
	replacement: int,
	hypMapping : [int],
);

ruRemoveTrivialTheorem(repl : RuTrivialReplacement, math : RuMath, name2thms : Tree<int, Set<int>>, env : RuEnv) -> RuMath {
	uses = filtermap(
		set2array(lookupTreeDef(name2thms, repl.trivial.descr.id, makeSet())),
		\name -> maybeMap(lookupTree(math.assertions, name), \a -> cast(a : RuAssertion -> RuTheorem))
	);
	fold(uses, ruDeleteAssertion(repl.trivial, math, env), \acc, th -> {
		if (ruVerbose(env.conf) > 2) {
			env.out.onMessage("\t\treplacing trivial '" + id2s(repl.trivial.descr.id) + "' in theorem '" + id2s(th.descr.id) + "'");
		}
		new_proof = RuProof(th.proof with 
			steps = map(th.proof.steps, \step ->
				if (step.assertion != repl.trivial.descr.id) step else {
					if (ruVerbose(env.conf) > 3) {
						env.out.onMessage("\t\t\treplacing step " + i2s(step.ind + 1) + " from '" + id2s(step.assertion) + "' to '" + id2s(repl.replacement) + "'");
					}
					RuStep(step with 
						assertion = repl.replacement,
						refs = map(repl.hypMapping, \i -> step.refs[i])
					);
				}
			)
		);
		if (ruVerbose(env.conf) > 2) {
			env.out.onMessage("\t\tnew proof for '" + id2s(th.descr.id) + "':\n" + 
				strIndent(strIndent(ru2s(new_proof, math)))
			);
		}
		ruReplaceAssertion(RuTheorem(th with proof = new_proof), acc, env);
	});
}

ruMakeTrivialReplacement(th : RuTheorem) -> Maybe<RuTrivialReplacement> {
	if (length(th.proof.steps) != 1) None() else {
		step = th.proof.steps[0];
		Some(RuTrivialReplacement(th, step.assertion,
			filtermap(step.refs, \href -> 
				switch (href) {
					RuHypRef(i,__): Some(i);
					default: None();
				}
			)
		));
	}
}

ruRunRemoveTrivialTheorems(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	timer = ruMakeTimer();
	conf = state.conf;
	math = ruMakeMathFromSources(state.ru, env);
	trivial = filtermap(getTreeValues(ruMathTheorems(math)), ruMakeTrivialReplacement);
	name2thms = ruTheoremName2ReferringTheorems(math);
	ret = fold(trivial, math, \acc, t -> {
		if (ruVerbose(conf) > 1) {
			unit.out.onMessage("\tremoving trivial theorem '" + id2s(t.trivial.descr.id) + "'");
		}
		ruRemoveTrivialTheorem(t, acc, name2thms, env)
	});
	if (ruVerbose(conf) > 0) {
		unit.out.onMessage("found and removed " + i2s(length(trivial)) + " trivial theorems in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		ru = ret.sources,
		vars = setTree(setTree(state.vars, 
			"remove-trivial-theorems.removed", ValInt(length(trivial))),
			"remove-trivial-theorems.time", ValDouble(ruTimePassed(timer))
		)
	));
}

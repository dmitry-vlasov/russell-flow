import comm;
import script/value;
import ru/refactor/replace_theorem;

export {
	ruCommRemoveTrivialTheorems : RuComm;
}

ruCommRemoveTrivialTheorems = RuComm(
	RuCommDescr(
		"remove-trivial-theorems", "refactor", "self evident", "target", false, false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
		[RuCommRet("remove-trivial-theorems.removed", "int", "total number of trivial theorems, which were removed by optimization")]
	),
	ruRunRemoveTrivialTheorems
);

ruMakeTrivialReplacement(th : RuTheorem) -> Maybe<RuTheoremReplacement> {
	if (length(th.proof.steps) != 1) None() else {
		step = th.proof.steps[0];
		Some(RuTheoremReplacement(th, step.assertion,
			filtermap(step.refs, \href -> 
				switch (href) {
					RuHypRef(i,__): Some(i);
					default: None();
				}
			)
		));
	}
}

ruRunRemoveTrivialTheorems(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	timer = ruMakeTimer();
	conf = state.conf;
	math = ruMakeMathFromSources(state.ru, env);
	trivial = filtermap(getTreeValues(ruMathTheorems(math)), ruMakeTrivialReplacement);
	name2thms = ruTheoremName2ReferringTheorems(math);
	ret = fold(trivial, math, \acc, t -> {
		if (ruVerbose(conf) > 1) {
			unit.out.onMessage("\tremoving trivial theorem '" + id2s(t.original.descr.id) + "'");
		}
		ruReplaceTheorem(t, acc, name2thms, env)
	});
	if (ruVerbose(conf) > 0) {
		unit.out.onMessage("found and removed " + i2s(length(trivial)) + " trivial theorems in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		ru = ret.sources,
		vars = setTree(setTree(state.vars, 
			"remove-trivial-theorems.removed", ValInt(length(trivial))),
			"remove-trivial-theorems.time", ValDouble(ruTimePassed(timer))
		)
	));
}

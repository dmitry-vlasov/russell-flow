import comm;
import script/value;
import ru/util/match_assertions;
import ru/util/target;
import ru/util/src;

export {
	ruCommRemoveTrivialTheorems : RuComm;
}

ruCommRemoveTrivialTheorems = RuComm(
	RuCommInfo(
		"remove-trivial-theorems", "refactor", "self evident", "target", false, false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
		[RuCommRet("remove-trivial-theorems.removed", "int", "total number of trivial theorems, which were removed by optimization")]
	),
	ruRunRemoveTrivialTheorems
);

ruMakeTrivialReplacement(th : RuTheorem, math : RuMath) -> Maybe<RuAssertionMatch> {
	if (length(th.proof.steps) != 1) None() else {
		step = th.proof.steps[0];
		Some(RuAssertionMatch(th, lookupTreeDef(math.decls.assertions, step.assertion, ruNoAxiom), ruEmptySubst,
			filtermap(step.refs, \href -> 
				switch (href) {
					RuHypRef(i): Some(i);
					default: None();
				}
			)
		));
	}
}

ruFindMostGeneralMatch(match : RuAssertionMatch, matches : Tree<int, RuAssertionMatch>) -> RuAssertionMatch {
	switch (lookupTree(matches, match.more.info.id)) {
		Some(more): ruFindMostGeneralMatch(more, matches);
		None(): match;
	}
}

ruRunRemoveTrivialTheorems(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	timer = ruMakeTimer();
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	target = ruDetermineTarget(task, math, env);
	theorems = filtermap(ruTargetDecls(target, math, env), ruDecl2Theorem);
	trivial = filtermap(theorems, \th -> ruMakeTrivialReplacement(th, math));
	mapping = fold(trivial, makeTree(), \acc, match -> setTree(acc, match.less.info.id, match));
	trivial1 = map(trivial, \match -> ruFindMostGeneralMatch(match, mapping));
	name2uses = ruAssertionsUses(math.decls.assertions);
	ret = fold(trivial1, math, \acc, match -> {
		if (ruVerbose(conf) > 1) {
			unit.out.onMessage("\tremoving trivial theorem '" + id2s(match.less.info.id) + "'");
		}
		acc1 = ruReplaceMatch(match, acc, name2uses, env);
		if (!containsKeyTree(acc1.decls.assertions, match.less.info.id)) acc1 else {
			ruMathRemoveDecl(acc1, match.less, env);
		}
	});
	if (ruVerbose(conf) > 0) {
		unit.out.onMessage("found and removed " + i2s(length(trivial1)) + " trivial theorems in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		ru = ret.sources,
		vars = setTree(setTree(state.vars, 
			"remove-trivial-theorems.removed", ValInt(length(trivial1))),
			"remove-trivial-theorems.time", ValDouble(ruTimePassed(timer))
		)
	));
}

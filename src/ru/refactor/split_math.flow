import base/split;
import ru/update;
import command;

export {
	ruCommSplitMath : RuComm;
	ruRunSplitMath(task : ScTask, env : RuState) -> Maybe<RuState>;
}

ruCommSplitMath = RuComm(
	"split-math-ru", "misc", "split a single file into a filesystem", "file",
	[RuCommArg("file", false, "input file", "")],
	ruRunSplitMath
);

ruRunSplitMath(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	math = env.ruMath;
	conf = env.conf;
	module = ruTrimPath(file, conf, ".ru");
	start = timestamp();
	num1 = sizeTree(math.sources);
	if (conf.verbose > 1) {
		conf.onMessage("ru going to split: " + i2s(num1) + " modules");
	}
	split_sources = foldTree(math.sources, makeTree(), \name, src, acc -> {
			if (conf.verbose > 1) {
				conf.onMessage("\tgoing to split module: '" + src.info.module + "'");
			}
			mergeTree(acc, ruSplitSources(src, conf, math, module))
		}
	);
	ret = RuMath(math with sources = split_sources);
	created = timestamp();
	root_info = ruNewFileInfo(module, conf, ".ru");
	if (conf.verbose > 1) {
		conf.onMessage("\troot module: '" + root_info.module + "', path: '" + root_info.path + "'");
	}
	root_src = RuSource(
		map(getTreeValues(ret.sources), \src -> RuImport(src.info.module, -1)),
		[], [], root_info
	);
	if (conf.verbose > 0) {
		conf.onMessage("ru split " + i2s(num1) + " files into " + i2s(sizeTree(ret.sources) + 1) + " in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	new_math = ruUpdateSourceNames(RuMath(ret with sources = setTree(ret.sources, module, root_src)));
	Some(RuState(env with ruMath = new_math));
}

RuSplitSource(
	pattern : string,
	header : string,
	path : string,
	blocks : ref [RuBlock],
	subs : ref [RuSplitSource]
);

ruSplitLevel(src : RuSplitSource, pattern : string) -> RuSplitSource {
	makePath = \h -> ruStrReplaceAll(h, " /:.?!;$\\\"'`#", "_");
	addBlock = \acc, block -> { 
		refArrayPush(lastElement(^(acc.subs), acc).blocks, block); 
		acc 
	}
	addSrc = \acc, h -> {
		path = (if (src.path != "") src.path + "/" else "") + makePath(h);
		refArrayPush(acc.subs, RuSplitSource(pattern, h, path, ref [], ref [])); 
		acc 
	}
	getHeader = \txt -> trim2(strSplit(txt, "\n")[2], " \t\n\r");
	isHeader = \txt -> {
		if (!(strContains(txt, pattern) && strCountOf(txt, "\n") > 1)) false else {
			getHeader(txt) != "";
		}
	}
	fold(^(src.blocks), RuSplitSource(src with blocks = ref [], subs = ref []), \acc, block -> 
		switch (block) {
			RuComment(text, __,__): {
				if (!isHeader(text)) {
					addBlock(acc, block)
				} else {
					addBlock(addSrc(acc, getHeader(text)), block);
				}
			}
			default: addBlock(acc, block);
		}
	);
}

ruSplitSourceRec(src : RuSplitSource, p : RuSplitPattern) -> RuSplitSource {
	parts = ruSplitLevel(src, p.pattern);
	switch (p.child) {
		None(): parts;
		Some(ch_p):
			RuSplitSource(parts with
				subs = ref map(^(parts.subs), \part -> ruSplitSourceRec(part, ch_p))
			);
	}
}

ruDoSplitSource(src : RuSource, conf : RuConf) -> RuSplitSource {
	ruSplitSourceRec(
		RuSplitSource("", "", "", ref ruSrc2Blocks(src), ref []), 
		mm_split_pattern
	)
}

RuLinearizeAcc(
	srcs : Tree<string, RuSource>,
	last : Maybe<RuSource>
);

ruMakeSplittedFile(file : string, acc : RuLinearizeAcc) -> string {
	if (!containsKeyTree(acc.srcs, file)) file else {
		ruMakeSplittedFile(file + "1", acc)
	}
}

ruLinearizeSplitSources(src : RuSplitSource, acc : RuLinearizeAcc, conf : RuConf, math : RuMath, file0 : string) -> RuLinearizeAcc {
	file = ruMakeSplittedFile(if (src.path == "") file0 + "_init" else src.path, acc);
	module = ruTrimPath(file, conf, ".ru");
	header_pattern = lpad("", src.pattern, 40);
	upd_src = RuSource(eitherMap(acc.last, \last -> [RuImport(last.info.module, -1)], []), [], [], ruNewFileInfo(module, conf, ".ru"));
	curr_src = ruBclocks2Src(upd_src, ^(src.blocks));
	if (conf.verbose > 1) {
		conf.onMessage("\tru splitted file: '" + curr_src.info.module + "'");
	}
	fold(^(src.subs), 
		RuLinearizeAcc(setTree(acc.srcs, file, curr_src), Some(curr_src)), 
		\ac, sub -> ruLinearizeSplitSources(sub, ac, conf, math, file0)
	);
}

ruSplitSources(src : RuSource, conf : RuConf, math : RuMath, file : string) -> Tree<string, RuSource> {
	ruLinearizeSplitSources(
		ruDoSplitSource(src, conf),
		RuLinearizeAcc(makeTree(), None()), 
		conf, math, file
	).srcs;
}

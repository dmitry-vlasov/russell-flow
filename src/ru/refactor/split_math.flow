import base/split;
import comm;

export {
	ruCommSplitMath : RuComm;
	ruRunSplitMath(unit : RuUnit) -> Maybe<RuState>;
}

ruCommSplitMath = RuComm(
	RuCommInfo(
		"split-source-ru", "refactor", "split a single file into a filesystem", "file", false, false, 
		[RuCommArg("file", false, "input file", "")], []
	),
	ruRunSplitMath
);

ruRunSplitMath(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	file = lookupTreeDef(task.args, "file", "");
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	module = ruTrimPath(file, conf, ".ru");
	mod_id = s2id(module);
	timer = ruMakeTimer();
	num1 = sizeTree(math.sources);
	if (ruVerbose(conf) > 1) {
		unit.out.onMessage("ru going to split: " + i2s(num1) + " modules");
	}
	split_sources = foldTree(math.sources, makeTree(), \id, src, acc -> {
			if (ruVerbose(conf) > 1) {
				unit.out.onMessage("\tgoing to split module: '" + id2s(src.info.id) + "'");
			}
			mergeTree(acc, ruSplitSources(src, env, math, module))
		}
	);
	ret = RuMath(math with sources = split_sources);
	root_info = ruNewFileInfo(module, conf, ".ru");
	if (ruVerbose(conf) > 1) {
		unit.out.onMessage("\troot module: '" + root_info.module + "', path: '" + root_info.path + "'");
	}
	root_src = RuSource(
		map(getTreeValues(ret.sources), \src -> RuImport(src.info.id, -1)),
		[], [], root_info
	);
	if (ruVerbose(conf) > 0) {
		unit.out.onMessage("ru split " + i2s(num1) + " files into " + i2s(sizeTree(ret.sources) + 1) + " in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		ru = ruSourcesUpdateSrcs(setTree(ret.sources, mod_id, root_src)),
		vars = setTree(setTree(state.vars, 
			"split-source-ru.time", scDoubleVal(ruTimePassed(timer))), 
			"split-source-ru.size", scIntVal(sizeTree(split_sources) + 1)
		)
	));
}

RuDeclComment ::= RuDecl, RuComment;

RuSplitSource(
	pattern : string,
	header : string,
	path : string,
	blocks : ref [RuDeclComment],
	subs : ref [RuSplitSource]
);

ruSplitLevel(src : RuSplitSource, pattern : string) -> RuSplitSource {
	makePath = \h -> ruStrReplaceAll(h, " /:.?!;$\\\"'`#", "_");
	addBlock = \acc, block -> { 
		refArrayPush(lastElement(^(acc.subs), acc).blocks, block); 
		acc 
	}
	addSrc = \acc, h -> {
		path = (if (src.path != "") src.path + "/" else "") + makePath(h);
		refArrayPush(acc.subs, RuSplitSource(pattern, h, path, ref [], ref [])); 
		acc 
	}
	getHeader = \txt -> trim2(strSplit(txt, "\n")[2], " \t\n\r");
	isHeader = \txt -> {
		if (!(strContains(txt, pattern) && strCountOf(txt, "\n") > 1)) false else {
			getHeader(txt) != "";
		}
	}
	fold(^(src.blocks), RuSplitSource(src with blocks = ref [], subs = ref []), \acc, block -> 
		switch (block) {
			RuComment(text, __,__): {
				if (!isHeader(text)) {
					addBlock(acc, block)
				} else {
					addBlock(addSrc(acc, getHeader(text)), block);
				}
			}
			default: addBlock(acc, block);
		}
	);
}

ruSplitSourceRec(src : RuSplitSource, p : RuSplitPattern) -> RuSplitSource {
	parts = ruSplitLevel(src, p.pattern);
	switch (p.child) {
		None(): parts;
		Some(ch_p):
			RuSplitSource(parts with
				subs = ref map(^(parts.subs), \part -> ruSplitSourceRec(part, ch_p))
			);
	}
}

ruDoSplitSource(src : RuSource, env : RuEnv) -> RuSplitSource {
	ruSplitSourceRec(
		RuSplitSource("", "", "", ref ruSrc2DeclComments(src), ref []), 
		mm_split_pattern
	)
}

RuLinearizeAcc(
	srcs : Tree<int, RuSource>,
	last : Maybe<RuSource>
);

ruMakeSplittedFile(file : string, acc : RuLinearizeAcc) -> string {
	if (!containsKeyTree(acc.srcs, s2id(file))) file else {
		ruMakeSplittedFile(file + "1", acc)
	}
}

ruLinearizeSplitSources(src : RuSplitSource, acc : RuLinearizeAcc, env : RuEnv, math : RuMath, file : string) -> RuLinearizeAcc {
	module = ruMakeSplittedFile(if (src.path == "") file + "_init" else src.path, acc);
	header_pattern = lpad("", src.pattern, 40);
	fileinfo = ruNewFileInfo(module, env.conf, ".ru");
	upd_src = RuSource(
		eitherMap(acc.last, \last -> [RuImport(last.info.id, -1)], []), 
		[], [], fileinfo
	);
	curr_src = ruDeclComments2Src(upd_src, ^(src.blocks));
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tru splitted file: '" + curr_src.info.module + "'");
	}
	fold(^(src.subs), 
		RuLinearizeAcc(setTree(acc.srcs, fileinfo.id, curr_src), Some(curr_src)), 
		\ac, sub -> ruLinearizeSplitSources(sub, ac, env, math, file)
	);
}

ruSplitSources(src : RuSource, env : RuEnv, math : RuMath, file : string) -> Tree<int, RuSource> {
	ruLinearizeSplitSources(
		ruDoSplitSource(src, env),
		RuLinearizeAcc(makeTree(), None()), 
		env, math, file
	).srcs;
}

ruSrc2DeclComments(src : RuSource) -> [RuDeclComment] {
	comms2blocks = \comms -> map(comms, \comm -> cast(comm : RuComment -> RuDeclComment));
	concat(
		comms2blocks(src.comments),
		fold(src.decls, [], \acc, decl ->
			concat3(acc, comms2blocks(decl.info.comments), [cast(decl : RuDecl -> RuDeclComment)])
		)
	);
}

ruDeclComments2Src(src : RuSource, dcs : [RuDeclComment]) -> RuSource {
	decls = makeVector(128);
	comms = fold(dcs, [], \acc, dc ->
		switch (dc) {
			RuComment(__,__,__): 
				concat(acc, [dc]);
			RuDecl(): {
				pushVector(decls, ruSetDeclComments(dc, acc));
				[];
			}
		}
	);
	RuSource(src with comments = comms, decls = vector2array(decls));
}

ruDeclCommentId(dc : RuDeclComment) -> int {
	switch (dc) {
		RuConst(d,__,__):      d.id;
		RuType(d,__):          d.id;
		RuRule(d,__,__):       d.id;
		RuAxiom(d,__):         d.id;
		RuDef(d,__,__,__):     d.id;
		RuTheorem(d,__,__,__): d.id;
		RuComment(text,__,__): -1;
	}
}

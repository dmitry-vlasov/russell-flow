import comm;
import script/value;
import ru/util/target;
import ru/util/lemma;
import ru/map_decls;

export {
	ruCommTreefyProofs : RuComm;
}

ruCommTreefyProofs = RuComm(
	RuCommDescr(
		"treefy-proofs", "refactor", "unwrap linear proofs to hierarchical", "target", false, false, 
		[
			RuCommArg("target", true, "the target: a theorem, file or all", "all"),
			RuCommArg("max-len", true, "maximum steps number at one level", "10")
		], []
	),
	ruRunTreefyProofs
);

ruRunTreefyProofs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	timer = ruMakeTimer();
	math = ruMathFromSources(state.ru, env);
	target = ruDetermineTarget(task, math, env);
	max_len = s2i(lookupTreeDef(task.args, "max-len", "10"));
	treefyed_theorems = ref 0;
	treefy_fn = \decl, time_limit -> {
		th = cast(decl : RuDecl -> RuTheorem);
		if (ruVerbose(conf) > 1) {
			env.out.onMessage("\toriginal theorem:\n" + strIndent(ru2s(th, math)));
		}
		i = 3 + round(random() * i2d(length(th.proof.steps) - 6));
		treefied = if (i >= length(th.proof.steps)) th else 
		RuTheorem(th with
			proof = ruExtractLemmaFromProof(th.proof, i, math, env)
		);
		treefyed_theorems := ^treefyed_theorems + 1;
		if (ruVerbose(conf) > 1) {
			//env.out.onMessage("COUNTER: " + i2s(^treefyed_theorems) + "\n\toriginal theorem:\n" + strIndent(ru2s(th, math)));
			env.out.onMessage("\ttreefied theorem:\n" + strIndent(ru2s(treefied, math)));
		}
		verified = ruVerifyTheorem(treefied, math, env);
		if (verified.errs == []) {
			if (ruVerbose(conf) > 1) {
				env.out.onMessage("\ttreefied theorem: " + id2s(th.descr.id) + " is OK");
			}
			merged = RuTheorem(verified.theorem with
				proof = ruMergeAllLemmasIntoProof(th.proof, math, env)
			);
			verf = ruVerifyTheorem(merged, math, env);
			if (ruVerbose(conf) > 1) {
				env.out.onMessage("\tmerged theorem: " + id2s(th.descr.id) + ":\n" + strIndent(ru2s(verf.theorem, math)));
			}
			if (verf.errs == []) {
				if (ruVerbose(conf) > 1) {
					env.out.onMessage("\tmerged theorem: " + id2s(th.descr.id) + " is OK");
				}
			} else {
				ruOutputVerifyErrs(verf, math, env);
				if (ruVerbose(conf) > 1) {
					th1 = RuTheorem(th with proof = ruMergeAllLemmasIntoProof(th.proof, math, env));

					ver2 = ruVerifyTheorem(th1, math, env);
					ruOutputVerifyErrs(ver2, math, env);
					if (ver2.errs != []) {
						env.out.onMessage("\tlinearized theorem FAILED:\n" + strIndent(ru2s(th1, math)));
						ruCrash("\tlinearized theorem: " + id2s(th.descr.id) + " FAILED");
					}

					//env.out.onMessage("\tmerged theorem: " + id2s(th.descr.id) + " FAILED");
					env.out.onMessage("\tlinearized theorem:\n" + strIndent(ru2s(th1, math)));
					ruCrash("\tmerged theorem: " + id2s(th.descr.id) + " FAILED");
				}
			}
			Some(verified.theorem);
		} else {
			ruOutputVerifyErrs(verified, math, env);
			if (ruVerbose(conf) > 1) {
				//env.out.onMessage("\ttreefied theorem: " + id2s(th.descr.id) + " FAILED");
				ruCrash("\ttreefied theorem: " + id2s(th.descr.id) + " FAILED");
			}
			None();
		}
	}

	treefy_descr = RuFnDescr(
		"treefy-proofs", 
		\decl -> switch (decl) {
			RuTheorem(__,__,__,proof): length(proof.steps) > max_len;
			default: false;
		},
		ruProofLengthMeasure, 
		\ -> "treefied: " + i2s(^treefyed_theorems) + " theorems"
	);
	new_state = ruMapFnComm(
		RuUnit(unit.task, state, env.out),
		RuMapFn(
			treefy_descr,
			treefy_fn
		)
	);
	Some(RuState(new_state with 
		vars = setTree(state.vars, "treefy-proofs.treefied-theorems", ValInt(^treefyed_theorems))
	));
}

import comm;
import script/value;
import ru/util/target;
import ru/util/reindex_proof;

export {
	ruCommTreefyProofs : RuComm;
}

ruCommTreefyProofs = RuComm(
	RuCommDescr(
		"treefy-proofs", "refactor", "unwrap linear proofs to hierarchical", "target", false, false, 
		[
			RuCommArg("target", true, "the target: a theorem, file or all", "all"),
			RuCommArg("max-len", true, "maximum steps number at one level", "10")
		], []
	),
	ruRunTreefyProofs
);

ruTreefyTheorem(th : RuTheorem, max_len : int, math : RuMath, env : RuEnv) -> RuTheorem {
	RuTheorem(th with
		proof = RuProof(th.proof with
			steps = ruTreefySteps1(th.proof.steps, max_len, math, env)
		)
	);
}

ruTreefySteps(steps : [RuStep], max_len : int, math : RuMath, env : RuEnv) -> [RuStep] {
	mapi(
		ruFindFactorProof(steps, max_len, steps[length(steps) - 1], math, env), 
		\i, s -> {
			if (s.leaf) {
				RuStep(s.step with
					proof = RuProof(makeTree(), makeSet(), 
						ruTreefySteps(ruFindSubProof(steps, i, math, env), max_len, math, env), -1
					)
				)
			} else {
				s.step;
			}
		}
	);
}

ruStep2StepRefs(step : RuStep) -> [RuStepRef] {
	filtermap(step.refs, ruRef2StepRef);
}

ruStep2HypRefs(step : RuStep) -> [RuHypRef] {
	filtermap(step.refs, ruRef2HypRef);
}


ruFindSubProof(steps : [RuStep], i : int, math : RuMath, env : RuEnv) -> [RuStep] {
	ruReindexSteps(ruDoFindSubProof(steps, i, [], env), math);
}

ruDoFindSubProof(steps : [RuStep], i : int, acc : [RuStep], env : RuEnv) -> [RuStep] {
	fold(
		ruStep2StepRefs(steps[i]),
		concat(acc, [steps[i]]),
		\ac, rf -> ruDoFindSubProof(steps, rf.ind, ac, env)
	);
}

RuFactorStep(
	step : RuStep,
	leaf : bool
);

ruFindFactorProof(steps : [RuStep], max_len : int, qed: RuStep, math : RuMath, env : RuEnv) -> [RuFactorStep] {
	p = ruDoFindFactorProof(steps, max_len, [qed], [], env);
	leafs = fold(p.first, makeSet(), \acc, leaf -> insertSet(acc, leaf.ind));
	factored = map(p.second, \step -> RuFactorStep(step, containsSet(leafs, step.ind)));
	ruReindexFactorSteps(factored, math)
}

ruDoFindFactorProof(steps : [RuStep], max_len : int, leafs : [RuStep], acc : [RuStep], env : RuEnv) -> Pair<[RuStep], [RuStep]> {
	switch (find(leafs, \leaf -> length(acc) + length(ruStep2StepRefs(leaf)) <= max_len)) {
		Some(leaf): {
			leaf_refs = map(ruStep2StepRefs(leaf), \rf -> steps[rf.ind]);
			ruDoFindFactorProof(
				steps, max_len,
				concat(removeFirst(leafs, leaf), leaf_refs), 
				concat(leaf_refs, acc), 
				env
			);
		}
		None(): Pair(leafs, acc);
	}
}


ruSteps2s1(steps : [RuStep], math : RuMath) -> string {
	ruSteps2s(steps, Ru2SEnv("", \s -> ruIndentBrackets(s, 64), false, math.decls.rules));
}

ruReindexSteps(steps : [RuStep], math : RuMath) -> [RuStep] {
	ind_map = foldi(steps, makeTree(), \i, acc, step -> setTree(acc, step.ind, i));
	mapi(steps, \i, step -> RuStep(step with 
			ind = i,
			refs = map(step.refs, \rf -> 
				switch (rf) {
					RuStepRef(j): {
						switch (lookupTree(ind_map, j)) {
							Some(k): RuStepRef(k);
							None(): {
								ruCrash("illegal step index: " + i2s(j) + ", steps:\n" + 
									ruSteps2s1(steps, math) + "\n"
								);
								rf;
							}
						}
					}
					default: rf;
				}
			)
		)
	);
}

ruReindexFactorSteps(steps : [RuFactorStep], math : RuMath) -> [RuFactorStep] {
	ind_map = foldi(steps, makeTree(), \i, acc, s -> setTree(acc, s.step.ind, i));
	mapi(steps, \i, s -> {
		reindexed = if (s.leaf) {
			RuStep(s.step with 
				ind = i,
				assertion = -1,
				refs = []
			);
		} else {
			RuStep(s.step with 
				ind = i,
				refs = map(s.step.refs, \rf -> 
					switch (rf) {
						RuStepRef(j): {
							switch (lookupTree(ind_map, j)) {
								Some(k): RuStepRef(k);
								None(): {
									ruCrash("illegal step index: " + i2s(j) + ", steps:\n" + 
										ruSteps2s1(map(steps, \st -> st.step), math) + "\n"
									);
									rf;
								}
							}
						}
						default: rf;
					}
				)
			);
		}
		RuFactorStep(reindexed, s.leaf);
	});
}









RuLemma(
	subproof : [RuStep],

	stepPremises : [RuStep],
	hypPremises : [RuHypRef]
);

ruExtractLemma(steps : [RuStep], i : int, math : RuMath, env : RuEnv) -> RuLemma {
	full_subproof1 = ruFindSubProof1(steps, i, env);
	full_subproof = sortCustom(set2array(full_subproof1), \step -> step.ind, true);
	//println("ruTreefySteps1:\n" + ruSteps2s1(steps, math) + "\n");
	//println("i: " + i2s(i + 1));
	//println("full_subproof:\n" + ruSteps2s1(full_subproof, math) + "\n");
	other = set2array(differenceSets(buildSet(steps), buildSet(full_subproof)));
	//println("other:\n" + ruSteps2s1(other, math) + "\n");
	other_ref_inds = fold(other, makeSet(), \acc, step -> 
		fold(ruStep2StepRefs(step), acc,  \ac, rf -> insertSet(ac, rf.ind))
	);
	common_steps = filter(full_subproof, \step -> 
		step.ind != i && containsSet(other_ref_inds, step.ind)
	);
	//println("common_steps:\n" + ruSteps2s1(common_steps, math) + "\n");
	common_steps_ind = buildSet(map(common_steps, \step -> step.ind));
	transitive_common = for(buildSet(common_steps),
		\comm -> exists(set2array(comm), \step -> 
			exists(ruStep2StepRefs(step), \rf -> 
				!containsSet(comm, steps[rf.ind])
			)
		),
		\comm -> foldSet(comm, comm, \acc,step ->
			fold(ruStep2StepRefs(step), acc, \ac, rf ->
				insertSet(ac, steps[rf.ind])
			)
		)
	);
	//println("transitive_common:\n" + ruSteps2s1(set2array(transitive_common), math) + "\n");
	reduced_subproof = filter(full_subproof, \step -> !containsSet(transitive_common, step));
	subproof_hyp_premises = sortCustom(set2array(fold(reduced_subproof, makeSet(), \acc, step -> 
		fold(ruStep2HypRefs(step), acc, \ac, rf -> insertSet(ac, rf))
	)), \hyp -> hyp.ind, true);
	//println("reduced_subproof:\n" + ruSteps2s1(reduced_subproof, math) + "\n");
	//reduced_subproof_inds = buildSet(map(reduced_subproof, \step -> step.ind));
	subproof_step_premises = filter(full_subproof, \step -> step.ind != i && containsSet(other_ref_inds, step.ind));
	RuLemma(
		reduced_subproof,
		subproof_step_premises,
		subproof_hyp_premises,
	);
}
/*
RuReindexLemma(
	lemma : RuReindexProof,
	other : RuReindexProof
);

ruMakeLemmaInnerReindex(lemma : RuLemma) -> RuReindexProof {
	hypsReindex = fold(lemma.hypPremises, makeTree(), \acc, rf -> 
		setTree(acc, rf, RuHypRef(sizeTree(acc)))
	);
	refsReindex = fold(lemma.stepPremises, hypsReindex, \acc, step -> 
		setTree(acc, RuStepRef(step.ind), RuHypRef(sizeTree(acc)))
	);
	stepReindex = fold(lemma.subproof, makeTree(), \acc, step -> 
		setTree(acc, step.ind, sizeTree(acc))
	);
	RuReindexProof(refsReindex, stepReindex);
}

ruMakeLemmaReindex(steps : [RuStep], lemma : RuLemma) -> RuReindexLemma {
	fold(steps, 
		RuReindexLemma(
			RuReindexProof(
				makeTree(), 
				fold(lemma.hypPremises, makeTree(), \acc, rf -> setTree(acc, rf, RuHypRef(sizeTree(acc))))
			), 
			RuReindexProof(
				makeTree(), 
				makeTree()
			)
		), 
		\acc, step -> {
			if (!exists(lemma.subproof, \s -> s.ind == step.ind)) {
				reindexInnerHyps = if (!containsSet(common_steps_ind, step.ind)) {
					acc.reindexInnerHyps;
				} else {
					setTree(acc.reindexInnerHyps, step.ind, findiDef(common_steps, \st -> st.ind == step.ind, -1));
				}
				inner_hyp_ind = findiDef(lemma.stepPremises, \st -> st.ind == step.ind, -1);
				RuReindexLemma(
					setTree(acc.reindexOuterSteps, step.ind, acc.curr_this),
					acc.reindexInnerSteps,
					reindexInnerHyps,
					acc.curr_this + 1,
					acc.curr_sub
				);
			} else if (step.ind == i) {
				RuReindexStepsAcc(
					setTree(acc.reindexOuterSteps, step.ind, acc.curr_this),
					setTree(acc.reindexInnerSteps, step.ind, acc.curr_sub),
					acc.reindexInnerHyps,
					acc.curr_this + 1,
					acc.curr_sub + 1
				);
			} else {
				RuReindexStepsAcc(
					acc.reindexOuterSteps,
					setTree(acc.reindexInnerSteps, step.ind, acc.curr_sub),
					acc.reindexInnerHyps,
					acc.curr_this,
					acc.curr_sub + 1
				);
			}
		}
	);
}
*/

ruTreefySteps1(steps : [RuStep], max_len : int, math : RuMath, env : RuEnv) -> [RuStep] {
	if (length(steps) <= max_len) steps else {
		i = 3 + round(random() * i2d(length(steps) - 6));
		full_subproof1 = ruFindSubProof1(steps, i, env);
		if (sizeSet(full_subproof1) == 1) steps else {
			lemma = ruExtractLemma(steps, i, math, env);
			ri = fold(steps, RuReindexStepsAcc(makeTree(), makeTree(), makeTree(), 0, 0), \acc, step ->
				if (!exists(lemma.subproof, \st -> st.ind == step.ind)) {
					reindexInnerHyps = if (!exists(lemma.stepPremises, \st -> st.ind == step.ind)) {
						acc.reindexInnerHyps;
					} else {
						setTree(acc.reindexInnerHyps, step.ind, findiDef(lemma.stepPremises, \st -> st.ind == step.ind, -1));
					}
					RuReindexStepsAcc(
						setTree(acc.reindexOuterSteps, step.ind, acc.curr_this),
						acc.reindexInnerSteps,
						reindexInnerHyps,
						acc.curr_this + 1,
						acc.curr_sub
					);
				} else if (step.ind == i) {
					RuReindexStepsAcc(
						setTree(acc.reindexOuterSteps, step.ind, acc.curr_this),
						setTree(acc.reindexInnerSteps, step.ind, acc.curr_sub),
						acc.reindexInnerHyps,
						acc.curr_this + 1,
						acc.curr_sub + 1
					);
				} else {
					RuReindexStepsAcc(
						acc.reindexOuterSteps,
						setTree(acc.reindexInnerSteps, step.ind, acc.curr_sub),
						acc.reindexInnerHyps,
						acc.curr_this,
						acc.curr_sub + 1
					);
				}
			);
			final_steps = fold(steps, [], \acc, step ->
				if (!exists(lemma.subproof, \st -> st.ind == step.ind)) {
					concat(acc, [ruReindexStep(step, ri.reindexOuterSteps, makeTree())])
				} else if (step.ind == i) {
					qed = RuStep(step with 
						ind = length(acc),
						assertion = -1,
						refs = map(lemma.stepPremises, \st -> RuStepRef(st.ind)),
						proof = RuProof(makeTree(), makeSet(), 
							map(lemma.subproof, \st ->
								ruReindexStep(st, ri.reindexInnerSteps, ri.reindexInnerHyps)
							), -1
						),
						pos = -1
					);
					concat(acc, [qed])
				} else {
					acc;
				}
			);
			//println("final_steps:\n" + ruSteps2s1(final_steps, math) + "\n");
			final_steps;
		}
	}
}

RuReindexStepsAcc(
	reindexOuterSteps : Tree<int, int>,
	reindexInnerSteps : Tree<int, int>,
	reindexInnerHyps : Tree<int, int>,
	curr_this : int,
	curr_sub : int
);

ruReindexStep(step : RuStep, reindex_steps : Tree<int, int>, reindex_hyps : Tree<int, int>) -> RuStep {
	RuStep(step with 
		ind = lookupTreeDef(reindex_steps, step.ind, step.ind),
		refs = map(step.refs, \rf ->
			switch (rf) {
				RuStepRef(i): {
					switch (lookupTree(reindex_hyps, i)) {
						Some(k): RuHypRef(k)
						None():  RuStepRef(lookupTreeDef(reindex_steps, i, i))
					}
				}
				RuHypRef(__): rf;
			}
		)
	);
}

ruFindSubProof1(steps : [RuStep], i : int, env : RuEnv) -> Set<RuStep> {
	fold(ruStep2StepRefs(steps[i]), makeSet1(steps[i]), \acc, rf -> 
		mergeSets(acc, ruFindSubProof1(steps, rf.ind, env))
	);
}

ruRunTreefyProofs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	timer = ruMakeTimer();
	math = ruMathFromSources(state.ru, env);
	target = ruDetermineTarget(task, math, env);
	max_len = s2i(lookupTreeDef(task.args, "max-len", "10"));
	theorems = filtermap(ruTargetAssertions(target, math, env), ruDecl2Theorem);
	ret = fold(theorems, math, \acc, th ->
		if (length(th.proof.steps) <= max_len) acc else {
			treefied = ruTreefyTheorem(th, max_len, math, env);
			if (ruVerbose(conf) > 1) {
				env.out.onMessage("\ttreefied theorem:\n" + strIndent(ru2s(treefied, math)));
			}
			verified = ruVerifyTheorem(treefied, acc, env);
			if (verified.errs == []) {
				if (ruVerbose(conf) > 1) {
					env.out.onMessage("\ttreefied theorem: " + id2s(th.descr.id) + " is OK");
				}
				ruMathReplaceDecl(acc, verified.theorem, env);
			} else {
				if (ruVerbose(conf) > 1) {
					env.out.onMessage("\ttreefied theorem: " + id2s(th.descr.id) + " FAILED");
				}
				ruOutputVerifyErrs(verified, acc, env);
				acc;
			}
		}
	);
	Some(RuState(state with 
		ru = ret.sources,
		vars = setTree(state.vars,
			"treefy-proofs.time", ValDouble(ruTimePassed(timer))
		)
	));
	Some(state);
}

import ru/refactor/remove_unused_steps;
import ru/verify/math;
import ru/prover/util;
import ru/unify/prod;
import ru/util/target;
import ru/map_decls;

export {
	ruCommShortenProofs : RuComm;
}

ruCommShortenProofs = RuComm(
	RuCommInfo(
		"shorten-proofs", "refactor", "try to make proofs shorter", "target", false, false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
		[
			RuCommRet("shorten-proofs.shortened-theorems", "int", "total number of theorems, which were shortened by optimization"),
			RuCommRet("shorten-proofs.shortened-steps", "int", "total number of steps in proofs, which were shortened by optimization")
		]
	),
	ruRunShortenProofs
);

ruSubProofVolume(i : int, steps : [RuStep]) -> int {
	fold(steps[i].refs, 1, \acc, ref -> acc + ruRefVolume(ref, steps));
}

ruRefVolume(ref : RuRef, steps : [RuStep]) -> int {
	switch (ref) {
		RuHypRef(__): 0;
		RuStepRef(j): ruSubProofVolume(j, steps);
	}
}

RuShortenEnv(
	assertions : RuIndex<RuAssertion>,
	imports : Tree<int, Set<int>>,
	math : RuMath,
	env : RuEnv
);

RuShortenAcc(
	env : RuShortenEnv,
	theorem : RuTheorem,
	optimized : [RuStep],
	premises : RuIndex<RuRef>,
	steps : [RuStep],
	cenv : RuConstEnv,
	timer : RuTimer
);

ruShortenTheorem(th : RuTheorem, time_limit : double, env : RuShortenEnv) -> Pair<Maybe<RuTheorem>, bool> {
	timer = ruMakeTimer();
	math0 = env.math;
	conf = env.env.conf;
	out = env.env.out;
	cth = ruConstTheorem(th, math0);
	math = cth.env.math;
	
	if (ruVerbose(conf) > 1) {
		out.onMessage("started shortening theorem '" + id2s(th.info.id) + "' with time limit: " + ruTime2s(time_limit) + " ...");
	}

	initPremises = fold(cth.const.stat.hyps, ruMakeIndex(), \acc, hyp -> ruSetIndex(hyp.expr, RuHypRef(hyp.ind), acc));
	interrupted = ref false;
	optimized_proof = foldi(cth.const.proof.steps, 
		RuShortenAcc(env, th, [], initPremises, cth.const.proof.steps, cth.env, ruMakeLimitedTimer(time_limit)), 
		\i, acc, step -> {
			step_time_limit = ruTimeLeft(acc.timer) / i2d(length(cth.const.proof.steps) - i);
			step_timer = RuTaskTimer(ruMakeLimitedTimer(step_time_limit), interrupted);
			least = ruStepMinVariant(step.ind, cth.const.proof.steps, th, acc, step_timer);
			RuShortenAcc(acc with
				optimized = concat(acc.optimized, [least]),
				premises = ruSetIndex(step.expr, RuStepRef(step.ind), acc.premises)
			);
		}
	).optimized;
	optimized_th = ruVerifyTheorem(RuTheorem(th with 
		proof = ruTransformProof(RuProof(th.proof with steps = optimized_proof), cth.env.unconst)
	), math0, env.env);
	if (!ruIsSubset(optimized_th.theorem.stat.vars.disjs, th.stat.vars.disjs)) {
		out.onMessage(
			"!ruIsSubset(optimized_th.theorem.stat.vars.disjs, th.stat.vars.disjs)\n" + 
			"optimized_th.theorem.stat.vars.disjs:\n" + ruDisjs2s(optimized_th.theorem.stat.vars.disjs) + "\n" +
			"th.stat.vars.disjs:\n" + ruDisjs2s(th.stat.vars.disjs) + "\n" +
			"th:\n" + ru2s(th, math) + 
			"optimized_th:\n" + ru2s(optimized_th.theorem, math)
		);
		Pair(None(), ^interrupted);
	} else if (optimized_th.errs != []) {
		ruCrash(
			"ERROR IN SHORTENING\n" +
			"optimized:\n" +
			ru2s(optimized_th.theorem, math) + "\n" +
			"original:\n" +
			ru2s(th, math) + "\n" +
			ruVerifyTheoremErrs2s(optimized_th, math)
		);
		Pair(None(), ^interrupted);
	} else {
		red = ruRemoveTheoremUnusedSteps(optimized_th.theorem, env.env);
		if (ruVerbose(conf) > 2) {
			out.onMessage("finished shortening theorem '" + id2s(th.info.id) + "' ...");
		}
		time_taken = ruTimePassed(timer);
		late_for = 100.0 * (time_taken - time_limit) / time_limit;
		if (ruVerbose(conf) > 1 && late_for > 100.0) {
			out.onMessage("*** " + id2s(th.info.id) + " was late for: " + d2st(late_for, 2) + "% (" + ruTime2s(time_taken - time_limit) + ")");
		}
		if (late_for < 0.5) {
			//println("*** " + th.info.name + " was UNDER late for: " + d2st(late_for, 2) + "% (limit: " + ruTime2s(time_limit) + ", taken: " + ruTime2s(time_taken) + ")");
		}
		switch (red) {
			Some(reduced): {
				if (ruVerbose(conf) > 1) {
					out.onMessage("theorem '" + id2s(th.info.id) + "' shortened by " + i2s(length(reduced.removed)) + " steps in " + ruTimePassed2s(timer));
				}
				res = ruVerifyTheorem(reduced.smaller, math, env.env);
				if (!ruIsVerified(res)) {
					ruCrash(
						"ERROR IN SHORTENING\n" +
						"optimized:\n" +
						ru2s(reduced.smaller, math) + "\n" +
						"original:\n" +
						ru2s(reduced.larger, math) + "\n" +
						ruVerifyTheoremErrs2s(res, math)
					);
				}
			}
			None(): 
				if (ruVerbose(conf) > 1) {
					out.onMessage("theorem '" + id2s(th.info.id) + "' was not shortened in " + ruTimePassed2s(timer));
				}
		}
		Pair(maybeMap(red, \reduced -> reduced.smaller), ^interrupted);
	}
}

RuShortenLeast(
	step : RuStep, // Current least step
	vol  : int     // volume of current least step
);

ruStepMinVariant(i : int, steps : [RuStep], th : RuTheorem, acc : RuShortenAcc, step_timer : RuTaskTimer) -> RuStep {
	step = acc.steps[i];
	if (ruTimeIsOver(acc.timer)) step else {
		unify_limit = ruTimeLeft(step_timer.timer) / 10.0;
		unified = filter(
			ruUnifyIndex(
				step.expr, acc.env.assertions, ruEmptySubst, 
				acc.env.math, acc.env.env, RuTaskTimer(ruMakeLimitedTimer(unify_limit), step_timer.interrupted)
			),
			\unif -> ruDeclInfoPreceeds(unif.data.info, th.info, acc.env.imports)
		);
		ruFold(unified, 
			RuShortenLeast(step, ruSubProofVolume(i, acc.steps)), 
			\least, unif -> {
				unconst_sub = \s -> ruTransformSubst(s, acc.cenv.unconst);
				ass : RuAssertion = unif.data;
				check_disj = \s -> {
					unc_s = unconst_sub(s);
					ruCheckDisjs(unc_s, ass.stat.vars.disjs) && 
					ruCheckDisjsInherent(unc_s, ass.stat.vars.disjs, th.stat.vars.disjs);
				}
				if (ass.stat.hyps != [] && check_disj(unif.sub)) {
					hyps_prod = CartProd(map(ass.stat.hyps, \h -> {
						hyp_unified = ruUnifyIndex(
							ruApplySubst(h.expr, unif.sub), acc.premises, unif.sub, 
							acc.env.math, acc.env.env, ruMakeTaskTimer(unify_limit / i2d(ruArity(ass)))
						);
						sorted = mergeSort(hyp_unified, \u1, u2 -> 
							ruRefVolume(u1.data, acc.steps) - ruRefVolume(u2.data, acc.steps)
						);
						map(sorted, \un -> RuSubData(un.sub, un.data));
					}));
					sub_unified = ruUnifySubsProd(hyps_prod, \__-> true, step_timer, acc.env.math, acc.env.env);
					ruFold(sub_unified, least, 
						\le, sd -> {
							st = RuStep(le.step with refs = sd.data, assertion = ass.info.id);
							vol = ruSubProofVolume(st.ind, replace(acc.steps, st.ind, st));
							if (vol < le.vol && check_disj(sd.sub)) {
								RuShortenLeast(st, vol) 
							} else {
								le;
							}
						},
						step_timer
					);
				} else {
					least;
				}
			}, 
			step_timer
		).step;
	}
}

ruRunShortenProofs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	target = ruDetermineTarget(unit.task, math, env);
	if (target != RuTargetNone()) {
		prev_completed = switch (lookupTreeDef(state.vars, "shorten-proofs.completed", ValUndef())) {
			ValArray(arr): {
				filtermap(arr, \x -> switch (x) {
					ValInt(id): Some(id);
					default: None();
				});
			}
			default: [];
		}
		prev_completed_set = buildSet(prev_completed);
		completed = ref prev_completed;
		interrupted = ref [];
		add_completed = ruMakeAtomicArrayPush(completed);
		add_interrupted = ruMakeAtomicArrayPush(interrupted);
		shortened_theorems = ref 0;
		shortened_steps = ref 0;
		all_imported = ruSourcesAllImported(math.sources, env);
		index = ruMakeIndexForTarget(target, math, env);
		shorten_fn = \decl, time_limit, env1 -> {
			shorten_env = RuShortenEnv(index, all_imported, math, env1);
			th = cast(decl : RuDecl -> RuTheorem);
			p = ruShortenTheorem(th, time_limit, shorten_env);
			if (p.second) {
				// Was interrupted - non complete traverse of all variants
				add_interrupted(th.info.id);
				{}
			} else {
				// Was not interrupted - complete traverse of all variants
				add_completed(th.info.id);
				{}
			}
			ret = p.first;
			switch (ret) {
				Some(shortened): {
					atomicRefIntAddition(shortened_theorems, 1);
					atomicRefIntAddition(shortened_steps, length(th.proof.steps) - length(shortened.proof.steps));
					RuMappedDecl(shortened, false, true);
				}
				None(): {
					RuMappedDecl(decl, false, false);
				}
			}
		}
		new_state = ruMapFnComm(
			RuUnit(unit.task, state, env.out),
			RuMapFn(
				RuMapFnInfo(
					"shorten-proofs", 
					\decl -> ruTargetPredicate(target)(decl) && ruDeclIsTheorem(decl) && !containsSet(prev_completed_set, decl.info.id), 
					ruProofLengthMeasure, 
					\ -> 
						"shortened: " + i2s(^shortened_theorems) + " theorems, " + i2s(^shortened_steps) + " steps; " +
						"completed: " + i2s(length(^completed)) + ", interrupted: " + i2s(length(^interrupted))
				),
				shorten_fn
			)
		);
		if (conf.verbose > 0) {
			env.out.onMessage("Completed theorems: " + i2s(length(^completed)) + ", interrupted theorems: " + i2s(length(^interrupted)));
		}
		Some(RuState(new_state with 
			vars = setTree(setTree(setTree(new_state.vars, 
				"shorten-proofs.shortened-theorems", ValInt(^shortened_theorems)),
				"shorten-proofs.shortened-steps", ValInt(^shortened_steps)),
				"shorten-proofs.completed", ValArray(map(^completed, \id -> ValInt(id)))
			)
		));
	} else {
		env.out.onMessage("no target for proof shortening");
		Some(state);
	}
}

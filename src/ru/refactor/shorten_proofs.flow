import ru/refactor/remove_unused_steps;
import ru/verify/math;
import ru/prover/util;
import ru/unify/prod;
import ru/util/target;
import ru/map_decls;

export {
	ruCommShortenProofs : RuComm;
}

ruCommShortenProofs = RuComm(
	RuCommDescr(
		"shorten-proofs", "refactor", "try to make proofs shorter", "target", false, false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
		[
			RuCommRet("shorten-proofs.shortened-theorems", "int", "total number of theorems, which were shortened by optimization"),
			RuCommRet("shorten-proofs.shortened-steps", "int", "total number of steps in proofs, which were shortened by optimization")
		]
	),
	ruRunShortenProofs
);

ruSubProofVolume(i : int, steps : [RuStep]) -> int {
	fold(steps[i].refs, 1, \acc, ref -> acc + ruRefVolume(ref, steps));
}

ruRefVolume(ref : RuRef, steps : [RuStep]) -> int {
	switch (ref) {
		RuHypRef(__): 0;
		RuStepRef(j): ruSubProofVolume(j, steps);
	}
}

RuShortenEnv(
	assertions : RuIndex<RuAssertion>,
	imports : Tree<int, Set<int>>,
	math : RuMath,
	env : RuEnv
);

RuShortenAcc(
	env : RuShortenEnv,
	theorem : RuTheorem,
	optimized : [RuStep],
	premises : RuIndex<RuRef>,
	steps : [RuStep],
	cenv : RuConstEnv,
	timer : RuTimer
);

ruShortenTheorem(th : RuTheorem, time_limit : double, env : RuShortenEnv) -> Maybe<RuTheorem> {
	timer = ruMakeTimer();
	math0 = env.math;
	conf = env.env.conf;
	out = env.env.out;
	cth = ruConstTheorem(th, math0);
	math = cth.env.math;
	
	if (ruVerbose(conf) > 1) {
		out.onMessage("started shortening theorem '" + id2s(th.descr.id) + "' with time limit: " + ruTime2s(time_limit) + " ...");
	}

	initPremises = fold(cth.const.stat.hyps, ruMakeIndex(), \acc, hyp -> ruSetIndex(hyp.expr, RuHypRef(hyp.ind), acc));
	optimized = foldi(cth.const.proof.steps, 
		RuShortenAcc(env, th, [], initPremises, cth.const.proof.steps, cth.env, ruMakeLimitedTimer(time_limit)), 
		\i, acc, step -> {
			step_time_limit = ruTimeLeft(acc.timer) / i2d(length(cth.const.proof.steps) - i);
			least = ruStepMinVariant(step.ind, cth.const.proof.steps, th, acc, step_time_limit);
			RuShortenAcc(acc with
				optimized = concat(acc.optimized, [least]),
				premises = ruSetIndex(step.expr, RuStepRef(step.ind), acc.premises)
			);
		}
	).optimized;
	red = ruRemoveTheoremUnusedSteps(RuTheorem(th with 
		proof = ruTransformProof(RuProof(th.proof with steps = optimized), cth.env.unconst)
	), env.env);
	if (ruVerbose(conf) > 2) {
		out.onMessage("finished shortening theorem '" + id2s(th.descr.id) + "' ...");
	}
	time_taken = ruTimePassed(timer);
	late_for = 100.0 * (time_taken - time_limit) / time_limit;
	if (late_for > 10.0) {
		out.onMessage("*** " + id2s(th.descr.id) + " was late for: " + d2st(late_for, 2) + "% (" + ruTime2s(time_taken - time_limit) + ")");
	}
	if (late_for < 0.5) {
		//println("*** " + th.descr.name + " was UNDER late for: " + d2st(late_for, 2) + "% (limit: " + ruTime2s(time_limit) + ", taken: " + ruTime2s(time_taken) + ")");
	}
	switch (red) {
		Some(reduced): {
			if (ruVerbose(conf) > 0) {
				out.onMessage("theorem '" + id2s(th.descr.id) + "' shortened by " + i2s(length(reduced.removed)) + " steps in " + ruTimePassed2s(timer));
			}
			res = ruVerifyTheorem(reduced.smaller, math, env.env);
			if (!ruIsVerified(res)) {
				ruCrash(
					"ERROR IN SHORTENING\n" +
					"optimized:\n" +
					ru2s(reduced.smaller, math) + "\n" +
					"original:\n" +
					ru2s(reduced.larger, math) + "\n" +
					ruVerifyErrs2s(res, math)
				);
			}
		}
		None(): 
			if (ruVerbose(conf) > 1) {
				out.onMessage("theorem '" + id2s(th.descr.id) + "' was not shortened in " + ruTimePassed2s(timer));
			}
	}
	maybeMap(red, \reduced -> reduced.smaller)
}

RuShortenLeast(
	step : RuStep, // Current least step
	vol  : int     // volume of current least step
);

RuShortenStepAcc(
	up : RuShortenAcc,
	assertion : string,
	sub : Tree<RuVar, RuExp>,
	refs : [RuRef],
	least : ref RuShortenLeast,
	vol : int,
	timer : RuTimer
);

ruStepMinVariant(i : int, steps : [RuStep], th : RuTheorem, acc : RuShortenAcc, time_limit : double) -> RuStep {
	step = acc.steps[i];
	if (ruTimeIsOver(acc.timer)) step else {
		step_timer = ruMakeLimitedTimer(time_limit);
		unify_limit = ruTimeLeft(step_timer) / 10.0;
		unified = filter(
			ruUnifyIndex(
				step.expr, acc.env.assertions, makeTree(), 
				acc.env.math, acc.env.env, unify_limit
			),
			\unif -> ruDeclPreceeds(unif.data, th, acc.env.imports)
		);
		ruFold(unified, 
			RuShortenLeast(step, ruSubProofVolume(i, acc.steps)), 
			\least, unif -> {
				unconst_sub = \s -> ruTransformSubst(s, acc.cenv.unconst);
				ass : RuAssertion = unif.data;
				check_disj = \s -> {
					unc_s = unconst_sub(s);
					ruCheckDisjs(unc_s, ass.stat.disjs) && 
					ruCheckDisjsInherent(unc_s, ass.stat.disjs, th.stat.disjs);
				}
				if (ass.stat.hyps != [] && check_disj(unif.sub)) {
					hyps_prod = map(ass.stat.hyps, \h -> {
						hyp_unified = ruUnifyIndex(
							ruApplySubst(h.expr, unif.sub), acc.premises, unif.sub, 
							acc.env.math, acc.env.env, unify_limit / i2d(ruArity(ass))
						);
						sorted = mergeSort(hyp_unified, \u1, u2 -> 
							ruRefVolume(u1.data, acc.steps) - ruRefVolume(u2.data, acc.steps)
						);
						map(sorted, \un -> RuSubData(un.sub, un.data));
					});
					sub_unified = ruUnifySubsProd(hyps_prod, \__-> true, step_timer, acc.env.math, acc.env.env);
					ruFold(sub_unified, least, 
						\le, sd -> {
							st = RuStep(le.step with refs = sd.data, assertion = ass.descr.id);
							vol = ruSubProofVolume(st.ind, replace(acc.steps, st.ind, st));
							if (vol < le.vol && check_disj(sd.sub)) {
								RuShortenLeast(st, vol) 
							} else {
								le;
							}
						},
						step_timer
					);
				} else {
					least;
				}
			}, 
			step_timer
		).step;
	}
}

ruMakeShortenProofsIndex(target : RuTarget, math : RuMath, env : RuEnv) -> RuIndex<RuAssertion> {
	timer = ruMakeTimer();
	index = switch (target) {
		RuTargetMath(__): 
			ruInitGlobalAssertionsIndex(math);
		RuTargetSource(src,__): 
			ruInitSourceAssertionsIndex(src, math, env);
		RuTargetDecl(decl): {
			switch (decl) {
				RuTheorem(__,__,__,__): {
					ruInitTheoremAssertionsIndex(decl, math, env);
				}
				default: ruInitGlobalAssertionsIndex(math);
			}
		}
		RuTargetNone():
			ruMakeIndex();
	}
	if (ruVerbose(env.conf) > 0 && ruTimePassed(timer) > 100.0) {
		env.out.onMessage("index was built in " + ruTimePassed2s(timer));
	}
	index;
}

ruRunShortenProofs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	target = ruDetermineTarget(unit.task, math, env);
	if (target != RuTargetNone()) {
		shortened_theorems = ref 0;
		shortened_steps = ref 0;
		all_imported = ruSourcesAllImported(math.sources, env);
		index = ruMakeShortenProofsIndex(target, math, env);
		shorten_env = RuShortenEnv(index, all_imported, math, env);
		shorten_fn = \decl, time_limit -> {
			th = cast(decl : RuDecl -> RuTheorem);
			ret = ruShortenTheorem(th, time_limit, shorten_env);
			switch (ret) {
				Some(shortened): {
					atomicRefIntAddition(shortened_theorems, 1);
					atomicRefIntAddition(shortened_steps, length(th.proof.steps) - length(shortened.proof.steps));
					{}
				}
				None(): {}
			}
			ret;
		}
		descr = RuFnDescr(
			"shorten-proofs", 
			\decl -> ruTargetPredicate(target)(decl) && ruDeclIsTheorem(decl), 
			ruProofLengthMeasure, 
			\ -> "shortened: " + i2s(^shortened_theorems) + " theorems, " + i2s(^shortened_steps) + " steps"
		);
		new_state = ruMapFnComm(
			RuUnit(unit.task, state, env.out),
			RuMapFn(
				descr,
				shorten_fn
			)
		);
		Some(RuState(new_state with 
			vars = setTree(setTree(new_state.vars, 
				"shorten-proofs.shortened-theorems", ValInt(^shortened_theorems)),
				"shorten-proofs.shortened-steps", ValInt(^shortened_steps)
			)
		));
	} else {
		env.out.onMessage("no target for proof shortening");
		Some(state);
	}
}

import command;

export {
	ruCommMergeMath : (exec : (RuJob, (string) -> void, RuEnv) -> RuEnv) -> RuComm;
}

ruCommMergeMath(exec : (RuJob, (string) -> void, RuEnv) -> RuEnv) -> RuComm {
    RuComm(
	    "merge-math", "refactor", "merge current math with the other", "root",
        [
            RuCommArg("root", false, "input math root", ""),
            RuCommArg("importRoots", false, "input math import roots", ""),
            RuCommArg("info", true, "show info about merged theorems", ""),
        ],
        ruRunMergeMath(exec)
    );
}

ruRunMergeMath(exec : (RuJob, (string) -> void, RuEnv) -> RuEnv) -> (RuTask, RuEnv) -> Maybe<RuEnv> {
    \task : RuTask, env : RuEnv -> {
        root = lookupTreeDef(task.args, "root", "");
        importRoots = lookupTreeDef(task.args, "importRoots", "");
        read = RuJob([
            RuTask("update-conf", pairs2tree([
                Pair("project-roots", root), 
                Pair("import-roots", importRoots), 
                Pair("caching", "0"), 
                Pair("verbose", "2"), 
            ])),
            RuTask("show-conf", makeTree()),
            RuTask("read-ru", makeTree1("file", root)),
        ]);
        env1 = exec(read, env.conf.onMessage, env);
        if (lookupTreeDef(task.args, "info", "") == "1") {
            ruMergeMathsInfo(env.ruMath, env1.ruMath, env.conf);
            Some(env);
        } else {
            Some(RuEnv(env with ruMath = ruMergeMaths(env.ruMath, env1.ruMath, env.conf)));
        }
    }
}

ruCompareMergingInfo(s1 : [string], s2 : [string], header : string, conf : RuConf) -> void {
    s2_without_s1 = set2array(differenceSets(buildSet(s2), buildSet(s1)));
    if (length(s2_without_s1) > 0) {
        conf.onMessage("merging has new " + header + ": " + strGlue(s2_without_s1, ", "));
    }
}

ruMergeMathsInfo(m1 : RuMath, m2 : RuMath, conf : RuConf) -> void {
    ruCompareMergingInfo(getTreeKeys(m1.consts), getTreeKeys(m2.consts), "constants", conf);
    ruCompareMergingInfo(getTreeKeys(m1.types), getTreeKeys(m2.types), "types", conf);
    ruCompareMergingInfo(getTreeKeys(m1.rules), getTreeKeys(m2.rules), "rules", conf);
    ruCompareMergingInfo(getTreeKeys(m1.assertions), getTreeKeys(m2.assertions), "assertions", conf);
}

ruMergeMaths(m1 : RuMath, m2 : RuMath, conf : RuConf) -> RuMath {
    m1;
}
import script/script;
import ru/verify/verify;
import ru/refactor/optimize_imports;
import command;

export {
	ruCommMergeMath : (exec : (ScScript, (string) -> void, RuState) -> RuState) -> RuComm;
}

ruCommMergeMath(exec : (ScScript, (string) -> void, RuState) -> RuState) -> RuComm {
    RuComm(
	    "merge-math", "refactor", "merge current math collection with the other", "file",
        [
			RuCommArg("file", false, "input math file. Make sense to use a root file.", ""),
            RuCommArg("importRoots", false, "input math import roots", ""),
			RuCommArg("exportRoot", false, "where to put new files", ""),
			RuCommArg("merge", false, "set to 0 not to perform actual merging", ""),
			RuCommArg("verify", false, "set to 'no' to force skipping of verification or set to 'smart' to automatically remove failed theorems", "yes"),
            RuCommArg("info-verbose", true, "verbosity at show info about merged theorems, value: 0, 1, 2, 3", ""),
        ],
        ruRunMergeMath(exec)
    );
}

ruRunMergeMath(exec : (ScScript, (string) -> void, RuState) -> RuState) -> (ScTask, RuState) -> Maybe<RuState> {
    \task : ScTask, env : RuState -> {
		start = timestamp();
		conf = env.conf;
        file = lookupTreeDef(task.args, "file", "");
        importRoots = lookupTreeDef(task.args, "importRoots", "");
		exportRoot = rtrim2(lookupTreeDef(task.args, "exportRoot", ""), "/");
		if (!exists(conf.importRoots, \imp -> imp == exportRoot)) {
			conf.onError(
				"export root: " + exportRoot + " is not found in the main math import roots:\n" + 
					strIndent(strGlue(conf.importRoots, "\n")), 
				[]
			);
			None();
		} else {
			if (conf.verbose > 0) {
				conf.onMessage("merging with: " + file + " started");
			}
			read = ScSeq([
				ScTask("clear-conf", makeTree()),
				ScTask("update-conf", pairs2tree([
					Pair("file", file), 
					Pair("import-roots", importRoots), 
					Pair("caching", "0"), 
					Pair("verbose", i2s(if (conf.verbose > 0) conf.verbose - 1 else 0)), 
					Pair("strict-file-names", "1"),
				])),
				//ScTask("show-conf", makeTree()),
				//ScTask("math-stats", makeTree()),
				//ScTask("clear-cache", makeTree1("cache", "all")),
				ScTask("read-ru", makeTree1("file", file)),
			]);
			env1 = exec(read, \msg -> conf.onMessage(strIndent(msg)), ruEmptyState);
			info_level_s = lookupTreeDef(task.args, "info-verbose", "");
			info_level = if (info_level_s == "") conf.verbose else s2i(info_level_s);
			if (info_level > 0) {
				ruMergeMathsInfo(env.ruMath, env1.ruMath, conf, info_level);
			}
			if (lookupTreeDef(task.args, "merge", "1") == "0") Some(env) else {
				merged_math = ruMergeMaths(env.ruMath, env1.ruMath, exportRoot, conf);
				// Some imports may become obsolete, some other may become necessary.
				imports_optimized = ruOptimizeImports(merged_math, ruDecVerbose(conf));
				env2 = RuState(env with ruMath = imports_optimized);
				verify_mode = lookupTreeDef(task.args, "verify", "smart");
				if (verify_mode == "no") {
					if (conf.verbose > 0) {
						conf.onMessage("merging succeeded (NOT verified yet!), done in: " + d2st((timestamp() - start) / 1000.0, 3) + " s.");
					}
					Some(env2);
				} else if (verify_mode == "smart") {
					math = env2.ruMath;
					verify_acc = ruVerifyMath(math, ruDecVerbose(conf));
					disproved = filtermap(set2array(verify_acc.disproved), \disp -> 
						lookupTree(math.assertions, disp)
					);
					if (conf.verbose > 0) {
						if (sizeSet(verify_acc.disproved) > 0) {
							conf.onMessage("removing disproved " + i2s(sizeSet(verify_acc.disproved)) + " theorems: " + strGlue(map(disproved, ruDeclName), ", "));
						}
					}
					filtered_math = fold(disproved, verify_acc.math, \acc, thm -> ruRemoveDecl(thm, acc, conf));
					if (conf.verbose > 0) {
						conf.onMessage("merging succeeded, done in: " + d2st((timestamp() - start) / 1000.0, 3) + " s.");
					}
					Some(RuState(env2 with ruMath = filtered_math));
				} else {
					verified = ruVerifyMath(env2.ruMath, ruDecVerbose(conf));
					if (sizeSet(verified.disproved) == 0) {
						if (conf.verbose > 0) {
							conf.onMessage("merging succeeded, done in: " + d2st((timestamp() - start) / 1000.0, 3) + " s.");
						}
						Some(RuState(env2 with ruMath = verified.math));
					} else {
						if (conf.verbose > 0) {
							conf.onMessage("merging failed, took : " + d2st((timestamp() - start) / 1000.0, 3) + " s.");
						}
						None();
					}
				}
			}
		} 
    }
}

ruCompareMergingInfo(s1 : [?], s2 : [?], header : string, conf : RuConf, level : int, delim : string, show : (?) -> string) -> void {
    s2_without_s1 = set2array(differenceSets(buildSet(s2), buildSet(s1)));
	to_show = if (level > 2) s2_without_s1 else {
		if (length(s2_without_s1) <= 16) {
			s2_without_s1;
		} else {
			take(s2_without_s1, 16);
		}
	}
    if (length(to_show) > 0) {
		if (conf.verbose > 0) {
			msg1 = "new " + header + ": " + i2s(length(s2_without_s1)) + " ";
			msg2 = if (level == 1) msg1 else msg1 + ":" + delim + strGlue(map(to_show, show), "," + delim);
        	conf.onMessage(strIndent(msg2));
		}
    }
}

ruMergeMathsInfo(m1 : RuMath, m2 : RuMath, conf : RuConf, level : int) -> void {
	ruCompareMergingInfo(getTreeKeys(m1.sources), getTreeKeys(m2.sources), "sources", conf, level, "\n", id2s);
    ruCompareMergingInfo(getTreeKeys(m1.consts), getTreeKeys(m2.consts), "constants", conf, level, " ", id2s);
    ruCompareMergingInfo(getTreeKeys(m1.types), getTreeKeys(m2.types), "types", conf, level, " ", id2s);
    ruCompareMergingInfo(getTreeKeys(m1.rules), getTreeKeys(m2.rules), "rules", conf, level, " ", id2s);
    ruCompareMergingInfo(getTreeKeys(m1.assertions), getTreeKeys(m2.assertions), "assertions", conf, level, " ", id2s);
}

ruMergeMaths(m1 : RuMath, m2 : RuMath, exportRoot : string, conf : RuConf) -> RuMath {
	// Types should be merged in the very beginning
	new_type_names = set2array(differenceSets(buildSet(getTreeKeys(m2.types)), buildSet(getTreeKeys(m1.types))));
	new_types = fold(new_type_names, makeTree(), \acc, name -> 
		eitherMap(lookupTree(m2.types, name), \tenv -> 
			setTree(acc, name, tenv), acc
		)
	);
	if (conf.verbose > 1) {
		if (sizeTree(new_types) > 0) {
			conf.onMessage("\tnew types: " + strIndent(strIndent(strGlue(map(getTreeKeys(new_types), id2s), ", "))));
		} else {
			conf.onMessage("\tnew types: -- ");
		}
	}
	// We equip types with the super-infer rules, and these rules must be added initiall, with types.
	/*new_types_supers = foldTree(new_types, makeTree(), \__, tenv, acc -> 
		foldTree(tenv.supers, acc, \__, super, ac ->
			setTree(ac, super.descr.name, super)
		)
	);*/

	m1_sources = buildSet(getTreeKeys(m1.sources));
	m2_sources = buildSet(getTreeKeys(m2.sources));

	// Find a set of all common sources
	common_srcs = intersectSets(m1_sources, m2_sources);

	// Filter out only modified sources
	mod_srcs = filterSet(common_srcs, \name -> {
		src_1 = lookupTreeDef(m1.sources, name, ruNoSource);
		src_2 = lookupTreeDef(m2.sources, name, ruNoSource);
		src_1.decls != src_2.decls;
	});
	if (conf.verbose > 1) {
		if (sizeSet(mod_srcs) > 0) {
			conf.onMessage("\tmodified sources:\n" + strIndent(strIndent(strGlue(map(set2array(mod_srcs), id2s), "\n"))));
		} else {
			conf.onMessage("\tmodified sources: --");
		}
	}

	m1_names = buildSet(getTreeKeys(ruMathAllDecls(m1)));
	new_srcs = differenceSets(m2_sources, m1_sources);
	if (conf.verbose > 1) {
		if (sizeSet(new_srcs) > 0) {
			conf.onMessage("\tnew sources:\n" + strIndent(strIndent(strGlue(map(set2array(new_srcs), id2s), "\n"))));
		} else {
			conf.onMessage("\tnew sources: --");
		}
	}
	new_or_mod_srcs = mergeSets(new_srcs, mod_srcs);

	m1_decls = ruMathAllDecls(m1);

	// Find moved names: those, which occur in new sources and in old math as well
	moved_decls = foldSet(new_or_mod_srcs, makeSet(), \acc, name ->
		eitherMap(lookupTree(m2.sources, name), 
			\src -> mergeSets(acc, 
				fold(src.decls, acc, \ac, m2_decl ->
					if (!containsSet(m1_names, m2_decl.descr.id)) ac else {
						switch (lookupTree(m1_decls, m2_decl.descr.id)) {
							Some(m1_decl): insertSet(ac, m1_decl);
							None(): ac;
						}
					}
				)
			),
			acc
		)
	);
	if (conf.verbose > 2) {
		if (sizeSet(moved_decls) > 0) {
			conf.onMessage("\tmoved decls:\n" + strIndent(strIndent(strGlue(map(set2array(moved_decls), ruDeclName), "\n"))));
		} else {
			conf.onMessage("\tmoved decls: --");
		}
	}

	// Remove moved names from the former location
	m1_0 = foldSet(moved_decls, m1, \acc, decl -> ruRemoveDecl(decl, acc, conf));

	// Update math with types and rules
	m1_1 = RuMath(m1_0 with 
		types = mergeTree(m1.types, new_types),
		//rules = mergeTree(m1.rules, new_types_supers),
	);

	// Add all new sources as a whole
	m1_2 = foldSet(new_srcs, m1_1, \acc, name -> 
		eitherMap(lookupTree(m2.sources, name), 
			\src -> ruAddSource(
				RuSource(src with 
					info = ruChangeImportRoot(src.info, exportRoot)
				), acc, conf
			),
			acc
		)
	);

	// Merge decl arrays for modified sources
	m1_3 = foldSet(mod_srcs, m1_2, \acc, id -> {
		src_1 = lookupTreeDef(acc.sources, id, ruNoSource);
		src_2 = lookupTreeDef(m2.sources, id, ruNoSource);
		merged = concat(src_2.decls, src_1.decls);
		ruAddSource(RuSource(src_1 with decls = merged), acc, conf);
	});

	switch (ruProjectRootSource(m1)) {
		Some(root_1): {
			switch (ruProjectRootSource(m2)) {
				Some(root_2): {
					root_1_3 = lookupTreeDef(m1_3.sources, root_1.info.id, ruNoSource);
					root_1_srcs = buildSet(map(root_1_3.imports, \imp -> imp.id));
					new_imports = filter(root_2.imports, \imp -> !containsSet(root_1_srcs, imp.id));
					root_2_init_id = s2id(id2s(root_2.info.id) + "_init");
					new_root_1_imports = filter(concat(root_1_3.imports, new_imports), \imp -> 
						imp.id != root_2.info.id && imp.id != root_2_init_id
					);
					new_root_1 = RuSource(root_1_3 with imports = new_root_1_imports);
					root_2_removed = removeFromTree(removeFromTree(m1_3.sources, root_2.info.id), root_2_init_id);
					RuMath(m1_3 with sources = setTree(root_2_removed, root_1.info.id, new_root_1));
				}
				None(): {
					if (conf.verbose > 2) {
						conf.onMessage("\tno root file in math which is merging");
					}
					m1_3;
				}
			}
		}
		None(): {
			if (conf.verbose > 2) {
				conf.onMessage("\tno root file in math which is merged");
			}
			m1_3;
		}
	}
}

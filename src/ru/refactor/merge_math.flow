import command;

export {
	ruCommMergeMath : (exec : (RuJob, (string) -> void, RuEnv) -> RuEnv) -> RuComm;
}

ruCommMergeMath(exec : (RuJob, (string) -> void, RuEnv) -> RuEnv) -> RuComm {
    RuComm(
	    "merge-math", "refactor", "merge current math with the other", "root",
        [
            RuCommArg("root", false, "input math root", ""),
            RuCommArg("importRoots", false, "input math import roots", ""),
            RuCommArg("info", true, "show info about merged theorems", ""),
			RuCommArg("full-info", true, "show info about merged theorems", ""),
        ],
        ruRunMergeMath(exec)
    );
}

ruRunMergeMath(exec : (RuJob, (string) -> void, RuEnv) -> RuEnv) -> (RuTask, RuEnv) -> Maybe<RuEnv> {
    \task : RuTask, env : RuEnv -> {
		start = timestamp();
        root = lookupTreeDef(task.args, "root", "");
        importRoots = lookupTreeDef(task.args, "importRoots", "");
		if (env.conf.verbose > 0) {
			env.conf.onMessage("merging with: " + root);
		}
        read = RuJob([
            RuTask("update-conf", pairs2tree([
                Pair("project-roots", root), 
                Pair("import-roots", importRoots), 
                Pair("caching", "0"), 
            ])),
            //RuTask("show-conf", makeTree()),
            RuTask("read-ru", makeTree1("file", root)),
        ]);
        env1 = exec(read, \msg -> env.conf.onMessage(strIndent(msg)), env);
        ret = if (lookupTreeDef(task.args, "info", "") == "1") {
            ruMergeMathsInfo(env.ruMath, env1.ruMath, env.conf, false);
            Some(env);
        } else if (lookupTreeDef(task.args, "full-info", "") == "1") {
            ruMergeMathsInfo(env.ruMath, env1.ruMath, env.conf, true);
            Some(env);
        } else {
            Some(RuEnv(env with ruMath = ruMergeMaths(env.ruMath, env1.ruMath, env.conf)));
        }
		if (env.conf.verbose > 0) {
			env.conf.onMessage("merging finished in: " + d2st((timestamp() - start) / 1000.0, 3));
		}
		ret;
    }
}

ruCompareMergingInfo(s1 : [string], s2 : [string], header : string, conf : RuConf, full : bool) -> void {
    s2_without_s1 = set2array(differenceSets(buildSet(s2), buildSet(s1)));
	to_show = if (full) s2_without_s1 else {
		if (length(s2_without_s1) <= 16) {
			s2_without_s1;
		} else {
			concat(take(s2_without_s1, 16), [" ... "]);
		}
	}
    if (length(to_show) > 0) {
		if (conf.verbose > 0) {
        	conf.onMessage("\tnew " + header + " (" + i2s(length(s2_without_s1)) + "): " + strGlue(to_show, ", "));
		}
    }
}

ruMergeMathsInfo(m1 : RuMath, m2 : RuMath, conf : RuConf, full : bool) -> void {
    ruCompareMergingInfo(getTreeKeys(m1.consts), getTreeKeys(m2.consts), "constants", conf, full);
    ruCompareMergingInfo(getTreeKeys(m1.types), getTreeKeys(m2.types), "types", conf, full);
    ruCompareMergingInfo(getTreeKeys(m1.rules), getTreeKeys(m2.rules), "rules", conf, full);
    ruCompareMergingInfo(getTreeKeys(m1.assertions), getTreeKeys(m2.assertions), "assertions", conf, full);
}

ruMergeMaths(m1 : RuMath, m2 : RuMath, conf : RuConf) -> RuMath {
    m1;
}
import command;

export {
	ruCommOptimizeImports : RuComm;
}

ruCommOptimizeImports = RuComm(
	"optimize-imports", "misc", "optimize imports", "", [],
	\task, env -> RuEnv(env with ruMath = ruRunOptimizeImports(env.ruMath, env.conf))
);

ruRunOptimizeImports(math : RuMath, conf : RuConf) -> RuMath {
	start = timestamp();
	optimized = ruDoOptimizeMathImports(math.sources, math, conf, RuOptImportsAcc(makeTree(), makeTree()));
	if (conf.verbose > 0) {
		conf.onMessage("ru imports optimized: " +i2s(sizeTree(optimized.sources)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	RuMath(math with sources = optimized.sources);
}

RuOptImportsAcc(
	sources : Tree<string, RuSource>,
	cumulativeImports : Tree<string, Set<string>>
);

ruDoOptimizeMathImports(left : Tree<string, RuSource>, math : RuMath, conf : RuConf, acc : RuOptImportsAcc) -> RuOptImportsAcc {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.module))
		);
		if (conf.verbose >= 3) {
			conf.onMessage("\t\tready: " + strGlue(map(ready, \r -> r.info.module), ", "));
		}
		optimized = ruConcurrent(map(ready, \s -> \-> ruOptimizeSourceImports(s, acc, math, conf))); 
		new_acc = RuOptImportsAcc(
			fold(optimized, acc.sources, \ac, src -> setTree(ac, src.info.module, src)),
			fold(optimized, acc.cumulativeImports, \ac, src ->
				setTree(ac, src.info.module, 
					fold(src.imports, makeSet1(src.info.module), \a, imp -> insertSet(a, imp.module))
				)
			)
		);
		new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.module));
		if (conf.verbose >= 3) {
			conf.onMessage("\t\tnew_left: " + strGlue(getTreeKeys(new_left), ", "));
		}
		ruDoOptimizeMathImports(new_left, math, conf, new_acc);
	}
}

ruOptimizeSourceImports(src : RuSource, acc : RuOptImportsAcc, math : RuMath, conf : RuConf) -> RuSource {
	if (conf.verbose >= 2) {
		conf.onMessage("\toprimizing imports in module: " + src.info.module);
	}
	if (ruContainsOnlyComments(src)) src else {
		deps = set2array(mapSet(ruCollectDependencies(src), \n -> {
				s = ruFindSource(n, math);
				if (s != "") s else {
					conf.onError("unknown name: " + n, []);
					"";
				}
			}
		));
		optimized = filter(deps, \d1 -> 
			(d1 != src.info.module) && forall(deps, \d2 -> {
				switch (lookupTree(acc.cumulativeImports, d2)) {
					Some(imps): (d1 == d2) || !containsSet(imps, d1);
					None(): true;
				}
			})
		);
		RuSource(src with imports = map(optimized, \imp -> RuImport(imp, -1)));
	}
}

ruCollectDependencies(src : RuSource) -> Set<string> {
	exprDeps = \acc, expr -> fold(expr.nodes, acc, \ac, n ->
		switch (n) {
			RuRuleRef(rule, type, __,__): insertSet(insertSet(ac, rule), type);
			RuVar(__, type): insertSet(ac, type);
		}
	);
	termDeps = \acc, term -> fold(term.expr, insertSet(acc, term.type), \ac, n ->
		switch (n) {
			RuConstRef(c): insertSet(ac, c);
			RuVar(__, type): insertSet(ac, type);
		}
	);
	fold(src.decls, makeSet(), \acc, decl ->
		switch (decl) {
			RuComment(__,__,__): acc;
			RuConst(symb,__,__,__,__): insertSet(acc, symb);
			RuType(name,__, supers,__): fold(supers, acc, \ac, super -> insertSet(ac, super));
			RuRule(name,__, vars, term, __): termDeps(acc, term);
			RuAxiom(name,__, vars, disjs, hyps, prop, __):
				fold(hyps, exprDeps(acc, prop), \ac, hyp -> exprDeps(ac, hyp.expr));
			RuTheorem(name,__, vars, disjs, meta, hyps, prop, proof, __):
				fold(proof.steps, 
					fold(hyps, exprDeps(acc, prop), \ac, hyp -> exprDeps(ac, hyp.expr)), 
					\ac, step -> insertSet(exprDeps(ac, step.expr), step.assertion)
				);
			RuDef(name,__, vars, disjs, hyps, defm, defs, prop, pos):
				fold(hyps, exprDeps(acc, prop), \ac, hyp -> exprDeps(ac, hyp.expr));
		}
	)
}

import command;

export {
	ruCommOptimizeImports : RuComm;
	ruRunOptimizeImports(task : ScTask, env : RuState) -> Maybe<RuState>;
	ruOptimizeImports(math : RuMath, conf : RuConf) -> RuMath;
}

ruCommOptimizeImports = RuComm(
	"optimize-imports-ru", "misc", "optimize imports", "", [],
	ruRunOptimizeImports
);

ruRunOptimizeImports(task : ScTask, env : RuState) -> Maybe<RuState> {
	Some(RuState(env with ruMath = ruOptimizeImports(env.ruMath, env.conf)));
}

ruOptimizeImports(math : RuMath, conf : RuConf) -> RuMath {
	start = timestamp();
	optimized = ruDoOptimizeMathImports(math.sources, math, conf, RuOptImportsAcc(makeTree(), makeTree()));
	if (conf.verbose > 0) {
		conf.onMessage("ru imports optimized: " +i2s(sizeTree(optimized.sources)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	RuMath(math with sources = optimized.sources);
}

RuOptImportsAcc(
	sources : Tree<int, RuSource>,
	cumulativeImports : Tree<int, Set<int>>
);

ruDoOptimizeMathImports(left : Tree<int, RuSource>, math : RuMath, conf : RuConf, acc : RuOptImportsAcc) -> RuOptImportsAcc {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.id))
		);
		if (conf.verbose >= 3) {
			conf.onMessage("\t\tready: " + strGlue(map(ready, \r -> r.info.module), ", "));
		}
		optimized = ruConcurrent(map(ready, \s -> \-> ruOptimizeSourceImports(s, acc, math, conf))); 
		new_acc = RuOptImportsAcc(
			fold(optimized, acc.sources, \ac, src -> setTree(ac, src.info.id, src)),
			fold(optimized, acc.cumulativeImports, \ac, src ->
				setTree(ac, src.info.id, 
					fold(src.imports, makeSet1(src.info.id), \a, imp -> insertSet(a, imp.id))
				)
			)
		);
		new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.id));
		if (conf.verbose >= 3) {
			conf.onMessage("\t\tnew_left: " + strGlue(map(getTreeKeys(new_left), id2s), ", "));
		}
		ruDoOptimizeMathImports(new_left, math, conf, new_acc);
	}
}

ruOptimizeSourceImports(src : RuSource, acc : RuOptImportsAcc, math : RuMath, conf : RuConf) -> RuSource {
	if (conf.verbose >= 2) {
		conf.onMessage("\toptimizing imports in module: " + src.info.module);
	}
	if (length(src.decls) == 0) src else {
		deps = set2array(mapSet(ruCollectDependencies(src), \n -> {
				id = ruFindSourceId(n, math);
				if (id != -1) id else {
					conf.onError("unknown name: " + n, []);
					-1;
				}
			}
		));
		optimized = filter(deps, \d1 -> 
			(d1 != src.info.id) && forall(deps, \d2 -> {
				switch (lookupTree(acc.cumulativeImports, d2)) {
					Some(imps): (d1 == d2) || !containsSet(imps, d1);
					None(): true;
				}
			})
		);
		RuSource(src with imports = map(optimized, \imp -> RuImport(imp, -1)));
	}
}

ruCollectDependencies(src : RuSource) -> Set<string> {
	exprDeps = \acc, expr -> fold(expr.nodes, acc, \ac, n ->
		switch (n) {
			RuRuleNode(rule, type, __,__): insertSet(insertSet(ac, rule), type);
			RuVar(__,__, type): insertSet(ac, type);
		}
	);
	termDeps = \acc, term -> fold(term.nodes, insertSet(acc, term.type), \ac, n ->
		switch (n) {
			RuConstRef(c): insertSet(ac, c);
			RuVar(__,__, type): insertSet(ac, type);
		}
	);
	fold(src.decls, makeSet(), \acc, decl ->
		switch (decl) {
			RuConst(descr,__,__): insertSet(acc, descr.name);
			RuType(__, supers): fold(supers, acc, \ac, super -> insertSet(ac, super));
			RuRule(__,__, term): termDeps(acc, term);
			RuAxiom(__,stat):
				fold(stat.hyps, exprDeps(acc, stat.prop), \ac, hyp -> exprDeps(ac, hyp.expr));
			RuTheorem(__,stat,__,proof):
				fold(proof.steps, 
					fold(stat.hyps, exprDeps(acc, stat.prop), \ac, hyp -> exprDeps(ac, hyp.expr)), 
					\ac, step -> insertSet(exprDeps(ac, step.expr), step.assertion)
				);
			RuDef(__,stat,__,__):
				fold(stat.hyps, exprDeps(acc, stat.prop), \ac, hyp -> exprDeps(ac, hyp.expr));
		}
	)
}

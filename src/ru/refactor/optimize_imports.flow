import comm;

export {
	ruCommOptimizeImports : RuComm;
	ruRunOptimizeImports(unit : RuUnit) -> Maybe<RuState>;
	ruOptimizeImports(math : RuMath, env : RuEnv) -> Tree<int, RuSource>;
}

ruCommOptimizeImports = RuComm(
	RuCommInfo("optimize-imports-ru", "refactor", "optimize imports", "", false, false, [], []),
	ruRunOptimizeImports
);

ruRunOptimizeImports(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	timer = ruMakeTimer();
	math = ruMathFromSources(state.ru, env);
	optimized = ruDoOptimizeImports(
		math.sources, math, env, 
		RuOptImportsAcc(makeTree(), makeTree(), ruCollectMathDeps(math, env))
	).sources;
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("ru imports optimized: " +i2s(sizeTree(optimized)) + " files in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		ru = optimized,
		vars = setTree(state.vars, "optimize-imports-ru", pairs2tree([
			Pair("time", flow(ruTimePassed(timer))), 
			Pair("size", flow(sizeTree(optimized)))
		]))
	));
}

ruCollectMathDeps(math : RuMath, env : RuEnv) -> Tree<int, Set<int>> {
	pairs2tree(
		ruConcurrent(map(
			getTreeValues(math.sources),
			\src -> \env1 -> Pair(src.info.id, ruCollectSourceDependencies(src))
		), env)
	);
}

ruOptimizeImports(math : RuMath, env : RuEnv) -> Tree<int, RuSource> {
	ruDoOptimizeImports(
		math.sources, math, env, 
		RuOptImportsAcc(makeTree(), makeTree(), ruCollectMathDeps(math, env))
	).sources
}

RuOptImportsAcc(
	sources : Tree<int, RuSource>,
	cumulativeImports : Tree<int, Set<int>>,
	deps : Tree<int, Set<int>>
);

ruDoOptimizeImports(left : Tree<int, RuSource>, math : RuMath, env : RuEnv, acc : RuOptImportsAcc) -> RuOptImportsAcc {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.id))
		);
		if (ruVerbose(env.conf) >= 3) {
			env.out.onMessage("\t\tready: " + strGlue(map(ready, \r -> r.info.module), ", "));
		}
		optimized = ruConcurrent(map(ready, \s -> \env1 -> ruOptimizeSourceImports(s, acc, math, env1)), env); 
		new_acc = RuOptImportsAcc(
			fold(optimized, acc.sources, \ac, src -> setTree(ac, src.info.id, src)),
			fold(optimized, acc.cumulativeImports, \ac, src ->
				setTree(ac, src.info.id, 
					fold(src.imports, makeSet1(src.info.id), \a, imp -> insertSet(a, imp.id))
				)
			),
			acc.deps
		);
		new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.id));
		if (ruVerbose(env.conf) >= 3) {
			env.out.onMessage("\t\tnew_left: " + strGlue(map(getTreeKeys(new_left), id2s), ", "));
		}
		ruDoOptimizeImports(new_left, math, env, new_acc);
	}
}

ruOptimizeSourceImports(src : RuSource, acc : RuOptImportsAcc, math : RuMath, env : RuEnv) -> RuSource {
	if (ruVerbose(env.conf) >= 2) {
		env.out.onMessage("\toptimizing imports in module: " + src.info.module);
	}
	if (length(src.decls) == 0) src else {
		deps = set2array(mapSet(
			lookupTreeDef(acc.deps, src.info.id, makeSet()), 
			\id -> {
				src_id = ruFindSourceId(id, math.decls);
				if (src_id != -1) src_id else {
					env.out.onError("unknown name: '" + id2s(id) + "'", []);
					-1;
				}
			}
		));
		optimized = filter(deps, \d1 -> 
			(d1 != src.info.id) && forall(deps, \d2 -> {
				switch (lookupTree(acc.cumulativeImports, d2)) {
					Some(imps): (d1 == d2) || !containsSet(imps, d1);
					None(): true;
				}
			})
		);
		RuSource(src with imports = map(optimized, \imp -> RuImport(imp, -1)));
	}
}

ruCollectSourceDependencies(src : RuSource) -> Set<int> {
	exprDeps = \acc, expr -> fold(expr.nodes, acc, \ac, n ->
		switch (n) {
			RuRuleNode(rule, type, __,__): insertSet(insertSet(ac, rule), type);
			RuVar(__, type): insertSet(ac, type);
		}
	);
	termDeps = \acc, term -> fold(term.nodes, insertSet(acc, term.type), \ac, n ->
		switch (n) {
			RuConstRef(const): insertSet(ac, const);
			RuVar(__, type):   insertSet(ac, type);
		}
	);
	fold(src.decls, makeSet(), \acc, decl ->
		switch (decl) {
			RuConst(info,__,__): insertSet(acc, info.id);
			RuType(__, supers): fold(supers, acc, \ac, super -> insertSet(ac, super));
			RuRule(__,__, term): termDeps(acc, term);
			RuAxiom(__,stat):
				fold(stat.hyps, exprDeps(acc, stat.prop), \ac, hyp -> exprDeps(ac, hyp.expr));
			RuTheorem(__,stat,__,proof):
				fold(proof.steps, 
					fold(stat.hyps, exprDeps(acc, stat.prop), \ac, hyp -> exprDeps(ac, hyp.expr)), 
					\ac, step -> insertSet(exprDeps(ac, step.expr), step.assertion)
				);
			RuDef(__,stat,__,__):
				fold(stat.hyps, exprDeps(acc, stat.prop), \ac, hyp -> exprDeps(ac, hyp.expr));
		}
	)
}

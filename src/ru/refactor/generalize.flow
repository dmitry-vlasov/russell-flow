import ru/parse/write;
import ru/prover/stats;
import ru/prover/proof2theorem;
import ru/util/match_assertions;

export {
	ruCommGeneralize(task : RuTask, env : RuEnv) -> RuEnv;
}

ruCommGeneralize(task : RuTask, env : RuEnv) -> RuEnv {
	math = env.ruMath;
	conf = env.conf;
	generalized = initConcurrentHashMap();
	gen_level = s2i(lookupTreeDef(task.args, "level", "2"));
	fn = RuApplyFn(
		"generalize", 
		\decl -> switch (decl) {
			RuTheorem(__,__,__,__,__,__,__,__,__): true;
			default: false; 
		},
		\decl -> i2d(length(cast(decl : RuDecl -> RuTheorem).proof.steps)),
		\decl, time_limit -> {
			th = cast(decl : RuDecl -> RuTheorem);
			gen_name = th.name + "_gen";
			if (containsKeyTree(math.assertions, gen_name)) {
				if (conf.verbose >= 2) {
					conf.onMessage("\tSeems that '" + th.name + "' is already generalized");
				}
				true;
			} else {
				start = timestamp();
				switch (ruProof2Theorem(gen_name, th.src, ruProofToDAG(th.proof), math, conf, time_limit)) {
					Some(gen): {
						if (isNone(ruMatchAssertions(gen, th, math, conf))) {
							conf.onError("Generalization doesn't match !!!: " + th.name, []);
							quit(-1);
						}
						if (isNone(ruMatchAssertions(th, gen, math, conf))) {
							maybeApply(ruMatchAssertions(gen, th, math, conf), \match ->
								if (ruSubstLevel(match.sub) >= gen_level) {
									time = (timestamp() - start) / 1000.0;
									setConcurrentHashMap(generalized, th.name, Pair(th, gen));
									if (conf.verbose > 1) {
										conf.onMessage(i2s(sizeConcurrentHashMap(generalized)) + " theorem " + th.name + " was GENERALIZED in " + d2st(time, 2) + "s");
										//conf.onMessage(ru2s(generalized, math.rules));
									}
								}
							);
						}
						true;
					}
					None(): {
						time = (timestamp() - start) / 1000.0;
						conf.onMessage("theorem " + th.name + " was NOT generalized in " + d2st(time, 2) + "s");
						conf.onMessage(ru2s(th, math.rules));
						quit(-1);
						false;
					}
				}
			}
		}
	);
	ruApplyFnComm(task, env, fn);
	ruInsertGeneralized(generalized, env);
}

ruInsertGeneralized(generalized : native, env : RuEnv) -> RuEnv {
	math = env.ruMath;
	conf = env.conf;
	gen_math = fold(valuesConcurrentHashMap(generalized), math, \acc, pair : Pair<RuTheorem, RuTheorem> -> {
		th = pair.first;
		gen = pair.second;
		eitherMap(lookupTree(acc.assertions, th.name), \ass -> 
			eitherMap(lookupTree(acc.sources, ass.src), \src -> {
					if (conf.verbose >= 2) {
						conf.onMessage("ru adding generalized sources: " + gen.name);
					}
					ind = ruIndexOfDecl(th.name, src);
					acc1 = ruAddAssertion(gen, ind, src, acc, conf);
					/*ruAddComment(
						RuComment(
							"", // ru2s(th, acc.rules), 
							JsonObject([
							Pair("refactor",
								JsonObject([
									Pair("generalize",
										JsonObject([
											Pair("less_general", JsonString(th.name)),
											Pair("more_general", JsonString(gen.name)),
										])
									)
								])
							)
						]), -1), 
						ind, src, acc1, conf
					);*/
					acc1
				}, acc
			), acc
		);
	});
	//gen_names = fold(valuesConcurrentHashMap(generalized), makeSet(), \acc, pair : Pair<RuTheorem, RuTheorem> ->
	//	insertSet(acc, pair.second.name)
	//);
	//conf.onMessage("GEN NAMES: " + strGlue(set2array(gen_names), ", "));

	modified_sources = fold(valuesConcurrentHashMap(generalized), makeSet(), \acc, pair : Pair<RuTheorem, RuTheorem> ->
		eitherMap(lookupTree(gen_math.assertions, pair.first.name), \ass -> insertSet(acc, ass.src), acc)
	);
	ruWriteRefactoredSources(modified_sources, gen_math, conf);
	RuEnv(env with ruMath = gen_math);
}

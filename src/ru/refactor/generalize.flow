import ru/parse/write;
import ru/prover/stats;
import ru/prover/proof2theorem;
import ru/util/match_assertions;

export {
	ruCommGeneralize : RuComm;
}

ruCommGeneralize = RuComm(
	"generalize", "refactor", "automatically generalize theorems by proofs", "target",
	[
		RuCommArg("target", true, "the target: a theorem, file or all", "all"),
		RuCommArg("level", true, "min generalization level. Default is 0", "0"),
		RuCommArg("info", true, "show info about generalized theorems. In this case math is not updated", ""),
		RuCommArg("save", true, "save the result. Default is 1", "1"),
	],
	ruRunGeneralize
);

ruRunGeneralize(task : ScTask, env : RuState) -> Maybe<RuState> {
	math = env.ruMath;
	conf = env.conf;
	generalized = initConcurrentHashMap();
	gen_level = s2i(lookupTreeDef(task.args, "level", "0"));
	if (conf.verbose > 0) {
		conf.onMessage("starting generalization ... ");
	}
	fn = RuApplyFn(
		RuFnDescr(
			"generalize", 
			ruDeclIsTheorem,
			\decl -> i2d(length(cast(decl : RuDecl -> RuTheorem).proof.steps)),
		),
		\decl, time_limit -> {
			th = cast(decl : RuDecl -> RuTheorem);
			gen_id = s2id(id2s(th.descr.id) + "_gen");
			if (conf.verbose >= 3) {
				conf.onMessage("\t\ttrying to generalize '" + id2s(th.descr.id) + "'");
			}
			if (containsKeyTree(math.assertions, gen_id)) {
				if (conf.verbose >= 2) {
					conf.onMessage("\tseems that '" + id2s(th.descr.id) + "' is already generalized");
				}
				true;
			} else {
				start = ruTime();
				proof_graph = ruProofToDAG(th.proof);
				switch (ruProof2Theorem(gen_id, th.descr.src, proof_graph, math, conf, time_limit)) {
					Some(gen): {
						if (isNone(ruMatchAssertions(gen, th, math, conf))) {
							conf.onError(
								"Generalization doesn't match !!!: " + id2s(th.descr.id) + "\n" + 
								"theorem:\n" + ru2s(th, math.rules) + "\n" +
								"generalized:\n" + ru2s(gen, math.rules) + "\n"
								, []
							);
							vr = ruVerifyTheorem(gen, math, conf);
							iter(vr.errs, \err -> 
								conf.onError(ruVerifyErr2s(err, math, conf), [])
							);
							if (length(vr.errs) == 0) {
								conf.onMessage("Generalized is verified and is Ok\n" + ru2s(vr.theorem, math.rules));
							}
							quit(-1);
						}
						if (isNone(ruMatchAssertions(th, gen, math, conf))) {
							maybeApply(ruMatchAssertions(gen, th, math, conf), \match ->
								if (ruSubstLevel(match.sub) >= gen_level) {
									setConcurrentHashMap(generalized, id2s(th.descr.id), Triple(th, gen, match));
									if (conf.verbose >= 2) {
										conf.onMessage(
											"\t" + i2s(sizeConcurrentHashMap(generalized)) + " theorem '" + id2s(th.descr.id) + "' was GENERALIZED " + 
											"in " + ruTime2s(ruTime() - start) + ", " + 
											"time limit: " + ruTime2s(time_limit)
										);
									}
								}
							);
						}
						true;
					}
					None(): {
						conf.onError(
							"theorem '" + id2s(th.descr.id) + "' was NOT generalized in " + ruTime2s(ruTime() - start) + ", " +
							"time limit: " + ruTime2s(time_limit) + "\n" + 
							ru2s(th, math.rules) + "\n" +
							ruProofDAG2s(proof_graph), []
						);
						quit(-1);
						if (conf.verbose >= 2) {
							conf.onMessage(
								"\t" + i2s(sizeConcurrentHashMap(generalized)) + " theorem '" + id2s(th.descr.id) + "' was NOT generalized " + 
								"in " + ruTime2s(ruTime() - start) + " " + 
								"time limit: " + d2st(time_limit / 1000.0, 3)
							);
						}
						false;
					}
				}
			}
		}
	);
	ruApplyFnComm(task, env, fn);
	ret = if (lookupTreeDef(task.args, "info", "") != "") {
		info_level = s2i(lookupTreeDef(task.args, "info", ""));
		generalized_tiples = sortCustom(
			valuesConcurrentHashMap(generalized), 
			\triple : Triple<RuTheorem, RuTheorem, RuAssertionMatch> -> ruSubstLevel(triple.third.sub), 
			false
		);
		conf.onMessage("Generalized theorems:\n" +
			strGlue(map(generalized_tiples, \triple -> 
				"\t" + id2s(triple.first.descr.id) + ", substitution level: " + i2s(ruSubstLevel(triple.third.sub)) +
				(if (info_level <= 1) "" else 
					"\n" + strIndent("original:\n" + 
						strIndent(ruDecl2s(triple.first, math.rules))
					 ) +
					"\n" + strIndent("generalized:\n" + 
					strIndent(ruDecl2s(triple.second, math.rules))
					 ) +
					"\n" + strIndent("substitution:\n" + 
					strIndent(ruSubst2s(triple.third.sub, math))
					 ) + "\n"
				)
			), "\n")
		);
		env;
	} else {
		ruInsertGeneralized(generalized, task, env);
	}
	if (conf.verbose > 0) {
		conf.onMessage("\tgeneralized: " + i2s(sizeConcurrentHashMap(generalized)) + " theorems");
	}
	Some(ret)
}

ruInsertGeneralized(generalized : native, task : ScTask, env : RuState) -> RuState {
	math = env.ruMath;
	conf = env.conf;
	gen_math = fold(valuesConcurrentHashMap(generalized), math, \acc, triple : Triple<RuTheorem, RuTheorem, RuAssertionMatch> -> {
		th = triple.first;
		gen = triple.second;
		eitherMap(lookupTree(acc.assertions, th.descr.id), \ass -> 
			eitherMap(lookupTree(acc.sources, ass.descr.src), \src -> {
					if (conf.verbose >= 3) {
						conf.onMessage("\tru adding generalized sources: '" + id2s(gen.descr.id) + "'");
					}
					ind = ruIndexOfDecl(th.descr.id, src);
					ruAddAssertion(gen, ind, src, acc, conf);
				}, acc
			), acc
		);
	});
	if (lookupTreeDef(task.args, "save", "") == "1") {
		modified_sources = fold(valuesConcurrentHashMap(generalized), makeSet(), \acc, triple : Triple<RuTheorem, RuTheorem, RuAssertionMatch> ->
			eitherMap(lookupTree(gen_math.assertions, triple.first.descr.id), \ass -> insertSet(acc, ass.descr.src), acc)
		);
		ruWriteRefactoredSources(modified_sources, gen_math, ruDecVerbose(conf));
	}
	RuState(env with ruMath = gen_math);
}

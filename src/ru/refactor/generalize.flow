import ru/parse/write;
import ru/prover/stats;
import ru/prover/proof2theorem;
import ru/util/match_assertions;
import ru/map_decls;

export {
	ruCommGeneralize : RuComm;
}

ruCommGeneralize = RuComm(
	RuCommInfo(
		"generalize", "refactor", "automatically generalize theorems by proofs", "target", false, false, 
		[
			RuCommArg("target", true, "the target: a theorem, file or all", "all"),
			RuCommArg("min-sub-level", true, "min generalization substitution level. Default is 0", "0"),
			RuCommArg("min-sub-len", true, "min generalization substitution length. Default is 0", "0"),
			RuCommArg("min-fitness", true, "min generalization fitness. Default is 0.0", "0.0"),
			RuCommArg("info", true, "show info about generalized theorems (number: 0,1,2). In this case math is not updated", "0"),
			RuCommArg("save", true, "save the result. Default is 1", "1"),
		], []
	),
	ruRunGeneralize
);

RuGeneralized(
	thm : RuTheorem,
	gen : RuTheorem,
	match : RuAssertionMatch
);

ruRunGeneralize(unit : RuUnit) -> Maybe<RuState> {
	env0 = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env0);
	gen_map = initConcurrentHashMap();
	gen_level = s2d(ruGetTaskArg(task.args, "level", "0.0"));
	if (ruVerbose(conf) > 0) {
		env0.out.onMessage("starting generalization ... ");
	}
	min_sub_level = s2i(ruGetTaskArg(task.args, "min-sub-level", "0"));
	min_sub_len = s2i(ruGetTaskArg(task.args, "min-sub-len", "0"));
	min_fitness = s2d(ruGetTaskArg(task.args, "min-fitness", "0.0"));
	fitness_func = \g : RuGeneralized -> {
		i2d(ruSubstLen(g.match.sub)) *
		dpow(if (ruArity(g.gen) > 0) {
			i2d(ruArity(g.thm)) / i2d(ruArity(g.gen));
		} else {
			1.0
		}, 2.0);
	}
	generalized_count = ref 0;
	fn = RuMapFn(
		RuMapFnInfo(
			"generalize", 
			ruDeclIsTheorem,
			\decl -> i2d(length(cast(decl : RuDecl -> RuTheorem).proof.steps)),
			\ -> "generalized: " + i2s(^generalized_count)
		),
		\decl, time_limit, env -> {
			th = cast(decl : RuDecl -> RuTheorem);
			gen_id = s2id(id2s(th.info.id) + "_gen");
			if (ruVerbose(conf) >= 3) {
				env.out.onMessage("\t\ttrying to generalize '" + id2s(th.info.id) + "'");
			}
			if (containsKeyTree(math.decls.assertions, gen_id)) {
				if (ruVerbose(conf) >= 2) {
					env.out.onMessage("\tseems that '" + id2s(th.info.id) + "' is already generalized");
				}
				RuMappedDecl(decl, false, false);
				//true;
			} else {
				timer = ruMakeTimer();
				proof_graph = ruProofToDAG(th.proof);
				switch (ruProof2Theorem(RuDeclInfo(th.info with id = gen_id), proof_graph, math, env, time_limit)) {
					Some(gen): {
						if (length(gen.stat.hyps) > 3 * length(th.stat.hyps)) {
							if (ruVerbose(conf) > 1) {
								env.out.onMessage("Generalized theorem '" + id2s(th.info.id) + "' has too much hypothesis: " + i2s(length(gen.stat.hyps)) + " while original has: " + i2s(length(th.stat.hyps)));
							}
							RuMappedDecl(decl, false, false);
							//true;
						} else {
							switch (ruMatchAssertions(gen, th, math, env)) {
								None(): {
									ruCrash(
										"Generalization doesn't match !!!: " + id2s(th.info.id) + "\n" + 
										"theorem:\n" + ru2s(th, math) + "\n" +
										"generalized:\n" + ru2s(gen, math)
									);
									vr = ruVerifyTheorem(gen, math, env);
									iter(vr.errs, \err -> 
										env.out.onError(ruVerifyErr2s(err, math), [])
									);
									if (length(vr.errs) == 0) {
										env.out.onMessage("Generalized is verified and is Ok\n" + ru2s(vr.theorem, math));
									}
									RuMappedDecl(decl, true, false);
								}
								Some(match): {
									switch (ruSubst2Renaming(match.sub)) {
										Some(renaming): {
											th1 = ruApplyRenaming2Theorem(renaming, gen);
											if ((th.stat.prop == th1.stat.prop && forall(th1.stat.hyps, \h -> contains(th.stat.hyps, h)))) {
												ruCrash(
														"MUST BE IDENTICAL\n" +
														"substitution level: " + i2s(ruSubstLevel(match.sub)) + "\n" + 
														"substitution len: " + i2s(ruSubstLen(match.sub)) + "\n" + 
														"sub:\n" + ruSubst2s(match.sub, math) + "\n" + 
														"original:\n" + ruDeclShort2s(th, math) + "\n" + 
														"generalized:\n" + ruDeclShort2s(gen, math) + "\n"
														"sub applied:\n" + ruDeclShort2s(th1, math) + "\n\n"
													);
											}
											RuMappedDecl(decl, true, false);
										}
										None(): {
											g = RuGeneralized(th, gen, match);
											sub_level = ruSubstLevel(match.sub);
											sub_len = ruSubstLen(match.sub);
											fitness = fitness_func(g);
											if (sub_level >= min_sub_level && sub_len>= min_sub_len && fitness >= min_fitness) {
												if (fitness > 0.0) {
													setConcurrentHashMap(gen_map, id2s(th.info.id), g);
													atomicRefIntAddition(generalized_count, 1);
													{}
												}
												if (ruVerbose(conf) >= 2) {
													env.out.onMessage(
														"\t" + i2s(sizeConcurrentHashMap(gen_map)) + " theorem '" + id2s(th.info.id) + "' was GENERALIZED " + 
														"in " + ruTimePassed2s(timer) + ", " + 
														"time limit: " + ruTime2s(time_limit) + ", " + 
														"substitution level: " + i2s(sub_level) + ", " + 
														"substitution len: " + i2s(sub_len) + ", " +
														"fitness: " + d2s(fitness) + 
														(if (ruVerbose(conf) < 3) "" else "\n" + 
															"sub:\n" + ruSubst2s(match.sub, math) + "\n" + 
															"original:\n" + ruDeclShort2s(th, math) +
															"generalized:\n" + ruDeclShort2s(gen, math) + "\n\n"
														)
													);
												}
											}
											RuMappedDecl(decl, false, false);
										}
									}
								}
							}
							/*if (isNone(ruMatchAssertions1(th, gen, math, conf))) {
								maybeApply(ruMatchAssertions1(gen, th, math, conf), \match ->
									if (ruSubstLevel(match.sub) >= gen_level) {
										setConcurrentHashMap(generalized, id2s(th.info.id), Triple(th, gen, match));
										if (ruVerbose(conf) >= 2) {
											env.out.onMessage(
												"\t" + i2s(sizeConcurrentHashMap(generalized)) + " theorem '" + id2s(th.info.id) + "' was GENERALIZED " + 
												"in " + ruTime2s(ruTime() - start) + ", " + 
												"time limit: " + ruTime2s(time_limit) + "\n" + 
												"substitution level: " + i2s(ruSubstLevel(match.sub)) + "\n" + 
												"substitution len: " + i2s(ruSubstLen(match.sub)) + "\n" + 
												"sub:\n" + ruSubst2s(match.sub, math) + "\n" + 
												"original:\n" + ru2s(th, math.rules) +
												"generalized:\n" + ru2s(gen, math.rules) + "\n\n"
											);
										}
									}
								);
							}*/
							//env.out.onMessage("\t\theorem '" + id2s(th.info.id) + "' was processed");
							//true;
						}
					}
					None(): {
						passed = ruTimePassed(timer);
						if (ruVerbose(conf) >= 2) {
							env.out.onMessage(
								"\t" + i2s(sizeConcurrentHashMap(gen_map)) + " theorem '" + id2s(th.info.id) + "' was NOT generalized " + 
								"in " + ruTime2s(passed) + " " + 
								"time limit: " + ruTime2s(time_limit)
							);
							if (passed < time_limit) {
								ruCrash("limit is not exhaused, passed: " + ruTime2s(passed) + ", limit: " + ruTime2s(time_limit) + "\n" +
									"theorem:\n" + ru2s(th, math) + "\n" + ruProofDAG2s(proof_graph)
								);
							}
						}
						RuMappedDecl(decl, true, false);
					}
				}
			}
		}
	);
	timer = ruMakeTimer();
	ruMapFnComm(unit, fn);
	new_state = if (ruGetTaskArg(task.args, "info", "") != "") {
		info_level = s2i(ruGetTaskArg(task.args, "info", ""));
		generalized = sortCustom(
			filter(valuesConcurrentHashMap(gen_map), \g -> fitness_func(g) > 0.0), 
			fitness_func, 
			false
		);
		gen_msg = strGlue(map(generalized, \g -> 
				"\t" + id2s(g.thm.info.id) + ", " + 
				"sub level: " + i2s(ruSubstLevel(g.match.sub)) + ", " + 
				"sub len: " + i2s(ruSubstLen(g.match.sub)) + ", " +
				"fit: " + d2s(fitness_func(g)) + 
				(if (info_level <= 1) "" else 
					"\n" + strIndent("original:\n" + 
						strIndent(ruDeclShort2s(g.thm, math))
					 ) +
					"\n" + strIndent("generalized:\n" + 
						strIndent(ruDeclShort2s(g.gen, math))
					) +
					"\n" + strIndent("substitution:\n" + 
					strIndent(ruSubst2s(g.match.sub, math))
					) + "\n"
				)
			), "\n");
		env0.out.onMessage("Generalized theorems: " +
			(if (length(generalized) > 0) "\n" + gen_msg else "none\n")
		);
		/*
		RuGeneralized(
			thm : RuTheorem,
			gen : RuTheorem,
			match : RuAssertionMatch
		);
		*/
		if (length(generalized) > 0) {
			title = if (length(generalized) == 1) {
				id2s(generalized[0].gen.info.id);
			} else {
				id2s(generalized[0].gen.info.src) + "_gen";
			}
			maxlen = s2i(lookupTreeDef(conf.opts, "maxlen-expr", "32"));
			env0.out.onData(json2string(JsonObject([
				Pair("title", JsonString(title)),
				Pair("theorems",
					JsonArray(map(generalized, \g -> 
						JsonString(
							ru2sWrapExp(g.gen, math, \s -> ruIndentBrackets(s, maxlen))
						)
					))
				)
			])));
		}
		state;
	} else {
		ruInsertGeneralized(gen_map, task, state, env0);
	}
	if (ruVerbose(conf) > 0) {
		env0.out.onMessage("\tgeneralized: " + i2s(sizeConcurrentHashMap(gen_map)) + " theorems");
	}
	Some(RuState(new_state with
		vars = setTree(new_state.vars, "generalize", pairs2tree([
			Pair("time", flow(ruTimePassed(timer))),
			Pair("generalized", flow(sizeConcurrentHashMap(gen_map))),
			Pair("size", flow(ruDeclsTheoremsNum(math.decls)))
		]))
	));
}

ruInsertGeneralized(generalized : native, task : ScTask, state : RuState, env : RuEnv) -> RuState {
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	gen_math = fold(valuesConcurrentHashMap(generalized), math, \acc, triple : Triple<RuTheorem, RuTheorem, RuAssertionMatch> -> {
		th = triple.first;
		gen = triple.second;
		eitherMap(lookupTree(acc.decls.assertions, th.info.id), \ass -> 
			eitherMap(lookupTree(acc.sources, ass.info.src), \src -> {
					if (ruVerbose(env.conf) >= 3) {
						env.out.onMessage("\tru adding generalized sources: '" + id2s(gen.info.id) + "'");
					}
					ind = ruIndexOfDecl(th.info.id, src);
					ruMathInsertDecl(acc, gen, ind, env);
				}, acc
			), acc
		);
	});
	if (ruGetTaskArg(task.args, "save", "") == "1") {
		modified_sources = fold(valuesConcurrentHashMap(generalized), makeSet(), \acc, triple : Triple<RuTheorem, RuTheorem, RuAssertionMatch> ->
			eitherMap(lookupTree(gen_math.decls.assertions, triple.first.info.id), \ass -> insertSet(acc, ass.info.src), acc)
		);
		ruWriteRefactoredSources(modified_sources, gen_math, ruDecVerboseEnv(env));
	}
	RuState(state with ru = gen_math.sources);
}

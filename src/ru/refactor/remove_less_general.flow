import ru/parse/write;
import ru/prover/stats;
import ru/prover/proof2theorem;
import ru/util/match_assertions;

export {
	ruCommRemoveLessGeneral : RuComm;
}

ruCommRemoveLessGeneral = RuComm(
	"remove-less-general", "refactor", "removes those assertions, which are less general then some others", "target", 
	[
		RuCommArg("remove-axioms", true, "remove redundant axioms. Default is 1", "1"),
		RuCommArg("remove-generalized", true, "remove those theorems, which were generalized with 'generalize' command. Default is 1", "1"),
		RuCommArg("remove-all", true, "remove all assertions, which are less generall to some other. May cause problem with cyclic imports", ""),
		RuCommArg("only-preceeding", true, "remove a less general assertion to only those, which preceeds it.", "1"),
		RuCommArg("update-imports", true, "include a more general module, in case it is not imported.", ""),
		RuCommArg("info", true, "show info about less general theorems. In this case math is not updated", ""),
		RuCommArg("save", true, "save the result. Default is 1", "1"),
	],
	ruRunRemoveLessGeneral
);

ruRunRemoveLessGeneral(task : RuTask, env : RuEnv) -> Maybe<RuEnv> {
	math = env.ruMath;
	conf = env.conf;
	hash_relation = initConcurrentHashMap();
	t0 = timestamp();
	if (conf.verbose > 0) {
		conf.onMessage("starting removing less general ... ");
	}
	assertionsIndex = ruInitGlobalAssertionsIndex(math);
	if (conf.verbose >= 3) {
		conf.onMessage("\t\tbuilding an assertion index: " + " in " + d2st((timestamp() - t0) / 1000.0, 3) + " s");
	}
	remove_axioms = lookupTreeDef(task.args, "remove-axioms", "") == "1";
	remove_generalized = lookupTreeDef(task.args, "remove-generalized", "") == "1";
	remove_all = lookupTreeDef(task.args, "remove-all", "") == "1";
	only_preceeding = lookupTreeDef(task.args, "only-preceeding", "") == "1";
	update_imports = lookupTreeDef(task.args, "update-imports", "") == "1";
	if (conf.verbose >= 3) {
		conf.onMessage(
			"\targuments:\n" +
			"\t\tremove-axioms: " + b2s(remove_axioms) + "\n" +
			"\t\tremove-generalized: " + b2s(remove_generalized) + "\n" +
			"\t\tremove-all: " + b2s(remove_all) + "\n"
			"\t\tonly-preceeding: " + b2s(only_preceeding)
		);
	}

	remove_predicate = \decl -> {
		switch (decl) {
			RuAxiom(__,__,__,__,__,__): 
				remove_all || remove_axioms;
			RuDef(__,__,__,__,__,__,__,__): 
				remove_all;
			RuTheorem(descr,__,__,__,__,__,__,__):
				remove_all || (remove_generalized && containsKeyTree(math.assertions, descr.name + "_gen"));
			default: false; 
		}
	}

	fn = RuApplyFn(
		"generality relation", 
		remove_predicate,
		\decl -> i2d(length(cast(decl : RuDecl -> RuAssertion).hyps)),
		\decl, time_limit -> {
			ass = cast(decl : RuDecl -> RuAssertion);
			ass_name = ruDeclName(ass);
			if (conf.verbose >= 3) {
				conf.onMessage("\t\tChecking for more general then: " + ass_name + " ... ");
			}
			c_ass = ruConstAssertion(ass, math);
			more_general = filtermap(ruUnifyIndex(c_ass.const.prop, assertionsIndex, makeTree(), math, conf), \unified ->
				if (ass_name == ruDeclName(unified.data)) None() else {
					more_general_ass = unified.data;
					maybeBind(ruMatchAssertions(more_general_ass, ass, math, conf), \match -> Some(more_general_ass));
				}
			);
			if (more_general != []) {
				if (conf.verbose >= 2) {
					conf.onMessage("\tFor " + ass_name + " found more general: " + strGlue(map(more_general, \gen -> ruDeclName(gen)), ", "));
				}
				setConcurrentHashMap(hash_relation, 
					ruDeclName(ass), 
					Pair(ass, more_general));
			} else {
				if (conf.verbose >= 3) {
					conf.onMessage("\t\tMore general is not found");
				}
			}
			true;
		}
	);
	
	t1 = timestamp();
	ruApplyFnComm(task, env, fn);
	if (conf.verbose >= 3) {
		conf.onMessage("\tRAW GEN REL: " + i2s(sizeConcurrentHashMap(hash_relation)) + " in " + d2st((timestamp() - t1) / 1000.0, 3) + " s");
		if (conf.verbose >= 3) {
			conf.onMessage(strGlue(map(keysConcurrentHashMap(hash_relation), 
				\ass_name -> {
					more_general : [RuAssertion] = getConcurrentHashMap(hash_relation, ass_name, Pair(ruNoAxiom, [])).second;
					"\t\t" + ass_name + " <= " + strGlue(map(more_general, \gen -> ruDeclName(gen)), ", ");
				}
			), "\n"));
		}
	}
	less2greater_all : Tree<string, Pair<RuAssertion, [RuAssertion]>> = ruConcurrentHashMap2Tree(hash_relation);

	t2 = timestamp();
	affected : Set<RuAssertion> = fold(getTreeValues(less2greater_all), makeSet(), \acc, pair -> 
		insertSet(fold(pair.second, acc, \ac, gen : RuAssertion -> insertSet(ac, gen)), pair.first)
	);
	affected_names = mapSet(affected, \gen -> ruDeclName(gen));
	affected_srcs = foldSet(affected, makeSet(), \acc, gen -> insertSet(acc, gen.descr.source));
	affected_inds = foldTree(math.sources, makeTree(), \name, src, acc ->
		if (!containsSet(affected_srcs, name)) acc else {
			foldi(src.decls, acc, \i, ac, decl -> {
				n = ruDeclName(decl);
				if (!containsSet(affected_names, n)) ac else {
					setTree(ac, n, i);
				}
			});
		}
	);
	affected_deps = foldSet(affected, makeTree(), \acc, d : RuAssertion -> 
		if (containsKeyTree(acc, d.descr.name)) acc else {
			ruDoMathAssertionDependencies(d.descr.name, acc, math, conf)
		}
	);
	imports_map = ruMathAllImported(math, conf);
	preceeds = \a1 : RuAssertion, a2 : RuAssertion -> {
		ret = if (a1.descr.source == a2.descr.source) {
			lookupTreeDef(affected_inds, a1.descr.name, 0) < lookupTreeDef(affected_inds, a2.descr.name, 0);
		} else {
			containsSet(lookupTreeDef(imports_map, a2.descr.source, makeSet()), a1.descr.source);
		}
		if (conf.verbose >= 4) {
			conf.onMessage(a1.descr.name + " preceeds " + a2.descr.name + ": " + b2s(ret) + "\n");
		}
 		ret;
	}
	depends = \a1 : RuAssertion, a2 : RuAssertion -> {
		containsSet(lookupTreeDef(affected_deps, a1.descr.name, makeSet()), a2.descr.name)
	}
	if (conf.verbose >= 3) {
		conf.onMessage("Dependencies:\n" +
			strGlue(
				map(set2array(affected), \ass -> {
					all_deps = set2array(lookupTreeDef(affected_deps, ass.descr.name, makeSet()));
					deps = filter(all_deps, \dep -> containsSet(affected_names, dep));
					"\t" + ass.descr.name + " depends on [" + strGlue(deps, ", ") + "]";
				}),
				"\n"
			)
		);
	}
	compare_gen = \a1, a2 -> {
		ret = if (!remove_predicate(a1) || depends(a2, a1)) None() else {
			maybeBind(ruMatchAssertions(a2, a1, math, conf), \match ->
				if (isNone(ruMatchAssertions(a1, a2, math, conf))) {
					if (only_preceeding) {
						if (preceeds(a2, a1)) Some(match) else None();
					} else {
						if (!preceeds(a1, a2)) Some(match) else None();
					}
				} else if (strlen(a1.descr.name) > strlen(a2.descr.name)) {
					if (only_preceeding) {
						if (preceeds(a2, a1)) Some(match) else None();
					} else {
						if (!preceeds(a1, a2)) Some(match) else None();
					}
				} else None()
			);
		}
		if (conf.verbose >= 4) {
			conf.onMessage(
				a1.descr.name + " is less general then " + a2.descr.name + ": " + b2s(isSome(ret)) + "\nfirst:\n" +
				ru2s(a1, math.rules) + "\nsecond:\n" + ru2s(a1, math.rules) + "\n"
			);
		}
		ret
	}
	less2greater_arr : Tree<RuAssertion, [Pair<RuAssertion, RuAssertionMatch>]> = filterTree(
		foldTree(
			less2greater_all, makeTree(), 
			\__, pair : Pair<RuAssertion, [RuAssertion]>, acc : Tree<RuAssertion, [Pair<RuAssertion, RuAssertionMatch>]> ->
			setTree(acc, pair.first,
				filtermap(pair.second, \greater : RuAssertion -> 
					maybeMap(compare_gen(pair.first, greater), \match -> Pair(greater, match))
				)
			)
		), 
		\__, arr -> length(arr) > 0
	);
	if (conf.verbose >= 2) {
		conf.onMessage("\tless2greater_arr: " + i2s(sizeTree(less2greater_arr)));
	}
	less2greater : Tree<RuAssertion,  Pair<RuAssertion, RuAssertionMatch>> = mapTree(
		less2greater_arr, \arr ->
		fold(tail(arr), arr[0], \acc, greater -> 
			if (strlen(greater.first.descr.name) < strlen(acc.first.descr.name)) greater else acc
		)
	);
	to_keep = set2array(foldTree(less2greater, makeSet(), \__, greater, acc -> insertSet(acc, greater.first.descr.name)));
	to_keep_non_gen = filter(to_keep, \ass -> !endsWith(ass, "_gen"));
	if (conf.verbose >= 2) {
		conf.onMessage("\tto remove: " + i2s(sizeTree(less2greater)) + ", to keep: " + i2s(length(to_keep)) + " in " + d2st((timestamp() - t2) / 1000.0, 3) + " s");
		conf.onMessage("\tkept non-generalized: " + i2s(length(to_keep_non_gen)) + ": \n" + 
			strGlue(map(to_keep_non_gen, \ass -> "\t\t" + ass), "\n")
		);
		if (conf.verbose >= 3) {
			conf.onMessage(strGlue(map(tree2pairs(less2greater), \p -> 
				"\t\t" + p.first.descr.name + " <= " + p.second.first.descr.name
			), "\n"));
		}
	}
	if (lookupTreeDef(task.args, "info", "") == "1") {
		conf.onMessage("Less general replacements:\n" + 
			strGlue(map(tree2pairs(less2greater), \p -> "\t" + p.first.descr.name + " => " + p.second.first.descr.name), "\n")
		);
		Some(env);
	} else {
		ass2step = ruAssertionsProofSteps(buildSet(map(getTreeKeys(less2greater), \less -> less.descr.name)), math);
		new_math = foldTree(less2greater, env.ruMath, \less, greater, acc ->
			if (!remove_predicate(less)) acc else 
			ruReplaceLessWithGreater(less, greater.first, greater.second, acc, conf, ass2step, update_imports)
		);
		if (lookupTreeDef(task.args, "save", "") == "1") {
			modified_sources = fold(getTreeKeys(less2greater), makeSet(), \acc, less -> 
				fold(getTreeKeys(lookupTreeDef(ass2step, less.descr.name, makeTree())), insertSet(acc, less.descr.source), \ac, thm -> 
					eitherMap(lookupTree(math.assertions, thm), \th -> insertSet(ac, th.descr.source), ac)
				)
			);
			ruWriteRefactoredSources(modified_sources, new_math, ruDecVerbose(conf));
		}
		Some(RuEnv(env with ruMath = new_math));
	}
}

ruReplaceLessWithGreater(less : RuAssertion, greater : RuAssertion, match : RuAssertionMatch, math : RuMath, conf : RuConf, ass2step : Tree<string, Tree<string, [int]>>, update_imports : bool) -> RuMath {
	match_inds = enumFromTo(0, sizeTree(match.hypsMap) - 1);
	if (conf.verbose >= 2) {
		conf.onMessage("\tReplacing: " + less.descr.name + " with " + greater.descr.name);
	}
	eitherMap(lookupTree(math.sources, less.descr.source), 
		\src -> {
			without_less = ruDeleteAssertion(less, math, conf);
			occurences = lookupTreeDef(ass2step, less.descr.name, makeTree());
			foldTree(occurences, without_less, \th_name, inds, acc ->
				if (!containsKeyTree(acc.assertions, th_name)) acc else {
					inds_set = buildSet(inds);
					th = cast(lookupTreeDef(acc.assertions, th_name, ruNoAxiom) : RuAssertion -> RuTheorem);
					new_proof = RuProof(th.proof with 
						steps = mapi(th.proof.steps, \i, step -> 
							if (!containsSet(inds_set, i)) step else {
								if (conf.verbose >= 3) {
									conf.onMessage("\t\treplaced in: " + th_name + ", step: " + i2s(i));
								}
								RuStep(step with 
									assertion = greater.descr.name,
									refs = map(match_inds, \j -> step.refs[lookupTreeDef(match.hypsMap, j, -1)])
								);
							}
						)
					);
					with_greater = if (!update_imports) acc else eitherMap(lookupTree(acc.sources, th.descr.source),
						\s -> ruAddImportToSource(s, greater.descr.source, acc, conf),
						acc
					);
					ruReplaceAssertion(RuTheorem(th with proof = new_proof), with_greater, conf);
				}
			);
		}, math
	);
}

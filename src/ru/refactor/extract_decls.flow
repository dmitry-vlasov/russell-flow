import comm;

export {
	ruCommExtractDecls : [RuComm] = [
		ruCommExtractConstants,
		ruCommExtractTypes,
		ruCommExtractRules,
		ruCommExtractAxioms,
		ruCommExtractDefs
	];
}

ruCommExtractConstants = RuComm(
	RuCommInfo("extract-constants", "refactor", "place constants in separate files", "", false, false, [], []),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		timer = ruMakeTimer();
		math = ruMathFromSources(state.ru, env);
		extracted = ruRunExtract(math, env, "constants", ruDeclIsConst);
		Some(RuState(state with 
			ru = extracted,
			vars = setTree(setTree(state.vars, 
				"extract-constants.time", ValDouble(ruTimePassed(timer))), 
				"extract-constants.size", ValInt(sizeTree(math.decls.lang.consts))
			)
		));
	}
);

ruCommExtractTypes = RuComm(
	RuCommInfo("extract-types", "refactor", "place types in separate files", "", false, false, [], []),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		timer = ruMakeTimer();
		math = ruMathFromSources(state.ru, env);
		extracted = ruRunExtract(math, env, "types", ruDeclIsType);
		Some(RuState(state with 
			ru = extracted,
			vars = setTree(setTree(state.vars, 
				"extract-types.time", ValDouble(ruTimePassed(timer))), 
				"extract-types.size", ValInt(sizeTree(math.decls.lang.types))
			)
		))
	}
);

ruCommExtractRules = RuComm(
	RuCommInfo("extract-rules", "refactor", "place rules in separate files", "", false, false, [], []),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		timer = ruMakeTimer();
		math = ruMathFromSources(state.ru, env);
		extracted = ruRunExtract(math, env, "rules", ruDeclIsRule);
		Some(RuState(state with
			ru = extracted,
			vars = setTree(setTree(state.vars, 
				"extract-rules.time", ValDouble(ruTimePassed(timer))), 
				"extract-rules.size", ValInt(sizeTree(math.decls.lang.rules))
			)
		))
	}
);

ruCommExtractAxioms = RuComm(
	RuCommInfo("extract-axioms", "refactor", "place axioms in separate files", "", false, false, [], []),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		timer = ruMakeTimer();
		math = ruMathFromSources(state.ru, env);
		extracted = ruRunExtract(math, env, "axioms", ruDeclIsAxiom);
		Some(RuState(state with 
			ru = extracted,
			vars = setTree(setTree(state.vars, 
				"extract-axioms.time", ValDouble(ruTimePassed(timer))), 
				"extract-axioms.size", ValInt(ruDeclsAxiomsNum(math.decls))
			)
		))
	}
);

ruCommExtractDefs = RuComm(
	RuCommInfo("extract-defs", "refactor", "place definitions in separate files", "", false, false, [], []),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		timer = ruMakeTimer();
		math = ruMathFromSources(state.ru, env);
		extracted = ruRunExtract(math, env, "defs", ruDeclIsDef);
		Some(RuState(state with 
			ru = extracted,
			vars = setTree(setTree(state.vars, 
				"extract-defs.time", ValDouble(ruTimePassed(timer))), 
				"extract-defs.size", ValInt(ruDeclsDefsNum(math.decls))
			)
		))
	}
);

ruRunExtract(math : RuMath, env : RuEnv, what : string, pred : (RuDecl) -> bool) -> Tree<int, RuSource> {
	timer = ruMakeTimer();
	no_pred = \decl -> !pred(decl);
	all_sources = getTreeValues(math.sources);
	sources_to_extract = filter(all_sources, \src -> exists(src.decls, pred) && exists(src.decls, no_pred)); 
	new_sources = fold(sources_to_extract, math.sources, \acc, src -> {
		module = src.info.module + "_" + what;
		ax_info = RuFileInfo(
			s2id(module),
			module,
			changeFileExt(src.info.path, "") + "_" + what + ".ru",
			0.0, ruIdsVersion()
		);
		ax_src = RuSource(src with
			info = ax_info,
			decls = filter(src.decls, pred)
		);
		no_ax = RuSource(src with 
			imports = concat(src.imports, [RuImport(ax_info.id, -1)]),
			decls = filter(src.decls, no_pred)
		);
		if (ruVerbose(env.conf) > 1) {
			env.out.onMessage("\t" + what + " extracted from " + src.info.module);
		}
		new_acc = setTree(setTree(acc, ax_info.id, ax_src), no_ax.info.id, no_ax);
		if (ruVerbose(env.conf) > 2) {
			env.out.onMessage("Extracted source:\n" + ru2s(ax_src, math));
		}
		new_acc;
	});
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("ru " + what + " extracted: " +i2s(length(sources_to_extract)) + " files in " + ruTimePassed2s(timer));
	}
	ruSourcesUpdateSrcs(new_sources);
}

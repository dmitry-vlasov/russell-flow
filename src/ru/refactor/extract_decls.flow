import command;
import ru/update;

export {
	ruCommExtractDecls : [RuComm] = [
		ruCommExtractConstants,
		ruCommExtractTypes,
		ruCommExtractRules,
		ruCommExtractAxioms,
		ruCommExtractDefs
	];
}

ruCommExtractConstants = RuComm(
	"extract-constants", "refactor", "place constants in separate files", "", [],
	\task, env -> Some(RuState(env with ruMath = 
		ruRunExtract(env.ruMath, env.conf, "constants", \decl -> 
			switch (decl) {
				RuConst(__,__,__): true;
				default: false;
			}
		)
	))
);

ruCommExtractTypes = RuComm(
	"extract-types", "refactor", "place types in separate files", "", [],
	\task, env -> Some(RuState(env with ruMath = 
		ruRunExtract(env.ruMath, env.conf, "types", \decl -> 
			switch (decl) {
				RuType(__,__): true;
				default: false;
			}
		)
	))
);

ruCommExtractRules = RuComm(
	"extract-rules", "refactor", "place rules in separate files", "", [],
	\task, env -> Some(RuState(env with ruMath = 
		ruRunExtract(env.ruMath, env.conf, "rules", \decl -> 
			switch (decl) {
				RuRule(__,__,__): true;
				default: false;
			}
		)
	))
);

ruCommExtractAxioms = RuComm(
	"extract-axioms", "refactor", "place axioms in separate files", "", [],
	\task, env -> Some(RuState(env with ruMath = 
		ruRunExtract(env.ruMath, env.conf, "axioms", \decl -> 
			switch (decl) {
				RuAxiom(__,__): true;
				default: false;
			}
		)
	))
);

ruCommExtractDefs = RuComm(
	"extract-defs", "refactor", "place definitions in separate files", "", [],
	\task, env -> Some(RuState(env with ruMath = 
		ruRunExtract(env.ruMath, env.conf, "defs", \decl -> 
			switch (decl) {
				RuDef(__,__,__,__): true;
				default: false;
			}
		)
	))
);

ruRunExtract(math : RuMath, conf : RuConf, what : string, pred : (RuDecl) -> bool) -> RuMath {
	start = timestamp();
	no_pred = \decl -> !pred(decl);
	all_sources = getTreeValues(math.sources);
	sources_to_extract = filter(all_sources, \src -> exists(src.decls, pred) && exists(src.decls, no_pred)); 
	new_math = fold(sources_to_extract, math, \acc, src -> {
		ax_info = RuFileInfo(
			src.info.module + "_" + what,
			changeFileExt(src.info.path, "") + "_" + what + ".ru",
			0.0, ""
		);
		ax_src = RuSource(src with
			info = ax_info,
			decls = filter(src.decls, pred)
		);
		no_ax = RuSource(src with 
			imports = concat(src.imports, [RuImport(ax_info.module, -1)]),
			decls = filter(src.decls, no_pred)
		);
		if (conf.verbose > 1) {
			conf.onMessage("\t" + what + " extracted from " + src.info.module);
		}
		new_acc = ruAddSource(ax_src, ruAddSource(no_ax, ruRemoveSource(src, acc, conf) ,conf), conf);
		if (conf.verbose > 2) {
			conf.onMessage("Extracted source:\n" + ru2s(ax_src, new_acc.rules));
		}
		new_acc;
	});
	if (conf.verbose > 0) {
		conf.onMessage("ru " + what + " extracted: " +i2s(length(sources_to_extract)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	ruUpdateSourceNames(new_math);
}

import ru/parse/write;
import ru/prover/stats;
import ru/prover/proof2theorem;
import ru/util/match_assertions;
import ru/map_decls;

export {
	ruCommRefactorLessGeneral : RuComm;
}

ruCommRefactorLessGeneral = RuComm(
	RuCommInfo(
		"refactor-less-general", "refactor", "refactors (removes or annotates) assertions, which are less general then some others", "target", false, false, 
		[
			RuCommArg("affect-axioms", true, "find redundant axioms. Default is 1", "1"),
			RuCommArg("affect-generalized", true, "find those theorems, which were generalized with 'generalize' command. Default is 1", "1"),
			RuCommArg("affect-all", true, "find all assertions, which are less generall to some other. May cause problem with cyclic imports", ""),
			RuCommArg("only-preceeding", true, "find only strictly preceeding pairs of more-less general assertions.", "1"),
			RuCommArg("update-imports", true, "include a more general module, in case it is not imported.", ""),
			RuCommArg("info", true, "show info about less general theorems.", ""),
			RuCommArg("remove", true, "remove less general theorems and replace all references to them with more general.", ""),
			RuCommArg("annotate", true, "markup less general theorems with JSON annotations in comments.", ""),
			RuCommArg("save", true, "save the result. Default is 1", "1"),
			RuCommArg("target", true, "the target: a theorem, file or all", "all")
		], []
	),
	ruRunRefactorLessGeneral
);

ruRunRefactorLessGeneral(unit : RuUnit) -> Maybe<RuState> {
	env0 = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env0);
	hash_relation = initConcurrentHashMap();
	t0 = ruMakeTimer();
	if (ruVerbose(conf) > 0) {
		env0.out.println("starting refactoring less general ... ");
	}
	assertionsIndex = ruInitGlobalAssertionsIndex(math);
	if (ruVerbose(conf) >= 3) {
		env0.out.println("\t\tbuilding an assertion index: " + " in " + ruTimePassed2s(t0));
	}
	affect_axioms = ruTaskBoolArg(task, "affect-axioms", false);
	affect_generalized = ruTaskBoolArg(task, "affect-generalized", false);
	affect_all = ruTaskBoolArg(task, "affect-all", false);
	only_preceeding = ruTaskBoolArg(task, "only-preceeding", false);
	update_imports = ruTaskBoolArg(task, "update-imports", false);
	remove = ruTaskBoolArg(task, "remove", false);
	annotate = ruTaskBoolArg(task, "annotate", false);
	if (ruVerbose(conf) >= 3) {
		env0.out.println(
			"\targuments:\n" +
			"\t\taffect-axioms: " + b2s(affect_axioms) + "\n" +
			"\t\taffect-generalized: " + b2s(affect_generalized) + "\n" +
			"\t\taffect-all: " + b2s(affect_all) + "\n"
			"\t\tonly-preceeding: " + b2s(only_preceeding) + "\n" + 
			"\t\ttarget: " + ruTaskStringArg(task, "target", "<UNDEF>") + "\n" + 
			"\t\tremove: " + b2s(remove) + "\n" + 
			"\t\tannotate: " + b2s(annotate) + "\n"
		);
	}

	affected_predicate = \decl -> {
		switch (decl) {
			RuAxiom(__,__): 
				affect_all || affect_axioms;
			RuDef(__,__,__,__): 
				affect_all;
			RuTheorem(info,__,__,__):
				affect_all || (affect_generalized && containsKeyTree(math.decls.assertions, s2id(id2s(info.id) + "_gen")));
			default: false; 
		}
	}

	fn = RuMapFn(
		RuMapFnInfo(
			"generality relation", 
			affected_predicate,
			\decl -> i2d(ruArity(cast(decl : RuDecl -> RuAssertion))),
			\-> "found less general: " + i2s(sizeConcurrentHashMap(hash_relation))
		),
		\decl, time_limit, env -> {
			ass = cast(decl : RuDecl -> RuAssertion);
			ass_id = ass.info.id;
			if (ruVerbose(conf) >= 3) {
				env.out.println("\t\tChecking for more general then: '" + id2s(ass_id) + "' ... ");
			}
			c_ass = ruConstAssertion(ass, math);
			more_general = filtermap(ruUnifyIndex(ruExp(c_ass.const.stat.prop), assertionsIndex, ruEmptySubst, math, env), \unified ->
				if (ass_id == unified.data.info.id) None() else {
					more_general_ass = unified.data;
					maybeBind(ruMatchAssertions(more_general_ass, ass, math, env), \match -> Some(more_general_ass));
				}
			);
			if (more_general != []) {
				if (ruVerbose(conf) >= 2) {
					env.out.println("\tFor '" + id2s(ass_id) + "' found more general: " + strGlue(map(more_general, \gen -> id2s(gen.info.id)), ", "));
				}
				setConcurrentHashMap(hash_relation, ass_id, Pair(ass, more_general));
				RuMappedDecl(true, false, decl);
			} else {
				if (ruVerbose(conf) >= 3) {
					env.out.println("\t\tMore general is not found");
				}
				RuMappedDecl(true, false, decl);
			}
		}
	);
	
	t1 = ruMakeTimer();
	ruMapFnComm(unit, fn);
	if (ruVerbose(conf) >= 3) {
		env0.out.println("\tRAW GEN REL: " + i2s(sizeConcurrentHashMap(hash_relation)) + " in " + ruTimePassed2s(t1));
		if (ruVerbose(conf) >= 3) {
			env0.out.println(strGlue(map(keysConcurrentHashMap(hash_relation), 
				\ass_id -> {
					more_general : [RuAssertion] = getConcurrentHashMap(hash_relation, ass_id, Pair(ruNoAxiom, [])).second;
					"\t\t" + id2s(ass_id) + " <= " + strGlue(map(more_general, \gen -> id2s(gen.info.id)), ", ");
				}
			), "\n"));
		}
	}
	less2greater_all : Tree<int, Pair<RuAssertion, [RuAssertion]>> = ruConcurrentHashMap2Tree(hash_relation);

	t2 = ruMakeTimer();
	affected : Set<RuAssertion> = fold(getTreeValues(less2greater_all), makeSet(), \acc, pair -> 
		insertSet(fold(pair.second, acc, \ac, gen : RuAssertion -> insertSet(ac, gen)), pair.first)
	);
	affected_names = mapSet(affected, \gen -> gen.info.id);
	affected_srcs = foldSet(affected, makeSet(), \acc, gen -> insertSet(acc, gen.info.src));
	affected_inds = foldTree(math.sources, makeTree(), \id, src, acc ->
		if (!containsSet(affected_srcs, id)) acc else {
			foldi(src.decls, acc, \i, ac, decl ->
				if (!containsSet(affected_names, decl.info.id)) ac else {
					setTree(ac, decl.info.id, i);
				}
			);
		}
	);
	affected_deps = foldSet(affected, makeTree(), \acc, d : RuAssertion -> 
		if (containsKeyTree(acc, d.info.id)) acc else {
			ruDoAssertionsDependencies(d.info.id, acc, math.decls.assertions, env0)
		}
	);
	imports_map = ruSourcesAllImported(math.sources, env0);
	preceeds = \a1 : RuAssertion, a2 : RuAssertion -> {
		ret = if (a1.info.src == a2.info.src) {
			lookupTreeDef(affected_inds, a1.info.id, 0) < lookupTreeDef(affected_inds, a2.info.id, 0);
		} else {
			containsSet(lookupTreeDef(imports_map, a2.info.src, makeSet()), a1.info.src);
		}
		if (ruVerbose(conf) >= 4) {
			env0.out.println(id2s(a1.info.id) + " preceeds " + id2s(a2.info.id) + ": " + b2s(ret) + "\n");
		}
 		ret;
	}
	depends = \a1 : RuAssertion, a2 : RuAssertion -> {
		containsSet(lookupTreeDef(affected_deps, a1.info.id, makeSet()), a2.info.id)
	}
	if (ruVerbose(conf) >= 3) {
		env0.out.println("Dependencies:\n" +
			strGlue(
				map(set2array(affected), \ass -> {
					all_deps = set2array(lookupTreeDef(affected_deps, ass.info.id, makeSet()));
					deps = filter(all_deps, \dep -> containsSet(affected_names, dep));
					"\t" + id2s(ass.info.id) + " depends on [" + strGlue(map(deps, id2s), ", ") + "]";
				}),
				"\n"
			)
		);
	}
	compare_gen = \a1 : RuAssertion, a2 : RuAssertion -> {
		ret = if (!affected_predicate(a1) || depends(a2, a1)) None() else {
			maybeBind(ruMatchAssertions(a2, a1, math, env0), \match ->
				if (isNone(ruMatchAssertions(a1, a2, math, env0))) {
					if (only_preceeding) {
						if (preceeds(a2, a1)) Some(match) else None();
					} else {
						if (!preceeds(a1, a2)) Some(match) else None();
					}
				} else if (strlen(id2s(a1.info.id)) > strlen(id2s(a2.info.id))) {
					if (only_preceeding) {
						if (preceeds(a2, a1)) Some(match) else None();
					} else {
						if (!preceeds(a1, a2)) Some(match) else None();
					}
				} else None()
			);
		}
		if (ruVerbose(conf) >= 4) {
			env0.out.println(
				id2s(a1.info.id) + " is less general then " + id2s(a2.info.id) + ": " + b2s(isSome(ret)) + "\nfirst:\n" +
				ru2s(a1, math) + "\nsecond:\n" + ru2s(a1, math) + "\n"
			);
		}
		ret
	}
	less2greater_arr : Tree<RuAssertion, [Pair<RuAssertion, RuAssertionMatch>]> = filterTree(
		foldTree(
			less2greater_all, makeTree(), 
			\__, pair : Pair<RuAssertion, [RuAssertion]>, acc : Tree<RuAssertion, [Pair<RuAssertion, RuAssertionMatch>]> ->
			setTree(acc, pair.first,
				filtermap(pair.second, \greater : RuAssertion -> 
					maybeMap(compare_gen(pair.first, greater), \match -> Pair(greater, match))
				)
			)
		), 
		\__, arr -> length(arr) > 0
	);
	if (ruVerbose(conf) >= 2) {
		env0.out.println("\tless2greater_arr: " + i2s(sizeTree(less2greater_arr)));
	}
	less2greater : Tree<RuAssertion,  Pair<RuAssertion, RuAssertionMatch>> = mapTree(
		less2greater_arr, \arr ->
		fold(tail(arr), arr[0], \acc, greater -> 
			if (strlen(id2s(greater.first.info.id)) < strlen(id2s(acc.first.info.id))) greater else acc
		)
	);
	to_keep = set2array(foldTree(less2greater, makeSet(), \__, greater, acc -> insertSet(acc, id2s(greater.first.info.id))));
	to_keep_non_gen = filter(to_keep, \ass -> !endsWith(ass, "_gen"));
	if (ruVerbose(conf) >= 2) {
		env0.out.println("\tless: " + i2s(sizeTree(less2greater)) + ", greater: " + i2s(length(to_keep)) + " in " + ruTimePassed2s(t2));
		env0.out.println("\tkept non-generalized: " + i2s(length(to_keep_non_gen)) + ": \n" + 
			strGlue(map(to_keep_non_gen, \ass -> "\t\t" + ass), "\n")
		);
		if (ruVerbose(conf) >= 3) {
			env0.out.println(strGlue(map(tree2pairs(less2greater), \p -> 
				"\t\t" + id2s(p.first.info.id) + " <= " + id2s(p.second.first.info.id)
			), "\n"));
		}
	}
	if (ruTaskBoolArg(task, "info", false)) {
		env0.out.println("Less general replacements:\n" + 
			strGlue(map(tree2pairs(less2greater), \p -> "\t" + id2s(p.first.info.id) + " => " + id2s(p.second.first.info.id)), "\n")
		);
		Some(env0);
	} else {
		ass2step = ruAssertionsProofSteps(buildSet(map(getTreeKeys(less2greater), \less -> less.info.id)), math.decls.assertions);
		new_math = if (remove) {
			m = foldTree(less2greater, math, \less, greater, acc ->
				if (!affected_predicate(less)) acc else 
				ruReplaceLessWithGreater(less, greater.first, greater.second, acc, env0, ass2step, update_imports)
			);
			if (ruTaskBoolArg(task, "save", false)) {
				modified_sources = fold(getTreeKeys(less2greater), makeSet(), \acc, less -> 
					fold(getTreeKeys(lookupTreeDef(ass2step, less.info.id, makeTree())), insertSet(acc, less.info.src), \ac, thm -> 
						eitherMap(lookupTree(math.decls.assertions, thm), \th -> insertSet(ac, th.info.src), ac)
					)
				);
				ruWriteRefactoredSources(modified_sources, m, ruDecVerboseEnv(env0));
			}
			m
		} else if (annotate) {
			m = foldTree(less2greater_arr, math, \less, greater_arr, acc ->
				if (!affected_predicate(less)) acc else 
				ruAnnotateLessWithGreater(less, map(greater_arr, \greater -> greater.first), acc, env0)
			);
			if (ruTaskBoolArg(task, "save", false)) {
				ruWriteRefactoredSources(buildSet(map(getTreeKeys(less2greater), \less -> less.info.src)), m, ruDecVerboseEnv(env0));
			}
			m
		} else math;
		Some(RuState(state with ru = new_math.sources));
	}
}

ruAnnotateLessWithGreater(less : RuAssertion, greater : [RuAssertion], math : RuMath, env : RuEnv) -> RuMath {	
	annotated = cast(ruModifyAnnotation(less, \annotation ->
		JsonObject(concat(
			fold(annotation.members, [], \acc, pair -> 
				if (pair.first != "less-general-then") concat(acc, [pair]) else acc
			),
			[Pair("less-general-then", JsonArray(map(greater, \gr -> JsonString(id2s(gr.info.id)))))]
		))
	) : RuDecl -> RuAssertion);
	ruMathReplaceDecl(math, annotated, env);
}

ruReplaceLessWithGreater(less : RuAssertion, greater : RuAssertion, match : RuAssertionMatch, math : RuMath, env : RuEnv, ass2step : Tree<int, Tree<int, [int]>>, update_imports : bool) -> RuMath {
	match_inds = enumFromTo(0, length(match.hypsMap) - 1);
	if (ruVerbose(env.conf) >= 2) {
		env.out.println("\tReplacing: " + id2s(less.info.id) + " with " + id2s(greater.info.id));
	}
	eitherMap(lookupTree(math.sources, less.info.src), 
		\src -> {
			without_less = ruMathRemoveDecl(math, less, env);
			occurences = lookupTreeDef(ass2step, less.info.id, makeTree());
			foldTree(occurences, without_less, \th_id, inds, acc ->
				if (!containsKeyTree(acc.decls.assertions, th_id)) acc else {
					inds_set = buildSet(inds);
					th = cast(lookupTreeDef(acc.decls.assertions, th_id, ruNoAxiom) : RuAssertion -> RuTheorem);
					new_proof = RuProof(th.proof with 
						steps = mapi(th.proof.steps, \i, step -> 
							if (!containsSet(inds_set, i)) step else {
								if (ruVerbose(env.conf) >= 3) {
									env.out.println("\t\treplaced in: " + id2s(th_id) + ", step: " + i2s(i));
								}
								RuStep(step with 
									assertion = greater.info.id,
									refs = map(match_inds, \j -> step.refs[match.hypsMap[j]])
								);
							}
						)
					);
					with_greater = if (!update_imports) acc else eitherMap(lookupTree(acc.sources, th.info.src),
						\s -> ruMathAddImportToSource(acc, s, greater.info.src, env),
						acc
					);
					ruMathReplaceDecl(with_greater, RuTheorem(th with proof = new_proof), env);
				}
			);
		}, math
	);
}

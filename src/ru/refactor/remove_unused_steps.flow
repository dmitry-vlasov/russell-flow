import command;

export {
	ruRemoveTheoremUnusedSteps(theorem : RuTheorem, conf : RuConf) -> Maybe<RuTheorem>;
	ruCommRemoveUnusedSteps : RuComm;
}

ruCommRemoveUnusedSteps = RuComm(
	"remove-unused-steps", "refactor", "self evident", "target",
	[RuCommArg("target", false, "the target: a theorem, file or all", "")],
	ruRunRemoveUnusedSteps
);

ruRemoveTheoremUnusedSteps(theorem : RuTheorem, conf : RuConf) -> Maybe<RuTheorem> {
	proof = theorem.proof;
	used_steps = ruFindUsedSteps(lastElement(proof.steps, ruNoStep), theorem.proof, makeSet());
	if (sizeSet(used_steps) == length(proof.steps)) None() else {
		new_steps = foldi(proof.steps, Pair([], makeTree()), \i, acc, step -> {
			if (!containsSet(used_steps, i)) acc else {
				new_step = RuStep(step with 
					ind = length(acc.first),
					refs = map(step.refs, \r ->
						switch (r) {
							RuStepRef(j, pos): RuStepRef(lookupTreeDef(acc.second, j, -1), pos);
							default: r;
						}
					)
				);
				Pair(
					concat(acc.first, [new_step]),
					setTree(acc.second, i, length(acc.first))
				)
			}
		}).first;
		if (conf.verbose > 1) {
			unused = differenceSets(buildSet(enumFromTo(0, length(proof.steps) - 1)), used_steps);
			conf.onMessage("\ttheorem " + theorem.descr.name + " has " + i2s(length(proof.steps) - length(new_steps)) + " unused steps: " +
			strGlue(map(set2array(unused), \i -> i2s(i + 1)), ", "));
		}
		Some(RuTheorem(theorem with proof = ruUpdateProofVars(RuProof(proof with steps = new_steps))));
	}
}

ruFindUsedSteps(step : RuStep, proof : RuProof, acc : Set<int>) -> Set<int> {
	fold(step.refs, insertSet(acc, step.ind), \ac, r ->
		switch (r) {
			RuStepRef(i, __): ruFindUsedSteps(proof.steps[i], proof, ac);
			default: ac;
		}
	)
}

ruRunRemoveUnusedSteps(task : RuTask, env : RuEnv) -> Maybe<RuEnv> {
	start = timestamp();
	math = env.ruMath;
	conf = env.conf;
	reduced = filtermap(ruConcurrent(
		map(getTreeValues(ruMathTheorems(math)), 
			\th -> \ -> ruRemoveTheoremUnusedSteps(th, conf)
		)
	), idfn);
	ret = fold(reduced, math, \acc, th -> ruReplaceAssertion(th, acc, conf));
	if (conf.verbose > 0) {
		conf.onMessage("found " + i2s(length(reduced)) + " theorems with unused steps in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	Some(RuEnv(env with ruMath = ret));
}

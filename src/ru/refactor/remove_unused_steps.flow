import command;
import script/value;

export {
	RuUnusedStepsRemoved(
		larger  : RuTheorem,
		smaller : RuTheorem,
		removed : [int]
	);
	ruRemoveTheoremUnusedSteps(theorem : RuTheorem, conf : RuConf) -> Maybe<RuUnusedStepsRemoved>;
	ruCommRemoveUnusedSteps : RuComm;
}

ruCommRemoveUnusedSteps = RuComm(
	RuCommDescr(
		"remove-unused-steps", "refactor", "self evident", "target", false, 
		[RuCommArg("target", true, "the target: a theorem, file or all", "all")],
		[
			RuCommRet("remove-unused-steps.optimized-theorems", "int", "total number of theorems, which contain unused steps"),
			RuCommRet("remove-unused-steps.optimized-steps", "int", "total number of unused steps, which were removed by optimization"),
		]
	),
	ruRunRemoveUnusedSteps
);

ruRemoveTheoremUnusedSteps(theorem : RuTheorem, conf : RuConf) -> Maybe<RuUnusedStepsRemoved> {
	proof = theorem.proof;
	used_steps = ruFindUsedSteps(lastElement(proof.steps, ruNoStep), theorem.proof, makeSet());
	if (sizeSet(used_steps) == length(proof.steps)) None() else {
		new_steps = foldi(proof.steps, Pair([], makeTree()), \i, acc, step -> {
			if (!containsSet(used_steps, i)) acc else {
				new_step = RuStep(step with 
					ind = length(acc.first),
					refs = map(step.refs, \r ->
						switch (r) {
							RuStepRef(j, pos): RuStepRef(lookupTreeDef(acc.second, j, -1), pos);
							default: r;
						}
					)
				);
				Pair(
					concat(acc.first, [new_step]),
					setTree(acc.second, i, length(acc.first))
				)
			}
		}).first;
		unused = differenceSets(buildSet(enumFromTo(0, length(proof.steps) - 1)), used_steps);
		if (ruVerbose(conf) > 1) {
			conf.onMessage("\ttheorem '" + id2s(theorem.descr.id) + "' has " + i2s(length(proof.steps) - length(new_steps)) + " unused steps: " +
			strGlue(map(set2array(unused), \i -> i2s(i + 1)), ", "));
		}
		Some(RuUnusedStepsRemoved(
			theorem,
			RuTheorem(theorem with 
				proof = ruUpdateProofVars(RuProof(proof with steps = new_steps), theorem, theorem)
			),
			set2array(unused)
		));
	}
}

ruFindUsedSteps(step : RuStep, proof : RuProof, acc : Set<int>) -> Set<int> {
	fold(step.refs, insertSet(acc, step.ind), \ac, r ->
		switch (r) {
			RuStepRef(i, __): ruFindUsedSteps(proof.steps[i], proof, ac);
			default: ac;
		}
	)
}

ruRunRemoveUnusedSteps(task : ScTask, env : RuState) -> Maybe<RuState> {
	timer = ruMakeTimer();
	conf = env.conf;
	math = ruMakeMathFromSources(env.ru, conf);
	reduced = filtermap(ruConcurrent(
		map(getTreeValues(ruMathTheorems(math)), 
			\th -> \ -> ruRemoveTheoremUnusedSteps(th, conf)
		)
	), idfn);
	ret = fold(reduced, math, \acc, red -> ruReplaceAssertion(red.smaller, acc, conf));
	unused_steps = fold(reduced, 0, \acc, red -> acc + length(red.removed));
	if (ruVerbose(conf) > 0) {
		conf.onMessage("found " + i2s(length(reduced)) + " theorems with " + i2s(unused_steps) + " unused steps in " + ruTimePassed2s(timer));
	}
	Some(RuState(env with 
		ru = ret.sources,
		vars = setTree(setTree(env.vars, 
			"remove-unused-steps.optimized-theorems", ValInt(length(reduced))),
			"remove-unused-steps.optimized-steps", ValInt(unused_steps)
		)
	));
}

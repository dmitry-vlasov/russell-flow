import ru/src;

export {
	ruPointerVol() -> int;
	ruIntVol() -> int;
	ruBoolVol() -> int;
	ruDoubleVol() -> int;

	ruArrayVol(a : [?], vol : (?) -> int) -> int;
	ruStringVol(s : string) -> int;
	ruTreeVol(a : Tree<?, ??>, key_vol : (?) -> int, val_vol : (??) -> int) -> int;
	ruSetVol(a : Set<?>, vol : (?) -> int) -> int;

	ruDescrVol(descr : RuDescr) -> int;
	ruFileInfoVol(info : RuFileInfo) -> int;
	ruStatementVol(stat : RuStatement) -> int;

	ruVol(any : RuAny) -> int;

	RuCountInfo(
		sources : int,
		imports : int,
		strings : int,
		ints    : int,
		doubles : int,
		descrs  : int,
		vars    : int,
		terms   : int,
		stats   : int,
		disjs   : int,
		hyps    : int,
		props   : int,
		defs    : int,
		axioms  : int,
		theorems: int,
		proofs  : int,
		comments: int,
		steps   : int,
		refs    : int,
		exprs   : int,
		ernodes : int,
		evnodes : int,
	);

//	ruCountInfo(any : RuAny, acc : ruCountInfo) -> ruCountInfo;
}

ruPointerVol() -> int { 8 } // 64 bit
ruIntVol() -> int { 4 }
ruBoolVol() -> int { 4 }
ruDoubleVol() -> int { 8 }

ruArrayVol(a : [?], vol : (?) -> int) -> int {
	ruPointerVol() +
	length(a) * (ruPointerVol() + 1) + 
	fold(a, 0, \acc, x -> acc + vol(x));
}

ruStringVol(s : string) -> int {
	ruPointerVol() + 
	strlen(s);
}

ruTreeVol(tree : Tree<?, ??>, key_vol : (?) -> int, val_vol : (??) -> int) -> int {
	ruPointerVol() +
	switch (tree) {
		TreeNode(key, val, left, right, depth): {
			key_vol(key) + 
			val_vol(val) + 
			ruTreeVol(left, key_vol, val_vol) + 
			ruTreeVol(right, key_vol, val_vol) +
			ruIntVol();
		}
		TreeEmpty(): 0;
	}
}

ruSetVol(set : Set<?>, vol : (?) -> int) -> int {
	ruPointerVol() +
	ruTreeVol(set.tree, vol, \__ -> ruBoolVol());
}

ruDescrVol(descr : RuDescr) -> int {
	ruPointerVol() +
	ruStringVol(descr.name) +
	ruStringVol(descr.source) +
	ruArrayVol(descr.comments, ruVol) +
	ruIntVol();
}

ruFileInfoVol(info : RuFileInfo) -> int {
	ruPointerVol() +
	ruStringVol(info.module) +
	ruStringVol(info.path) +
	ruDoubleVol() +
	ruStringVol(info.source);
}

ruStatementVol(stat : RuStatement) -> int {
	ruPointerVol() +
	ruTreeVol(stat.vars, ruStringVol, ruVol) +
	ruSetVol(stat.disjs, ruVol) + 
	ruArrayVol(stat.hyps, ruVol) +
	ruVol(stat.prop);
}

ruVol(any : RuAny) -> int {
	ruPointerVol() +
	switch (any) {
		RuSource(imps, decls, comms, info): 
			ruArrayVol(imps, ruVol) + ruArrayVol(decls, ruVol) + ruArrayVol(comms, ruVol) + ruFileInfoVol(info);
		RuImport(path, pos):
			ruStringVol(path) + ruIntVol();
		RuConst(descr, ascii, latex): 
			ruDescrVol(descr) + ruStringVol(ascii) + ruStringVol(latex); 
		RuType(descr, supers): 
			ruDescrVol(descr) + ruArrayVol(supers, ruStringVol);
		RuRule(descr, vars, term):
			ruDescrVol(descr) + ruTreeVol(vars, ruStringVol, ruVol) + ruVol(term);
		RuAxiom(descr, stat): 
			ruDescrVol(descr) + ruStatementVol(stat);
		RuDef(descr, stat, defm, defs):
			ruDescrVol(descr) + ruStatementVol(stat) + ruVol(defm) + ruVol(defs);
		RuTheorem(descr, stat, meta, proof): 
			ruDescrVol(descr) + ruStatementVol(stat) + ruSetVol(meta, ruStringVol) + ruVol(proof); 
		RuHyp(ind, expr, pos): 
			ruIntVol() + ruVol(expr) + ruIntVol();
		RuProof(vars, disjs, steps, pos): 
			ruTreeVol(vars, ruStringVol, ruVol) + ruSetVol(disjs, ruVol) + ruArrayVol(steps, ruVol) + ruIntVol();
		RuStep(ind, assertion, refs, expr, pos):
			ruIntVol() + ruStringVol(assertion) + ruArrayVol(refs, ruVol) + ruVol(expr) + ruIntVol();
		RuComment(text, ann, pos): 
			ruStringVol(text) + ruStringVol(json2string(ann)) + ruIntVol();
		RuDisj(v1, v2): 
			ruVol(v1) + ruVol(v2);
		RuExp(nodes, pos): 
			ruArrayVol(nodes, ruExpNodeVol) + ruIntVol();
		RuHypRef(i, pos): 
			ruIntVol() + ruIntVol();
		RuStepRef(i, pos): 
			ruIntVol() + ruIntVol();
		RuVar(name, type): 
			ruStringVol(name) + ruStringVol(type);
		RuTerm(type, nodes, pos): 
			ruStringVol(type) + ruArrayVol(nodes, ruTermNodeVol) + ruIntVol();
		RuConstRef(name): 
			ruStringVol(name);
	}
}

ruTermNodeVol(n : RuTermNode) -> int {
	ruPointerVol() +
	switch (n) {
		RuConstRef(__): ruVol(n);
		RuVar(__,__): ruVol(n);
	}
}

ruExpNodeVol(n : RuExpNode) -> int {
	ruPointerVol() +
	switch (n) {
		RuVar(__,__): 
			ruVol(n);
		RuRuleNode(name,type,__,__): 
			ruStringVol(name) + ruStringVol(type) + ruIntVol() + ruIntVol();
	}
}
/*
RuCountInfo(
		sources : int,
		imports : int,
		strings : int,
		ints    : int,
		descrs  : int,
		vars    : int,
		terms   : int,
		stats   : int,
		disjs   : int,
		hyps    : int,
		props   : int,
		defs    : int,
		axioms  : int,
		theorems: int,
		proofs  : int,
		comments: int,
		steps   : int,
		refs    : int,
		exprs   : int,
		ernodes : int,
		evnodes : int,
	);

ruTreeCountInfo(tree : Tree<string, ?>, acc : RuCountInfo, fn : (RuCountInfo, ?) -> RuCountInfo) -> RuCountInfo {
	foldTree(tree, acc, \key, val, ac ->

	);
}

ruDescrCountInfo(acc : RuConfInfo, descr : RuDesr) -> RuConfInfo {
	fold(descr.comments, 
		RuCountInfo(acc with
			strings = acc.strings + 2,
			ints = acc.ints + 1
		),
		ruCountInfo
	);
}

ruFileInfoCountInfo(acc : RuConfInfo, info : RuFileInfo) -> int {
	RuCountInfo(acc with 
		strings = acc.strings + 3,
		doubles = acc.doubles + 1
	);
}

ruStatementCountInfo(acc : RuConfInfo, stat : RuStatement) -> int {
	ruPointerVol() +
	ruTreeVol(stat.vars, ruStringVol, ruVol) +
	ruSetVol(stat.disjs, ruVol) + 
	ruArrayVol(stat.hyps, ruVol) +
	ruVol(stat.prop);
}

ruCountInfo(acc : RuCountInfo, any : RuAny) -> RuCountInfo {
	switch (any) {
		RuSource(imps, decls, comms, info): 
			fold(imps, fold(decls, fold(comms, acc, ruCountInfo), ruCountInfo), ruCountInfo);
		RuImport(path, pos):
			RuCountInfo(acc with 
				imports = acc.imports + 1,
				strings = acc.strings + 1,
				ints = acc.ints + 1
			);
		RuConst(descr, ascii, latex): 
			RuCountInfo(ruDescrCountInfo(acc, descr) with
				strings = acc.strings + 2
			);
		RuType(descr, supers):
			fold(supers, ruDescrCountInfo(acc, descr), \ac, super ->
					RuCountInfo(ac with	strings = ac.strings + 1)
			);
		RuRule(descr, vars, term):
			ruDescrVol(descr) +  ruTreeVol(vars, ruStringVol, ruVol) + ruVol(term);
		RuAxiom(descr, stat): 
			ruDescrVol(descr) + ruStatementVol(stat);
		RuDef(descr, stat, defm, defs):
			ruDescrVol(descr) + ruStatementVol(stat) + ruVol(defm) + ruVol(defs);
		RuTheorem(descr, stat, meta, proof): 
			ruDescrVol(descr) + ruStatementVol(stat) + ruSetVol(meta, ruStringVol) + ruVol(proof); 
		RuHyp(ind, expr, pos): 
			ruIntVol() + ruVol(expr) + ruIntVol();
		RuProof(vars, disjs, steps, pos): 
			ruTreeVol(vars, ruStringVol, ruVol) + ruSetVol(disjs, ruVol) + ruArrayVol(steps, ruVol) + ruIntVol();
		RuStep(ind, assertion, refs, expr, pos):
			ruIntVol() + ruStringVol(assertion) + ruArrayVol(refs, ruVol) + ruVol(expr) + ruIntVol();
		RuComment(text, ann, pos): 
			ruStringVol(text) + ruStringVol(json2string(ann)) + ruIntVol();
		RuDisj(v1, v2): 
			ruVol(v1) + ruVol(v2);
		RuExp(nodes, pos): 
			ruArrayVol(nodes, ruExpNodeVol) + ruIntVol();
		RuHypRef(i, pos): 
			ruIntVol() + ruIntVol();
		RuStepRef(i, pos): 
			ruIntVol() + ruIntVol();
		RuVar(name, type): 
			ruStringVol(name) + ruStringVol(type);
		RuTerm(type, nodes, pos): 
			ruStringVol(type) + ruArrayVol(nodes, ruTermNodeVol) + ruIntVol();
		RuConstRef(name): 
			ruStringVol(name);
	}

}
*/
import ru/src;

export {
	ruJavaReferenceVol() -> double;
	ruJavaIntVol() -> double;
	ruJavaBoolVol() -> double;
	ruJavaDoubleVol() -> double;

	ruJavaArrayVol(a : [?], vol : (?) -> double) -> double;
	ruJavaStringVol(s : string) -> double;
	ruJavaTreeVol(a : Tree<?, ??>, key_vol : (?) -> double, val_vol : (??) -> double) -> double;
	ruJavaSetVol(a : Set<?>, vol : (?) -> double) -> double;

	ruJavaDescrVol(descr : RuDescr) -> double;
	ruJavaFileInfoVol(info : RuFileInfo) -> double;
	ruJavaStatementVol(stat : RuStatement) -> double;

	ruJavaRuVol(any : RuAny) -> double;

	RuCountInfo(
		sources : int,
		imports : int,
		strings : int,
		ints    : int,
		doubles : int,
		descrs  : int,
		vars    : int,
		terms   : int,
		stats   : int,
		disjs   : int,
		hyps    : int,
		props   : int,
		defs    : int,
		axioms  : int,
		theorems: int,
		proofs  : int,
		comments: int,
		steps   : int,
		refs    : int,
		exprs   : int,
		ernodes : int,
		evnodes : int,
	);

//	ruCountInfo(any : RuAny, acc : ruCountInfo) -> ruCountInfo;
}

//ruJavaReferenceVol() -> double { 8.0 } // 64 bit
ruJavaReferenceVol() -> double { 4.0 } // 64 bit
ruJavaIntVol() -> double { 4.0 }
ruJavaBoolVol() -> double { 4.0 }
ruJavaDoubleVol() -> double { 8.0 }

// All object sizes are divisible by 8 bytes
ruJavaRuVolAlignment(size : double) -> double {
	size;
	/*if (size % 8.0 == 0) size else {
		((size / 8) + 1) * 8;
	}*/
}

ruJavaObjectHeader() -> double {
	// Reference to the object - the part of upper level aggregation
	ruJavaReferenceVol() +
	// Java header (16 bytes)
	16.0;
}

ruJavaArrayVol(a : [?], vol : (?) -> double) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		fold(a, 0.0, \acc, x -> acc + vol(x))
	);
}

ruJavaStringVol(s : string) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		// byte[] chars;
		ruJavaObjectHeader() +
		i2d(strlen(s)) * 2.0 //// 2 bytes for each symbol
	); 
}

ruJavaTreeVol(tree : Tree<?, ??>, key_vol : (?) -> double, val_vol : (??) -> double) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		switch (tree) {
			TreeNode(key, val, left, right, depth): {
				key_vol(key) + 
				val_vol(val) + 
				ruJavaTreeVol(left, key_vol, val_vol) + 
				ruJavaTreeVol(right, key_vol, val_vol) +
				ruJavaIntVol();
			}
			TreeEmpty(): 0.0;
		}
	);
}

ruJavaSetVol(set : Set<?>, vol : (?) -> double) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		ruJavaTreeVol(set.tree, vol, \__ -> ruJavaBoolVol())
	);
}

ruJavaDescrVol(descr : RuDescr) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		ruJavaStringVol(descr.name) +
		ruJavaIntVol() +
		ruJavaArrayVol(descr.comments, ruJavaRuVol) +
		ruJavaIntVol()
	);
}

ruJavaFileInfoVol(info : RuFileInfo) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		ruJavaStringVol(info.module) +
		ruJavaStringVol(info.path) +
		ruJavaDoubleVol() +
		ruJavaStringVol(info.source)
	);
}

ruJavaStatementVol(stat : RuStatement) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		ruJavaTreeVol(stat.vars, \__->ruJavaIntVol(), ruJavaRuVol) +
		ruJavaSetVol(stat.disjs, ruJavaRuVol) + 
		ruJavaArrayVol(stat.hyps, ruJavaRuVol) +
		ruJavaRuVol(stat.prop)
	);
}

ruJavaRuVol(any : RuAny) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		switch (any) {
			RuSource(imps, decls, comms, info): 
				ruJavaArrayVol(imps, ruJavaRuVol) + ruJavaArrayVol(decls, ruJavaRuVol) + ruJavaArrayVol(comms, ruJavaRuVol) + ruJavaFileInfoVol(info);
			RuImport(id, pos):
				ruJavaIntVol() + ruJavaIntVol();
			RuConst(descr, ascii, latex): 
				ruJavaDescrVol(descr) + ruJavaIntVol() + ruJavaIntVol(); 
			RuType(descr, supers): 
				ruJavaDescrVol(descr) + ruJavaArrayVol(supers, \__ -> ruJavaIntVol());
			RuRule(descr, vars, term):
				ruJavaDescrVol(descr) + ruJavaTreeVol(vars, \__->ruJavaIntVol(), ruJavaRuVol) + ruJavaRuVol(term);
			RuAxiom(descr, stat): 
				ruJavaDescrVol(descr) + ruJavaStatementVol(stat);
			RuDef(descr, stat, defm, defs):
				ruJavaDescrVol(descr) + ruJavaStatementVol(stat) + ruJavaRuVol(defm) + ruJavaRuVol(defs);
			RuTheorem(descr, stat, meta, proof): 
				ruJavaDescrVol(descr) + ruJavaStatementVol(stat) + ruJavaSetVol(meta, \__->ruJavaIntVol()) + ruJavaRuVol(proof); 
			RuHyp(ind, expr, pos): 
				ruJavaIntVol() + ruJavaRuVol(expr) + ruJavaIntVol();
			RuProof(vars, disjs, steps, pos): 
				ruJavaTreeVol(vars, \__->ruJavaIntVol(), ruJavaRuVol) + ruJavaSetVol(disjs, ruJavaRuVol) + ruJavaArrayVol(steps, ruJavaRuVol) + ruJavaIntVol();
			RuStep(ind, assertion, refs, expr, pos):
				ruJavaIntVol() + ruJavaIntVol() + ruJavaArrayVol(refs, ruJavaRuVol) + ruJavaRuVol(expr) + ruJavaIntVol();
			RuComment(text, ann, pos): 
				ruJavaStringVol(text) + ruJavaStringVol(json2string(ann)) + ruJavaIntVol();
			RuDisj(v1, v2): 
				ruJavaRuVol(v1) + ruJavaRuVol(v2);
			RuExp(nodes, pos): 
				ruJavaArrayVol(nodes, ruJavaRuVol) + ruJavaIntVol();
			RuHypRef(i, pos): 
				ruJavaIntVol() + ruJavaIntVol();
			RuStepRef(i, pos): 
				ruJavaIntVol() + ruJavaIntVol();
			RuVar(id, type_id): 
				ruJavaIntVol() + ruJavaIntVol();
			RuTerm(type_id, nodes, pos): 
				ruJavaIntVol() + ruJavaArrayVol(nodes, ruJavaRuVol) + ruJavaIntVol();
			RuConstRef(id): 
				ruJavaIntVol();
			RuRuleNode(id, type_id, arity, len): 
				ruJavaIntVol() + ruJavaIntVol() + ruJavaIntVol() + ruJavaIntVol();
		}
	);
}

/*
ruJavaTermNodeVol(n : RuTermNode) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() + ruJavaRuVol(n)
	);
}

ruJavaExpNodeVol(n : RuExpNode) -> double {
	ruJavaRuVolAlignment(
		ruJavaObjectHeader() +
		switch (n) {
			RuVar(__,__,__): 
				ruJavaRuVol(n);
			RuRuleNode(name, id, type,__,__): 
				ruJavaStringVol(name) + ruJavaIntVol() + ruJavaStringVol(type) + ruJavaIntVol() + ruJavaIntVol();
		}
	);
}
*/

/*
RuCountInfo(
		sources : int,
		imports : int,
		strings : int,
		ints    : int,
		descrs  : int,
		vars    : int,
		terms   : int,
		stats   : int,
		disjs   : int,
		hyps    : int,
		props   : int,
		defs    : int,
		axioms  : int,
		theorems: int,
		proofs  : int,
		comments: int,
		steps   : int,
		refs    : int,
		exprs   : int,
		ernodes : int,
		evnodes : int,
	);

ruTreeCountInfo(tree : Tree<string, ?>, acc : RuCountInfo, fn : (RuCountInfo, ?) -> RuCountInfo) -> RuCountInfo {
	foldTree(tree, acc, \key, val, ac ->

	);
}

ruDescrCountInfo(acc : RuConfInfo, descr : RuDesr) -> RuConfInfo {
	fold(descr.comments, 
		RuCountInfo(acc with
			strings = acc.strings + 2,
			ints = acc.ints + 1
		),
		ruCountInfo
	);
}

ruFileInfoCountInfo(acc : RuConfInfo, info : RuFileInfo) -> int {
	RuCountInfo(acc with 
		strings = acc.strings + 3,
		doubles = acc.doubles + 1
	);
}

ruStatementCountInfo(acc : RuConfInfo, stat : RuStatement) -> int {
	ruJavaReferenceVol() +
	ruJavaTreeVol(stat.vars, ruJavaStringVol, ruJavaRuVol) +
	ruJavaSetVol(stat.disjs, ruJavaRuVol) + 
	ruJavaArrayVol(stat.hyps, ruJavaRuVol) +
	ruJavaRuVol(stat.prop);
}

ruCountInfo(acc : RuCountInfo, any : RuAny) -> RuCountInfo {
	switch (any) {
		RuSource(imps, decls, comms, info): 
			fold(imps, fold(decls, fold(comms, acc, ruCountInfo), ruCountInfo), ruCountInfo);
		RuImport(path, pos):
			RuCountInfo(acc with 
				imports = acc.imports + 1,
				strings = acc.strings + 1,
				ints = acc.ints + 1
			);
		RuConst(descr, ascii, latex): 
			RuCountInfo(ruDescrCountInfo(acc, descr) with
				strings = acc.strings + 2
			);
		RuType(descr, supers):
			fold(supers, ruDescrCountInfo(acc, descr), \ac, super ->
					RuCountInfo(ac with	strings = ac.strings + 1)
			);
		RuRule(descr, vars, term):
			ruJavaDescrVol(descr) +  ruJavaTreeVol(vars, ruJavaStringVol, ruJavaRuVol) + ruJavaRuVol(term);
		RuAxiom(descr, stat): 
			ruJavaDescrVol(descr) + ruJavaStatementVol(stat);
		RuDef(descr, stat, defm, defs):
			ruJavaDescrVol(descr) + ruJavaStatementVol(stat) + ruJavaRuVol(defm) + ruJavaRuVol(defs);
		RuTheorem(descr, stat, meta, proof): 
			ruJavaDescrVol(descr) + ruJavaStatementVol(stat) + ruJavaSetVol(meta, ruJavaStringVol) + ruJavaRuVol(proof); 
		RuHyp(ind, expr, pos): 
			ruJavaIntVol() + ruJavaRuVol(expr) + ruJavaIntVol();
		RuProof(vars, disjs, steps, pos): 
			ruJavaTreeVol(vars, ruJavaStringVol, ruJavaRuVol) + ruJavaSetVol(disjs, ruJavaRuVol) + ruJavaArrayVol(steps, ruJavaRuVol) + ruJavaIntVol();
		RuStep(ind, assertion, refs, expr, pos):
			ruJavaIntVol() + ruJavaStringVol(assertion) + ruJavaArrayVol(refs, ruJavaRuVol) + ruJavaRuVol(expr) + ruJavaIntVol();
		RuComment(text, ann, pos): 
			ruJavaStringVol(text) + ruJavaStringVol(json2string(ann)) + ruJavaIntVol();
		RuDisj(v1, v2): 
			ruJavaRuVol(v1) + ruJavaRuVol(v2);
		RuExp(nodes, pos): 
			ruJavaArrayVol(nodes, ruJavaExpNodeVol) + ruJavaIntVol();
		RuHypRef(i, pos): 
			ruJavaIntVol() + ruJavaIntVol();
		RuStepRef(i, pos): 
			ruJavaIntVol() + ruJavaIntVol();
		RuVar(name, type): 
			ruJavaStringVol(name) + ruJavaStringVol(type);
		RuTerm(type, nodes, pos): 
			ruJavaStringVol(type) + ruJavaArrayVol(nodes, ruJavaTermNodeVol) + ruJavaIntVol();
		RuConstRef(name): 
			ruJavaStringVol(name);
	}

}
*/
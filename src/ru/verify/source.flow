import ru/subst;
import ru/verify/theorem;
import command;

export {
	ruVerifySource(src : RuSource, acc : RuVerifyAcc, conf : RuConf) -> RuVerifyAcc;
	ruMakeVerifyAcc() -> RuVerifyAcc;
}

ruMakeVerifyAcc() -> RuVerifyAcc {
	RuVerifyAcc(ruEmptyMath, makeSet(), makeSet());
}

RuVerifySourceAcc(
	decls  : [RuDecl],
	local  : RuVerifyAcc,
	global : RuVerifyAcc
);

ruVerifySource(src : RuSource, acc : RuVerifyAcc, conf : RuConf) -> RuVerifyAcc {
	approve_acc = \ac, decl : RuDecl -> 
		RuVerifyAcc(ac with
			math = ruAddDecl(decl, ac.math, conf),
			approved = insertSet(ac.approved, decl.descr.id)
		);
	disprove_acc = \ac, decl -> 
		RuVerifyAcc(ac with
			math = ruAddDecl(decl, ac.math, conf),
			disproved = insertSet(ac.disproved, decl.descr.id)
		);
	approve = \ac, decl -> RuVerifySourceAcc(
		concat(ac.decls, [decl]), 
		approve_acc(ac.local, decl),
		approve_acc(ac.global, decl),
	);
	disprove = \ac, decl -> RuVerifySourceAcc(
		concat(ac.decls, [decl]), 
		disprove_acc(ac.local, decl),
		disprove_acc(ac.global, decl),
	);
	timer = ruMakeTimer();
	src_acc = fold(src.decls, 
		RuVerifySourceAcc([], ruMakeVerifyAcc(), acc), 
		\ac, decl -> {
			switch (decl) {
				RuTheorem(descr,__,__,__): {
					res = ruDoVerifyTheorem(decl, ac.global, conf);
					filtered = ruFilterOutVerifyErrs(res, ruIsNonVerifiedRef);
					ruOutputVerifyErrs(filtered, acc.math, conf);
					if (ruIsVerified(res)) {
						if (ruVerbose(conf) > 2) {
							conf.onMessage("Theorem '" + id2s(descr.id) + "' is approved");
						}
						approve(ac, res.theorem);
					} else {
						if (ruVerbose(conf) > 0 && length(filtered.errs) > 0) {
							conf.onMessage("Theorem '" + id2s(descr.id) + "' is disproved");
							conf.onMessage(ru2s(decl, acc.math));
						}
						disprove(ac, decl);
					}
				}
				default: {
					approve(ac, decl);
				}
			}
		}
	);
	if (ruVerbose(conf) > 1) {
		conf.onMessage("\tru verified: '" + src.info.module + "' in " + ruTimePassed2s(timer));
	}
	RuVerifyAcc(src_acc.local with
		math = RuMath(src_acc.local.math with 
			sources = setTree(src_acc.local.math.sources, src.info.id, 
				RuSource(src with decls = src_acc.decls)
			)
		)
	);
}

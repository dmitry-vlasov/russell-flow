import base/concurrent;
import ru/subst;
import ru/verify/theorem;

export {
	RuVerifySourceResult(
		source : RuSource,
		disproved : [RuVerifyTheoremResult]
	);
	ruVerifySource(src : RuSource, imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> RuVerifySourceResult;
	ruVerifyTheoremsAll(thms : [RuTheorem], imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> [RuVerifyTheoremResult];
	ruVerifyTheorems(thms : [RuTheorem], math : RuMath, env : RuEnv) -> [RuVerifyTheoremResult];
}

ruVerifySource(src : RuSource, imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> RuVerifySourceResult {
	timer = ruMakeTimer();
	theorems = ruSourceTheorems(src);
	verified = ruVerifyTheoremsAll(theorems, imported_map, math, env);
	disproved = filter(verified, \res -> length(res.errs) > 0);
	approved = filter(verified, \res -> length(res.errs) == 0);
	iter(disproved, \res -> 
		if (exists(res.errs, \err -> !ruIsNonVerifiedRef(err))) {
			ruOutputVerifyErrs(res, math, env);
			env.out.println("Theorem '" + id2s(res.theorem.info.id) + "' is disproved");
			env.out.println(ru2s(res.theorem, math));
		} else if (forall(res.errs, ruIsNonVerifiedRef)) {
			env.out.println("Theorem '" + id2s(res.theorem.info.id) + "' is violates preceedence");
		}
	);
	if (ruVerbose(env.conf) > 1) {
		env.out.println("\tru verified: '" + src.info.module + "' in " + ruTimePassed2s(timer));
	}
	theorems_map = fold(theorems, makeTree(), \acc, th -> setTree(acc, th.info.id, th));
	// Find theorems, which changed
	changed = list2array(fold(verified, makeList(), \acc, res -> 
		if (res.theorem == lookupTreeDef(theorems_map, res.theorem.info.id, ruNoTheorem)) acc else Cons(res.theorem, acc)
	));
	RuVerifySourceResult(
		fold(changed, src, \acc, th -> ruSourceSetDecl(acc, th, env)), 
		disproved
	);
}

ruVerifyTheoremsAll(thms : [RuTheorem], imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> [RuVerifyTheoremResult] {
	ruConcurrent(map(thms, 
		\th -> \env1 -> ruVerifyTheoremAll(th, imported_map, math, env1)
	), env);
}

ruVerifyTheorems(thms : [RuTheorem], math : RuMath, env : RuEnv) -> [RuVerifyTheoremResult] {
	ruConcurrent(map(thms, 
		\th -> \env1 -> ruVerifyTheorem(th, math, env1)
	), env);
}

import ru/subst;
import ru/verify/match;

export {
	RuVerifyProofResult(
		proof : RuProof,
		errs : [RuVerifyErr]
	);
	RuVerifyStepResult(
		step : RuStep,
		disjs : Set<RuDisj>,
		errs : [RuVerifyErr]
	);

	ruVerifyProof(proof : RuProof, premises : [RuPremise], qed : RuExp, math : RuMath, env : RuEnv) -> RuVerifyProofResult;
	ruVerifyPrecedenceInProof(th : RuTheorem, proof : RuProof, imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> [RuVerifyErr];
}

ruVerifyProof(proof : RuProof, premises : [RuPremise], qed : RuExp, math : RuMath, env : RuEnv) -> RuVerifyProofResult {
	last_step = lastElement(proof.steps, ruNoStep);
	fold(
		proof.steps, 
		RuVerifyProofResult(
			RuProof(proof with steps = []),
			if (qed.nodes == last_step.expr.nodes) [] else [RuVerifyErrPropMismatch(last_step, qed)]
		),
		\acc, step -> {
			res = ruVerifyStep(step, proof, premises, math, env);
			RuVerifyProofResult(
				RuProof(acc.proof with
					steps = concat(acc.proof.steps, [res.step]),
					vars = RuVarsDisjs(acc.proof.vars with
						//vars = mergeTree(acc.proof.vars.vars, ruExp2Vars(step.expr)),
						disjs = mergeSets(acc.proof.vars.disjs, res.disjs)
					)
				),
				concat(acc.errs, res.errs)
			);
		}
	);
}

ruVerifyStep(step : RuStep, proof : RuProof, premises : [RuPremise], math : RuMath, env : RuEnv) -> RuVerifyStepResult {
	if (step.assertion == ruStepLemma) {
		lemma_premises = map(step.refs, \rf -> ruRefPremise(rf, proof, premises, math));
		res = ruVerifyProof(step.proof, lemma_premises, step.expr, math, env);
		RuVerifyStepResult(
			RuStep(step with proof = res.proof),
			makeSet(),
			res.errs
		);
	} else if (step.assertion == ruStepProblem) {
		if (lookupTreeDef(env.conf.opts, "verify-strict", "") == "1") {
			RuVerifyStepResult(step, makeSet(), [RuVerifyErrProblemFound(step)]);
		} else {
			RuVerifyStepResult(step, makeSet(), []);
		}
	} else {
		ms = ruMatchStep(step, proof, premises, math, env);
		switch (ms) {
			RuMatchedStep(__,__, disjs): 
				RuVerifyStepResult(step, disjs, []);
			RuVerifyErr(): 
				RuVerifyStepResult(step, makeSet(),[ms]);
		}
	}
}

ruVerifyPrecedenceInProof(th : RuTheorem, proof : RuProof, imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> [RuVerifyErr] {
	fold(proof.steps, [], 
		\acc, step -> {
			if (step.assertion == ruStepLemma) {
				concat(acc, ruVerifyPrecedenceInProof(th, step.proof, imported_map, math, env));
			} else if (step.assertion == ruStepProblem) {
				acc;
			} else {
				switch (lookupTree(math.decls.assertions, step.assertion)) {
					Some(ass): {
						as : RuAssertion = ass;
						if (ruDeclInfoPreceeds(as.info, th.info, imported_map)) acc else 
						concat(acc, [RuVerifyErrNonVerifiedRef(step)]);
					}
					None(): {
						acc;
					}
				}
			}
		}
	);
}

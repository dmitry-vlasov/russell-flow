import ru/subst;
import ru/verify/err;
import ru/util/disjs;

export {
	RuMatchStepResult ::= RuMatchedStep, RuVerifyErr;
	RuMatchedStep(
		ass : RuAssertion,
		sub : Tree<RuVar, RuExp>,
		disjs : Set<RuDisj>
	);
	ruRefPremise(rf : RuRef, proof : RuProof, premises : [RuPremise], math : RuMath) -> RuPremise;
	ruMatchStep(step : RuStep, proof : RuProof, premises : [RuPremise], math : RuMath, env : RuEnv) -> RuMatchStepResult;
}

ruRefPremise(rf : RuRef, proof : RuProof, premises : [RuPremise], math : RuMath) -> RuPremise {
	switch (rf) {
		RuHypRef(i): {
			if (i < 0 || i >= length(premises)) {
				ruCrash("illegal hyp index: " + i2s(i + 1) + ", hyps:\n" + 
					strGlue(map(premises, \h -> ru2s(h, math)), "\n")
				);
			}
			premises[i];
		}
		RuStepRef(i): {
			if (i < 0 || i >= length(proof.steps)) {
				ruCrash("illegal step index: " + i2s(i + 1) + ", steps:\n" + 
					ruSteps2s(proof.steps, ruMakeRu2SEnv(math))
				);
			}
			proof.steps[i]
		}
	}
}

ruMatchStepExps(step : RuStep, e1 : RuExp, e2 : RuExp, ind : int, acc : RuMatchStepResult, math : RuMath, env : RuEnv) -> RuMatchStepResult {
	switch (acc) {
		RuMatchedStep(ass, sub, __): {
			switch (ruMatchExp(e1, e2, math, env)) {
				Some(s): {
					switch (ruMergeSubst(acc.sub, s)) {
						Some(new_sub): {
							RuMatchedStep(acc with sub = new_sub);
						}
						None(): {
							RuVerifyErrSubsMismatch(step, acc.sub, s, ind)
						}
					}
				}
				None(): {
					RuVerifyErrExprMismatch(step, e1, e2, ind);
			}
		}
		}
		RuVerifyErr(): acc;
	}
}

ruMatchStep(step : RuStep, proof : RuProof, premises : [RuPremise], math : RuMath, env : RuEnv) -> RuMatchStepResult {
	switch (lookupTree(math.decls.assertions, step.assertion)) {
		Some(ass1): {
			ass : RuAssertion = ass1;
			if (length(step.refs) != ruArity(ass)) {
				RuVerifyErrArityMismatch(step, length(step.refs), ruArity(ass));
			} else {
				acc = foldi(ass.stat.hyps, 
					ruMatchStepExps(step, step.expr, ass.stat.prop, -1, RuMatchedStep(ass, makeTree(), makeSet()), math, env),
					\i, ac, hyp -> ruMatchStepExps(step, ruRefPremise(step.refs[i], proof, premises, math).expr, hyp.expr, i, ac, math, env)
				);
				switch (acc) {
					RuMatchedStep(__, sub, __): {
						switch (ruComputeDisjs(sub, ass.stat.vars.disjs, RuDisjsInherent(makeSet()))) {
							RuDisjsInherent(disjs): {
								RuMatchedStep(acc with disjs = disjs);
							}
							RuDisjViolation(disj, vars): {
								RuVerifyErrDirectDisjointedViolation(step, disj, vars);
							}
						}
					}
					RuVerifyErr(): acc;
				}
			}
		}
		None(): {
			RuVerifyErrUnknownAssertion(step);
		}
	}
}

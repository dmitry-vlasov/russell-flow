import ru/subst;
import ru/verify/step;
import ru/verify/acc;
import command;

export {
	RuVerifyTheoremResult(
		theorem : RuTheorem, 
		errs : [RuVerifyErr]
	);

	ruIsVerified(res : RuVerifyTheoremResult) -> bool;
	ruVerifyTheorem(th : RuTheorem, math : RuMath, conf : RuConf) -> RuVerifyTheoremResult;
	ruDoVerifyTheorem(th : RuTheorem, verified : RuVerifyAcc, conf : RuConf) -> RuVerifyTheoremResult;
	ruOutputVerifyErrs(res : RuVerifyTheoremResult, math : RuMath, conf : RuConf) -> void;
	ruFilterOutDisjointedViolations(res : RuVerifyTheoremResult) -> RuVerifyTheoremResult;
}

ruIsVerified(res : RuVerifyTheoremResult) -> bool { 
	length(res.errs) == 0 
}

ruOutputVerifyErrs(res : RuVerifyTheoremResult, math : RuMath, conf : RuConf) -> void {
	iter(res.errs, \err ->	
		conf.onError(
			ruVerifyErr2s(err, math, conf),
			[ruVerifyErr2place(err, res.theorem)]
		)
	);
}

ruFilterOutDisjointedViolations(res : RuVerifyTheoremResult) -> RuVerifyTheoremResult {
	RuVerifyTheoremResult(res with 
		errs = filter(res.errs, \err -> !ruIsDisjointedViolation(err))
	);
}

RuVerifyTheoremAcc(
	disjs : Set<RuDisj>,
	errs : [RuVerifyErr]
);

ruDoVerifyTheorem(th : RuTheorem, verified : RuVerifyAcc, conf : RuConf) -> RuVerifyTheoremResult {
	math = verified.math;
	last_step = lastElement(th.proof.steps, ruNoStep);
	acc = fold(
		th.proof.steps, 
		RuVerifyTheoremAcc(
			makeSet(), 
			if (th.stat.prop.nodes == last_step.expr.nodes) [] else {
				[RuVerifyErrPropMismatch(last_step, th.stat.prop)]
			}
		), 
		\acc, step -> {
			acc1 = if (containsSet(verified.approved, step.assertion)) acc else {
				RuVerifyTheoremAcc(acc with errs = concat(acc.errs, [RuVerifyErrNonVerifiedRef(step)]));
			}
			ms = ruMatchStep(step, th, math, conf);
			switch (ms) {
				RuMatchedStep(__,__, disjs): 
					RuVerifyTheoremAcc(acc1 with disjs = mergeSets(acc1.disjs, disjs));
				RuVerifyErr(): 
					RuVerifyTheoremAcc(acc1 with errs = concat(acc1.errs, [ms]));
			}
		}
	);
	th_vars = ruAssertion2Vars(th);
	th_ds = filterSet(acc.disjs, \d -> containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2));
	pr_ds = filterSet(acc.disjs, \d -> !(containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2)));
	RuVerifyTheoremResult(
		RuTheorem(th with 
			stat = RuStatement(th.stat with disjs = th_ds),
			proof = RuProof(th.proof with disjs = pr_ds)
		),
		acc.errs
	);
/*
	if (length(acc.errs) > 0) None() else {
		th_vars = ruAssertion2Vars(th);
		th_ds = filterSet(acc.disjs, \d -> containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2));
		pr_ds = filterSet(acc.disjs, \d -> !(containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2)));
		Some(RuTheorem(th with 
			stat = RuStatement(th.stat with disjs = th_ds),
			proof = RuProof(th.proof with disjs = pr_ds)
		));
	};

	ret = if (length(acc.errs) > 0) None() else {
		th_vars = ruAssertion2Vars(th);
		th_ds = filterSet(acc.disjs, \d -> containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2));
		pr_ds = filterSet(acc.disjs, \d -> !(containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2)));
		Some(RuTheorem(th with 
			stat = RuStatement(th.stat with disjs = th_ds),
			proof = RuProof(th.proof with disjs = pr_ds)
		));
	};
	if (isNone(ret)) {
		module = eitherMap(ruFindSource(th.descr.name, math), \src -> src.info.module, "");
		show_disproved = (conf.verbose > 1 || lookupTreeDef(conf.opts, "show-disproved-theorems", "") == "1");
		//if (conf.verbose > 2 || !^depends_on_non_verified || lookupTreeDef(conf.opts, "report-depend-on-non-verified", "") == "1") {
			iter(acc.errs, \err -> 
				conf.onError(ruVerifyErr2s(err, math, conf), [RuPlace(module, err.step.pos)])
			);
			conf.onError(
				"Theorem '" + th.descr.name + "' is disproved" + 
				(if (show_disproved) "\n" + ru2s(th, math.rules) else ""),
				[RuPlace(module, th.descr.pos)]
			);
		//}
		if (lookupTreeDef(conf.opts, "die-at-verify-failure", "") == "1") {
			conf.onMessage("Since there's an option 'die-at-verify-failure=1' russell terminates ...");
			quit(0);
		}
	} else if (conf.verbose > 2) {
		conf.onMessage("\tru theorem verified: '" + th.descr.name + "'");
	}
	ret;*/
}

ruVerifyTheorem(th : RuTheorem, math : RuMath, conf : RuConf) -> RuVerifyTheoremResult {
	res = ruDoVerifyTheorem(th, RuVerifyAcc(math, makeSet(), makeSet()), conf);
	RuVerifyTheoremResult(res with 
		errs = filter(res.errs, \err -> !ruIsNonVerifiedRef(err))
	);
}

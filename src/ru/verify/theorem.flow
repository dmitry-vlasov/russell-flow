import ru/subst;
import ru/verify/proof;
import ru/util/normalize;

export {
	RuVerifyTheoremResult(
		theorem : RuTheorem, 
		errs : [RuVerifyErr]
	);

	ruIsVerified(res : RuVerifyTheoremResult) -> bool;
	ruVerifyTheorem(th : RuTheorem, math : RuMath, env : RuEnv) -> RuVerifyTheoremResult;
	ruVerifyTheoremPrecedence(th : RuTheorem, imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> [RuVerifyErr];
	ruVerifyTheoremAll(th : RuTheorem, imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> RuVerifyTheoremResult;

	ruOutputVerifyErrs(res : RuVerifyTheoremResult, math : RuMath, env : RuEnv) -> void;
	ruVerifyTheoremErrs2s(res : RuVerifyTheoremResult, math : RuMath) -> string;
	ruFilterOutVerifyErrs(res : RuVerifyTheoremResult, pred : (RuVerifyErr) -> bool) -> RuVerifyTheoremResult;
}

ruIsVerified(res : RuVerifyTheoremResult) -> bool { 
	length(res.errs) == 0 
}

ruOutputVerifyErrs(res : RuVerifyTheoremResult, math : RuMath, env : RuEnv) -> void {
	iter(res.errs, \err ->	
		env.out.error(
			"in theorem: '" + id2s(res.theorem.info.id) + "': " + ruVerifyErr2s(err, math),
			[ruVerifyErr2place(err, res.theorem, math)]
		)
	);
}

ruVerifyTheoremErrs2s(res : RuVerifyTheoremResult, math : RuMath) -> string {
	strGlue(map(res.errs, \err -> 
		ruVerifyErr2s(err, math) + "\n" + strIndent(ruPlace2s(ruVerifyErr2place(err, res.theorem, math)))
	), "\n");
}

ruFilterOutVerifyErrs(res : RuVerifyTheoremResult, pred : (RuVerifyErr) -> bool) -> RuVerifyTheoremResult {
	RuVerifyTheoremResult(res with errs = filter(res.errs, \err -> !pred(err)));
}

ruVerifyTheorem(th_orig : RuTheorem, math : RuMath, env : RuEnv) -> RuVerifyTheoremResult {
	// Drop the disjointed restrictions - they will be re-calculated
	th = RuTheorem(th_orig with stat = RuStatement(th_orig.stat with 
		vars = RuVarsDisjs(th_orig.stat.vars.vars, makeSet())
	));
	verified = ruVerifyProof(th.proof, th.stat.hyps, ruExp(th.stat.prop), math, env);
	th_verified = ruNormalizeTheoremVarsDisjs(RuTheorem(th with proof = verified.proof));
	// Check that all disjointed restrictions are inherently satisfied
	disj_errs = if (ruSubsetDisjs(th_verified.stat.vars.disjs, th_orig.stat.vars.disjs)) [] else {
		/*pr_disj = \disj -> {
			"<" + id2s(disj.v1.id) + " (" + i2s(disj.v1.id) + ")" + ", " +
			id2s(disj.v2.id) + " (" + i2s(disj.v2.id) + ")>";
		}
		env.out.onMessage(
			"FAIL (1): " + id2s(th.info.id) + "\n" +
			"original disjs:\n" + 
				//strIndent(ru2s(th_orig, math)) +
				strIndent(ruDisjs2s(th_orig.stat.vars.disjs)) + "\n" + 
				"\t" + strGlue(map(set2array(th_orig.stat.vars.disjs), \disj -> pr_disj(disj)), ", ") + "\n"
			"verified disjs:\n" +  
				//strIndent(ru2s(ret.theorem, math)) + "\n" +
				strIndent(ruDisjs2s(th_verified.stat.vars.disjs)) + "\n" +
				"\t" + strGlue(map(set2array(th_verified.stat.vars.disjs), \disj -> pr_disj(disj)), ", ") + "\n"
			"diff 1 disjs: [" +
				strGlue(
					map(set2array(ruSubtractDisjs(th_verified.stat.vars.disjs, th_orig.stat.vars.disjs)), \disj -> ru2s(disj, math)),
					", "
				) + "]" + "\n" +
			"diff 2 disjs: [" +
				strGlue(
					map(set2array(ruSubtractDisjs(th_orig.stat.vars.disjs, th_verified.stat.vars.disjs)), \disj -> ru2s(disj, math)),
					", "
				) + "]" + "\n" +
			"\n\n\n" +
			"original thm:\n" +  
				strIndent(ru2s(th_orig, math)) + "\n" +
			"verified thm:\n" +  
				strIndent(ru2s(th_verified, math))
		);*/
		[RuVerifyErrInheritedDisjointedViolation(
			th.info.id,
			th_orig.stat.vars.disjs,
			ruSubtractDisjs(th_orig.stat.vars.disjs, th_verified.stat.vars.disjs)
		)];
	}
	RuVerifyTheoremResult(
		th_verified,
		concat(verified.errs, disj_errs)
	);
}

ruVerifyTheoremPrecedence(th : RuTheorem, imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> [RuVerifyErr] {
	ruVerifyPrecedenceInProof(th, th.proof, imported_map, math, env);
}

ruVerifyTheoremAll(th : RuTheorem, imported_map : Tree<int, Set<int>>, math : RuMath, env : RuEnv) -> RuVerifyTheoremResult {
	res = ruVerifyTheorem(th, math, env);
	RuVerifyTheoremResult(res with 
		errs = concat(res.errs, ruVerifyPrecedenceInProof(th, th.proof, imported_map, math, env))
	);
}

import ru/subst;
import ru/verify/source;

export {
	ruVerifyMath(math : RuMath, env : RuEnv) -> RuVerifyAcc;
	ruCommVerify : RuComm;
}

ruCommVerify = RuComm(
	RuCommDescr(
		"verify", "misc", "verify Russell target", "target", false, false, 
		[RuCommArg("target", false, "the target: a theorem name, file name or 'all' for verification of all math", "all")], []
	),
	ruRunVerify
);

ruVerifyMath(math : RuMath, env : RuEnv) -> RuVerifyAcc {
	err_count = ref 0;
	timer = ruMakeTimer();
	acc = ruDoVerifyMath(math.sources, ruMakeVerifyAcc(), env);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage(
			"ru verified: " +i2s(sizeTree(math.sources)) + " files in " + ruTimePassed2s(timer) +
			(if (ruVerbose(env.conf) > 2) "\n\tapproved theorems:\n" + strGlue(map(set2array(acc.approved), \th -> "\t" + id2s(th)), "\n") else "")
		);
	}
	if (sizeSet(acc.disproved) > 0) {
		env.out.onMessage(
			(if (ruVerbose(env.conf) > 0) "" else "ru disproved: " +i2s(sizeSet(acc.disproved)) + " theorems in " + ruTimePassed2s(timer) + "\n") +
			"\tdisproved theorems:\n" + strGlue(map(set2array(acc.disproved), \th -> "\t\t" + id2s(th)), "\n")
		);
	}
	acc;
}

ruDoVerifyMath(left : Tree<int, RuSource>, acc : RuVerifyAcc, env : RuEnv) -> RuVerifyAcc {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.id))
		);
		if (ready == []) {
			env.out.onError("cannot verify: " +i2s(sizeTree(left)) + " files - cyclic import", []);
			acc;
		} else {
			verified = ruConcurrent(map(ready, \s -> \-> ruVerifySource(s, acc, env)));
			new_acc = fold(verified, acc, \ac, v -> ruMergeVerifyAcc(ac, v, env));
			new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.id));
			ruDoVerifyMath(new_left, new_acc, env);
		}
	}
}

ruRunVerify(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	target0 = lookupTreeDef(task.args, "target", "");
	target = if (!endsWith(target0, ".ru")) target0 else ruTrimPath(target0, env.conf, ".ru");
	conf = state.conf;
	math = ruMakeMathFromSources(state.ru, env);
	m = if (target == "" || target == "all" || target == "1") {
		//ruDebugLog("target: " + target, math.conf);
		verified = ruVerifyMath(math, env);
		if (sizeSet(verified.disproved) == 0) {
			Some(verified.math);
		} else {
			None();
		}
	} else {
		id = s2id(target);
		switch (lookupTree(math.assertions, id)) {
			Some(th): {
				switch (th) {
					RuTheorem(__, __,__,__): {
						timer = ruMakeTimer();
						res = ruVerifyTheorem(th, math, env);
						ret = if (ruIsVerified(res)) Some(ruReplaceAssertion(res.theorem, math, env)) else None();
						if (ruVerbose(conf) > 0) {
							unit.out.onMessage("ru " + (if (ruIsVerified(res)) "verified" else "disproved") + " " + target + "' in " + ruTimePassed2s(timer));
						}
						ret;
					}
					default: {
						unit.out.onError("assertion '" + target + "' is not a theorem", []);
						None();
					}
				}
			}
			None(): {
				switch (lookupTree(math.sources, id)) {
					Some(src): {
						timer = ruMakeTimer();
						deps = fold(src.imports, makeSet(), \acc, imp -> ruSourceDeclNames(imp.id, acc, math, env));
						acc = ruVerifySource(src, RuVerifyAcc(math, deps, makeSet()), env);
						if (ruVerbose(conf) > 0) {
							unit.out.onMessage(
								"ru verified: '" + target + "' in " + ruTimePassed2s(timer) +
								(if (ruVerbose(conf) > 2) "\n\tapproved theorems:\n" + strGlue(map(set2array(acc.approved), \th -> "\t\t" + id2s(th)), "\n") else "")
							);
						}
						if (sizeSet(acc.disproved) > 0) {
							unit.out.onMessage(
								(if (ruVerbose(conf) > 0) "" else "ru disproved: '" + target + "' in " + ruTimePassed2s(timer) + "\n") +
								"\tdisproved theorems:\n" + strGlue(map(set2array(acc.disproved), \th -> "\t\t" + id2s(th)), "\n")
							);
							None();
						} else {
							Some(acc.math);
						}
					}
					None(): {
						unit.out.onError("verification target '" + target + "' is not found", []);
						None();
					}
				}
			}
		}
	}
	maybeMap(m, \new_math -> RuState(state with ru = new_math.sources));
}

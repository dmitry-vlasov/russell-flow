import ru/subst;
import ru/verify/source;

export {
	ruVerifyMath(math : RuMath, env : RuEnv) -> RuVerifyAcc;
}

ruVerifyMath(math : RuMath, env : RuEnv) -> RuVerifyAcc {
	err_count = ref 0;
	timer = ruMakeTimer();
	acc = ruDoVerifyMath(math.sources, ruMakeVerifyAcc(), env);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage(
			"ru verified: " +i2s(sizeTree(math.sources)) + " files in " + ruTimePassed2s(timer) +
			(if (ruVerbose(env.conf) > 2) "\n\tapproved theorems:\n" + strGlue(map(set2array(acc.approved), \th -> "\t" + id2s(th)), "\n") else "")
		);
	}
	if (sizeSet(acc.disproved) > 0) {
		env.out.onMessage(
			(if (ruVerbose(env.conf) > 0) "" else "ru disproved: " +i2s(sizeSet(acc.disproved)) + " theorems in " + ruTimePassed2s(timer) + "\n") +
			"\tdisproved theorems:\n" + strGlue(map(set2array(acc.disproved), \th -> "\t\t" + id2s(th)), "\n")
		);
	}
	acc;
}

ruDoVerifyMath(left : Tree<int, RuSource>, acc : RuVerifyAcc, env : RuEnv) -> RuVerifyAcc {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.id))
		);
		if (ready == []) {
			env.out.onError("cannot verify: " +i2s(sizeTree(left)) + " files - cyclic import", []);
			acc;
		} else {
			verified = ruConcurrent(map(ready, \s -> \-> ruVerifySource(s, acc, env)));
			new_acc = fold(verified, acc, \ac, v -> ruMergeVerifyAcc(ac, v, env));
			new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.id));
			ruDoVerifyMath(new_left, new_acc, env);
		}
	}
}

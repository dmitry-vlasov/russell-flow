import base/concurrent;
import ru/subst;
import ru/verify/source;

export {
	RuVerifyMathResult(
		math : RuMath,
		disproved : [RuVerifyTheoremResult]
	);
	ruVerifyMath(math : RuMath, env : RuEnv) -> RuVerifyMathResult;
}

ruVerifyMath(math : RuMath, env : RuEnv) -> RuVerifyMathResult {
	err_count = ref 0;
	timer = ruMakeTimer();
	verified = ruVerifyTheorems(getTreeValues(ruDeclsTheorems(math.decls)), math, env);
	disproved = filter(verified, \res -> length(res.errs) > 0);
	approved = filter(verified, \res -> length(res.errs) == 0);
	if (length(disproved) > 0) {
		env.out.println(
			(if (ruVerbose(env.conf) > 0) "" else "ru disproved: " +i2s(length(disproved)) + " theorems in " + ruTimePassed2s(timer) + "\n") +
			"\tdisproved theorems:\n" + strGlue(map(disproved, \res -> "\t\t" + id2s(res.theorem.info.id) + "\n" + ruVerifyTheoremErrs2s(res, math) + "\n"), "\n")
		);
	}
	if (ruVerbose(env.conf) > 0) {
		env.out.println("ru verified: " +i2s(sizeTree(math.sources)) + " files in " + ruTimePassed2s(timer));
	}
	changed = list2array(fold(verified, makeList(), \acc, res -> 
		if (res.theorem == lookupTreeDef(math.decls.assertions, res.theorem.info.id, ruNoTheorem)) acc else Cons(res.theorem, acc)
	));
	RuVerifyMathResult(
		fold(changed, math, \acc, th -> ruMathSetDecl(acc, th, env)), 
		disproved
	);
}

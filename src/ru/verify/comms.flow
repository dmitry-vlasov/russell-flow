import ru/verify/math;
import comm;

export {
	ruCommVerify : RuComm;
}

ruCommVerify = RuComm(
	RuCommInfo(
		"verify", "misc", "verify Russell target", "target", false, false, 
		[
			RuCommArg("target", false, "the target: a theorem name, file name or 'all' for verification of all math", "all"),
			RuCommArg("update-disj", true, "update disjointed variables restriction during verification", "0")
		], []
	),
	ruRunVerify
);

ruRunVerify(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	target0 = lookupTreeDef(task.args, "target", "");
	update_disj = lookupTreeDef(task.args, "update-disj", "0") == "1";
	target = if (!endsWith(target0, ".ru")) target0 else ruTrimPath(target0, env.conf, ".ru");
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	theorems = ref 0;
	m = if (target == "" || target == "all" || target == "1") {
		//ruDebugLog("target: " + target, math.conf);
		verified = ruVerifyMath(math, env);
		theorems := ruDeclsTheoremsNum(math.decls);
		if (length(verified.disproved) == 0) {
			Some(if (update_disj) verified.math else math);
		} else {
			None();
		}
	} else {
		id = s2id(target);
		switch (lookupTree(math.decls.assertions, id)) {
			Some(th): {
				switch (th) {
					RuTheorem(__, __,__,__): {
						res = ruVerifyTheorem(th, math, env);
						ret = if (ruIsVerified(res)) {
							Some(if (update_disj) ruMathReplaceDecl(math, res.theorem, env) else math);
						} else {
							None();
						}
						if (ruVerbose(conf) > 0) {
							unit.out.onMessage("ru " + (if (ruIsVerified(res)) "verified" else "disproved") + " " + target + "' in " + ruTimePassed2s(timer));
						}
						theorems := 1;
						ret;
					}
					default: {
						unit.out.onError("assertion '" + target + "' is not a theorem", []);
						None();
					}
				}
			}
			None(): {
				switch (lookupTree(math.sources, id)) {
					Some(src): {
						deps = fold(src.imports, makeSet(), \acc, imp -> ruSourcesDeclNames(imp.id, acc, math.sources, env));
						imported_map = ruSourcesAllImported(math.sources, env);
						verified = ruVerifySource(src, imported_map, math, env);
						theorems := length(filter(src.decls, ruDeclIsTheorem));
						if (ruVerbose(conf) > 0) {
							unit.out.onMessage(
								"ru verified: '" + target + "' in " + ruTimePassed2s(timer)
								//(if (ruVerbose(conf) > 2) "\n\tapproved theorems:\n" + strGlue(map(set2array(acc.approved), \th -> "\t\t" + id2s(th)), "\n") else "")
							);
						}
						if (length(verified.disproved) > 0) {
							unit.out.onMessage(
								(if (ruVerbose(conf) > 0) "" else "ru disproved: '" + target + "' in " + ruTimePassed2s(timer) + "\n") +
								"\tdisproved theorems:\n" + strGlue(map(verified.disproved, \th -> "\t\t" + id2s(th.theorem.info.id)), "\n")
							);
							None();
						} else {
							Some(if (update_disj) ruMathAddSource(math, verified.source, env) else math);
						}
					}
					None(): {
						unit.out.onError("verification target '" + target + "' is not found", []);
						None();
					}
				}
			}
		}
	}
	maybeMap(m, \new_math -> 
		RuState(state with 
			ru = new_math.sources,
			vars = setTree(setTree(setTree(state.vars, 
				"verify.time", ValDouble(ruTimePassed(timer))), 
				"verify.size", ValInt(^theorems)),
				"verify.success", ValBool(isSome(m))
			)
		)
	);
}

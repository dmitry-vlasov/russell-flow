import ru/cache/comms;
import ru/parse/comms;
import ru/prover/comms;
import ru/refactor/comms;
import ru/verify/comms;
import ru/stats/comms;
import ru/info;
import ru/complete;
import ru/ru2mm;
import ru/comments;

export {
	ruCommands(exec : (ScComm, RuState, RuOut) -> RuState) -> [RuComm];
}

ruCommands(exec : (ScComm, RuState, RuOut) -> RuState) -> [RuComm] {
	concatA([
		[
			ruCommVerify,
			ruCommCyclicDeps,
			ruCommCyclicImports,
			ruApplyToProjectRoots(ruCommRu2Mm),
			ruCommActions,
			ruCommOrderSources,
			ruCommComplete,
			ruCommComments2Ascii
		],
		ruIoCommands,
		ruRefactorCommands(exec),
		ruProverCommands,
		ruInfoCommands,
		ruSyncCommands,
		ruCacheCommands,
		ruStatsCommands,
		ruStatisticsCommands
	]);
}

ruCommActions = RuComm(
	RuCommInfo(
		"actions", "misc", "available actions at the given position", "", false, false, 
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "clear", ""), 
			RuCommArg("col", false, "clear", "")
		], []
	), 
	ruRunActions
);

ruRunActions(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	actions = ["verify", "prove", "reprove", "generalize"];
	file = ruTaskStringArg(task, "file", "");
	line = ruTaskIntArg(task, "line", -1);
	col = ruTaskIntArg(task, "col", -1);
	module = ruTrimPath(file, env.conf, ".ru");
	code = ruCodeCacheGet(s2id_(module), env).code;
	name = ruNameByLineCol(line, col, code);
	json = if (name == "") JsonArray([]) else {
		JsonArray(map(actions, \action -> 
			lspCodeAction2Json(LspCodeAction(
				action + " " + name, action, [], false, None(),
				Some(LspCommand(
					action + " " + name,
					"command",
					map(["file=" + file, "read", ";", action, "target=" + name], 
						\arg -> JsonString(arg)
					)
				))
			))
		));
	}
	env.out.println(json2string(json));
	Some(state);
}

ruCommCyclicDeps = RuComm(
	RuCommInfo(
		"cyclic-deps", "misc", "check on cyclic dependencies", "target", false, false, 
		[RuCommArg("target", false, "the target: a theorem name, file name or 'all' for verification of all math", "all")], []
	),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		if (ruHasCyclicDependencies(ruMathFromSources(state.ru, env), env)) None() else Some(state);
	}
);

ruHasCyclicDependencies(math : RuMath, env : RuEnv) -> bool {
	all_deps = ruAssertionsDependencies(math.decls.assertions, env);
	ret = foldTree(math.decls.assertions, false, 
		\id, __, acc -> {
			deps = lookupTreeDef(all_deps, id, makeSet());
			ret = if (containsSet(deps, id)) {
				env.out.println("Cyclic dependency found: " + id2s(id) + " dependes on: " + strGlue(map(set2array(deps), id2s), ", "));
				true;
			} else {
				if (ruVerbose(env.conf) >= 2) {
					details = if (ruVerbose(env.conf) >= 3) ": " + strGlue(map(set2array(deps), id2s), ", ") else ", ";
					env.out.println("Assertion " + id2s(id) + " has " + i2s(sizeSet(deps)) + " dependencies" + details + "yet no cyclic are found");
				}
				false;
			}
			ret || acc;
		}
	)
	if (ruVerbose(env.conf) > 0 && !ret) {
		env.out.println("No cyclic dependencies are found in " + i2s(sizeTree(math.decls.assertions)) + " assertions");
	}
	ret;
}

ruCommCyclicImports = RuComm(
	RuCommInfo(
		"cyclic-imports", "misc", "check on cyclic imports", "target", false, false, 
		[RuCommArg("target", false, "the target: a theorem name, file name or 'all' for verification of all math", "all")], []
	),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		if (ruHasCyclicImports(ruMathFromSources(state.ru, env), env)) None() else Some(state);
	}
);

ruHasCyclicImports(math : RuMath, env : RuEnv) -> bool {
	all_deps = ruSourcesAllImported(math.sources, env);
	if (ruVerbose(env.conf) >= 3) {
		env.out.println("\t\timports data collected");
	}
	ret = foldTree(math.sources, false, 
		\id, __, acc -> {
			deps = lookupTreeDef(all_deps, id, makeSet());
			ret = if (containsSet(deps, id)) {
				env.out.println("Cyclic import is found: '" + id2s(id) + "' imports on:\n" + strIndent(strGlue(map(set2array(deps), id2s), "\n")));
				true;
			} else {
				if (ruVerbose(env.conf) >= 2) {
					details = if (ruVerbose(env.conf) >= 3) ": " + strGlue(map(set2array(deps), id2s), ", ") else ", ";
					env.out.println("Module '" + id2s(id) + "' has " + i2s(sizeSet(deps)) + " imports" + details + "yet no cyclic are found");
				}
				false;
			}
			ret || acc;
		}
	)
	if (ruVerbose(env.conf) > 0 && !ret) {
		env.out.println("No cyclic imports are found in " + i2s(sizeTree(math.sources)) + " modules");
	}
	ret;
}

ruCommOrderSources = RuComm(
	RuCommInfo("order-sources", "misc", "show the toposort of sources", "", false, false, [], []),
	\unit -> {
		env = ruUnitEnv(unit);
		order = ruSourcesOrder(unit.state.ru, env.out);
		env.out.println("order of sources:\n" + strIndent(strGlue(map(order, \s -> s.info.module), "\n")));
		Some(unit.state);
	}
);

ruStatsCommands = [
	RuComm(RuCommInfo("stats-math", "stats", "show math statistics", "", false, false, [], []),
		\unit -> {
			env = ruUnitEnv(unit);
			unit.out.println("Mathematics statistics:");
			unit.out.println("-----------------------");
			unit.out.println(ruMathStats2s(ruMathFromSources(unit.state.ru, env), env) + "\n");
			Some(unit.state); 
		}
	),
	RuComm(RuCommInfo("stats-math-1", "stats", "show math statistics", "", false, false, [], []),
		\unit -> {
			env = ruUnitEnv(unit);
			stats = ruMathStats2tree(ruMathFromSources(unit.state.ru, env), env);
			Some(RuState(unit.state with
				vars = setTree(unit.state.vars, "stats-math-1", stats);
			)); 
		}
	),
	RuComm(RuCommInfo("stats-mem", "stats", "show memory usage statistics", "", false, false, 
			[RuCommArg("show", true, "set this option to '1' in order to print memory statistics to the output", "")], []
		),
		\unit -> {
			if (ruTaskBoolArg(unit.task, "show", false)) {
				unit.out.println(
					memory2s(usedMemory()) + " + " + memory2s(freeMemory()) + " free = " + memory2s(totalMemory())
				);
			}
			unit.out.respond(
				JsonObject([
					Pair("used", JsonDouble(usedMemory())),
					Pair("free", JsonDouble(freeMemory())),
					Pair("total", JsonDouble(totalMemory())),
				])
			);
			Some(RuState(unit.state with
				vars = setTree(unit.state.vars, "stats-mem", pairs2tree([
					Pair("used", flow(usedMemory())),
					Pair("free", flow(freeMemory())),
					Pair("total", flow(totalMemory()))
				]))
			)); 
		}
	),
	RuComm(
		RuCommInfo(
			"stats-cache", "stats", "show cache statistics", "", false, false,
			[RuCommArg("full", true, "show cached names", "")], []
		), 
		\unit -> {
			env = ruUnitEnv(unit);
			unit.out.println(ruCacheInfo(ruTaskBoolArg(unit.task, "full", false), env));
			Some(unit.state);
		}
	)
];

ruCommComments2Ascii = RuComm(
	RuCommInfo("ru-comments2ascii", "misc", "convert non-ASCII characters in comments according to Metamath notation", "", false, false, [], []),
	ruRunComments2Ascii
);

ruRunComments2Ascii(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	timer = ruMakeTimer();
	sources = values2tree(ruComments2ascii(getTreeValues(state.ru), env), \src -> src.info.id);
	if (ruVerbose(env.conf) > 0) {
		env.out.println("ru converted non-ASCII characters in comments in " + ruTimePassed2s(timer));
	}
	Some(RuState(state with 
		ru = sources,
		vars = setTree(state.vars, "ru-comment2ascii", pairs2tree([
			Pair("time", flow(ruTimePassed(timer)))
		]))
	));
}

import math/stringmath;
import base/ru_log;
import ru/ru_subst;
import ru_command;

export {
	ruVerifyTheorem(th : RuTheorem, math : RuMath, conf : RuConf) -> Maybe<RuTheorem>;
	ruVerifySource(src : RuSource, math : RuMath, conf : RuConf) -> Maybe<RuSource>;
	ruVerifyMath(math : RuMath, conf : RuConf) -> Maybe<RuMath>;
	ruMatchStep(step : RuStep, th : RuTheorem, math : RuMath, conf : RuConf) -> Maybe<Pair<RuAssertion, Tree<RuVar, RuExp>>>;
	ruCommVerify(task : RuTask, env : RuEnv) -> RuEnv;
}

ruVerifyMath(math : RuMath, conf0 : RuConf) -> Maybe<RuMath> {
	err_count = ref 0;
	conf = ruAddErrCounter(conf0, err_count);
	start = timestamp();
	verified = ruDoVerifyMath(math.sources, math, conf);
	if (conf.verbose > 0) {
		conf.onMessage("ru verified: " +i2s(sizeTree(verified.sources)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	if (^err_count == 0) {
		Some(verified);
	} else {
		None();
	}
}

ruDoVerifyMath(left : Tree<string, RuSource>, acc : RuMath, conf : RuConf) -> RuMath {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.module))
		);
		if (ready == []) {
			conf.onError("cannot verify: " +i2s(sizeTree(left)) + " files - cyclic import", []);
			acc;
		} else {
			verified = filtermap(ruConcurrent(map(ready, \s -> \-> ruVerifySource(s, acc, conf))), idfn);
			new_acc = fold(verified, acc, \ac, v_src -> {
				new_assertions = fold(v_src.decls, ac.assertions, \a, decl ->
					switch (decl) {
						RuTheorem(name,__,__,__,__,__,__,__): setTree(a, name, RuWithSource(decl, v_src.info.module));
						default: a;
					}
				);
				RuMath(ac with 
					assertions = new_assertions, 
					sources = setTree(ac.sources, v_src.info.module, v_src)
				);
			});
			new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.module));
			ruDoVerifyMath(new_left, new_acc, conf);
		}
	}
}

ruVerifySource(src : RuSource, acc : RuMath, conf : RuConf) -> Maybe<RuSource> {
	start = timestamp();
	correct = ref true;
	decls_acc = fold(src.decls, Pair([], acc), \ac, decl -> 
		switch (decl) {
			RuTheorem(__,__,__,__,__,__,__,__): {
				switch (ruVerifyTheorem(decl, ac.second, conf)) {
					Some(th):
						Pair(
							concat(ac.first, [th]),
							RuMath(ac.second with 
								assertions = setTree(ac.second.assertions, th.name, RuWithSource(th, src.info.module))
							)
						);
					None(): { correct := false; ac }
				}
			}
			default: Pair(concat(ac.first, [decl]), ac.second);
		}
	);
	if (conf.verbose > 1) {
		conf.onMessage("\tru verified: '" + src.info.module + "' in " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
	}
	if (^correct) {
		Some(RuSource(src with decls = decls_acc.first));
	} else {
		None();
	}
}

ruStepRefExp(ref : RuRef, th : RuTheorem) -> RuExp {
	switch (ref) {
		RuHypRef(i,__): th.hyps[i].expr;
		RuStepRef(i,__): th.proof.steps[i].expr;
	}
}

ruMatchStep(step : RuStep, th : RuTheorem, math : RuMath, conf0 : RuConf) -> Maybe<Pair<RuAssertion, Tree<RuVar, RuExp>>> {
	step_ass_mgs = \ ->
		switch (lookupTree(math.assertions, step.assertion)) {
			Some(ass): "\nstep assertion:\n" + ruAssertion2s(ass.item, math.rules);
			None(): "";
		}
	conf = ruAddErr2Conf(conf0, "\nstep match failed, step: " + ru2s(step, math.rules) + step_ass_mgs());
	matchExps = \e1, e2 -> {
		switch (ruMatchExp(e1, e2, math, conf)) {
			Some(v): Some(v);
			None(): {
				conf.onError(
					"expression:\n\t" + ru2s(e1, math.rules) + "\ndo not match with:\n\t" + ru2s(e2, math.rules), 
					[RuPlace(eitherMap(ruNameSource(th.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			}
		}
	}
	joinSubst = \s1, s2 -> {
		switch (ruMergeSubst(s1, s2)) {
			Some(s): Some(s);
			None(): {
				conf.onError(
					"substution:\n" + ruSubst2s(s1, math) + "\ncannot be joined with:\n" + ruSubst2s(s2, math), 
					[RuPlace(eitherMap(ruNameSource(th.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			}
		}
	}
	switch (lookupTree(math.assertions, step.assertion)) {
		Some(ws): {
			ass = ws.item;
			if (length(step.refs) != length(ass.hyps)) {
				conf.onError(
					"number of refs: " + i2s(length(step.refs)) + " mismatch assertion arity: " + i2s(length(ass.hyps)), 
					[RuPlace(eitherMap(ruNameSource(th.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			} else
			maybeMap(
				maybeBind(
					foldi(ass.hyps, Some(makeTree()), \i, ac, h -> {
						switch (ac) {
							None(): None();
							Some(s): 
								if (i >= length(step.refs)) None() else
								maybeBind(
									matchExps(ruStepRefExp(step.refs[i], th), h.expr),
									\x -> joinSubst(s, x)
								);
						}
					}), 
					\s -> maybeBind(
						matchExps(step.expr, ass.prop),
						\x -> joinSubst(s, x)
					)
				),
				\subst -> Pair(ass, subst)
			);
		}
		None(): {
			conf.onError(
				"unknown assertion '" + step.assertion + "'", 
				[RuPlace(eitherMap(ruNameSource(th.name, math), \src -> src.info.module, ""), th.pos)]
			);
			None();
		}
	}
}

ruVerifyTheorem(th : RuTheorem, math : RuMath, conf : RuConf) -> Maybe<RuTheorem> {
	ret = maybeBind(
		fold(th.proof.steps, Some(makeSet()), \acc, step ->
			switch (acc) {
				None(): acc;
				Some(disjs): {
					switch (ruMatchStep(step, th, math, conf)) {
						Some(p): ruComputeTheoremDisjs(p.second, disjs, p.first.disjs, th, math, conf);
						None(): None();
					}
				}
			}
		), 
		\ds -> {
			th_vars = ruAssertion2Vars(th);
			th_ds = filterSet(ds, \d -> containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2));
			pr_ds = filterSet(ds, \d -> !(containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2)));
			if (th.prop.nodes != lastElement(th.proof.steps, ruNoStep).expr.nodes) {
				conf.onError(
					"assertion statement does not coincide with the proved statement", 
					[RuPlace(eitherMap(ruNameSource(th.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			} else {
				Some(RuTheorem(th with 
					disjs = th_ds,
					proof = RuProof(th.proof with disjs = pr_ds)
				));
			}
		}
	)
	if (isNone(ret)) {
		conf.onError(
			"verification of theorem '" + th.name + "' failed\n" + ru2s(th, math.rules),
			[RuPlace(eitherMap(ruNameSource(th.name, math), \src -> src.info.module, ""), th.pos)]
		);
		//quit(0);
	} else if (conf.verbose > 2) {
		conf.onMessage("ru theorem verified: " + th.name);
	}
	ret;
}

ruComputeTheoremDisjs(s : Tree<RuVar, RuExp>, th_disjs : Set<RuDisj>, a_disjs : Set<RuDisj>, th : RuTheorem, math : RuMath, conf : RuConf) -> Maybe<Set<RuDisj>> {
	foldSet(a_disjs, Some(th_disjs), \acc, disj -> 
		maybeBind(acc, \th_dsj -> {
			e1 = lookupTreeDef(s, disj.v1, RuExp([disj.v1], th.pos));
			e2 = lookupTreeDef(s, disj.v2, RuExp([disj.v2], th.pos));
			e1_vars = ruExp2Vars(e1.nodes);
			e2_vars = ruExp2Vars(e2.nodes);
			common_vars = intersectSets(e1_vars, e2_vars);
			if (!isEmptySet(common_vars)) {
				conf.onError(
					"disjointed variables violation, variables: " + disj.v1.name + " and " + disj.v2.name +
					" are mappped onto expressions, with common vars: " + strGlue(map(set2array(common_vars), \v -> v.name), ", "), 
					[RuPlace(eitherMap(ruNameSource(th.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			} else {
				Some(foldSet(e1_vars, th_dsj, \ac, v1 ->
					foldSet(e2_vars, ac, \a, v2 ->
						if (v1.name < v2.name) insertSet(a, RuDisj(v1, v2)) else
						if (v2.name < v1.name) insertSet(a, RuDisj(v2, v1)) else a
					)
				));
			}
		})
	)
}

ruCommVerify(task : RuTask, env : RuEnv) -> RuEnv {
	target0 = lookupTreeDef(task.args, "target", "");
	target = if (!endsWith(target0, ".ru")) target0 else ruTrimPath(target0, env.conf, ".ru");
	math = env.ruMath;
	conf = env.conf;
	m = if (target == "" || target == "all" || target == "1") {
		//ruDebugLog("target: " + target, math.conf);
		either(ruVerifyMath(math, conf), math);
	} else {
		switch (lookupTree(math.assertions, target)) {
			Some(ws): {
				th = ws.item;
				switch (th) {
					RuTheorem(__,__,__,__,__,__,__,__): {
						start = timestamp();
						verified = ruVerifyTheorem(th, math, conf);
						ret = eitherMap(verified, \t -> ruReplaceAssertion(t, math, conf), math);
						if (conf.verbose > 0) {
							if (isSome(verified)) {
								conf.onMessage("theorem '" + target + "' is verified in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
							} else {
								conf.onMessage("theorem '" + target + "' failed verification in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
							}
						}
						ret;
					}
					default: {
						conf.onMessage("assertion '" + target + "' is not a theorem");
						math;
					}
				}
			}
			None(): {
				switch (lookupTree(math.sources, target)) {
					Some(src): {
						start = timestamp();
						switch (ruVerifySource(src, math, conf)) {
							Some(verified): {
								ret = fold(ruSourceTheorems(verified), math, \acc, th -> ruReplaceAssertion(th, acc, conf));
								if (conf.verbose > 0) {
									conf.onMessage("source '" + target + "' is verified in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
								}
								ret;
							}
							None(): {
								if (conf.verbose > 0) {
									conf.onMessage("verification of source '" + target + "' failed in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
								}
								math
							}
						}
					}
					None(): {
						conf.onMessage("verification target '" + target + "' is not found");
						math;
					}
				}
			}
		}
	}
	RuEnv(env with ruMath = m);
}

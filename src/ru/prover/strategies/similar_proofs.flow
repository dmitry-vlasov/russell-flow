import ru/prover/env;
import ru/util/lemma;
import ru/unify/index;
import ru/prover/tactics/follow_proof;

export {
	ruSimilarProofsStrategy(index : RuIndex<RuAssertion>, penv : RuProverEnv) -> RuProverStrategy;
}

ruSimilarProofsStrategy(index : RuIndex<RuAssertion>, penv : RuProverEnv) -> RuProverStrategy {

	// ruMergeAllLemmasIntoProof(proof : RuProof, math : RuMath, env : RuEnv) -> RuProof;
	step_index = fold(ruIndexValues(index), ruMakeIndex(), \acc, ass -> {
		switch (ass) {
			RuTheorem(__,__,__,proof): {
				linear_proof = ruMergeAllLemmasIntoProof(proof, penv.math, penv.env);
				fold(linear_proof.steps, acc, \ac, step -> 
					ruSetIndex(step.expr, RuTheoremStep(ass, step), ac)
				);
			}
			default: acc;
		}
	});


	RuProverStrategy("similar proofs",
		\ -> RuProverTactic("initial in similar proofs",
			\tree -> {
				//similar = ruFindSimilarIndex(node.parent.expr, step_index, math, env, 1000);
				[]
			},
			\tree -> false
		),
		\__ -> Some(RuProverTactic("just a tactic",
			\tree -> {
				foldTree(tree.leafs, [], \__, node, acc -> {
					similar = ruFindSimilarIndex(node.parent.expr, step_index, penv.math, penv.env, ruMakeTaskTimer(1000.0));
					acc;
				});
			},
			\tree -> false
		))
	);
}

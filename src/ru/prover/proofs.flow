import base/util/util;
import ru/prover/env;
import ru/unify/prod;
import ru/verify/math;

export {
	ruAddProof(prop : RuProverProp, hypProof : RuProverProofHyp, prover_env : RuProverEnv) -> void;
	ruBuildPropProofs(prop : RuProverProp, proofs : Vector<RuProverProofProp>, prover_env : RuProverEnv) -> void;
	ruBuildExpProofs(hyp : RuProverExp, proofs : Vector<RuProverProofHyp>, prover_env : RuProverEnv) -> void;
}

ruAddProof(prop : RuProverProp, hypProof : RuProverProofHyp, prover_env : RuProverEnv) -> void {
	if (sizeVector(prop.children) == ruArity(prop.assertion)) {
		prod = CartProd(map(vector2array(prop.children), \hyp ->
			if (hyp == hypProof.node) [hypProof] else vector2array(hyp.proofs)
		));
		size = sizeCartProd(prod);
		unified = if (size == 0) {
			[];
		} else if (size == 1) {
			ruAddProofSingle(prod, prop, prover_env);
		} else if (size < 64) {
			ruAddProofDirect(prod, prop, prover_env);
		} else {
			ruAddProofLarge(prop, hypProof, prover_env);
			/*new_proofs1 = ruAddProofDirect(prod, prop, prover_env);
			direct_time = ruTimePassed(t_direct);
			checked = ruCheckAddProofEquals(new_proofs, new_proofs1, prover_env);
			if (!checked.first) {
				//ruUnifyProdSubs2s(prod : [[RuSubData<?>]], math : RuMath) -> string;
				subs = map(vector2array(prop.children), \hyp ->
					if (hyp == hypProof.node) [RuSubData(hypProof.sub, hypProof)] else 
					map(vector2array(hyp.proofs), \p -> RuSubData(p.sub, p))
				);
				if (checked.second != []) {
					println("ERR HYPS:\n" + 
						strIndent(strGlue(mapi(checked.second, \i, hyp -> 
							"hyp_" + i2s(i) + ":\n" + strIndent(ruSubst2s(hyp.sub, prover_env.math))
						), "\n"))
					);
				}
				debug_unify_subs := true;
				msub = ruUnifySubs(map(checked.second, \hp -> hp.sub), prover_env.math, prover_env.env);
				maybeApply(msub, \sub -> println("ruUnifySubs: SUB:\n" + ruSubst2s(sub, prover_env.math)));
				debug_unify_subs := false;

				println("REPROVING: " + id2s(prover_env.conf.task.info.id) + ", time limit: " + ruTime2s(prover_env.conf.timer.limit) + "\n" +
					"MATRIX:\n" + ruUnifyProdSubs2s(subs, prover_env.math)
				);
				println("ruAddProof: " + id2s(prop.assertion.info.id) + " size=" + i2s(size) + ", added: " + i2s(length(new_proofs)));
				debug_unify_subs_prod := true;
				ruAddProofLarge(prop, hypProof, prover_env);
				fail("ERROR");
			}*/
		}
		new_proofs = filtermap(unified, 
			\unif -> maybeBind(ruCompose(prop.sub, unif.sub), \theta ->
				if (!ruCheckDisjs(theta, prop.assertion.stat.vars.disjs)) None() else {
					Some(RuProverProofProp(prop, theta, unif.data));
				}
			)
		);
		iter(new_proofs, \p -> 
			if (!ruTimeIsOver(prover_env.conf.timer)) {
				pushVector(prop.proofs, p)
			}
		);
	}
}

ruAddProofSingle(prod : CartProd<RuProverProofHyp>, prop : RuProverProp, prover_env : RuProverEnv) -> [RuSubData<[RuProverProofHyp]>] {
	hypProofs = map(prod.sets, \s -> s[0]);
	subs = map(hypProofs, \p -> p.sub);
	eitherMap(
		ruUnifySubs(subs, prover_env.math, prover_env.env),
		\s -> [RuSubData(s, hypProofs)], 
		[]
	);
}

ruAddProofDirect(prod : CartProd<RuProverProofHyp>, prop : RuProverProp, prover_env : RuProverEnv) -> [RuSubData<[RuProverProofHyp]>] {
	filtermapCartProd(prod, \hypProofs -> 
		maybeMap(
			ruUnifySubs(map(hypProofs, \hp -> hp.sub), prover_env.math, prover_env.env),
			\s -> RuSubData(s, hypProofs)
		)
	);
}

ruAddProofLarge(prop : RuProverProp, hypProof : RuProverProofHyp, prover_env : RuProverEnv) -> [RuSubData<[RuProverProofHyp]>] {
	subs_prod = CartProd(map(vector2array(prop.children), \hyp ->
		if (hyp == hypProof.node) [RuSubData(hypProof.sub, hypProof)] else 
		map(vector2array(hyp.proofs), \p -> RuSubData(p.sub, p))
	));
	ruUnifySubsProd(
		subs_prod, prover_env.fns.admitExp, 
		RuTaskTimer(prover_env.conf.timer, ref false), 
		prover_env.math, prover_env.env
	);
}

ruBuildPropProofs(prop : RuProverProp, proofs : Vector<RuProverProofProp>, prover_env : RuProverEnv) -> void {
	parent = prop.parent;
	new_proofs = synchronizedUnaryFn(parent.proofs, \proofs_ : Vector<RuProverProofProp> -> {
		n = sizeVector(parent.proofs);
		iterVector(proofs_, \proof -> 
			pushVector(parent.proofs, 
				RuProverProofExp(
					parent,
					ruApplySubst(parent.expr, proof.sub),
					proof.sub,
					proof
				)
			)
		);
		vectorTailFrom(parent.proofs, n);
	})(proofs);
	switch (parent) {
		RuProverExp(__,__,ex,__,__): 
			ruBuildExpProofs(parent, new_proofs, prover_env);
		RuProverRoot(__,__,__):
			ruBuildRootProofs(parent, new_proofs, prover_env);
	}
}

ruBuildExpProofs(hyp : RuProverExp, proofs : Vector<RuProverProofHyp>, prover_env : RuProverEnv) -> void {
	parent = hyp.parent;
	new_proofs = synchronizedUnaryFn(parent.proofs, \proofs_ : Vector<RuProverProofHyp> -> {
		n = sizeVector(parent.proofs);
		iterVector(proofs, \proof -> ruAddProof(parent, proof, prover_env));
		vectorTailFrom(parent.proofs, n);
	})(proofs);
	ruBuildPropProofs(parent, new_proofs, prover_env);
}

ruBuildRootProofs(root : RuProverRoot, proofs : Vector<RuProverProofHyp>, prover_env : RuProverEnv) -> void {
	iterVector(proofs, \proof_ : RuProverProofHyp -> 
		prover_env.fns.onProof(ruMakeProofTree(proof_))
	);
}

ruCheckAddProofEquals(proofs1 : [RuSubData<[RuProverProofHyp]>], proofs2 : [RuSubData<[RuProverProofHyp]>], env : RuProverEnv) -> Pair<bool, [RuProverProofHyp]> {
	ret = ref true;
	err = ref [];
	if (length(proofs1) != length(proofs2)) {
		env.env.out.onMessage("length(proofs1)=" + i2s(length(proofs1)) + " !=  length(proofs2)=" + i2s(length(proofs2)));
		ret := false;
	}
	iter(proofs1, \proof1 -> {
		switch (find(proofs2, \proof2 -> proof1.data == proof2.data)) {
			Some(proof2): {
				if (ruSubsAreSim(proof1.sub, proof2.sub) == None()) {
					env.env.out.onMessage(
						"Subs differ:\n" + 
							strIndent(ruSubsDiff2s(proof1.sub, proof2.sub, env.math)) + "\n" +
						"sub1:\n" + strIndent(ruSubst2s(proof1.sub, env.math)) + "\n" + 
						"sub2:\n" + strIndent(ruSubst2s(proof2.sub, env.math))
					);
					ret := false;
					err := proof1.data;
				}
			}
			None(): {
				env.env.out.onMessage("is absent(A):\n" + ruRuSubDataRuProverProofHyp2s(proof1, env));
				ret := false;
				err := proof1.data;
			}
		}
	});
	iter(proofs2, \proof2 -> 
		switch (find(proofs1, \proof1 -> proof1.data == proof2.data)) {
			Some(__): { }
			None(): {
				env.env.out.onMessage("is absent (B):\n" + ruRuSubDataRuProverProofHyp2s(proof2, env));
				ret := false;
			}
		}
	);
	Pair(^ret, ^err);
}

ruCheckAddProofContains(proof1 : RuSubData<[RuProverProofHyp]>, proofs2 : [RuSubData<[RuProverProofHyp]>], env : RuProverEnv) -> bool {
	find(proofs2, \proof2 -> ruCheckAddProofAreEqual(proof1, proof2, env)) != None();
}

ruCheckAddProofAreEqual(proof1 : RuSubData<[RuProverProofHyp]>, proof2 : RuSubData<[RuProverProofHyp]>, env : RuProverEnv) -> bool {
	proof1 == proof2;
}

ruRuSubDataRuProverProofHyp2s(sub_data: RuSubData<[RuProverProofHyp]>, env : RuProverEnv) -> string {
	"data:\n" + 
		strIndent(superglue(sub_data.data, \hyp -> 
			ruProofTree2s(ruMakeProofTree(hyp), env.math), "\n"
		)) +
	"sub:\n" + 
		strIndent(ruSubst2s(sub_data.sub, env.math));
}

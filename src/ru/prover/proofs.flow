import ru/prover/env;
import ru/unify/prod;
import ru/verify/math;

export {
	ruAddProof(prop : RuProverProp, hypProof : RuProverProofHyp, prover_env : RuProverEnv) -> void;
	ruBuildPropProofs(prop : RuProverProp, proofs : [RuProverProofProp], prover_env : RuProverEnv) -> void;

	max_cplx = ref 0;
	max_cplx_subs : ref [Tree<RuVar, RuExp>] = ref [];
	max_cplx_expr : ref RuExp = ref ruNoExp;
}

ruCheckTests(test1 : Tree<[RuProverProofHyp], RuProverProofProp>, test2 : Tree<[RuProverProofHyp], RuProverProofProp>) -> bool {
	ret = ref true;
	traverseInOrder(test1, \k1, p1 -> {
		switch (lookupTree(test2, k1)) {
			None(): ret := false;
			Some(p2): {
				switch (ruSubsAreSim(p1.sub, p2.sub)) {
					Some(__): { }
					None(): ret := false;
				}
			}
		}
	});
	^ret;
}

ruAddProof(prop : RuProverProp, hypProof : RuProverProofHyp, prover_env : RuProverEnv) -> void {
	if (length(^(prop.children)) == ruArity(prop.assertion)) {
	
		prod = CartProd(map(^(prop.children), \hyp ->
			if (hyp == hypProof.node) [hypProof] else ^(hyp.proofs)
		));
		size = sizeCartProd(prod);
		new_proofs = if (size < 1024) {
			t = ruMakeTimer();
			new_proofs = ruAddProof1(prop, hypProof, prover_env);
			if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				stats = RuStatsRow("prod " + ruProd2s(prod), 
					pairs2tree([
						Pair("size", i2d(size)), 
						Pair("time", ruTimePassed(t)), 
						Pair("rets", i2d(length(new_proofs)))
					])
				);
				ruAddStats("add_proof", stats);
				ruAddStats("add_proof_prod", stats);
			}
			new_proofs;
		} else {
			t = ruMakeTimer();
			new_proofs = ruAddProof2(prop, hypProof, prover_env);
			if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				stats = RuStatsRow("tree " + ruProd2s(prod), 
					pairs2tree([
						Pair("size", i2d(size)), 
						Pair("time", ruTimePassed(t)), 
						Pair("rets", i2d(length(new_proofs)))
					])
				);
				ruAddStats("add_proof", stats);
				ruAddStats("add_proof_tree", stats);
			}
			new_proofs;
		}
		iter(new_proofs, \p -> 
			if (!ruTimeIsOver(prover_env.timer)) {
				refArrayPush(prop.proofs, p)
			}
		);
		/*
		if (size <= 100000) {
		k = ruLogN(size, 10);
			max_k := max(^max_k, k);
			max_size := max(^max_size, size);
		
			t1 = ruTime();
			proofs1 = ruAddProof1(prop, hypProof, prover_env);
			time1 = ruTime() - t1;
			setConcurrentHashMap(prod_times, k, getConcurrentHashMap(prod_times, k, 0.0) + time1);

			t2 = ruTime();
			proofs2 = ruAddProof2(prop, hypProof, prover_env);
			time2 = ruTime() - t2;
			setConcurrentHashMap(tree_times, k, getConcurrentHashMap(tree_times, k, 0.0) + time2);

			test1 = values2tree(proofs1, \p -> p.children);
			test2 = values2tree(proofs2, \p -> p.children);
			if (proofs1 != [] && (!ruCheckTests(test1, test2) || !ruCheckTests(test2, test1))) {
				conf.onMessage("proofs differ:\n");
				conf.onMessage("proofs1:");
				iteri(proofs1, \i, pr -> conf.onMessage(i2s(i) + "\n" + ruIndent(ruSubst2s(pr.sub, prover_env.math))));
				conf.onMessage("proofs2:");
				iteri(proofs2, \i, pr -> conf.onMessage(i2s(i) + "\n" + ruIndent(ruSubst2s(pr.sub, prover_env.math))));
				
				conf.onMessage("matrix:");
				subs = map(^(prop.children), \hyp ->
					if (hyp == hypProof.node) [RuSubData(hypProof.sub, hypProof)] else 
					map(^(hyp.proofs), \p -> RuSubData(p.sub, p))
				);
				conf.onMessage(ruSubsMatrix2s(ruMakeSubsMatrix(subs), prover_env.math));
				debugUnifySubsProd := true;
				ruAddProof2(prop, hypProof, prover_env);
				quit(-1);
			}
			iter(proofs1, \p -> refArrayPush(prop.proofs, p));
		}*/
	}
}

ruAddProof2(prop : RuProverProp, hypProof : RuProverProofHyp, prover_env : RuProverEnv) -> [RuProverProofProp] {
	subs = map(^(prop.children), \hyp ->
		if (hyp == hypProof.node) [RuSubData(hypProof.sub, hypProof)] else 
		map(^(hyp.proofs), \p -> RuSubData(p.sub, p))
	);
	filtermap(ruUnifySubsProd(subs, prover_env.fns.admitExp, prover_env.timer, prover_env.math, prover_env.env), \unif ->
		maybeBind(ruCompose(prop.sub, unif.sub), \theta ->
			if (!ruCheckDisjs(theta, prop.assertion.stat.vars.disjs)) None() else {
				Some(RuProverProofProp(prop, theta, unif.data));
			}
		)
	);
}

ruAddProof1(prop : RuProverProp, hypProof : RuProverProofHyp, prover_env : RuProverEnv) -> [RuProverProofProp] {
	prod = CartProd(map(^(prop.children), \hyp ->
		if (hyp == hypProof.node) [hypProof] else ^(hyp.proofs)
	));
	if (sizeCartProd(prod) == 0) [] else
	if (sizeCartProd(prod) == 1) { 
		hypProofs = map(prod.sets, \s -> s[0]);
		subs = map(hypProofs, \p -> p.sub);
		cplx = fold(subs, 0, \acc, sub -> acc + ruSubComplexity(sub));
		t = ruMakeTimer();
		rets = eitherMap(ruUnifySubs(subs, prover_env.math, prover_env.env),
			\s -> eitherMap(ruCompose(prop.sub, s), 
				\theta -> if (!ruCheckDisjs(theta, prop.assertion.stat.vars.disjs)) [] else [RuProverProofProp(prop, theta, hypProofs)],
				[]
			), []
		);
		if (cplx > ^max_cplx && length(rets) > 0) {
			max_cplx := cplx;
			max_cplx_subs := subs;
			max_cplx_expr := ruApplySubst(prop.parent.expr, rets[0].sub);
		}
		if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				stats = RuStatsRow("prop " + id2s(prop.assertion.info.id), 
					pairs2tree([
						Pair("size", i2d(sizeCartProd(prod))), 
						Pair("time", ruTimePassed(t)), 
						Pair("rets", i2d(length(rets))),
						Pair("cplx", i2d(cplx))
					])
				);
				ruAddStats("ruAddProof0", stats);
			}
		rets;
	} else {
		if (sizeCartProd(prod) > 100000) {
			prover_env.env.out.onMessage("ruSizeCart(prod)=" + i2s(sizeCartProd(prod)));
			[]
		} else {
			t = ruMakeTimer();
			rets = filtermapCartProd(prod, \hypProofs -> 
				maybeBind(ruUnifySubs(map(hypProofs, \hp -> hp.sub), prover_env.math, prover_env.env),
					\s ->
						maybeBind(ruCompose(prop.sub, s), \theta ->
							if (!ruCheckDisjs(theta, prop.assertion.stat.vars.disjs)) None() else {
								Some(RuProverProofProp(prop, theta, hypProofs))
							} 
						)
				)
			);
			if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				stats = RuStatsRow("prop " + id2s(prop.assertion.info.id), 
					pairs2tree([
						Pair("size", i2d(sizeCartProd(prod))), 
						Pair("time", ruTimePassed(t)), 
						Pair("rets", i2d(length(rets)))
					])
				);
				ruAddStats("ruAddProof1", stats);
			}
			rets
		}
	}
}


ruBuildPropProofs(prop : RuProverProp, proofs : [RuProverProofProp], prover_env : RuProverEnv) -> void {
	parent = prop.parent;
	new_proofs = synchronizedUnaryFn(parent.proofs, \proofs_ : [RuProverProofProp] -> {
		n = length(^(parent.proofs));
		iter(proofs_, \proof -> 
			refArrayPush(parent.proofs, 
				RuProverProofExp(
					parent,
					ruApplySubst(parent.expr, proof.sub),
					proof.sub,
					proof
				)
			)
		);
		tailFrom(^(parent.proofs), n);
	})(proofs);
	switch (parent) {
		RuProverExp(__,__,ex,__,__): 
			ruBuildExpProofs(parent, new_proofs, prover_env);
		RuProverRoot(__,__,__):
			ruBuildRootProofs(parent, new_proofs, prover_env);
	}
}

ruBuildExpProofs(hyp : RuProverExp, proofs : [RuProverProofHyp], prover_env : RuProverEnv) -> void {
	parent = hyp.parent;
	new_proofs = synchronizedUnaryFn(parent.proofs, \proofs_ : [RuProverProofHyp] -> {
		n = length(^(parent.proofs));
		//t = ruMakeTimer();
		iter(proofs, \proof -> ruAddProof(parent, proof, prover_env));
		/*if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
			stats = RuStatsRow("hyp " + ru2s(ex, prover_env.math), 
				pairs2tree([
					Pair("size", i2d(length(proofs))), 
					Pair("time", ruTimePassed(t)), 
					Pair("rets", i2d(length(tailFrom(^(parent.proofs), n))))
				])
			);
			ruAddStats("ruBuildHypProofs", stats);
		}*/
		tailFrom(^(parent.proofs), n);
	})(proofs);
	ruBuildPropProofs(parent, new_proofs, prover_env);
}

ruBuildRootProofs(root : RuProverRoot, proofs : [RuProverProofHyp], prover_env : RuProverEnv) -> void {
	iter(proofs, \proof_ : RuProverProofHyp -> {
		//steps = map(ruMakeLinearProof(ruMakeProofTree(root)), \step -> RuStep(step with expr = prover_env.unconst(step.expr)));
		//prover_env.onProof(steps);
		prover_env.fns.onProof(ruMakeProofTree(proof_));
	});
}

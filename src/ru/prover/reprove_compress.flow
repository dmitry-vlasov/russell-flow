import ds/vector;
import base/util/progress;
import ru/prover/prove;
import ru/prover/stats;
import ru/map_decls;
import comm;

export {
	ruCommReproveCompress : RuComm;
}

ruCommReproveCompress = RuComm(
	RuCommInfo(
		"reprove-compress", "prover", "reprove theorems and squash proof fragments, which may be proved automatically", "target", true, false, 
		[
			RuCommArg("target", true, "the target: a theorem, file or all", "all"),
		], []
	),
	ruRunReproveCompress
);

ruReproveCompressTheorem(
	th : RuTheorem, 
	index : RuIndex<RuAssertion>, 
	time_limit : double,
	args : Tree<string, string>,
	math : RuMath, 
	conf : RuConf,
	env : RuEnv
) -> RuTheorem {
	if (time_limit <= 0.0 || length(th.proof.steps) == 1) th else {
		timer = ruMakeTimer();
		reduced = ruReproveReduceProof(0, th, index, time_limit, args, math, conf, env);
		if (reduced == th) th else {
			ruReproveCompressTheorem(reduced, index, time_limit - ruTimePassed(timer), args, math, conf, env);
		}
	}
}

ruReproveReduceProof(
	step_ind : int,
	th : RuTheorem, 
	index : RuIndex<RuAssertion>, 
	time_limit : double,
	args : Tree<string, string>,
	math : RuMath, 
	conf : RuConf,
	env : RuEnv
) -> RuTheorem {
	if (step_ind + 1 == length(th.proof.steps) || time_limit <= 0.0) th else {
		timer = ruMakeTimer();
		reduced = ruRemoveStepFromTheorem(th, step_ind);
		if (conf.verbose > 3) {
			env.out.onMessage(strIndent("Going to remove " + i2s(step_ind + 1) + " step: " + ru2s(th.proof.steps[step_ind], math)));
		}
		proved = ruReproveReduced(
			step_ind, Some(reduced), index, 
			time_limit / i2d(length(th.proof.steps)), 
			args, math, conf, env
		);
		switch (proved) {
			Some(ret): {
				if (conf.verbose > 3) {
					env.out.onMessage(strIndent("Step " + i2s(step_ind + 1) + " may be skipped - is reprovable"));
				}
				ret;
			}
			None(): {
				if (conf.verbose > 3) {
					env.out.onMessage(strIndent("Step " + i2s(step_ind + 1) + " CAN't be skipped - is NOT reprovable"));
				}
				ruReproveReduceProof(step_ind + 1, th, index, time_limit - ruTimePassed(timer), args, math, conf, env);
			}
		}
	}
}

ruReindexTheoremSteps(th : RuTheorem) -> RuTheorem {
	RuTheorem(th with proof = RuProof(th.proof with 
		steps = mapi(th.proof.steps, \i, step -> RuStep(step with ind = i))
	))
}

ruRemoveStepFromTheorem(th : RuTheorem, ind : int) -> RuTheorem {
	removed = RuTheorem(th with proof = ruRemoveStepFromProof(th.proof, ind));
	ruReindexTheoremSteps(removed);
}

ruRemoveStepFromProof(proof : RuProof, ind : int) -> RuProof {
	removed_steps = removeIndex(proof.steps, ind);
	RuProof(proof with steps = map(removed_steps, \step ->
		if (step.ind < ind) step else {
			if (exists(step.refs, \rf -> switch (rf) { RuHypRef(__): false; RuStepRef(i): i == ind; })) {
				RuStep(step with refs = [], assertion = ruStepProblem, proof = ruNoProof);
			} else {
				reindexed_refs = map(step.refs, \rf -> 
					switch (rf) {
						RuHypRef(__): rf;
						RuStepRef(i): if (i < ind) rf else RuStepRef(i - 1);
					}
				);
				if (reindexed_refs == step.refs) step else
				RuStep(step with refs = reindexed_refs);
			}
		}
	));
}

ruSetTheoremStep(th : RuTheorem, step : RuStep) {
	RuTheorem(th with proof = RuProof(th.proof with steps = replace(th.proof.steps, step.ind, step)));
}

ruReproveReduced(
	step_ind : int,
	mth : Maybe<RuTheorem>,
	index : RuIndex<RuAssertion>, 
	time_limit : double,
	args : Tree<string, string>,
	math : RuMath, 
	conf : RuConf,
	env : RuEnv
) -> Maybe<RuTheorem> {
	maybeBind(mth, \th -> {
		if (step_ind == length(th.proof.steps)) Some(th) else {
			step = th.proof.steps[step_ind];
			if (step.assertion != ruStepProblem) {
				ruReproveReduced(step_ind + 1, mth, index, time_limit, args, math, conf, env);
			} else {
				max_depth = s2i(lookupTreeDef(args, "max-depth", "3"));
				max_size = s2i(lookupTreeDef(args, "max-size", "4096"));
				timer = ruMakeTimer();
				task = RuProverTask(th.info, ruMakeDefaultStrategy(),
					"trying to prove " + i2s(step_ind + 1) + " step of\n" + strIndent(ru2s(th, math)), args,
					concat(th.stat.hyps, subrange(th.proof.steps, 0, step_ind)),
					step
				);
				if (env.conf.verbose > 4) {
					env.out.onMessage(strIndent(strIndent(task.header)));
				}
				penv0 = ruInitProver(task, math, env, index, time_limit / i2d(length(th.proof.steps) - step_ind));
				penv1 = RuProverEnv(penv0 with
					tactic = ref RuProverTactic("breadth-first",
						\tree -> getTreeValues(tree.leafs),
						\tree -> length(^(tree.proofs)) > 0 || ruProverTreeDepth(tree) > max_depth || ruProverTreeSize(tree) > max_size
					),
				);
				penv2 = ruProve(penv1);
				proofs = ^(penv2.tree.proofs);
				if (length(proofs) > 0) {
					proof = fold(tail(proofs), proofs[0], \acc, proof -> 
						if (length(proof.steps) < length(acc.steps)) proof else acc
					);
					proved_step = if (length(proof.steps) == 1) {
						proof.steps[0];
					} else {
						RuStep(step with 
							assertion = ruStepLemma,
							proof = proofs[0]
						);
					}
					proved = ruSetTheoremStep(th, proved_step);
					if (env.conf.verbose > 4) {
						env.out.onMessage(strIndent(strIndent("Proved:\n" + strIndent(ru2s(proved, math)))));
					}
					Some(proved)
				} else {
					if (env.conf.verbose > 4) {
						// ruShowProverTreePath(tree : RuProverTree, path : [string], math : RuMath)
						env.out.onMessage(strIndent(strIndent(
							"failed to prove, PVT depth: " + i2s(ruProverTreeDepth(penv2.tree)) + ", " +
							"PVT size: " + i2s(ruProverTreeSize(penv2.tree)) + "\n" +
							"BRNCH:\n" +
							ruShowProverTreePath(penv2.tree, ["ax-mp", "0", "df-bi"], penv2.math) + "\n" + 
							ruShowProverTreePath(penv2.tree, ["ax-mp", "1", "simprim"], penv2.math) + "\n"
						)));
					}
					None();
				}
			}
		}
	});
}

ruRunReproveCompress(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	target = ruDetermineTarget(unit.task, math, env);
	if (target != RuTargetNone()) {
		compressed_count = ref 0;
		processed_count = ref 0;
		failed_theorems = ref [];
		inc_compressed = ruAtomicIntInc(compressed_count);
		inc_processed = ruAtomicIntInc(processed_count);
		th_fail = ruAtomicRefArrayPush(failed_theorems);
		all_imported = ruSourcesAllImported(math.sources, env);
		index = ruMakeIndexForTarget(target, math, env);
		reprove_fn = \decl, time_limit, env1 -> {
			th = cast(decl : RuDecl -> RuTheorem);
			th_timer = ruMakeTimer();
			percent = \compressed -> 100 * length(compressed.proof.steps) / length(th.proof.steps);
			inc_processed(1);
			if (conf.verbose > 2) {
				env.out.onMessage("Going to compress " + i2s(^processed_count) + " theorem '" + id2s(th.info.id) + ", time limit: " + ruTime2s(time_limit) + "' ... ");
				if (conf.verbose > 3) {
					env.out.onMessage(strIndent(ru2s(th, math)));
				}
			}
			compressed = ruReproveCompressTheorem(th, index, time_limit, task.args, math, conf, env1);
			if (th != compressed) {
				inc_compressed(1);
			}
			if (conf.verbose > 1) {
				if (th == compressed) {
					env.out.onMessage(i2s(^processed_count) + " theorem '" + id2s(th.info.id) + "' was NOT COMPRESSED in " + ruTimePassed2s(th_timer));
					//fail("OUT............!!");
				} else {
					env.out.onMessage(i2s(^processed_count) + " theorem '" + id2s(th.info.id) + "' was COMPRESSED in " + ruTimePassed2s(th_timer) + 
						" compressed: " + i2s(length(compressed.proof.steps)) + " = " + i2s(percent(compressed)) + 
						" of original " + i2s(length(th.proof.steps))
					);
					if (conf.verbose > 2) {
						env.out.onMessage("Compressed:\n" + ru2s(compressed, math));
						if (conf.verbose > 3) {
							env.out.onMessage("Original:\n" + ru2s(th, math));
						}
					}
				}
			}
			RuMappedDecl(compressed, false, th != compressed);
		}
		new_state = ruMapFnComm(
			RuUnit(unit.task, state, env.out),
			RuMapFn(
				RuMapFnInfo(
					"reprove-compress", 
					\decl -> ruTargetPredicate(target)(decl) && ruDeclIsTheorem(decl), 
					ruProofLengthMeasure, 
					\ -> "compressed: " + i2s(^compressed_count) + " theorems, failed: " + strGlue(map(^failed_theorems, id2s), ", ")
				),
				reprove_fn
			)
		);
		if (ruVerbose(env.conf) > 0) {
			env.out.onMessage("compressed: " + i2s(^compressed_count) + " theorems");
		}
		if (length(^failed_theorems) > 0) {
			if (length(^failed_theorems) < 10) {
				env.out.onMessage("Failed to compressed theorems: " + strGlue(map(^failed_theorems, id2s), ", "));
			} else {
				env.out.onMessage("Failed to compressed theorems:\n" + strIndent(strGlue(map(^failed_theorems, id2s), "\n")));
			}
		}
		Some(RuState(new_state with 
			vars = mergeTree(new_state.vars, pairs2tree([
				Pair("reprove-compress.failed-count", ValInt(length(^failed_theorems))),
				Pair("reprove-compress.failed-theorems", ValArray(map(^failed_theorems, \id -> ValString(id2s(id))))),
				Pair("reprove-compress.compressed-count", ValInt(^compressed_count))
			]));
		));
	} else {
		env.out.onMessage("no target for proof compression");
		Some(state);
	}
}

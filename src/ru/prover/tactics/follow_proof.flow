import ru/prover/controls;

export {
	ruFollowProofTactic(proof : RuProofStep) -> RuProverTactic;
}

ruFollowProofTactic(proof : RuProofStep) -> RuProverTactic {
	mapping : ref Tree<RuProverProp, RuProofStep> = ref makeTree();
	//leafs : ref [Pair<RuProverProp, RuProofStep>] = ref [];
	//queue : ref [Pair<RuProverProp, RuProofStep>] = ref [];
	proof_leafs = ref [proof];
	expand = \tree -> {
		foldTree(tree.leafs, [], \acc, node_leaf -> {
			switch (findi(^proof_leafs, \n -> n.assertion == node_leaf.assertion)) {
				Some(i): {
					proof_leaf = ^proof_leafs[i];
					proof_leafs := removeIndex(^proof_leafs, i);
					
				}
				None(): acc;
			}
		});
		if (length(^queue) == 0) {
			if (sizeTree(^mapping) == 0) {
				traverseInOrder(tree.leafs, \__, n -> 
					if (length(^queue) == 0) {
						switch (n.parent) {
							RuProverRoot(__,__,__):
								if (n.assertion.info.id == proof.assertion) {
									refArrayPush(queue, Pair(n, proof));
								} 
							default: {	}
						}
					}
				);
			} else if (length(^leafs) > 0) {
				first_leaf = ^leafs[0];
				n = first_leaf.first;
				s = first_leaf.second;
				leafs := removeIndex(^leafs, 0);
				iteriVector(n.children, \i, child -> {
					if (length(s.children) <= i) {
						ruCrash("length(s.children) <= i: " + i2s(length(s.children)) + " <= " + i2s(i) + "\n" +
							"s.assertion.info.id: " + id2s(s.assertion) + "\n" +
							"n:\n" + strIndent(ruProverNode2s(n, math)));
					} else {
						step_child = s.children[i];
						switch (step_child) {
							RuProofStep(assertion,__,__) : {
								iterVector(child.children, \grand ->
									if (grand.assertion.info.id == assertion) {
										refArrayPush(queue, Pair(grand, step_child));
									}
								);
							}
							default: { }
						}
					}
				});
			} else { }
		}
	}
	RuProverTactic("follow proof ", expand, \__->false);
}

ruReproveOracleTactic(
	proof : RuProofStep, math : RuMath, mapping : ref Tree<RuProverProp, RuProofStep>, 
	max_true_nodes : int, max_false_nodes : int, env : RuEnv
) -> RuProverTactic {
	proof = ruMakeTreeProof(theorem, math);
	leafs : ref [Pair<RuProverProp, RuProofStep>] = ref [];
	queue : ref [Pair<RuProverProp, RuProofStep>] = ref [];
	expand = \tree -> {
		if (length(^queue) == 0) {
			if (sizeTree(^mapping) == 0) {
				traverseInOrder(tree.leafs, \__, n -> 
					if (length(^queue) == 0) {
						switch (n.parent) {
							RuProverRoot(__,__,__):
								if (n.assertion.info.id == proof.assertion) {
									refArrayPush(queue, Pair(n, proof));
								} 
							default: {	}
						}
					}
				);
			} else if (length(^leafs) > 0) {
				first_leaf = ^leafs[0];
				n = first_leaf.first;
				s = first_leaf.second;
				leafs := removeIndex(^leafs, 0);
				iteriVector(n.children, \i, child -> {
					if (length(s.children) <= i) {
						ruCrash("length(s.children) <= i: " + i2s(length(s.children)) + " <= " + i2s(i) + "\n" +
							"s.assertion.info.id: " + id2s(s.assertion) + "\n" +
							"n:\n" + strIndent(ruProverNode2s(n, math)));
					} else {
						step_child = s.children[i];
						switch (step_child) {
							RuProofStep(assertion,__,__) : {
								iterVector(child.children, \grand ->
									if (grand.assertion.info.id == assertion) {
										refArrayPush(queue, Pair(grand, step_child));
									}
								);
							}
							default: { }
						}
					}
				});
			} else { }
		}
		if (length(^queue) > 0) {
			out = take(^queue, max_true_nodes);
			queue := removeRange(^queue, 0, max_true_nodes);
			true_nodes = map(out, \x -> {
				n = x.first;
				s = x.second;
				if (exists(s.children, \ch -> switch (ch) { RuProofStep(__,__,__): true; default: false; })) {
					refArrayPush(leafs, Pair(n, s));
				}
				mapping := setTree(^mapping, n, s);
				n
			});
			curr_leafs = filter(getTreeValues(tree.leafs), \prop -> forall(out, \x -> prop != x.first));
			false_nodes = take(curr_leafs, max_false_nodes);
			iter(out, \x -> {
				i = findiDef(^queue, \s -> s.first == x.first, -1);
				if (i != -1) {
					queue := removeIndex(^queue, i);
				}
			});
			concat(true_nodes, false_nodes);


			//first_queue = ^queue[0];
			/*n = first_queue.first;
			s = first_queue.second;
			queue := removeIndex(^queue, 0);
			if (exists(s.children, \ch -> switch (ch) { RuProofStep(__,__,__): true; default: false; })) {
				refArrayPush(leafs, Pair(n, s));
			}
			mapping := setTree(^mapping, n, s);
			if (max_nodes <= 1) {
				[n];
			} else {
				curr_leafs = filter(getTreeValues(tree.leafs), \prop -> prop != n);
				concat([n], take(curr_leafs, max_nodes - 1));
			}*/


			/*first_queue = ^queue[0];
			n = first_queue.first;
			s = first_queue.second;
			queue := removeIndex(^queue, 0);
			if (exists(s.children, \ch -> switch (ch) { RuProofStep(__,__,__): true; default: false; })) {
				refArrayPush(leafs, Pair(n, s));
			}
			mapping := setTree(^mapping, n, s);
			if (max_nodes <= 1) {
				[n];
			} else {
				curr_leafs = filter(getTreeValues(tree.leafs), \prop -> prop != n);
				concat([n], take(curr_leafs, max_nodes - 1));
			}*/
		} else {
			[];
		}
	}
	RuProverTactic("follow proof ", expand, \__->false);
}

ruReproveOracleUnifyPremise(
	th : RuTheorem, 
	unify : (RuProverHyp) -> [RuUnified<RuPremise>], 
	mapping : ref Tree<RuProverProp, RuProofStep>, 
	math : RuMath, 
	env : RuEnv,
	max_proofs : int,
	max_true_nodes : int,
	max_false_nodes : int,
) -> (RuProverHyp) -> [RuUnified<RuPremise>] {
	if (lookupTreeDef(env.conf.opts, "reprove-singleton", "") == "1") {
		\hyp : RuProverHyp ->  {
			unif = unify(hyp);
			switch (hyp) {
				RuProverExp(i, __,__,__, parent): {
					switch (lookupTree(^mapping, parent)) {
						Some(step): {
							switch (step.children[i]) {
								RuProofStep(__,__,__): [];
								RuProofHyp(ind,__): {
									p1 = filter(unif, \un -> un.data.ind == ind);
									if (max_proofs <= 1) p1 else {
										concat(p1, take(unif, max_proofs - 1));
									}
								}
							}
						}
						None(): {
							if (max_true_nodes <= 1 && max_false_nodes == 0) {
								ruCrash("must not happen");
							}
							[];
						}
					}
				}
				RuProverRoot(__,__,__): unif;
			}
		}
	} else unify;
}

ruReproveOracleUnifyAssertion(
	unify : (RuProverHyp) -> [RuUnified<RuAssertion>], 
	mapping : ref Tree<RuProverProp, RuProofStep>, 
	root : RuAssertion,
	math : RuMath, 
	env : RuEnv,
	max_variants : int,
	max_true_nodes : int,
	max_false_nodes : int,
) -> (RuProverHyp) -> [RuUnified<RuAssertion>] {
	if (lookupTreeDef(env.conf.opts, "reprove-singleton", "") == "1") {
		\hyp : RuProverHyp ->  {
			switch (hyp) {
				RuProverExp(i, __,__,__, parent): {
					switch (lookupTree(^mapping, parent)) {
						Some(step): {
							switch (step.children[i]) {
								RuProofStep(ass, children, expr): {
									e1 = hyp.expr;
									assertion = lookupTreeDef(math.decls.assertions, ass, ruNoAxiom);
									e2 = assertion.stat.prop;
									v1 = eitherMap(
										ruUnifyExps([e1, e2], ruEmptySubst, math, env),
										\sub -> [RuUnified(sub, assertion, ruApplySubst(e1, sub))], []
									);
									if (max_variants <= 1) v1 else {
										v2 = unify(hyp);
										concat(v1, take(v2, max_variants - 1));
									}
								}
								RuProofHyp(h,__): [];
							}
						}
						None(): {
							if (max_true_nodes <= 1 && max_false_nodes == 0) {
								ruCrash("must not happen");
							}
							[];
						}
					}
				}
				RuProverRoot(__,e1,__): {
					e2 = root.stat.prop;
					eitherMap(
						ruUnifyExps([e1, e2], ruEmptySubst, math, env),
						\sub -> [RuUnified(sub, root, ruApplySubst(e1, sub))], []
					);
				}
			}
		}
	} else {
		unify;
	}
}

ruReproveOracleTheorem(
	th : RuTheorem, 
	args : Tree<string, string>,
	index : RuIndex<RuAssertion>, 
	time_limit : double, 
	max_proofs : int,
	max_variants : int, 
	max_true_nodes : int,
	max_false_nodes : int,
	math : RuMath, 
	env : RuEnv
) -> bool {
	timer = ruMakeTimer();
	mapping = ref makeTree();
	root = lookupTreeDef(math.decls.assertions, ruProofQedStep(th.proof).assertion, ruNoAxiom);
	prover_task = RuProverTask(th.info, ruMakeDefaultStrategy(), id2s(th.info.id), args, th.stat.hyps, ruProofQedStep(th.proof));
	prover_env0 = ruInitProverEnv(prover_task, math, env, index, time_limit);
	prover_env1 = RuProverEnv(prover_env0 with
		tactic = ref ruReproveOracleTactic(th, math, mapping, max_true_nodes, max_false_nodes, env),
		fns = RuProverFuncs(prover_env0.fns with
			unifyAssertion = ruReproveOracleUnifyAssertion(
				prover_env0.fns.unifyAssertion, mapping, root, math, env, max_variants, max_true_nodes, max_false_nodes
			),
			unifyPremise = ruReproveOracleUnifyPremise(
				th, prover_env0.fns.unifyPremise, mapping, math, env, max_proofs, max_true_nodes, max_false_nodes
			),
			/*onProof = \proof_tree -> {
				env.out.onMessage(ruProverTree2s(prover_env0.tree.root, prover_env0.math));
				prover_env0.fns.onProof(proof_tree);
			}*/
		)
	);
	prover_env2 = ruExpandHyp(prover_env1.tree.root, prover_env1);
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		init_stats = RuStatsRow("reprove init " + id2s(th.info.id), 
			pairs2tree([
				Pair("size", i2d(length(th.proof.steps))), 
				Pair("time", ruTimePassed(timer))
			])
		);
		ruAddStats("reprove_init", init_stats);
	}
	t = ruMakeTimer();
	prover_env3 = ruProve(prover_env2);
	//prover_env3.env.out.onMessage("<<<! PROVING FINISHED !>>>");
	prove_time = ruTimePassed(t);
	tm = ruTimePassed(timer);
	time = tm / 1000.0;
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		reprove_stats = RuStatsRow("reprove do " + id2s(th.info.id), 
			pairs2tree([
				//Pair("depth", i2d(lookupTreeDef(depths, th.info.id, -1))),
				Pair("size", i2d(ruSizeProverTree(prover_env2.tree.root))),
				Pair("proof-size", i2d(length(th.proof.steps))), 
				Pair("proof-vol", i2d(fold(th.proof.steps, 0, \acc, step -> acc + length(step.expr.nodes)))), 
				Pair("time", prove_time),
				Pair("time-per-step", prove_time / i2d(length(th.proof.steps)))
			])
		);
		ruAddStats("reprove_time", reprove_stats);
		stats = RuStatsRow("reproved all " + id2s(th.info.id), 
			pairs2tree([
				Pair("size", i2d(ruSizeProverTree(prover_env2.tree.root))), 
				Pair("time", tm)
			])
		);
		ruAddStats("reprove_all", stats);
	}
	ret1 = length(^(prover_env3.tree.proofs)) > 0;
	ret2 = length(^(prover_env3.tree.proofs)) > 0;
	if (ret1 != ret2) {
		prover_env3.env.out.onMessage("ret1 != ret2");
	}
	ret2;
}

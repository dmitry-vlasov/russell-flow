import ru/prover/controls;

export {
	ruFollowProofTactic(proof : RuProofStep) -> RuProverTactic;
}

ruFollowProofTactic(proof : RuProofStep) -> RuProverTactic {
	mapping : ref Tree<RuProverProp, RuProofStep> = ref makeTree();
	initialized = ref false;
	RuProverTactic("follow proof ", 
		\tree -> {
			if (!^initialized) {
				traverseInOrder(tree.leafs, \__,node ->
					if (node.assertion.info.id == proof.assertion) {
						mapping := setTree(^mapping, node, proof);
					}
				);
				initialized := true;
			}
			foldTree(tree.leafs, [], \__, node, acc -> 
				switch (lookupTree(^mapping, node)) {
					Some(__): {
						concat(acc, [node]);
					}
					None(): {
						switch (node.parent) {
							RuProverExp(ind,__,__,__,grand): {
								switch (lookupTree(^mapping, grand)) {
									Some(p): {
										child = p.children[ind];
										switch (child) {
											RuProofStep(__,__,__): {
												mapping := setTree(^mapping, node, child);
											}
											RuProofHyp(__,__): { }
										}
									}
									None(): { }
								}
							}
							RuProverRoot(__,__,__): { }
						}
						acc;
					}
				}
			);
		}, 
		\__ -> false
	);
}

import ru/util/src;

export {
    RuAssertionUsage(
        assertion : int,
        contexts : [RuUsageContext]
    );

    RuUsageContext(
		sign : bool, // positive or negative
        premises : [RuPremise],
        goal : RuExp
    );

    ruMergeLearningData(acc : Tree<int, RuAssertionUsage>, tree : Tree<int, RuAssertionUsage>) -> Tree<int, RuAssertionUsage>;
	ruAddLearningData(acc : Tree<int, RuAssertionUsage>, usage : RuAssertionUsage) -> Tree<int, RuAssertionUsage>;
	ruAddLearningContext(acc : Tree<int, RuAssertionUsage>, assertion : int, context : RuUsageContext) -> Tree<int, RuAssertionUsage>;

	ruUsageContext2s(context : RuUsageContext, math : RuMath) -> string;
	ruAssertionUsage2s(usage : RuAssertionUsage, math : RuMath, full : bool) -> string;
}

ruMergeLearningData(acc : Tree<int, RuAssertionUsage>, tree : Tree<int, RuAssertionUsage>) -> Tree<int, RuAssertionUsage> {
    foldTree(tree, acc, \__, usage, ac -> ruAddLearningData(ac, usage));
}

ruAddLearningData(acc : Tree<int, RuAssertionUsage>, usage : RuAssertionUsage) -> Tree<int, RuAssertionUsage> {
	new_data = switch (lookupTree(acc, usage.assertion)) {
		Some(data): RuAssertionUsage(data with 
			contexts = concat(data.contexts, usage.contexts)
		);
		None(): usage;
	}
	setTree(acc, usage.assertion, new_data);
}

ruAddLearningContext(acc : Tree<int, RuAssertionUsage>, assertion : int, context : RuUsageContext) -> Tree<int, RuAssertionUsage> {
	new_data = switch (lookupTree(acc, assertion)) {
		Some(data): RuAssertionUsage(data with
			contexts = concat(data.contexts, [context])
		);
		None(): RuAssertionUsage(assertion, [context]);
	}
	setTree(acc, assertion, new_data);
}

ruUsageContext2s(context : RuUsageContext, math : RuMath) -> string {
	(if (context.sign) "(+)" else "(-)") + " context\n" +
	"goal:\n" + "\t" +  ru2s(context.goal, math) + "\n"
	"premises:\n" + strGlue(map(context.premises, \p -> "\t" + ru2s(p.expr, math)), "\n");
	//+ "----------------------\n";
}

ruAssertionUsage2s(usage : RuAssertionUsage, math : RuMath, full : bool) -> string {
	positive = filter(usage.contexts, \ctx -> ctx.sign);
	negative = filter(usage.contexts, \ctx -> !ctx.sign);
	negative_cut = take(negative, max(length(positive), 3));
	"Assertion '" + id2s(usage.assertion) + "' usage, Positives = " + i2s(length(positive)) + ", Negatives = " + i2s(length(negative)) + 
	(if (length(positive) == 0) "" else
		"\nPositives:\n" + concatStrings(map(positive, \pos -> strIndent(ruUsageContext2s(pos, math)) + "\n"))
	)+
	(if (!full || length(negative_cut) == 0) "" else 
		"\nNegatives:\n" + concatStrings(map(negative_cut, \pos -> strIndent(ruUsageContext2s(pos, math)) + "\n"))
	);
}


import ru/src;

export {
    RuAssertionUsage(
        assertion : int,
        positive : [RuUsageContext],
        negative : [RuUsageContext]
    );

    RuUsageContext(
        premises : [RuPremise],
        goal : RuExp
    );

    ruMergeLearningData(acc : Tree<int, RuAssertionUsage>, tree : Tree<int, RuAssertionUsage>) -> Tree<int, RuAssertionUsage>;
}

ruMergeLearningData(acc : Tree<int, RuAssertionUsage>, tree : Tree<int, RuAssertionUsage>) -> Tree<int, RuAssertionUsage> {
    foldTree(tree, acc, \id, usage, ac -> {
        new_data = switch (lookupTree(ac, id)) {
            Some(data): RuAssertionUsage(data with 
                positive = concat(data.positive, usage.positive),
                negative = concat(data.negative, usage.negative)
            );
            None(): usage;
        }
        setTree(ac, id, new_data);
    });
}

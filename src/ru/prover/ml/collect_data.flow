import ru/prover/ml/learning_data;
import ds/vector;
import base/util/progress;
import ru/prover/prove;
import ru/prover/stats;
import ru/map_decls;

export {
    ruRunCollectLearningData(unit : RuUnit) -> Maybe<RuState>;
    ruCommCollectLearningData : RuComm;
}

ruCommCollectLearningData = RuComm(
	RuCommInfo(
		"collect-learning-data", "prover", "collect data for machine learning", "target", true, false, 
		[
			RuCommArg("target", true, "the target: a theorem, file or all", "all"),
		], []
	),
	ruRunCollectLearningData
);

ruRunCollectLearningData(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	target = ruDetermineTarget(unit.task, math, env);
	if (target != RuTargetNone()) {
		collected_count = ref 0;
		failed_theorems = ref [];
		inc_collected = ruAtomicIntInc(collected_count);
		th_fail = ruAtomicRefArrayPush(failed_theorems);
		all_imported = ruSourcesAllImported(math.sources, env);
		index = ruMakeIndexForTarget(target, math, env);
        collected_map = initConcurrentHashMap();
		collect_learning_data_fn = \decl, time_limit, env1 -> {
			th = cast(decl : RuDecl -> RuTheorem);
			if (ruTheoremIsProved(th)) {
				if (ruVerbose(env1.conf) > 2) {
					env1.out.onMessage(i2s(^collected_count) + ": going to collect_learning_data theorem '" + id2s(th.info.id) + "' ... ");
				}
				th_timer = ruMakeTimer();
                th_collected = ruCollectLearningDataFromTheorem(th, index, ruTaskArgs2Tree(task.args), time_limit, math, env, conf);
				inc_collected(1);
                setConcurrentHashMap(collected_map, th.info.id, th_collected);
            }
            RuMappedDecl(true, false, decl);
		}
        collected = fold(keysConcurrentHashMap(collected_map), makeTree(), \acc, id -> {
            data = getConcurrentHashMap(collected_map, id, makeTree());
            ruMergeLearningData(acc, data);
        });
		//print ln("Learning data:\n" + ruLearningData2s(collected, ))
		new_state = ruMapFnComm(
			RuUnit(unit.task, state, env.out),
			RuMapFn(
				RuMapFnInfo(
					"collect-learning-data", 
					\decl -> ruTargetPredicate(target)(decl) && ruDeclIsTheorem(decl), 
					ruProofLengthMeasure, 
					//\ -> "collected: " + i2s(^collected_count) + " theorems, failed: " + strGlue(map(^failed_theorems, id2s), ", ")
					\ -> "collected: " + i2s(^collected_count) + " theorems"
				),
				collect_learning_data_fn
			)
		);
		if (ruVerbose(env.conf) > 0) {
			env.out.onMessage("collected: " + i2s(^collected_count) + " theorems");
		}
		if (length(^failed_theorems) > 0) {
			if (length(^failed_theorems) < 10) {
				env.out.onMessage("Failed to collect learning data from theorems: " + strGlue(map(^failed_theorems, id2s), ", "));
			} else {
				env.out.onMessage("Failed to collect_learning_data theorems:\n" + strIndent(strGlue(map(^failed_theorems, id2s), "\n")));
			}
		}
		Some(RuState(new_state with 
			vars = setTree(new_state.vars, "collect-learning-data", pairs2tree([
				Pair("failed-count", flow(length(^failed_theorems))),
				Pair("failed-theorems", flow(map(^failed_theorems, id2s))),
				Pair("collected-count", flow(^collected_count))
			]));
		));
	} else {
		env.out.onMessage("no target for proof reproving with oracle");
		Some(state);
	}
}

ruCollectLearningDataFromTheorem(
    th : RuTheorem, index : RuIndex<RuAssertion>, args : Tree<string, string>,
    time_limit : double, math : RuMath, env : RuEnv, conf : RuConf
) -> Tree<int, RuAssertionUsage> {

    mapping = ref makeTree();
	root = lookupTreeDef(math.decls.assertions, ruProofQedStep(th.proof).assertion, ruNoAxiom);
	proof = ruTheoremProofTree(th, math);
	premises = th.stat.hyps;
    initialized = ref false;
	collected = ref makeTree();
	tactic = RuProverTactic("collect-learning-data", 
		\tree -> {
			if (!^initialized) {
				traverseInOrder(tree.leafs, \__,node ->
					if (node.assertion.info.id == proof.assertion) {
						collected := ruAddLearningContext(
							^collected, 
							node.assertion.info.id, 
							RuUsageContext(true, premises, node.parent.expr)
						);
						mapping := setTree(^mapping, node, proof);
					} else {
						collected := ruAddLearningContext(
							^collected, 
							node.assertion.info.id, 
							RuUsageContext(false, premises, node.parent.expr)
						);
					}
				);
				initialized := true;
			}
			ret = foldTree(tree.leafs, [], \__, node, acc -> 
				switch (lookupTree(^mapping, node)) {
					Some(__): {
						// positive context
						/*collected := ruAddLearningContext(
							^collected, 
							node.assertion.info.id, 
							RuUsageContext(true, premises, node.parent.expr)
						);*/
						concat(acc, [node]);
					}
					None(): {
						// negative context
						switch (node.parent) {
							RuProverExp(ind,__,expr,__,grand): {
								switch (lookupTree(^mapping, grand)) {
									Some(p): {
										child = p.children[ind];
										switch (child) {
											RuProofStep(__,__,__): {
												collected := ruAddLearningContext(
													^collected, 
													node.assertion.info.id, 
													RuUsageContext(true, premises, expr)
												);
												mapping := setTree(^mapping, node, child);
											}
											RuProofHyp(__,__): { 
												//print ln("<<!! NEG(A) !!>>: " + id2s(node.assertion.info.id));
												collected := ruAddLearningContext(
													^collected, 
													node.assertion.info.id, 
													RuUsageContext(false, premises, node.parent.expr)
												);
											}
										}
									}
									None(): {
										//print ln("<<!! NEG(B) !!>>: " + id2s(node.assertion.info.id));
										collected := ruAddLearningContext(
											^collected, 
											node.assertion.info.id, 
											RuUsageContext(false, premises, node.parent.expr)
										);
									}
								}
							}
							RuProverRoot(__,__,__): { }
						}
						acc;
					}
				}
			);
			//print ln("TO EXPAND: " + strGlue(map(ret, \n -> i2s(n.id) + "=" + id2s(n.assertion.info.id)), ", "));
			ret;
		}, 
		\__ -> false
	);

    prover_task = RuProverTask(th.info, ruSingleTacticStrategy(tactic), id2s(th.info.id), args, premises, ruProofQedStep(th.proof));
	penv0 = ruInitProverEnv(prover_task, math, env, index, time_limit);
	penv1 = RuProverEnv(penv0 with
		fns = RuProverFuncs(penv0.fns with
			unifyPremise = \__ -> [],
		)
	);
	penv2 = ruExpandHyp(penv1.tree.root, penv1);
	t = ruMakeTimer();
	penv3 = ruProve(penv2);
	//prover_env3.env.out.onMessage("<<<! PROVING FINISHED !>>>");
	prove_time = ruTimePassed(t);

	usages = getTreeValues(^collected);
	iter(usages, \usage -> env.out.onMessage(ruAssertionUsage2s(usage, penv3.math, true)));
	//print ln("TREE:\n" + ruProverTree2s(penv3.tree.root, penv3.math));

    ^collected;
}

ruLearningData2s(data : Tree<int, RuAssertionUsage>, math : RuMath) -> string {
	list = foldTree(data, makeList(), \id, usage, acc ->
		Cons(ruAssertionUsage2s(usage, math, true), acc)
	);
	concatStrings(list2array(list));
}

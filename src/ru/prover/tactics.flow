import ru/prover/env;

export {
	ruConcatTactics(tactics : [RuProverTactic]) -> RuProverTactic;
	ruQueueTactics(tactics : [RuProverTactic]) -> RuProverTactic;
	ruInterruptTactic(tactic : RuProverTactic) -> RuProverTactic;
}

ruConcatTactics(tactics : [RuProverTactic]) -> RuProverTactic {
	RuProverTactic(
		"concat[" + strGlue(map(tactics, \t -> t.description), ",") + "]",
		\env -> iter(tactics, \t -> t.before(env)),
		\tree -> concatA(map(tactics, \t -> t.expand(tree))),
		\env -> iter(tactics, \t -> t.after(env)),
		\env -> forall(tactics, \t -> t.finish(env))
	);
}

ruQueueTactics(tactics : [RuProverTactic]) -> RuProverTactic {
	if (length(tactics) == 0) {
		RuProverTactic("", nop1, \__->[], nop1, \__-> true);
	} else {
		i = ref 0;
		RuProverTactic(
			"queue[" + strGlue(map(tactics, \t -> t.description), ",") + "]",
			\env -> tactics[^i].before(env),
			\tree -> tactics[^i].expand(tree),
			\env -> tactics[^i].after(env),
			\env -> {
				if (!tactics[^i].finish(env)) false else {
					i := ^i + 1;
					^i == length(tactics);
				}
			}
		);
	}
}

ruInterruptTactic(tactic : RuProverTactic) -> RuProverTactic {
	curr = ref tactic;
	RuProverTactic(
		"interrupt(" + tactic.description + ")",
		\env -> curr := ^(env.tactic),
		tactic.expand,
		\env -> env.tactic := ^curr,
		\env -> true
	)
}
import ru/subst;

export {

	RuProofNode ::= RuProofStep, RuProofHyp;
	RuProofStep(assertion : RuAssertion, children : [RuProofNode], expr : RuExp);
	RuProofHyp(hyp : RuHyp, expr : RuExp);

	ruMakeLinearProof(proof : RuProofNode) -> [RuStep];
	ruMakeProofNode(proof : RuProverProof) -> RuProofNode;
	ruMakeTreeProof(theorem : RuTheorem, math : RuMath) -> RuProofStep;
	ruProofNode2s(node : RuProofNode, math : RuMath) -> string;
	ruProofNodeHyps(node : RuProofNode) -> Set<RuProofHyp>;
	ruUpdateProofNodeHyps(node : RuProofNode, update : Tree<RuHyp, RuHyp>) -> RuProofNode;

	RuProverProof ::= RuProverProofHyp, RuProverProofProp;
	RuProverProofHyp ::= RuProverProofTop, RuProverProofExp;
		RuProverProofTop(
			node : RuProverHyp,
			expr  : RuExp,
			hyp  : RuHyp, 
			sub  : Tree<RuVar, RuExp>,
		);
		RuProverProofExp(
			node : RuProverHyp,
			expr  : RuExp, 
			sub   : Tree<RuVar, RuExp>,
			child : RuProverProofProp,
		);
		RuProverProofProp(
			node      : RuProverProp,
			sub       : Tree<RuVar, RuExp>,
			children  : [RuProverProofHyp],
		);

	RuProverNode ::= RuProverHyp, RuProverProp;
	RuProverHyp ::= RuProverExp, RuProverRoot;
		RuProverProp(
			id        : int,
			assertion : RuAssertion,
			proofs    : ref [RuProverProofProp],
			sub       : Tree<RuVar, RuExp>,
			outer     : Tree<RuVar, RuExp>,
			children  : ref [RuProverExp],
			parent    : RuProverHyp,
		);
		RuProverExp(
			ind      : int,
			proofs   : ref [RuProverProofHyp],
			expr     : RuExp,
			children : ref [RuProverProp],
			parent   : RuProverProp,
		);
		RuProverRoot(
			proofs   : ref [RuProverProofHyp],
			expr     : RuExp,
			children : ref [RuProverProp]
		);

	RuProverTree(
		leafs : Tree<int, RuProverProp>,
		root  : RuProverRoot
	);

	ruProverNode2s(node : RuProverNode, math : RuMath) -> string;
	ruProverTree2s(node : RuProverNode, math : RuMath) -> string;
	ruSizeProverTree(node : RuProverNode) -> int;

	ruNoProverHyp = RuProverRoot(ref [], ruNoExp, ref []);
	ruNoProverProp = RuProverProp(-1, ruNoAxiom, ref [], makeTree(), makeTree(), ref [], ruNoProverHyp);
}

ruSizeProverTree(node : RuProverNode) -> int {
	1 + switch (node) {
		RuProverProp(__,__,__,__,__, children,__): fold(^children, 0, \ac, ch -> ac + ruSizeProverTree(ch));
		RuProverExp(__,__,__, children,__): fold(^children, 0, \ac, ch -> ac + ruSizeProverTree(ch));
		RuProverRoot(__,__, children): fold(^children, 0, \ac, ch -> ac + ruSizeProverTree(ch));
	}
}

ruApplySubst2ProofNode(s : Tree<RuVar, RuExp>, n : RuProofNode) {
	switch (n) {
		RuProofStep(ass, children, ex):
			RuProofStep(
				ass, 
				map(children, \ch -> ruApplySubst2ProofNode(s, ch)), 
				ruApplySubst(ex, s)
			);
		RuProofHyp(h, ex): 
			RuProofHyp(h, ruApplySubst(ex, s));
	}
}

ruMakeProofNode(proof : RuProverProof) -> RuProofNode {
	switch (proof) {
		RuProverProofTop(node, expr, hyp, sub): RuProofHyp(hyp, expr);
		RuProverProofExp(node, expr, sub, child): ruMakeProofNode(child);
		RuProverProofProp(node, sub, children):
			ruApplySubst2ProofNode(sub, 
				RuProofStep(
					node.assertion, 
					map(children, ruMakeProofNode),
					node.parent.expr
				)
			);
	}
}

RuLienarProofAcc(
	steps : Tree<RuExp, int>,
	linear : [RuStep]
);

ruMakeLinearProof(proof : RuProofNode) -> [RuStep] {
	ruDoMakeLinearProof(proof, RuLienarProofAcc(makeTree(), [])).linear;
}

ruDoMakeLinearProof(proof : RuProofNode, acc : RuLienarProofAcc) -> RuLienarProofAcc {
	switch (proof) {
		RuProofHyp(hyp, expr): acc;
		RuProofStep(ass, children, expr): {
			acc1 = fold(children, acc, \ac, ch -> ruDoMakeLinearProof(ch, ac));
			switch (lookupTree(acc1.steps, expr)) {
				Some(__): acc1;
				None(): {
					ind = length(acc1.linear);
					refs = map(children, \ch -> 
						switch (ch) {
							RuProofHyp(h, __): RuHypRef(h.ind, -1);
							RuProofStep(__, __, ex): RuStepRef(lookupTreeDef(acc1.steps, ex, -1), -1);
						}
					);
					RuLienarProofAcc(
						setTree(acc1.steps, expr, ind),
						concat(acc1.linear, [RuStep(ind, ass.descr.name, ass.descr.id, refs, expr, -1)])
					);
				}
			}
		}
	}
}

ruMakeTreeProof(theorem : RuTheorem, math : RuMath) -> RuProofStep {
	ruDoMakeTreeProof(theorem.proof.steps, theorem.stat.hyps, math, length(theorem.proof.steps) - 1)
}

ruDoMakeTreeProof(steps : [RuStep], hyps : [RuHyp], math : RuMath, i : int) -> RuProofStep {
	step = steps[i];
	RuProofStep(
		lookupTreeDef(math.assertions, step.assertion, ruNoAxiom),
		map(step.refs, \ref -> 
			switch (ref) {
				RuStepRef(j, __): ruDoMakeTreeProof(steps, hyps, math, j);
				RuHypRef(j, __): RuProofHyp(hyps[j], hyps[j].expr);
			}
		),
		step.expr
	)
}

ruProofNodeHyps(node : RuProofNode) -> Set<RuProofHyp> {
	ruDoProofNodeHyps(node, makeSet());	
}

ruDoProofNodeHyps(node : RuProofNode, acc : Set<RuProofHyp>) -> Set<RuProofHyp> {
	switch (node) {
		RuProofHyp(__,__): insertSet(acc, node);
		RuProofStep(__, children, __): {
			fold(children, acc, \ac, ch -> ruDoProofNodeHyps(ch, ac))
		}
	}
}

ruUpdateProofNodeHyps(node : RuProofNode, update : Tree<RuHyp, RuHyp>) -> RuProofNode {
	switch (node) {
		RuProofHyp(hyp,__): 
			RuProofHyp(node with hyp = lookupTreeDef(update, hyp, hyp));
		RuProofStep(__, children, __):
			RuProofStep(node with children = map(children, \ch -> ruUpdateProofNodeHyps(ch, update)));
	}
}

ruProverNode2s(node : RuProverNode, math : RuMath) -> string {
	switch (node) {
		RuProverProp(ind, ass, proofs, sub, outer, children, parent):
			"Prop<ass=" + ass.descr.name + ", proofs_num=" + i2s(length(^proofs)) + ", children num:" + i2s(length(^children)) + ">" + 
			(if (length(^proofs) == 0) "" else
				"\n" + ruIndent(strGlue(map(^proofs, \p -> ruProofNode2s(ruMakeProofNode(p), math)), "\n"))
			);
		RuProverExp(ind, proofs, expr, children, parent):
			"Hyp<expr=" + ru2s(expr, math.rules) + ", proofs_num=" + i2s(length(^proofs)) + ", children num:" + i2s(length(^children)) + ">" + 
			(if (length(^proofs) == 0) "" else
				"\n" + ruIndent(strGlue(map(^proofs, \p -> ruProofNode2s(ruMakeProofNode(p), math)), "\n"))
			);
		RuProverRoot(proofs, expr, children):
			"Root<expr=" + ru2s(expr, math.rules) + ", proofs_num=" + i2s(length(^proofs)) + ", children num:" + i2s(length(^children)) + ">" + 
			(if (length(^proofs) == 0) "" else
				"\n" + ruIndent(strGlue(map(^proofs, \p -> ruProofNode2s(ruMakeProofNode(p), math)), "\n"))
			);
	}
}

ruProverTree2s(node : RuProverNode, math : RuMath) -> string {
	ruProverNode2s(node, math) + 
	(if (length(^(node.children)) == 0) "" else 
	"\n" + ruIndent(strGlue(map(^(node.children), \ch -> ruProverTree2s(ch, math)), "\n")))
}

ruProofNode2s(node : RuProofNode, math : RuMath) -> string {
	switch (node) {
		RuProofStep(__,__,__): strGlue(map(ruMakeLinearProof(node), \step -> ru2s(step, math.rules)), "\n");
		RuProofHyp(hyp, expr): "<proof hyp " + i2s(hyp.ind) + ", expr=" + ru2s(expr, math.rules) + ">";
	}
}

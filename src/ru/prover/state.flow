import ru/prover/env;

export {

	RuStepInProof(
		proof : RuProof,
		step : RuStep
	);

	RuStepInTheorem(
		theorem : RuTheorem,
		path : [RuStepInProof]
	);

	RuProverState(
		step : RuStepInTheorem,
		env : RuProverEnv
	);

	//ruSetProverStateTactic(state : RuProverState, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverState;

	ruStepPath2s(step_path : RuStepInTheorem) -> string;
	ruStepPathPremises(step_path : RuStepInTheorem) -> [RuPremise];
	ruStepInTheorem(path : [RuPositioned]) -> Maybe<RuStepInTheorem>;
}

//ruSetProverStateTactic(state : RuProverState, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverState {
//	RuProverState(state with env = ruSetProverEnvTactic(state.env, tactic));
//}

ruStepPath2s(step_path : RuStepInTheorem) -> string {
	"theorem " + id2s(step_path.theorem.info.id) + "; " +
	superglue(step_path.path, \sp -> i2s(sp.step.ind), ", ");
}

ruStepInTheorem(path : [RuPositioned]) -> Maybe<RuStepInTheorem> {
	if (length(path) < 3) None() else {
		theorem = path[0];
		switch (theorem) {
			RuTheorem(__,__,__,__): {
				proof_steps = tail(path);
				pair = unzipi(proof_steps, \i,__ -> i % 2 == 0);
				if (length(pair.first) != length(pair.second)) None() else {
					proofs = filtermap(pair.first, \proof -> switch (proof) {
						RuProof(__,__,__): Some(proof);
						default: None();
					});
					steps = filtermap(pair.second, \step -> switch (step) {
						RuStep(__,__,__,__,__,__): Some(step);
						default: None();
					});
					if (length(proofs) != length(pair.first) || 
						length(steps) != length(pair.second)) None() else {
						if (length(proofs) != length(steps)) None() else {
							Some(RuStepInTheorem(
								theorem, 
								zipWith(proofs, steps, \proof, step -> RuStepInProof(proof, step))
							));
						}
					}
				}
			}
			default: None();
		}
	}
}

ruStepPathPremises(step_path : RuStepInTheorem) -> [RuPremise] {
	concat(step_path.theorem.stat.hyps, 
		concatA(map(step_path.path, \ps ->
			take(ps.proof.steps, ps.step.ind))
		)
	);
}

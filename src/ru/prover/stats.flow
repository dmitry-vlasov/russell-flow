import base/planner;
import ru/prover/prove;

export {
	ruCommandExpressionLenStats(math : RuMath, env : RuEnv) -> void;
	ruCommandReproveAllStats(math : RuMath, env : RuEnv) -> void;
	ruCommandProofsStats(math : RuMath, env : RuEnv) -> void;
	ruCommandReproveTimeStats(math : RuMath, env : RuEnv) -> void;
	ruCommandTheoremDepthStats(math : RuMath, env : RuEnv) -> void;
}

ruCommandExpressionLenStats(math : RuMath, env : RuEnv) -> void {
	traverseInOrder(ruDeclsTheorems(math.decls), \__, th ->
		iter(th.proof.steps, \step : RuStep ->
			ruAddStats("expr_lens", RuStatsRow(
					ru2s(step.expr, math), 
					pairs2tree([Pair("size", i2d(length(step.expr.nodes))), Pair("count", 1.0)])
				)
			)
		)
	);
	env.out.onMessage("<< expression lens stats >>");
	env.out.onMessage("distrib lens: ");
	env.out.onMessage(strIndent(ruShowStats("expr_lens", ruDistribLinSumStats("size", "count", 10))));
	env.out.onMessage("max size:   " + ruShowStats("expr_lens", ruMaxStats("size")));
	env.out.onMessage("avg size:   " + ruShowStats("expr_lens", ruAvgStats("size")));
	env.out.onMessage("sigma size: " + ruShowStats("expr_lens", ruSigmaStats("size")));
	env.out.onMessage("");
}

ruCommandProofsStats(math : RuMath, env : RuEnv) -> void {
	traverseInOrder(ruDeclsTheorems(math.decls), \__, th ->
		ruAddStats("proof_stats", RuStatsRow(
				id2s(th.info.id), 
				pairs2tree([
					Pair("size", i2d(length(th.proof.steps))), 
					Pair("vol", i2d(fold(th.proof.steps, 0, \acc, step ->
						acc + length(step.expr.nodes)
					))),
					Pair("count", 1.0)
				])
			)
		)
	);
	env.out.onMessage("<< proof stats >>");
	env.out.onMessage("distrib proofs size: ");
	env.out.onMessage(strIndent(ruShowStats("proof_stats", ruDistribLogSumStats("size", "count", 2))));
	env.out.onMessage("");
	env.out.onMessage("distrib proofs vol: ");
	env.out.onMessage(strIndent(ruShowStats("proof_stats", ruDistribLogSumStats("vol", "count", 2))));
	env.out.onMessage("");
	env.out.onMessage("distrib proofs (size - vol): ");
	env.out.onMessage(strIndent(ruShowStats("proof_stats", ruDistribLogSumStats("size", "vol", 10))));
	env.out.onMessage("");
	env.out.onMessage("distrib proofs (vol - size): ");
	env.out.onMessage(strIndent(ruShowStats("proof_stats", ruDistribLogSumStats("vol", "size", 10))));
	env.out.onMessage("");
	env.out.onMessage("num size:   " + ruShowStats("proof_stats", ruNumStats()));
	env.out.onMessage("max size:   " + ruShowStats("proof_stats", ruMaxStats("size")));
	env.out.onMessage("avg size:   " + ruShowStats("proof_stats", ruAvgStats("size")));
	env.out.onMessage("sigma size: " + ruShowStats("proof_stats", ruSigmaStats("size")));
	env.out.onMessage("");
	env.out.onMessage("num vol:   " + ruShowStats("proof_stats", ruNumStats()));
	env.out.onMessage("max vol:   " + ruShowStats("proof_stats", ruMaxStats("vol")));
	env.out.onMessage("avg vol:   " + ruShowStats("proof_stats", ruAvgStats("vol")));
	env.out.onMessage("sigma vol: " + ruShowStats("proof_stats", ruSigmaStats("vol")));
	env.out.onMessage("");
}

ruCommandReproveTimeStats(math : RuMath, env : RuEnv) -> void {
	env.out.onMessage("<< reprove time >>");
	env.out.onMessage("do reprove distrib size - time sum: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_time", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("do reprove distrib proof-size - time avg: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_time", ruDistribLogAvgStats("proof-size", "time", 2))));
	env.out.onMessage("do reprove distrib proof-vol - time avg: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_time", ruDistribLogAvgStats("proof-vol", "time", 2))));
	env.out.onMessage("do reprove distrib size - time avg: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_time", ruDistribLogAvgStats("size", "time", 2))));
	env.out.onMessage("do reprove distrib depth - time avg: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_time", ruDistribLogAvgStats("depth", "time", 2))));
	env.out.onMessage("do reprove distrib depth - time per step avg: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_time", ruDistribLogAvgStats("depth", "time-per-step", 2))));
	env.out.onMessage("sum do reprove: " + ruShowStats("reprove_time", ruSumStats("time")));
	env.out.onMessage("max size: " + ruShowStats("reprove_time", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("reprove_time", ruMaxStats("time")));
	env.out.onMessage("avg time: " + ruShowStats("reprove_time", ruAvgStats("time")));
	env.out.onMessage("avg time-per-step: " + ruShowStats("reprove_time", ruAvgStats("time-per-step")));
	env.out.onMessage("max time-per-step: " + ruShowStats("reprove_time", ruMaxStats("time-per-step")));
	env.out.onMessage("sig time-per-step: " + ruShowStats("reprove_time", ruSigmaStats("time-per-step")));
	env.out.onMessage("");

	/*proc_data = \data, app -> {
		app1 = ruEnhanceApprox(RuApproxStats(data), app);
		discr1 = ruApproxDiscrepancy(RuApproxStats(data), app1);
		env.out.onMessage("on data size: " + i2s(sizeTree(data)) + ", approx: " + ruApprox2s(app1) + ", discrepancy: " + d2s(discr1));
		app1
	}
	
	
	data1 = ruMapStats("reprove_time", \row -> 
		Pair(lookupTreeDef(row.data, "proof-size", 0.0), lookupTreeDef(row.data, "time", 0.0))
	);
	time_stats_1 = pairs2tree(data1);
	
	data2 = ruMapStats("reprove_time", \row -> 
		Pair(lookupTreeDef(row.data, "proof-vol", 0.0), lookupTreeDef(row.data, "time", 0.0))
	);
	time_stats_2 = pairs2tree(data2);
	
	data1_string = strGlue(map(data1, \p -> d2s(p.first) + "\t" + d2s(p.second)), "\n");
	setFileContent("data1.csv", data1_string);
	data2_string = strGlue(map(data2, \p -> d2s(p.first) + "\t" + d2s(p.second)), "\n");
	setFileContent("data2.csv", data2_string);
	data3_string = strGlue(mapi(data1, \i, p -> d2s(p.first) + "\t" + d2s(p.second) + "\t" + i2s(i)), "\n");
	setFileContent("data3.csv", data3_string);
	
	//ruEnhanceApprox(stats : RuApproxStats, approx : RuApprox) -> RuApprox
	//approx_1 = ruEnhanceApprox(RuApproxStats(time_stats_1), RuApprox(map(enumFromTo(1, 3), \__ -> 0.0)));
	//discr_1 = ruApproxDiscrepancy(RuApproxStats(time_stats_1), approx_1);
	//env.out.onMessage("Approx1: " + ruApprox2s(approx_1) + ", discrepancy: " + d2s(discr_1));
	approx_1 = proc_data(pairs2tree(take(data1, 100)), RuApprox(map(enumFromTo(1, 3), \__ -> 0.0)));
	approx_2 = proc_data(pairs2tree(take(data1, 1000)), approx_1);
	approx_3 = proc_data(pairs2tree(take(data1, 3000)), approx_2);
	//ruEnhanceApprox(stats : RuApproxStats, approx : RuApprox) -> RuApprox;
	
	//approx_2 = ruEnhanceApprox(RuApproxStats(time_stats_2), RuApprox(map(enumFromTo(1, 3), \__ -> 0.0)));
	//discr_2 = ruApproxDiscrepancy(RuApproxStats(time_stats_2), approx_2);
	//env.out.onMessage("Approx2: " + ruApprox2s(approx_2) + ", discrepancy: " + d2s(discr_2));
	*/

}

ruCommandReproveAllStats(math : RuMath, env : RuEnv) -> void {
	env.out.onMessage("<< reprove all >>");
	env.out.onMessage("complete reprove distrib: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_all", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("sum reprove all time: " + ruShowStats("reprove_all", ruSumStats("time")));
	env.out.onMessage("max size: " + ruShowStats("reprove_all", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("reprove_all", ruMaxStats("time")));
	env.out.onMessage("");
/*
	env.out.onMessage("<< reprove init >>");
	env.out.onMessage("reprove init distrib: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_init", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("sum init time: " + ruShowStats("reprove_init", ruSumStats("time")));
	env.out.onMessage("max size: " + ruShowStats("reprove_init", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("reprove_init", ruMaxStats("time")));
	env.out.onMessage("");

	env.out.onMessage("<< unify_assertion >>");
	env.out.onMessage(strIndent(ruShowStats("unify_assertion", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("sum unify_assertion time: " + ruShowStats("unify_assertion", ruSumStats("time")));
	env.out.onMessage("max size: " + ruShowStats("unify_assertion", ruMaxStats("size")));
	env.out.onMessage("max rets: " + ruShowStats("unify_assertion", ruMaxStats("rets")));
	env.out.onMessage("max time: " + ruShowStats("unify_assertion", ruMaxStats("time")));
	env.out.onMessage("");

	env.out.onMessage("<< unify_premise >>");
	env.out.onMessage(strIndent(ruShowStats("unify_premise", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("sum unify_premise time: " + ruShowStats("unify_premise", ruSumStats("time")));
	env.out.onMessage("max size: " + ruShowStats("unify_premise", ruMaxStats("size")));
	env.out.onMessage("max rets: " + ruShowStats("unify_premise", ruMaxStats("rets")));
	env.out.onMessage("max time: " + ruShowStats("unify_premise", ruMaxStats("time")));
	env.out.onMessage("");

	env.out.onMessage("<< ruExpandProp >>");
	env.out.onMessage(strIndent(ruShowStats("ruExpandProp", ruDistribLogSumStats("time", "count", 2))));
	env.out.onMessage("sum ruExpandProp time: " + ruShowStats("ruExpandProp", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruExpandProp", ruMaxStats("time")));
	env.out.onMessage("");
	
	env.out.onMessage("<< choice >>");
	env.out.onMessage(strIndent(ruShowStats("choice", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("sum choice time: " + ruShowStats("choice", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("choice", ruMaxStats("time")));
	env.out.onMessage("max size: " + ruShowStats("choice", ruMaxStats("size")));
	env.out.onMessage("");

	env.out.onMessage("<< ruExpandHyp >>");
	env.out.onMessage(strIndent(ruShowStats("ruExpandHyp", ruDistribLogSumStats("time", "count", 2))));
	env.out.onMessage("sum ruExpandHyp time: " + ruShowStats("ruExpandHyp", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruExpandHyp", ruMaxStats("time")));
	env.out.onMessage("");

	env.out.onMessage("<< removeFirst >>");
	env.out.onMessage(strIndent(ruShowStats("removeFirst", ruDistribLogSumStats("time", "count", 2))));
	env.out.onMessage("sum removeFirst time: " + ruShowStats("removeFirst", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("removeFirst", ruMaxStats("time")));
	env.out.onMessage("");
	*/
	/*
	env.out.onMessage("<< add_unified >>");
	env.out.onMessage(strIndent(ruShowStats("add_unified", ruDistribLogSumStats("time", "count", 2))));
	env.out.onMessage(strIndent(ruShowStats("add_unified", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("sum add_unified count: " + ruShowStats("add_unified", ruSumStats("count")));
	env.out.onMessage("sum add_unified time: " + ruShowStats("add_unified", ruSumStats("time")));
	env.out.onMessage("sum add_unified time2: " + ruShowStats("add_unified", ruSumStats("time2")));
	env.out.onMessage("sum add_unified time3: " + ruShowStats("add_unified", ruSumStats("time3")));
	env.out.onMessage("sum add_unified time4: " + ruShowStats("add_unified", ruSumStats("time4")));
	env.out.onMessage("sum add_unified time5: " + ruShowStats("add_unified", ruSumStats("time5")));
	env.out.onMessage("sum add_unified time6: " + ruShowStats("add_unified", ruSumStats("time6")));
	env.out.onMessage("max time: " + ruShowStats("add_unified", ruMaxStats("time")));
	env.out.onMessage("max time2: " + ruShowStats("add_unified", ruMaxStats("time2")));
	env.out.onMessage("max time3: " + ruShowStats("add_unified", ruMaxStats("time3")));
	env.out.onMessage("max time4: " + ruShowStats("add_unified", ruMaxStats("time4")));		
	env.out.onMessage("max time5: " + ruShowStats("add_unified", ruMaxStats("time5")));
	env.out.onMessage("max time6: " + ruShowStats("add_unified", ruMaxStats("time6")));
	env.out.onMessage("");
*/
	env.out.onMessage("<< ruBuildPropProofs >>");
	env.out.onMessage(strIndent(ruShowStats("ruBuildPropProofs", ruDistribLogSumStats("time", "count", 10))));
	env.out.onMessage("sum ruBuildPropProofs time: " + ruShowStats("ruBuildPropProofs", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruBuildPropProofs", ruMaxStats("time")));
	env.out.onMessage("");
	
	env.out.onMessage("<< ruBuildHypProofs >>");
	env.out.onMessage(strIndent(ruShowStats("ruBuildHypProofs", ruDistribLogSumStats("time", "size", 10))));
	env.out.onMessage("sum ruBuildHypProofs time: " + ruShowStats("ruBuildHypProofs", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruBuildHypProofs", ruMaxStats("time")));
	env.out.onMessage("max size: " + ruShowStats("ruBuildHypProofs", ruMaxStats("size")));
	env.out.onMessage("");
/*
	env.out.onMessage("<< ruAddProof1 - A >>");
	env.out.onMessage(strIndent(ruShowStats("ruAddProof1", ruDistribLogSumStats("time", "size", 10))));
	env.out.onMessage("<< ruAddProof1 - B >>");
	env.out.onMessage(strIndent(ruShowStats("ruAddProof1", ruDistribLogSumStats("size", "time", 10))));
	env.out.onMessage("sum ruAddProof1 time: " + ruShowStats("ruAddProof1", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruAddProof1", ruMaxStats("time")));
	env.out.onMessage("max size: " + ruShowStats("ruAddProof1", ruMaxStats("size")));
	env.out.onMessage("");
*/
	env.out.onMessage("<< ruAddProof0: (time -> size) >>");
	env.out.onMessage(strIndent(ruShowStats("ruAddProof0", ruDistribLogSumStats("time", "size", 10))));
	env.out.onMessage("<< ruAddProof0: (size -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruAddProof0", ruDistribLogSumStats("size", "time", 10))));
	env.out.onMessage("<< ruAddProof0: (time -> cplx) >>");
	env.out.onMessage(strIndent(ruShowStats("ruAddProof0", ruDistribLogSumStats("time", "cplx", 10))));
	env.out.onMessage("<< ruAddProof0: (cplx -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruAddProof0", ruDistribLogSumStats("cplx", "time", 10))));
	env.out.onMessage("sum ruAddProof0 time: " + ruShowStats("ruAddProof0", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruAddProof0", ruMaxStats("time")));
	env.out.onMessage("max size: " + ruShowStats("ruAddProof0", ruMaxStats("size")));
	env.out.onMessage("max cplx: " + ruShowStats("ruAddProof0", ruMaxStats("cplx")));
	env.out.onMessage("");

	env.out.onMessage("<< ruUnifySubs-split: (time -> size) >>");
	env.out.onMessage(strIndent(ruShowStats("ruUnifySubs-split", ruDistribLogSumStats("time", "size", 10))));
	env.out.onMessage("<< ruUnifySubs-split: (size -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruUnifySubs-split", ruDistribLogSumStats("size", "time", 10))));
	env.out.onMessage("<< ruUnifySubs-split: (time -> cplx) >>");
	env.out.onMessage(strIndent(ruShowStats("ruUnifySubs-split", ruDistribLogSumStats("time", "cplx", 10))));
	env.out.onMessage("<< ruUnifySubs-split: (cplx -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruUnifySubs-split", ruDistribLogSumStats("cplx", "time", 10))));
	env.out.onMessage("sum ruUnifySubs-split time: " + ruShowStats("ruUnifySubs-split", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruUnifySubs-split", ruMaxStats("time")));
	env.out.onMessage("max size: " + ruShowStats("ruUnifySubs-split", ruMaxStats("size")));
	env.out.onMessage("max cplx: " + ruShowStats("ruUnifySubs-split", ruMaxStats("cplx")));
	env.out.onMessage("");
	
	env.out.onMessage("<< ruUnifySubs-ruDoUnifySubs: (time -> size) >>");
	env.out.onMessage(strIndent(ruShowStats("ruUnifySubs-ruDoUnifySubs", ruDistribLogSumStats("time", "size", 10))));
	env.out.onMessage("<< ruUnifySubs-ruDoUnifySubs: (size -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruUnifySubs-ruDoUnifySubs", ruDistribLogSumStats("size", "time", 10))));
	env.out.onMessage("<< ruUnifySubs-ruDoUnifySubs: (time -> cplx) >>");
	env.out.onMessage(strIndent(ruShowStats("ruUnifySubs-ruDoUnifySubs", ruDistribLogSumStats("time", "cplx", 10))));
	env.out.onMessage("<< ruUnifySubs-ruDoUnifySubs: (cplx -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruUnifySubs-ruDoUnifySubs", ruDistribLogSumStats("cplx", "time", 10))));
	env.out.onMessage("sum ruUnifySubs-ruDoUnifySubs time: " + ruShowStats("ruUnifySubs-ruDoUnifySubs", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruUnifySubs-ruDoUnifySubs", ruMaxStats("time")));
	env.out.onMessage("max size: " + ruShowStats("ruUnifySubs-ruDoUnifySubs", ruMaxStats("size")));
	env.out.onMessage("max cplx: " + ruShowStats("ruUnifySubs-ruDoUnifySubs", ruMaxStats("cplx")));
	env.out.onMessage("");
	
	env.out.onMessage("<< ruCompose: (time -> size) >>");
	env.out.onMessage(strIndent(ruShowStats("ruCompose", ruDistribLogSumStats("time", "size", 10))));
	env.out.onMessage("<< ruCompose: (size -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruCompose", ruDistribLogSumStats("size", "time", 10))));
	env.out.onMessage("<< ruCompose: (time -> cplx) >>");
	env.out.onMessage(strIndent(ruShowStats("ruCompose", ruDistribLogSumStats("time", "cplx", 10))));
	env.out.onMessage("<< ruCompose: (cplx -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruCompose", ruDistribLogSumStats("cplx", "time", 10))));
	env.out.onMessage("sum ruCompose time: " + ruShowStats("ruCompose", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruCompose", ruMaxStats("time")));
	env.out.onMessage("max size: " + ruShowStats("ruCompose", ruMaxStats("size")));
	env.out.onMessage("max cplx: " + ruShowStats("ruCompose", ruMaxStats("cplx")));
	env.out.onMessage("");
	
	env.out.onMessage("<< ruAdd2Subst: (time -> size) >>");
	env.out.onMessage(strIndent(ruShowStats("ruAdd2Subst", ruDistribLogSumStats("time", "size", 10))));
	env.out.onMessage("<< ruAdd2Subst: (size -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruAdd2Subst", ruDistribLogSumStats("size", "time", 10))));
	env.out.onMessage("<< ruAdd2Subst: (time -> cplx) >>");
	env.out.onMessage(strIndent(ruShowStats("ruAdd2Subst", ruDistribLogSumStats("time", "cplx", 10))));
	env.out.onMessage("<< ruAdd2Subst: (cplx -> time) >>");
	env.out.onMessage(strIndent(ruShowStats("ruAdd2Subst", ruDistribLogSumStats("cplx", "time", 10))));
	env.out.onMessage("sum ruAdd2Subst time: " + ruShowStats("ruAdd2Subst", ruSumStats("time")));
	env.out.onMessage("max time: " + ruShowStats("ruAdd2Subst", ruMaxStats("time")));
	env.out.onMessage("max size: " + ruShowStats("ruAdd2Subst", ruMaxStats("size")));
	env.out.onMessage("max cplx: " + ruShowStats("ruAdd2Subst", ruMaxStats("cplx")));
	env.out.onMessage("");
	
	env.out.onMessage("<< ruApplySubst: >>");
	env.out.onMessage(strIndent(ruShowTime("ruApplySubst")));
	//env.out.onMessage(strIndent(ruShowTime("ruApplyComputeLen")));
	env.out.onMessage("");

	env.out.onMessage("<< ruApplySubst1: >>");
	env.out.onMessage(strIndent(ruShowTime("ruApplySubst1")));
	//env.out.onMessage(strIndent(ruShowTime("ruApplyComputeLen")));
	env.out.onMessage("");
	
	env.out.onMessage("<< ruApplySubst2: >>");
	env.out.onMessage(strIndent(ruShowTime("ruApplySubst2")));
	//env.out.onMessage(strIndent(ruShowTime("ruApplyComputeLen")));
	env.out.onMessage("");
	
	/*env.out.onMessage("<< reprove do >>");
	env.out.onMessage("do reprove distrib sum: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_time", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("do reprove distrib avg: ");
	env.out.onMessage(strIndent(ruShowStats("reprove_time", ruDistribLogAvgStats("size", "time", 2))));
	env.out.onMessage("sum do reprove: " + ruShowStats("reprove_time", ruSumStats("time")));
	env.out.onMessage("max size: " + ruShowStats("reprove_time", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("reprove_time", ruMaxStats("time")));
	env.out.onMessage("avg time: " + ruShowStats("reprove_time", ruAvgStats("time")));
	env.out.onMessage("");*/

	/*env.out.onMessage("<< init_assertion_index >>");
	env.out.onMessage("init_assertion_index times: ");
	env.out.onMessage(strIndent(ruShowStats("init_assertion_index", ruDistribLogSumStats("size", "time", 2))));
	env.out.onMessage("sum init_assertion_index time: " + ruShowStats("init_assertion_index", ruSumStats("time")));
	env.out.onMessage("max size: " + ruShowStats("init_assertion_index", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("init_assertion_index", ruMaxStats("time")));
	env.out.onMessage("");*/

	env.out.onMessage("<< add_proof >>");
	env.out.onMessage("prod times: ");
	env.out.onMessage(strIndent(ruShowStats("add_proof_prod", ruDistribLogSumStats("size", "time", 10))));
	env.out.onMessage("sum prod time: " + ruShowStats("add_proof_prod", ruSumStats("time")));
	env.out.onMessage("tree times: ");
	env.out.onMessage(strIndent(ruShowStats("add_proof_tree", ruDistribLogSumStats("size", "time", 10))));
	env.out.onMessage("sum tree time: " + ruShowStats("add_proof_tree", ruSumStats("time")));
	env.out.onMessage("max size: " + ruShowStats("add_proof_tree", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("add_proof_tree", ruMaxStats("time")));
	env.out.onMessage("max rets: " + ruShowStats("add_proof_tree", ruMaxStats("rets")));
	//env.out.onMessage("data len: " + ruShowStats("add_proof", \rows -> i2s(length(rows))));
	env.out.onMessage("");
/*
	env.out.onMessage("<< unif_index_prod >>");
	env.out.onMessage("max size: " + ruShowStats("unif_index_prod", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("unif_index_prod", ruMaxStats("time")));
	env.out.onMessage("max rets: " + ruShowStats("unif_index_prod", ruMaxStats("rets")));
	env.out.onMessage("sum time: " + ruShowStats("unif_index_prod", ruSumStats("time")));
	env.out.onMessage("");

	env.out.onMessage("<< intersect_index_prod >>");
	env.out.onMessage("max size: " + ruShowStats("intersect_index_prod", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("intersect_index_prod", ruMaxStats("time")));
	env.out.onMessage("max rets: " + ruShowStats("intersect_index_prod", ruMaxStats("rets")));
	env.out.onMessage("sum time: " + ruShowStats("intersect_index_prod", ruSumStats("time")));
	env.out.onMessage("");

	env.out.onMessage("<< unfy_subs_index_prod >>");
	env.out.onMessage("max size: " + ruShowStats("unfy_subs_index_prod", ruMaxStats("size")));
	env.out.onMessage("max time: " + ruShowStats("unfy_subs_index_prod", ruMaxStats("time")));
	env.out.onMessage("max rets: " + ruShowStats("unfy_subs_index_prod", ruMaxStats("rets")));
	env.out.onMessage("sum time: " + ruShowStats("unfy_subs_index_prod", ruSumStats("time")));
	env.out.onMessage("");*/
}

ruCommandTheoremDepthStats(math : RuMath, env : RuEnv) -> void {
	depths = ruAssertionsDepths(math.decls.assertions);
	decls = concatA(map(ruSourcesOrder(math.sources, env.out), \src -> src.decls));
	depth_stats = filtermapi(decls, \i, d -> {
		switch (d) {
			RuTheorem(info,__,__,__): {
				depth = lookupTreeDef(depths, info.id, -1);
				Some(Triple(i, info.id, depth));
			}
			default: None();
		}
	});
	stat_file = strGlue(map(depth_stats, \row -> i2s(row.first) + "\t" + id2s(row.second) + "\t" + i2s(row.third)), "\n");
	//env.out.onMessage("Theorem depths: ");
	//env.out.onMessage(stat_file);
	setFileContent("theorem_depths.csv", stat_file);
	{}
}

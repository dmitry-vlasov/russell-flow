import ru/prover/expand;

export {
	ruInitProver(
		task : RuProverTask,
		math : RuMath, 
		env : RuEnv, 
		asses : RuIndex<RuAssertion>, 
		ms_time_limit : double
	) -> RuProverEnv;

	ruProve(prover_env : RuProverEnv) -> RuProverEnv;
}

ruInitProver(
	task : RuProverTask,
	math : RuMath, 
	env : RuEnv, 
	asses : RuIndex<RuAssertion>, 
	ms_time_limit : double
) -> RuProverEnv {
	prover_env = ruInitProverEnv(task, math, env, asses, ms_time_limit);
	ruExpandHyp(prover_env.tree.root, prover_env);
}

ruProveProp(prop : RuProverProp, prover_env : RuProverEnv) -> RuProverEnv {
	t1 = ruMakeTimer();
	env1 = ruExpandProp(prop, prover_env);
	if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
		ruAddStats("ruExpandProp", RuStatsRow("expanding " + id2s(prop.assertion.info.id), 
			pairs2tree([
				Pair("time", ruTimePassed(t1)), 
				Pair("count", 1.0)
			])
		));
	}
	t2 = ruMakeTimer();
	ruBuildPropProofs(prop, prop.proofs, env1);
	if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
		ruAddStats("ruBuildPropProofs", RuStatsRow("building proofs for " + id2s(prop.assertion.info.id), 
			pairs2tree([
				Pair("time", ruTimePassed(t2)), 
				Pair("count", 1.0)
			])
		));
	}
	env1;
}

ruProve(prover_env : RuProverEnv) -> RuProverEnv {
	tactic = ^(prover_env.tactic);
	to_expand = tactic.expand(prover_env.tree);
	if (to_expand == []) {
		prover_env;
	} else {
		to_expand_removed = fold(to_expand, prover_env.tree.leafs, \acc, prop -> 
			removeFromTree(acc, prop.id)
		);
		env1 = RuProverEnv(prover_env with 
			tree = RuProverTree(prover_env.tree with 
				leafs = to_expand_removed
			)
		);
		env1_expanded = ruConcurrent(
		//env1_expanded = ruSequential(
			map(to_expand, 
				\prop -> \env2 -> 
					if (tactic.finished(env1.tree)) env1 else
					ruProveProp(prop, RuProverEnv(env1 with env = env2))
			), 
			env1.env
		);
		new_env = fold(env1_expanded, env1, \acc, e -> 
			RuProverEnv(acc with 
				tree = RuProverTree(acc.tree with 
					leafs = mergeTree(acc.tree.leafs, e.tree.leafs), 
					nodes = mergeTree(acc.tree.nodes, e.tree.leafs)
				)
			)
		);
		if (tactic.finished(new_env.tree)) {
			if (prover_env.task.strategy.finished(new_env.tree)) {
				new_env;
			} else {
				prover_env.tactic := prover_env.task.strategy.nextTactic(prover_env.tree);
				ruProve(new_env);
			}
		} else {
			ruProve(new_env);
		}
	}
}

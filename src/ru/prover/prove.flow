import ru/prover/expand;

export {
	ruInitProver(
		task : RuProverTask,
		math : RuMath, 
		env : RuEnv, 
		asses : RuIndex<RuAssertion>, 
		ms_time_limit : double
	) -> RuProverEnv;

	ruProve(prover_env : RuProverEnv) -> RuProverEnv;
}

ruInitProver(
	task : RuProverTask,
	math : RuMath, 
	env : RuEnv, 
	asses : RuIndex<RuAssertion>, 
	ms_time_limit : double
) -> RuProverEnv {
	prover_env = ruInitProverEnv(task, math, env, asses, ms_time_limit);
	ruExpandHyp(prover_env.tree.root, prover_env);
}

ruProve(prover_env : RuProverEnv) -> RuProverEnv {
	t0 = ruMakeTimer();
	nodes_left = ref [];
	choice = if (ruTimeIsOver(prover_env.timer)) None() else {
		if (length(prover_env.toExpand) == 0) {
			prover_env.tactic(prover_env.tree);
		} else {
			node_id = prover_env.toExpand[0];
			nodes_left := tail(prover_env.toExpand);
			lookupTree(prover_env.tree.leafs, node_id);
		}
	}
	if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
		ruAddStats("choice", RuStatsRow("choice ", 
			pairs2tree([
				Pair("size", i2d(sizeTree(prover_env.tree.leafs))), 
				Pair("time", ruTimePassed(t0)), 
				Pair("count", 1.0)
			])
		));
	}
	new_env = switch (choice) {
		Some(prop): {
			t1 = ruMakeTimer();
			env1 = ruExpandProp(prop, prover_env);
			if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				ruAddStats("ruExpandProp", RuStatsRow("expanding " + id2s(prop.assertion.info.id), 
					pairs2tree([
						Pair("time", ruTimePassed(t1)), 
						Pair("count", 1.0)
					])
				));
			}
			t2 = ruMakeTimer();
			ruBuildPropProofs(prop.parent, ^(prop.proofs), env1);
			if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				ruAddStats("ruBuildPropProofs", RuStatsRow("building proofs for " + id2s(prop.assertion.info.id), 
					pairs2tree([
						Pair("time", ruTimePassed(t2)), 
						Pair("count", 1.0)
					])
				));
			}
			ruProve(env1);
		}
		None(): prover_env;
	}
	RuProverEnv(new_env with toExpand = ^nodes_left);
}

import ru/prover/expand;

export {
	ruInitProver(
		theorem : RuTheorem, 
		math : RuMath, 
		env : RuEnv, 
		asses : Maybe<RuIndex<RuAssertion>>, 
		ms_time_limit : double,
		proofs : ref [RuProof]
	) -> RuProverEnv;

	ruProve(prover_env : RuProverEnv) -> RuProverEnv;
}

ruInitProver(
	th : RuTheorem, 
	math : RuMath, 
	env : RuEnv, 
	asses : Maybe<RuIndex<RuAssertion>>, 
	ms_time_limit : double,
	proofs : ref [RuProof]
) -> RuProverEnv {
	prover_env = ruInitProverEnv(th, math, env, asses, ms_time_limit, proofs);
	ruExpandHyp(prover_env.tree.root, prover_env);
}

ruProve(prover_env : RuProverEnv) -> RuProverEnv {
	t0 = ruMakeTimer();
	choice = if (ruTimeIsOver(prover_env.timer)) None() else prover_env.tactic(prover_env.tree);
	if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
		ruAddStats("choice", RuStatsRow("choice ", 
			pairs2tree([
				Pair("size", i2d(sizeTree(prover_env.tree.leafs))), 
				Pair("time", ruTimePassed(t0)), 
				Pair("count", 1.0)
			])
		));
	}
	switch (choice) {
		Some(prop): {
			t1 = ruMakeTimer();
			env1 = ruExpandProp(prop, prover_env);
			if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				ruAddStats("ruExpandProp", RuStatsRow("expanding " + id2s(prop.assertion.descr.id), 
					pairs2tree([
						Pair("time", ruTimePassed(t1)), 
						Pair("count", 1.0)
					])
				));
			}
			t2 = ruMakeTimer();
			ruBuildPropProofs(prop.parent, ^(prop.proofs), env1);
			if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				ruAddStats("ruBuildPropProofs", RuStatsRow("building proofs for " + id2s(prop.assertion.descr.id), 
					pairs2tree([
						Pair("time", ruTimePassed(t2)), 
						Pair("count", 1.0)
					])
				));
			}
			ruProve(env1);
		}
		None(): prover_env;
	}
}

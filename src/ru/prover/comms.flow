import ru/prover/prove;
import ru/prover/reprove_oracle;
import ru/prover/reprove_dumb;
import ru/prover/reprove_compress;
import ru/prover/ml/collect_data;
import ru/util/info;
import lsp/protocol;

import ru/prover/tactics/follow_proof;
import ru/prover/strategies/similar_proofs;

export {
	ruProverCommands : [RuComm] = [
		ruCommReproveOracle,
		ruCommReproveDumb,
		ruCommReproveCompress,
		ruCommCollectLearningData,

		ruCommProveStart,
		ruCommProveExpand,
		ruCommProveSort,
		//ruCommProveConfirmProof,
		ruCommProveTry,
		//ruCommProveTacticExpandLeafs,
		//ruCommProveTacticForbid
	]
}

ruCommProveStart = RuComm(
	RuCommInfo(
		"prove-start", "prover", "start proving a theorem", "theorem", true, false, 
		[
			RuCommArg("theorem", true, "a target theorem for proving", ""),
			RuCommArg("file", true, "file, within a position of which a proving should be started", ""),
			RuCommArg("line", true, "line of a position, where a proving should be started", ""),
			RuCommArg("col", true, "column of a position, where a proving should be started", ""),
			RuCommArg("step", true, "a proof step for proving. -1 means a QED step (last)", "-1"),
			RuCommArg("time-limit", true, "a default time limit for proving", ""),
		], []
	),
	ruRunProveStart
);

ruRunProveStart(unit : RuUnit) -> Maybe<RuState> {
	task = unit.task;
	th_name = lookupTreeDef(task.args, "theorem", "");
	if (th_name != "") {
		ruRunProveTheoremStart(unit, th_name);
	} else {
		ruRunProveStepStart(unit);
	}
}

ruRunProveStepStart(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	time_limit = s2d(lookupTreeDef(task.args, "time-limit", "-1.0"));
	switch (ruArgs2LineCol(task.args)) {
		Some(lc): {
			switch (ruFindPositioned(lc, env)) {
				Some(path): {
					if (length(path) == 0) {
						env.out.onMessage("No entities are found at location " + ruLineCol2s(lc));
						Some(state);
					} else {
						switch (ruStepInTheorem(path)) {
							Some(step_path): {
								timer = ruMakeTimer();
								goal = step_path.path[length(step_path.path) - 1];
								msg = "start proving: '" + ruStepPath2s(step_path) + "'" + 
									(if (time_limit > 0.0) ", time limit: " + ruTime2s(time_limit) else "");
								if (ruVerbose(conf) > 0) {
									env.out.onMessage(
										"start proving: '" + ruStepPath2s(step_path) + "'" + 
										(if (time_limit > 0.0) ", time limit: " + ruTime2s(time_limit) else "")
									);
								}
								prover_task = RuProverTask(
									step_path.theorem.info,
									ruDefaultStrategy,
									"proving: '" + ruStepPath2s(step_path) + "'",
									task.args,
									ruStepPathPremises(step_path),
									goal.step,
								);
								index = ruInitTheoremAssertionsIndex(step_path.theorem, math, env);
								prover_env = ruInitProver(prover_task, math, env, index, time_limit);
								json_tree = json2string(ruProverTree2json(prover_env.tree, prover_env.math, conf));
								//ruDebugLog("JSON TREE:\n" + json_tree, conf);
								env.out.onData(json_tree);
								Some(RuState(state with 
									prover = Some(RuProverState(
										step_path, 
										prover_env
									)),
									vars = setTree(state.vars, 
										"prove-start.time", ValDouble(ruTimePassed(timer))
									)
								));
							}
							None(): {
								env.out.onMessage("Proof step path expected, but " + strGlue(map(path, ruPositioned2s), ", ") + " is found");
								Some(state);
							}
						}
					}
				}
				None(): {
					env.out.onMessage("No entities are found at location " + ruLineCol2s(lc));
					Some(state);
				}
			}
		}
		None(): {
			env.out.onMessage("No target for proving is provided");
			Some(state);
		}
	}
}

ruRunProveTheoremStart(unit : RuUnit, th_name : string) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	time_limit = s2d(lookupTreeDef(task.args, "time-limit", "-1.0"));
	timer = ruMakeTimer();
	if (ruVerbose(conf) > 1) {
		env.out.onMessage(
			"going to start proving a theorem: '" + th_name + "'" + 
			(if (time_limit > 0.0) ", time limit: " + ruTime2s(time_limit) else "")
		);
	}
	switch (lookupTree(math.decls.assertions, s2id_(th_name))) {
		Some(th): {
			switch (th) {
				RuTheorem(info,stat,__,proof): {
					if (ruVerbose(conf) > 0) {
						env.out.onMessage(
							"start proving a theorem: '" + th_name + "'" + 
							(if (time_limit > 0.0) ", time limit: " + ruTime2s(time_limit) else "")
						);
					}
					step_ind = s2i(lookupTreeDef(task.args, "step", i2s(length(proof.steps) - 1)));
					prover_task = RuProverTask(
						th.info,
						ruDefaultStrategy,
						"proving-" + id2s(info.id),
						task.args,
						concat(stat.hyps, take(proof.steps, step_ind)),
						proof.steps[step_ind],
					);
					index = ruInitTheoremAssertionsIndex(th, math, env);
					prover_env = ruInitProver(prover_task, math, env, index, time_limit);
					Some(RuState(state with 
						prover = Some(RuProverState(
							RuStepInTheorem(th, [RuStepInProof(th.proof, proof.steps[step_ind])]), 
							prover_env
						)),
						vars = setTree(state.vars, 
							"prove-start.time", ValDouble(ruTimePassed(timer))
						)
					));
				}
				default: {
					env.out.onError("'" + th_name + "' is not a theorem", []);
					None();
				}
			}
		}
		None(): {
			env.out.onError("theorem: '" + th_name + "' is not found", []);
			None();
		}
	}
}

ruCommProveExpand = RuComm(
	RuCommInfo(
		"prove-expand", "prover", "expand given proof variant tree nodes", "nodes", true, false, 
		[
			RuCommArg("nodes", false, "CSV list of node ids, which should be expanded", ""),
		], []
	),
	ruRunProveExpand
);

ruRunProveExpand(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	nodes_arg = lookupTreeDef(task.args, "nodes", "");
	nodes = filtermap(strSplit(nodes_arg, ","), \n -> {
		node = trim(n);
		if (isDigits(node)) Some(s2i(node)) else None();
	});
	switch (state.prover) {
		Some(prover_state): {
			penv0 = prover_state.env;
			if (ruVerbose(conf) > 0) {
				env.out.onMessage("setting nodes to expand: '" + nodes_arg + "'");
			}
			curr_tactic = ^(prover_state.env.tactic);
			penv0.tactic := Some(RuProverTactic(
				"prove-expand",
				\tree -> filtermap(nodes, \id -> lookupTree(tree.leafs, id)),
				\tree -> true
			));
			snapshot = ruProverTree2Snapshot(penv0.tree);
			penv1 = ruProve(penv0);
			if (length(^(penv1.tree.proofs)) > 0) {
				proofs = "// Proved:\n" + 
				concatStrings(map(^(penv1.tree.proofs), \proof -> ru2s(proof, math) + "\n"));
				if (lookupTreeDef(task.args, "lsp", "") == "1") {
					ruLspWriteNotification("prover/proved", JsonString(proofs))	
				} else {
					env.out.onMessage("Proofs found:\n" + proofs);
				}
			}
			penv1.tactic := curr_tactic;
			diff = ruProverTreeDiff(snapshot, penv1.tree);
			json_diff = json2string(ruProverTreeDiff2json(diff, penv1.math, conf));
			//ruDebugLog("JSON DIFF:\n" + json_diff, conf);
			env.out.onData(json_diff);
			Some(RuState(state with 
				prover = Some(RuProverState(prover_state with 
					env = penv1
				))
			));
		}
		None(): {
			env.out.onError("Prover is not started", []);
			None();
		}
	}
}

ruCommProveSort = RuComm(
	RuCommInfo(
		"prove-sort", "prover", "sort prop nodes with a custom sort function", "", true, false, 
		[
			RuCommArg("nodes", false, "CSV list of node ids, which siblings should be sorted", ""),
			RuCommArg("method", false, "sort method: alphabetic, etc.", ""),
		], [],
	),
	ruRunProveSort
);

ruRunProveSort(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	nodes_arg = lookupTreeDef(task.args, "nodes", "");
	method_arg = lookupTreeDef(task.args, "method", "");
	nodes_ids = filtermap(strSplit(nodes_arg, ","), \n -> {
		node = trim(n);
		if (isDigits(node)) Some(s2i(node)) else None();
	});
	maybeMap(state.prover, \prover_state -> {
		penv = prover_state.env;
		if (ruVerbose(conf) > 0) {
			env.out.onMessage("sorting nodes siblings: '" + penv.conf.task.header + "'");
		}
		hyp_nodes = filtermap(nodes_ids, \id -> 
			switch (lookupTree(penv.tree.nodes, id)) {
				Some(prop): Some(prop.parent);
				None(): {
					env.out.onError("prop node with id: " + i2s(id) + " is not found", []);
					None();
				}
			}
		);
		if (method_arg == "alphabetic") {
			iter(hyp_nodes, \hyp -> {
				children = sortCustom(vector2array(hyp.children), \prop -> id2s(prop.assertion.info.id), true);
				iteri(children, \i, x -> setVector(hyp.children, i, x));
				//hyp.children := sortCustom(^(hyp.children), \prop -> id2s(prop.assertion.info.id), true)
			});
		} else {
			switch (ruSortMethod(method_arg, penv)) {
				Some(method): {
					iter(hyp_nodes, \hyp -> {
						children = sortCustom(vector2array(hyp.children), method, true);
						iteri(children, \i, x -> setVector(hyp.children, i, x));
						//hyp.children := sortCustom(^(hyp.children), method, true)
					});
				}
				None(): {
					env.out.onError("sort method: " + method_arg + " is not defined", []);
				}
			}
		}
		state;
	});
}

ruSortMethod(method : string, penv : RuProverEnv) -> Maybe<(RuProverProp) -> double> {
	if (method == "ontodist") {
		Some(\prop -> i2d(prop.assertion.info.id));
	} else if (method == "logfirst") {
		None();
	} else if (method == "nonlogfirst") {
		None();
	} else {
		None();
	}
}


/*
ruCommProveConfirmProof = RuComm(
	RuCommInfo(
		"prove-confirm-proof", "prover", "attach a proof to a target theorem", "index", true, false, 
		[RuCommArg("index", true, "an index of a choosen proof. -1 means automatic choice of the shortest", "-1")], []
	),
	ruRunProveConfirmProof
);

ruRunProveConfirmProof(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	maybeMap(state.prover, \prover_state -> {
		penv = prover_state.env;
		theorem = prover_state.step.theorem;
		index = s2i(lookupTreeDef(task.args, "index", "-1"));
		confirm = \proof -> {
			if (ruVerbose(conf) > 0) {
				env.out.onMessage("proof of: '" + penv.task.info + "' is confirmed");
			}
			proved = RuTheorem(theorem with 
				proof = ruUpdateProofVars(RuProof(proof with steps = proof.steps), theorem, theorem)
			);
			math = ruMathFromSources(state.ru, env);
			new_math = ruMathReplaceDecl(math, proved, env);
			RuState(state with 
				ru = new_math.sources,
				prover = None()
			);
		}
		if (index >= length(^(penv.proofs))) {
			if (length(^(penv.proofs)) == 0) {
				env.out.onError("target '" + penv.task.info + "'' is NOT proved", []);
			} else {
				env.out.onError("proof index " + i2s(index) + " is out of bounds (must be <= " + i2s(length(^(penv.proofs))) + ")", []);
			}
			state;
		} else if (index < 0) {
			switch (ruProverEnvProof(penv)) {
				Some(proof):  confirm(proof);
				None(): {
					env.out.onError("target '" + penv.task.info + "'' is NOT proved", []);
					state;
				}
			}
		} else {
			confirm(^(penv.proofs)[index]);
		}
	});
}
*/

ruCommProveTry = RuComm(
	RuCommInfo(
		"prove-try", "prover", "try to prove a theorem using current tactic", "theorem", true, false, 
		[
			RuCommArg("time-limit", true, "a default time limit for proving step", "")
		], []
	),
	ruRunProveTry
);

ruRunProveTry(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	maybeMap(state.prover,
		\prover_state -> {
			penv0 = prover_state.env;
			time_limit = s2d(lookupTreeDef(task.args, "time-limit", "-1.0"));
			if (ruVerbose(conf) > 0) {
				env.out.onMessage(
					"trying to prove: '" + penv0.conf.task.header + "'" + 
					(if (time_limit > 0.0) ", time limit: " + ruTime2s(time_limit) else "")
				);
			}
			penv1 = ruProve(penv0);
			RuState(state with 
				prover = Some(RuProverState(prover_state with env = penv1)),
				vars = setTree(setTree(state.vars, 
					"prove-try.time", ValDouble(ruTimePassed(timer))),
					"prove.success", ValBool(length(^(penv1.tree.proofs)) > 0)
				)
			);
		}
	);
}
/*
ruCommProveTacticExpandLeafs = RuComm(
	RuCommInfo(
		"prove-tactic-expand-leafs", "prover", "sets a tactic: expand all current leafs", "", false, false, 
		[], []
	),
	ruRunProveTacticExpandLeafs
);

ruRunProveTacticExpandLeafs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	maybeMap(state.prover,
		\prover_state -> {
			penv = prover_state.env;
			if (ruVerbose(conf) > 0) {
				env.out.onMessage("setting a tactic: expand all leafs in: '" + penv.task.info + "'");
			}
			penv.tactic := RuProverTactic("expand-leafs",
				nop1,
				\tree -> getTreeValues(tree.leafs),
				nop1,
				\e -> true
			);
			state;
		}
	);
}

ruCommProveTacticForbid = RuComm(
	RuCommInfo(
		"prove-tactic-forbid", "prover", "do not use these assertions is proof search", "forbidden", false, false, 
		[RuCommArg("forbidden", false, "a comma separated list of assertion names", "")], []
	),
	ruRunProveTacticForbid
);

ruRunProveTacticForbid(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	timer = ruMakeTimer();
	maybeMap(state.prover,
		\prover_state -> {
			penv = prover_state.env;
			forbidden = buildSet(filtermap(strSplit(lookupTreeDef(task.args, "forbidden", ""), ","), \ass ->
				if (ass == "" || ass == "_") None() else Some(s2id_(ass))
			));
			if (ruVerbose(conf) > 0) {
				env.out.onMessage(
					"forbidding to use assertions: '" + strGlue(map(set2array(forbidden), id2s), ", ") + "' in proof search"
				);
			}
			penv.tactic := RuProverTactic("forbid", nop1, 
				\tree -> filter(^(penv.tactic).expand(tree), \prop -> !containsSet(forbidden, prop.id)),
				nop1,
				\e -> true
			);
			state;
		}
	);
}
*/
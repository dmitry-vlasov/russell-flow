import ru/prover/prove;
import ru/prover/reprove;

export {
	ruProverCommands : [RuComm] = [
		ruCommReprove,
		ruCommProveStart,
		ruCommProveTry,
		ruCommProveExpandLeafs
	]
}

ruCommProveStart = RuComm(
	RuCommDescr(
		"prove-start", "prover", "start proving a theorem", "theorem", true, false, 
		[
			RuCommArg("theorem", false, "a target theorem for proving", ""),
			//RuCommArg("time-limit", false, "a default time limit for proving", ""),
		], []
	),
	ruRunProveStart
);

ruRunProveStart(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMakeMathFromSources(state.ru, env);
	th_name = lookupTreeDef(task.args, "theorem", "");
	if (ruVerbose(conf) > 0) {
		env.out.onMessage("start proving a theorem: '" + th_name + "'");
	}
	timer = ruMakeTimer();
	maybeBind(lookupTree(math.assertions, s2id(th_name)),
		\th -> {
			switch (th) {
				RuTheorem(__,__,__,__): {
					prover_env = ruInitProverEnv(th, math, env, None(), -1.0);
					Some(RuState(state with 
						prove = Some(prover_env),
						vars = setTree(state.vars, 
							"prove-start.time", ValDouble(ruTimePassed(timer))
						)
					));
				}
				default: None();
			}
		}
	);
}

ruCommProveTry = RuComm(
	RuCommDescr(
		"prove-try", "prover", "try to prove a theorem using current tactic", "theorem", true, false, [], []
	),
	ruRunProveTry
);

ruRunProveTry(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMakeMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	maybeMap(state.prove,
		\penv0 -> {
			if (ruVerbose(conf) > 1) {
				env.out.onMessage("trying to prove: '" + penv0.descr + "'");
			}
			penv1 = ruProve(penv0);
			RuState(state with 
				prove = Some(penv1),
				vars = setTree(setTree(state.vars, 
					"prove-try.time", ValDouble(ruTimePassed(timer))),
					"prove-try.success", ValBool(length(^(penv1.proofs)) > 0)
				)
			);
		}
	);
}

ruCommProveExpandLeafs = RuComm(
	RuCommDescr(
		"prove-expand-leafs", "prover", "try to prove a theorem using a breadth-first search", "", false, false, [], []
	),
	ruRunProveExpandLeafs
);

ruRunProveExpandLeafs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMakeMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	maybeMap(state.prove,
		\penv0 -> {
			if (ruVerbose(conf) > 1) {
				env.out.onMessage("expanding all leafs in: '" + penv0.descr + "'");
			}
			leafs = buildSet(getTreeKeys(penv0.tree.leafs));
			penv1 = ruSetProverTactic(penv0, \tree -> 
				findInOrder(tree.leafs, \id, n -> if (containsSet(leafs, id)) Some(n) else None())
			);
			penv2 = ruProve(penv1);
			RuState(state with 
				prove = Some(penv2),
				vars = setTree(setTree(state.vars, 
					"prove-try.time", ValDouble(ruTimePassed(timer))),
					"prove-try.success", ValBool(length(^(penv2.proofs)) > 0)
				)
			);
		}
	);
}

import ru/prover/prove;
import ru/prover/reprove;

export {
	ruProverCommands : [RuComm] = [
		ruCommReprove,
		ruCommProveStart
	]
}

ruCommProveStart = RuComm(
	RuCommDescr(
		"prove-start", "prover", "start proving a theorem", "theorem", true, false, 
		[
			RuCommArg("theorem", false, "a target theorem for proving", ""),
			//RuCommArg("time-limit", false, "a default time limit for proving", ""),
		], []
	),
	ruRunProveStart
);

ruRunProveStart(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMakeMathFromSources(state.ru, env);
	th_name = lookupTreeDef(task.args, "theorem", "");
	if (ruVerbose(conf) > 0) {
		env.out.onMessage("start proving a theorem: '" + th_name + "'");
	}
	timer = ruMakeTimer();
	maybeBind(lookupTree(math.assertions, s2id(th_name)),
		\th -> {
			switch (th) {
				RuTheorem(__,__,__,__): {
					prover_env = ruInitProverEnv(th, math, env, None(), -1.0, ref []);
					Some(RuState(state with 
						prove = Some(prover_env),
						vars = setTree(state.vars, 
							"prove-start.time", ValDouble(ruTimePassed(timer))
						)
					));
				}
				default: None();
			}
		}
	);
}

ruCommProveTry = RuComm(
	RuCommDescr(
		"prove-try", "prover", "try to prove a theorem using current tactic", "theorem", true, false, [], []
	),
	ruRunProveTry
);

ruRunProveTry(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMakeMathFromSources(state.ru, env);
	th_name = lookupTreeDef(task.args, "theorem", "");
	if (ruVerbose(conf) > 0) {
		env.out.onMessage("start proving a theorem: '" + th_name + "'");
	}
	timer = ruMakeTimer();
	maybeMap(state.prove,
		\env0 -> {
			env1 = ruProve(env0);
			RuState(state with 
				prove = Some(env1),
				vars = setTree(state.vars, 
					"prove-try.time", ValDouble(ruTimePassed(timer))
				)
			);
		}
	);
}

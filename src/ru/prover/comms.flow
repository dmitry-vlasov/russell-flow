import ru/prover/prove;
import ru/prover/reprove_oracle;

export {
	ruProverCommands : [RuComm] = [
		ruCommReproveOracle,
		ruCommProveStart,
		ruCommProveFinish,
		ruCommProveConfirmProof,
		ruCommProveTry,
		ruCommProveTacticExpandLeafs,
		ruCommProveTacticForbid
	]
}

ruCommProveStart = RuComm(
	RuCommInfo(
		"prove-start", "prover", "start proving a theorem", "theorem", true, false, 
		[
			RuCommArg("theorem", false, "a target theorem for proving", ""),
			RuCommArg("step", true, "a proof step for proving. -1 means a QED step (last)", "-1"),
			RuCommArg("time-limit", true, "a default time limit for proving", ""),
		], []
	),
	ruRunProveStart
);

ruRunProveStart(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	th_name = lookupTreeDef(task.args, "theorem", "");
	time_limit = s2d(lookupTreeDef(task.args, "time-limit", "-1.0"));
	timer = ruMakeTimer();
	if (ruVerbose(conf) > 1) {
		env.out.onMessage(
			"going to start proving a theorem: '" + th_name + "'" + 
			(if (time_limit > 0.0) ", time limit: " + ruTime2s(time_limit) else "")
		);
	}
	switch (lookupTree(math.decls.assertions, s2id(th_name))) {
		Some(th): {
			switch (th) {
				RuTheorem(info,stat,__,proof): {
					if (ruVerbose(conf) > 0) {
						env.out.onMessage(
							"start proving a theorem: '" + th_name + "'" + 
							(if (time_limit > 0.0) ", time limit: " + ruTime2s(time_limit) else "")
						);
					}
					step_ind = s2i(lookupTreeDef(task.args, "step", i2s(length(proof.steps) - 1)));
					prover_task = RuProverTask(
						"proving-" + id2s(info.id),
						concat(stat.hyps, take(proof.steps, step_ind)),
						proof.steps[step_ind],
					);
					index = ruInitTheoremAssertionsIndex(th, math, env);
					prover_env = ruInitProver(prover_task, math, env, index, time_limit);
					Some(RuState(state with 
						prover = Some(RuProverState(th, prover_env)),
						vars = setTree(state.vars, 
							"prove-start.time", ValDouble(ruTimePassed(timer))
						)
					));
				}
				default: {
					env.out.onError("'" + th_name + "' is not a theorem", []);
					None();
				}
			}
		}
		None(): {
			env.out.onError("theorem: '" + th_name + "' is not found", []);
			None();
		}
	}
}

ruCommProveFinish = RuComm(
	RuCommInfo(
		"prove-finish", "prover", "finish proving a theorem", "", true, false, 
		[], [],
	),
	ruRunProveFinish
);

ruRunProveFinish(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	maybeMap(state.prover, \prover_state -> {
		penv = prover_state.env;
		if (ruVerbose(conf) > 0) {
			env.out.onMessage("finished proving: '" + penv.info + "', it was " + 
				(if (ruProvedEnvIsProved(penv)) "PROVED" else "NOT proved")
			);
		}
		RuState(state with prover = None());
	});
}

ruCommProveConfirmProof = RuComm(
	RuCommInfo(
		"prove-confirm-proof", "prover", "attach a proof to a target theorem", "index", true, false, 
		[RuCommArg("index", true, "an index of a choosen proof. -1 means automatic choice of the shortest", "-1")], []
	),
	ruRunProveConfirmProof
);

ruRunProveConfirmProof(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	maybeMap(state.prover, \prover_state -> {
		penv = prover_state.env;
		theorem = prover_state.theorem;
		index = s2i(lookupTreeDef(task.args, "index", "-1"));
		confirm = \proof -> {
			if (ruVerbose(conf) > 0) {
				env.out.onMessage("proof of: '" + penv.info + "' is confirmed");
			}
			proved = RuTheorem(theorem with 
				proof = ruUpdateProofVars(RuProof(proof with steps = proof.steps), theorem, theorem)
			);
			math = ruMathFromSources(state.ru, env);
			new_math = ruMathReplaceDecl(math, proved, env);
			RuState(state with 
				ru = new_math.sources,
				prover = None()
			);
		}
		if (index >= length(^(penv.proofs))) {
			if (length(^(penv.proofs)) == 0) {
				env.out.onError("target '" + penv.info + "'' is NOT proved", []);
			} else {
				env.out.onError("proof index " + i2s(index) + " is out of bounds (must be <= " + i2s(length(^(penv.proofs))) + ")", []);
			}
			state;
		} else if (index < 0) {
			switch (ruProverEnvProof(penv)) {
				Some(proof):  confirm(proof);
				None(): {
					env.out.onError("target '" + penv.info + "'' is NOT proved", []);
					state;
				}
			}
		} else {
			confirm(^(penv.proofs)[index]);
		}
	});
}

ruCommProveTry = RuComm(
	RuCommInfo(
		"prove-try", "prover", "try to prove a theorem using current tactic", "theorem", true, false, 
		[RuCommArg("time-limit", true, "a default time limit for proving step", "")], []
	),
	ruRunProveTry
);

ruRunProveTry(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	maybeMap(state.prover,
		\prover_state -> {
			penv0 = prover_state.env;
			time_limit = s2d(lookupTreeDef(task.args, "time-limit", "-1.0"));
			if (ruVerbose(conf) > 0) {
				env.out.onMessage(
					"trying to prove: '" + penv0.info + "'" + 
					(if (time_limit > 0.0) ", time limit: " + ruTime2s(time_limit) else "")
				);
			}
			penv1 = ruProve(penv0);
			RuState(state with 
				prover = Some(RuProverState(prover_state with env = penv1)),
				vars = setTree(setTree(state.vars, 
					"prove-try.time", ValDouble(ruTimePassed(timer))),
					"prove.success", ValBool(length(^(penv1.proofs)) > 0)
				)
			);
		}
	);
}

ruCommProveTacticExpandLeafs = RuComm(
	RuCommInfo(
		"prove-tactic-expand-leafs", "prover", "sets a tactic: expand all current leafs", "", false, false, 
		[], []
	),
	ruRunProveTacticExpandLeafs
);

ruRunProveTacticExpandLeafs(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	maybeMap(state.prover,
		\prover_state -> {
			penv0 = prover_state.env;
			if (ruVerbose(conf) > 0) {
				env.out.onMessage("setting a tactic: expand all leafs in: '" + penv0.info + "'");
			}
			leafs = buildSet(getTreeKeys(penv0.tree.leafs));
			penv1 = ruSetProverEnvTactic(penv0, \tree -> 
				findInOrder(tree.leafs, \id, n -> if (containsSet(leafs, id)) Some(n) else None())
			);
			RuState(state with 
				prover = Some(RuProverState(prover_state with env = penv1))
			);
		}
	);
}

ruCommProveTacticForbid = RuComm(
	RuCommInfo(
		"prove-tactic-forbid", "prover", "do not use these assertions is proof search", "forbidden", false, false, 
		[RuCommArg("forbidden", false, "a comma separated list of assertion names", "")], []
	),
	ruRunProveTacticForbid
);

ruRunProveTacticForbid(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	conf = state.conf;
	timer = ruMakeTimer();
	maybeMap(state.prover,
		\prover_state -> {
			penv0 = prover_state.env;
			forbidden = buildSet(filtermap(strSplit(lookupTreeDef(task.args, "forbidden", ""), ","), \ass ->
				if (ass == "" || ass == "_") None() else Some(s2id(ass))
			));
			if (ruVerbose(conf) > 0) {
				env.out.onMessage(
					"forbidding to use assertions: '" + strGlue(map(set2array(forbidden), id2s), ", ") + "' in proof search"
				);
			}
			penv1 = ruSetProverEnvTactic(penv0, \tree -> maybeBind(penv0.fns.tactic(tree), \n ->
					if (containsSet(forbidden, n.assertion.info.id)) None() else Some(n)
				)
			);
			RuState(state with 
				prover = Some(RuProverState(prover_state with env = penv1))
			);
		}
	);
}

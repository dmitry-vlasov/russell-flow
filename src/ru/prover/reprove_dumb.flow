import ds/vector;
import base/util/progress;
import ru/prover/prove;
import ru/prover/stats;
import ru/map_decls;
import comm;

export {
	ruCommReproveDumb : RuComm;
}

ruCommReproveDumb = RuComm(
	RuCommInfo(
		"reprove-dumb", "prover", "reprove theorems by a breadth-first search", "target", true, false, 
		[
			RuCommArg("target", true, "the target: a theorem, file or all", "all"),
		], []
	),
	ruRunReproveDumb
);

ruReproveDumbTheorem(
	th : RuTheorem, 
	args : Tree<string, flow>,
	index : RuIndex<RuAssertion>, 
	time_limit : double, 
	max_depth : int,
	max_size : int,
	math : RuMath, 
	env : RuEnv
) -> RuProverEnv {
	timer = ruMakeTimer();
	mapping = ref makeTree();
	root = lookupTreeDef(math.decls.assertions, ruProofQedStep(th.proof).assertion, ruNoAxiom);
	tactic = RuProverTactic("dumb",
		\tree -> getTreeValues(tree.leafs), 
		\tree -> ruProverTreeDepth(tree) > max_depth || ruProverTreeSize(tree) > max_size || length(^(tree.proofs)) > 0
	);
	prover_task = RuProverTask(th.info, ruSingleTacticStrategy(tactic), id2s(th.info.id), args, th.stat.hyps, ruProofQedStep(th.proof));
	prover_env1 = ruInitProverEnv(prover_task, math, env, index, time_limit);
	prover_env2 = ruExpandHyp(prover_env1.tree.root, prover_env1);
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		init_stats = RuStatsRow("reprove init " + id2s(th.info.id), 
			pairs2tree([
				Pair("size", i2d(length(th.proof.steps))), 
				Pair("time", ruTimePassed(timer))
			])
		);
		ruAddStats("reprove_init", init_stats);
	}
	t = ruMakeTimer();
	prover_env3 = ruProve(prover_env2);
	//prover_env3.env.out.println("<<<! PROVING FINISHED !>>>");
	prove_time = ruTimePassed(t);
	tm = ruTimePassed(timer);
	time = tm / 1000.0;
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		reprove_stats = RuStatsRow("reprove do " + id2s(th.info.id), 
			pairs2tree([
				//Pair("depth", i2d(lookupTreeDef(depths, th.info.id, -1))),
				Pair("size", i2d(ruSizeProverTree(prover_env2.tree.root))),
				Pair("proof-size", i2d(length(th.proof.steps))), 
				Pair("proof-vol", i2d(fold(th.proof.steps, 0, \acc, step -> acc + length(step.expr.nodes)))), 
				Pair("time", prove_time),
				Pair("time-per-step", prove_time / i2d(length(th.proof.steps)))
			])
		);
		ruAddStats("reprove_time", reprove_stats);
		stats = RuStatsRow("reproved all " + id2s(th.info.id), 
			pairs2tree([
				Pair("size", i2d(ruSizeProverTree(prover_env2.tree.root))), 
				Pair("time", tm)
			])
		);
		ruAddStats("reprove_all", stats);
	}
	prover_env3;
}

ruRunReproveDumb(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	target = ruDetermineTarget(unit.task, math, env);
	if (target != RuTargetNone()) {
		processed_count = ref 0;
		reproved_count = ref 0;
		failed_theorems = ref [];
		inc_reproved = ruAtomicIntInc(reproved_count);
		inc_processed = ruAtomicIntInc(processed_count);
		th_fail = ruAtomicRefArrayPush(failed_theorems);
		all_imported = ruSourcesAllImported(math.sources, env);
		index = ruMakeIndexForTarget(target, math, env);
		max_depth = ruTaskIntArg(task, "max-depth", 3);
		max_size = ruTaskIntArg(task, "max-size", 4096);
		reprove_fn = \decl, time_limit, env1 -> {
			th = cast(decl : RuDecl -> RuTheorem);
			if (ruTheoremIsProved(th)) {
				inc_processed(1);
				if (ruVerbose(env1.conf) > 1) {
					env1.out.println(i2s(^processed_count) + ": going to reprove theorem '" + id2s(th.info.id) + "' ... ");
				}
				th_timer = ruMakeTimer();
				ret = ruReproveDumbTheorem(th, task.args, index, time_limit, max_depth, max_size, math, env1);
				if (length(^(ret.tree.proofs)) > 0) {
					inc_reproved(1);
					if (ruVerbose(env1.conf) > 0) {
						env1.out.println(i2s(^processed_count) + " theorem '" + id2s(th.info.id) + "' was REPROVED in " + ruTimePassed2s(th_timer) + ", tree size: " + i2s(ruProverTreeSize(ret.tree)));
					}
				} else {
					th_fail(th.info.id);
					env1.out.error(
					"theorem '" + id2s(th.info.id) + "' was NOT reproved in " + ruTimePassed2s(th_timer) + 
						(if (ruVerbose(conf) > 1) "\n" + ru2s(th, math) else ""), [
							RuPlace(ruDeclPlace(th, env1) with pos = -1)
						]
					);
					//ruReproveDumbTheorem(th, task.args, index, time_limit, max_proofs, max_variants, max_true_nodes, max_false_nodes, math, 
					//	RuEnv(env1 with conf = ruSetConfOpt(env1.conf, "proving-trace", "2"))
					//);
					//ruCrash("theorem '" + id2s(th.info.id) + "' was NOT reproved in " + ruTimePassed2s(th_timer) + 
					//	(if (ruVerbose(conf) > 1) "\n" + ru2s(th, math) else ""));
				}
			} else {
				if (ruVerbose(env1.conf) > 0) {
					env1.out.println("theorem '" + id2s(th.info.id) + "' proof is not complete");
				}
				
			}
			RuMappedDecl(true, false, decl);
		}
		new_state = ruMapFnComm(
			RuUnit(unit.task, state, env.out),
			RuMapFn(
				RuMapFnInfo(
					"reprove-dumb", 
					\decl -> ruTargetPredicate(target)(decl) && ruDeclIsTheorem(decl), 
					ruProofLengthMeasure, 
					//\ -> "reproved: " + i2s(^reproved_count) + " theorems, failed: " + strGlue(map(^failed_theorems, id2s), ", ")
					\ -> "reproved: " + i2s(^reproved_count) + " theorems"
				),
				reprove_fn
			)
		);
		if (ruVerbose(env.conf) > 0) {
			env.out.println("reproved: " + i2s(^reproved_count) + " theorems");
		}
		if (length(^failed_theorems) > 0) {
			if (length(^failed_theorems) < 10) {
				env.out.println("Failed to reprove theorems: " + strGlue(map(^failed_theorems, id2s), ", "));
			} else {
				env.out.println("Failed to reprove theorems:\n" + strIndent(strGlue(map(^failed_theorems, id2s), "\n")));
			}
		}
		Some(RuState(new_state with 
			vars = setTree(new_state.vars, "reprove-dumb", pairs2tree([
				Pair("failed-count", flow(length(^failed_theorems))),
				Pair("failed-theorems", flow(map(^failed_theorems, id2s))),
				Pair("reproved-count", flow(^reproved_count))
			]));
		));
	} else {
		env.out.println("no target for dumb reproving");
		Some(state);
	}
}

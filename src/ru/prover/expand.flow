import ru/prover/proofs;

export {
	ruExpandHyp(hyp : RuProverHyp, env : RuProverEnv) -> RuProverEnv;
	ruExpandProp(prop : RuProverProp, env : RuProverEnv) -> RuProverEnv;
}

ruExpandHyp(hyp : RuProverHyp, env : RuProverEnv) -> RuProverEnv {
	t1 = ruMakeTimer();
	unified = env.unifyAssertion(hyp);
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		ruAddStats("unify_assertion", RuStatsRow("unifying " + ru2s(hyp.expr, env.math), 
			pairs2tree([
				Pair("size", i2d(length(hyp.expr.nodes))), 
				Pair("time", ruTimePassed(t1)), 
				Pair("rets", i2d(length(unified)))
			])
		));
	}
	leafs_removed = switch (hyp) {
		RuProverExp(__,__,__,__, parent): removeFromTree(env.tree.leafs, parent.id);
		RuProverRoot(__,__,__): env.tree.leafs;
	};
	leafs = fold(unified, leafs_removed,
		\acc, unif -> {
			t2 = ruMakeTimer();
			a_vars  = ruAssertion2Vars(unif.data);
			t2_ = ruTimePassed(t2);
			
			t3 = ruMakeTimer();
			fresher = ruMakeFresh(foldSet(a_vars, [], \ac, v -> if (containsKeyTree(unif.sub, v)) ac else concat(ac, [v])), env.fresher);
			t3_ = ruTimePassed(t3);
			
			
			t4 = ruMakeTimer();
			s_all = ruUnsafeCompose(unif.sub, fresher);
			t4_ = ruTimePassed(t4);
			
			t5 = ruMakeTimer();
			prop = RuProverProp(
				env.idxer(),
				unif.data, ref [], 
				filterTree(s_all, \v, __ -> !containsSet(a_vars, v)),
				filterTree(s_all, \v, __ -> containsSet(a_vars, v)),
				ref [],
				hyp
			);
			env.onProp(prop);
			refArrayPush(hyp.children, prop);
			t5_ = ruTimePassed(t5);
			
			t6 = ruMakeTimer();
			ret = setTree(acc, prop.id, prop);
			t6_ = ruTimePassed(t6);
			
			t = ruTimePassed(t2);
			if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
				ruAddStats("add_unified", RuStatsRow("adding " + ru2s(hyp.expr, env.math) + " for " + id2s(unif.data.descr.id), 
					pairs2tree([
						Pair("size", i2d(sizeTree(s_all))), 
						Pair("time",  t), 
						Pair("time2", t2_), 
						Pair("time3", t3_),
						Pair("time4", t4_),
						Pair("time5", t5_),
						Pair("time6", t6_),
						Pair("count", 1.0)
					])
				));
			}
			ret
		}
	);
	RuProverEnv(env with 
		tree = RuProverTree(leafs, env.tree.root)
	);
}

ruExpandProp(prop : RuProverProp, env : RuProverEnv) -> RuProverEnv {
	if (ruArity(prop.assertion) == 0) {
		refArrayPush(prop.proofs, RuProverProofProp(prop, prop.sub, []));
		RuProverEnv(env with tree = RuProverTree(env.tree with leafs = removeFromTree(env.tree.leafs, prop.id)));
	} else {
		env1 = foldi(prop.assertion.stat.hyps, env, \i, acc, h -> {
			ex = ruApplySubst(ruApplySubst(h.expr, prop.sub), prop.outer);
			if (!env.admitExp(ex)) acc else {
				hyp = RuProverExp(i, ref [], ex, ref [], prop);
				refArrayPush(prop.children, hyp);
				t1 = ruMakeTimer();
				unified = env.unifyPremise(hyp);
				if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
					ruAddStats("unify_premise", RuStatsRow("unifying " + ru2s(hyp.expr, env.math), 
						pairs2tree([
							Pair("size", i2d(length(hyp.expr.nodes))), 
							Pair("time", ruTimePassed(t1)), 
							Pair("rets", i2d(length(unified)))
						])
					));
				}
				iter(unified, \unif -> {
					hypProof = RuProverProofTop(hyp, unif.expr, unif.data, unif.sub);
					refArrayPush(hyp.proofs, hypProof);
					ruAddProof(prop, hypProof, acc);
				});
				t2 = ruMakeTimer();
				ret = ruExpandHyp(hyp, acc);
				if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
					ruAddStats("ruExpandHyp", RuStatsRow("expanding " + ru2s(hyp.expr, env.math), 
						pairs2tree([
							Pair("time", ruTimePassed(t2)), 
							Pair("count", 1.0)
						])
					));
				}
				ret
			}
		});
		RuProverEnv(env1 with tree = RuProverTree(env1.tree with leafs = removeFromTree(env1.tree.leafs, prop.id)));
	}
}

import ru/prover/proofs;

export {
	ruExpandHyp(hyp : RuProverHyp, prover_env : RuProverEnv) -> RuProverEnv;
	ruExpandProp(prop : RuProverProp, prover_env : RuProverEnv) -> RuProverEnv;
}

ruExpandHyp(hyp : RuProverHyp, prover_env : RuProverEnv) -> RuProverEnv {
	t1 = ruMakeTimer();
	unified = prover_env.fns.unifyAssertion(hyp);
	if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
		ruAddStats("unify_assertion", RuStatsRow("unifying " + ru2s(hyp.expr, prover_env.math), 
			pairs2tree([
				Pair("size", i2d(length(hyp.expr.nodes))), 
				Pair("time", ruTimePassed(t1)), 
				Pair("rets", i2d(length(unified)))
			])
		));
	}
	/*leafs_removed = switch (hyp) {
		RuProverExp(__,__,__,__, parent): removeFromTree(prover_env.tree.leafs, parent.id);
		RuProverRoot(__,__,__): prover_env.tree.leafs;
	};*/
	expanded_leafs = fold(unified, prover_env.tree.leafs,
		\acc, unif -> {
			t2 = ruMakeTimer();
			a_vars  = ruAssertion2Vars(unif.data);
			t2_ = ruTimePassed(t2);
			
			t3 = ruMakeTimer();
			fresher = ruMakeFresherSubst(
				foldSet(a_vars, [], \ac, v -> 
					if (containsKeyTree(unif.sub.map, v.id)) ac else concat(ac, [v])
				), 
				prover_env.fns.fresher
			);
			t3_ = ruTimePassed(t3);
			
			
			t4 = ruMakeTimer();
			s_all = ruUnsafeCompose(unif.sub, fresher);
			sub = RuSubst(foldTree(s_all.map, makeTree(), \v, e, ac -> 
				if (!containsSet(a_vars, e.var)) setTree(ac, v, e) else ac
			));
			outer = RuSubst(foldTree(s_all.map, makeTree(), \v, e, ac -> 
				if (containsSet(a_vars, e.var)) setTree(ac, v, e) else ac
			));
			t4_ = ruTimePassed(t4);
			
			t5 = ruMakeTimer();
			prop = RuProverProp(
				prover_env.fns.idxer(),
				unif.data, makeVector(4), 
				sub, //filterTree(s_all, \v, __ -> !containsSet(a_vars, v)),
				outer, //filterTree(s_all, \v, __ -> containsSet(a_vars, v)),
				makeVector(ruArity(unif.data)),
				hyp,
				ref false
			);
			prover_env.fns.onProp(prop);
			ruAtomicVectorPush(hyp.children)(prop);
			t5_ = ruTimePassed(t5);
			
			t6 = ruMakeTimer();
			ret = setTree(acc, prop.id, prop);
			t6_ = ruTimePassed(t6);
			
			t = ruTimePassed(t2);
			if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
				ruAddStats("add_unified", RuStatsRow("adding " + ru2s(hyp.expr, prover_env.math) + " for " + id2s(unif.data.info.id), 
					pairs2tree([
						Pair("size", i2d(sizeTree(s_all.map))), 
						Pair("time",  t), 
						Pair("time2", t2_), 
						Pair("time3", t3_),
						Pair("time4", t4_),
						Pair("time5", t5_),
						Pair("time6", t6_),
						Pair("count", 1.0)
					])
				));
			}
			ret
		}
	);
	RuProverEnv(prover_env with 
		tree = RuProverTree(expanded_leafs, mergeTree(prover_env.tree.nodes, expanded_leafs), prover_env.tree.root)
	);
}

ruExpandProp(prop : RuProverProp, prover_env : RuProverEnv) -> RuProverEnv {
	prop.expanded := true;
	if (ruArity(prop.assertion) == 0) {
		pushVector(prop.proofs, RuProverProofProp(prop, prop.sub, []));
		RuProverEnv(prover_env with 
			tree = RuProverTree(prover_env.tree with 
				leafs = removeFromTree(prover_env.tree.leafs, prop.id)
			)
		);
	} else {
		prover_env1 = foldi(prop.assertion.stat.hyps, prover_env, \i, acc, h -> {
			ex = ruApplySubst(ruApplySubst(h.expr, prop.sub), prop.outer);
			if (!prover_env.fns.admitExp(ex)) acc else {
				hyp = RuProverExp(i, makeVector(4), ex, makeVector(0), prop);
				pushVector(prop.children, hyp);
				t1 = ruMakeTimer();
				unified = prover_env.fns.unifyPremise(hyp);
				if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
					ruAddStats("unify_premise", RuStatsRow("unifying " + ru2s(hyp.expr, prover_env.math), 
						pairs2tree([
							Pair("size", i2d(length(hyp.expr.nodes))), 
							Pair("time", ruTimePassed(t1)), 
							Pair("rets", i2d(length(unified)))
						])
					));
				}
				top_proofs = makeVector(length(unified));
				iter(unified, \unif -> {
					hypProof = RuProverProofTop(hyp, unif.expr, unif.data, unif.sub);
					pushVector(top_proofs, hypProof);
					ruAddProof(prop, hypProof, acc);
				});
				appendVector(hyp.proofs, top_proofs);
				t2 = ruMakeTimer();
				ret = ruExpandHyp(hyp, acc);
				if (lookupTreeDef(prover_env.env.conf.opts, "reprove-stats", "") == "1") {
					ruAddStats("ruExpandHyp", RuStatsRow("expanding " + ru2s(hyp.expr, prover_env.math), 
						pairs2tree([
							Pair("time", ruTimePassed(t2)), 
							Pair("count", 1.0)
						])
					));
				}
				ret
			}
		});
		prover_env1;
		/*RuProverEnv(prover_env1 with 
			tree = RuProverTree(prover_env1.tree with 
				leafs = removeFromTree(prover_env1.tree.leafs, prop.id)
			)
		);*/
	}
}

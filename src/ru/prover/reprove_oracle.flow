import ds/vector;
import base/util/progress;
import ru/prover/prove;
import ru/prover/stats;
import ru/map_decls;
import comm;

export {
	ruCommReproveOracle : RuComm;
}

ruCommReproveOracle = RuComm(
	RuCommInfo(
		"reprove-oracle", "prover", "reprove theorems with the 'oracle', which leads the proof", "target", true, false, 
		[
			RuCommArg("target", true, "the target: a theorem, file or all", "all"),
			RuCommArg("max-true-props", true, "limit number of proposition choice variants. -1 means no limit", "1"),
			RuCommArg("max-false-props", true, "limit number of proposition choice variants. -1 means no limit", "0"),
			RuCommArg("max-proofs", true, "limit number of proofs in variant tree. -1 means no limit", "-1"),
			RuCommArg("max-variants", true, "limit number of assertion choice variants. -1 means no limit", "-1")
		], []
	),
	ruRunReproveOracle
);

ruReproveOracleTactic(
	theorem : RuTheorem, math : RuMath, mapping : ref Tree<RuProverProp, RuProofStep>, 
	max_true_nodes : int, max_false_nodes : int, env : RuEnv
) -> RuProverTactic {
	proof = ruTheoremProofTree(theorem, math);
	leafs : ref [Pair<RuProverProp, RuProofStep>] = ref [];
	queue : ref [Pair<RuProverProp, RuProofStep>] = ref [];
	expand = \tree -> {
		if (length(^queue) == 0) {
			if (sizeTree(^mapping) == 0) {
				traverseInOrder(tree.leafs, \__, n -> 
					if (length(^queue) == 0) {
						switch (n.parent) {
							RuProverRoot(__,__,__):
								if (n.assertion.info.id == proof.assertion) {
									refArrayPush(queue, Pair(n, proof));
								} 
							default: {	}
						}
					}
				);
			} else if (length(^leafs) > 0) {
				first_leaf = ^leafs[0];
				n = first_leaf.first;
				s = first_leaf.second;
				leafs := removeIndex(^leafs, 0);
				iteriVector(n.children, \i, child -> {
					if (length(s.children) <= i) {
						ruCrash("length(s.children) <= i: " + i2s(length(s.children)) + " <= " + i2s(i) + "\n" +
							"s.assertion.info.id: " + id2s(s.assertion) + "\n" +
							"n:\n" + strIndent(ruProverNode2s(n, math)));
					} else {
						step_child = s.children[i];
						switch (step_child) {
							RuProofStep(assertion,__,__) : {
								iterVector(child.children, \grand ->
									if (grand.assertion.info.id == assertion) {
										refArrayPush(queue, Pair(grand, step_child));
									}
								);
							}
							default: { }
						}
					}
				});
			} else { }
		}
		if (length(^queue) > 0) {
			out = take(^queue, max_true_nodes);
			queue := removeRange(^queue, 0, max_true_nodes);
			true_nodes = map(out, \x -> {
				n = x.first;
				s = x.second;
				if (exists(s.children, \ch -> switch (ch) { RuProofStep(__,__,__): true; default: false; })) {
					refArrayPush(leafs, Pair(n, s));
				}
				mapping := setTree(^mapping, n, s);
				n
			});
			curr_leafs = filter(getTreeValues(tree.leafs), \prop -> forall(out, \x -> prop != x.first));
			false_nodes = take(curr_leafs, max_false_nodes);
			iter(out, \x -> {
				i = findiDef(^queue, \s -> s.first == x.first, -1);
				if (i != -1) {
					queue := removeIndex(^queue, i);
				}
			});
			concat(true_nodes, false_nodes);
		} else {
			[];
		}
	}
	RuProverTactic("oracle", expand, \__->false);
}

ruReproveOracleUnifyPremise(
	th : RuTheorem, 
	unify : (RuProverHyp) -> [RuUnified<RuPremise>], 
	mapping : ref Tree<RuProverProp, RuProofStep>, 
	math : RuMath, 
	env : RuEnv,
	max_proofs : int,
	max_true_nodes : int,
	max_false_nodes : int,
) -> (RuProverHyp) -> [RuUnified<RuPremise>] {
	if (lookupTreeDef(env.conf.opts, "reprove-singleton", "") == "1") {
		\hyp : RuProverHyp ->  {
			unif = unify(hyp);
			switch (hyp) {
				RuProverExp(i, __,__,__, parent): {
					switch (lookupTree(^mapping, parent)) {
						Some(step): {
							switch (step.children[i]) {
								RuProofStep(__,__,__): [];
								RuProofHyp(ind,__): {
									p1 = filter(unif, \un -> un.data.ind == ind);
									if (max_proofs <= 1) p1 else {
										concat(p1, take(unif, max_proofs - 1));
									}
								}
							}
						}
						None(): {
							if (max_true_nodes <= 1 && max_false_nodes == 0) {
								ruCrash("must not happen");
							}
							[];
						}
					}
				}
				RuProverRoot(__,__,__): unif;
			}
		}
	} else unify;
}

ruReproveOracleUnifyAssertion(
	unify : (RuProverHyp) -> [RuUnified<RuAssertion>], 
	mapping : ref Tree<RuProverProp, RuProofStep>, 
	root : RuAssertion,
	math : RuMath, 
	env : RuEnv,
	max_variants : int,
	max_true_nodes : int,
	max_false_nodes : int,
) -> (RuProverHyp) -> [RuUnified<RuAssertion>] {
	if (lookupTreeDef(env.conf.opts, "reprove-singleton", "") == "1") {
		\hyp : RuProverHyp ->  {
			switch (hyp) {
				RuProverExp(i, __,__,__, parent): {
					switch (lookupTree(^mapping, parent)) {
						Some(step): {
							switch (step.children[i]) {
								RuProofStep(ass, children, expr): {
									e1 = hyp.expr;
									assertion = lookupTreeDef(math.decls.assertions, ass, ruNoAxiom);
									e2 = assertion.stat.prop;
									v1 = eitherMap(
										ruUnifyExps([e1, e2], ruEmptySubst, math, env),
										\sub -> [RuUnified(sub, assertion, ruApplySubst(e1, sub))], []
									);
									if (max_variants <= 1) v1 else {
										v2 = unify(hyp);
										concat(v1, take(v2, max_variants - 1));
									}
								}
								RuProofHyp(h,__): [];
							}
						}
						None(): {
							if (max_true_nodes <= 1 && max_false_nodes == 0) {
								ruCrash("must not happen");
							}
							[];
						}
					}
				}
				RuProverRoot(__,e1,__): {
					e2 = root.stat.prop;
					eitherMap(
						ruUnifyExps([e1, e2], ruEmptySubst, math, env),
						\sub -> [RuUnified(sub, root, ruApplySubst(e1, sub))], []
					);
				}
			}
		}
	} else {
		unify;
	}
}

RuReproveOracleConf(
	args : Tree<string, flow>,
	index : RuIndex<RuAssertion>,  
	max_proofs : int,
	max_variants : int, 
	max_true_nodes : int,
	max_false_nodes : int,
	debug : bool
);

ruReproveOracleTheorem(
	th : RuTheorem, 
	time_limit : double, 
	conf : RuReproveOracleConf,
	math : RuMath, 
	env : RuEnv
) -> bool {
	timer = ruMakeTimer();
	mapping = ref makeTree();
	root = lookupTreeDef(math.decls.assertions, ruProofQedStep(th.proof).assertion, ruNoAxiom);
	tactic = ruReproveOracleTactic(th, math, mapping, conf.max_true_nodes, conf.max_false_nodes, env);
	prover_task = RuProverTask(th.info, ruSingleTacticStrategy(tactic), id2s(th.info.id), conf.args, th.stat.hyps, ruProofQedStep(th.proof));
	penv0 = ruInitProverEnv(prover_task, math, env, conf.index, time_limit);
	penv1 = RuProverEnv(penv0 with
		fns = RuProverFuncs(penv0.fns with
			unifyAssertion = ruReproveOracleUnifyAssertion(
				penv0.fns.unifyAssertion, mapping, root, math, env, conf.max_variants, conf.max_true_nodes, conf.max_false_nodes
			),
			unifyPremise = ruReproveOracleUnifyPremise(
				th, penv0.fns.unifyPremise, mapping, math, env, conf.max_proofs, conf.max_true_nodes, conf.max_false_nodes
			),
			onProof = \proof_tree -> {
				if (conf.debug && (env.conf.verbose > 1)) {
					env.out.onMessage("<<<! FOUND A PROOF !>>>:\n" + ruProverTree2s(penv0.tree.root, penv0.math, true));
				}
				penv0.fns.onProof(proof_tree);
			}
		)
	);
	penv2 = ruExpandHyp(penv1.tree.root, penv1);
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		init_stats = RuStatsRow("reprove init " + id2s(th.info.id), 
			pairs2tree([
				Pair("size", i2d(length(th.proof.steps))), 
				Pair("time", ruTimePassed(timer))
			])
		);
		ruAddStats("reprove_init", init_stats);
	}
	t = ruMakeTimer();
	if (conf.debug) {
		env.out.onMessage("<<<! PROVING STARTED !>>>");
	}
	penv3 = ruProve(penv2);
	if (conf.debug) {
		env.out.onMessage("<<<! PROVING FINISHED !>>>");
	}
	prove_time = ruTimePassed(t);
	tm = ruTimePassed(timer);
	time = tm / 1000.0;
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		reprove_stats = RuStatsRow("reprove do " + id2s(th.info.id), 
			pairs2tree([
				//Pair("depth", i2d(lookupTreeDef(depths, th.info.id, -1))),
				Pair("size", i2d(ruSizeProverTree(penv2.tree.root))),
				Pair("proof-size", i2d(length(th.proof.steps))), 
				Pair("proof-vol", i2d(fold(th.proof.steps, 0, \acc, step -> acc + length(step.expr.nodes)))), 
				Pair("time", prove_time),
				Pair("time-per-step", prove_time / i2d(length(th.proof.steps)))
			])
		);
		ruAddStats("reprove_time", reprove_stats);
		stats = RuStatsRow("reproved all " + id2s(th.info.id), 
			pairs2tree([
				Pair("size", i2d(ruSizeProverTree(penv2.tree.root))), 
				Pair("time", tm)
			])
		);
		ruAddStats("reprove_all", stats);
	}
	success = length(^(penv3.tree.proofs)) > 0;
	if (conf.debug) {
		if (success) {
			env.out.onMessage("<<<! PROVING WAS SUCCESSFLL !>>>");
		} else {
			env.out.onMessage("<<<! PROVING WAS NOT SUCCESSFLL !>>>" + 
				(if (env.conf.verbose > 1) "\n" + ruProverTree2s(penv3.tree.root, penv3.math, true) else "")
			);
		}
	}
	success;
}

ruRunReproveOracle(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	target = ruDetermineTarget(unit.task, math, env);
	if (target != RuTargetNone()) {
		reproved_count = ref 0;
		failed_theorems = ref [];
		inc_reproved = ruAtomicIntInc(reproved_count);
		th_fail = ruAtomicRefArrayPush(failed_theorems);
		all_imported = ruSourcesAllImported(math.sources, env);
		oracle_conf = RuReproveOracleConf(
			task.args,
			ruMakeIndexForTarget(target, math, env),
			ruTaskIntArg(task, "max-proofs", -1),
			ruTaskIntArg(task, "max-variants", -1), 
			ruTaskIntArg(task, "max-true-nodes", 1),
			ruTaskIntArg(task, "max-false-nodes", 0),
			false // debug
		);
		reprove_fn = \decl, time_limit, env1 -> {
			th = cast(decl : RuDecl -> RuTheorem);
			if (ruTheoremIsProved(th)) {
				if (ruVerbose(env1.conf) > 2) {
					env1.out.onMessage(i2s(^reproved_count) + ": going to reprove theorem '" + id2s(th.info.id) + "' ... ");
				}
				th_timer = ruMakeTimer();
				
				if (ruReproveOracleTheorem(th, time_limit, oracle_conf, math, env1)) {
					inc_reproved(1);
					if (ruVerbose(env1.conf) > 1) {
						env1.out.onMessage(i2s(^reproved_count) + " theorem '" + id2s(th.info.id) + "' was REPROVED in " + ruTimePassed2s(th_timer));
					}
					RuMappedDecl(true, false, decl);
				} else {
					if (ruReproveOracleTheorem(th, time_limit, oracle_conf, math, env1)) {
						inc_reproved(1);
						if (ruVerbose(env1.conf) > 1) {
							env1.out.onMessage(i2s(^reproved_count) + " theorem '" + id2s(th.info.id) + "' was REPROVED in " + ruTimePassed2s(th_timer));
						}
						RuMappedDecl(true, false, decl);
					} else {
						th_fail(th.info.id);
						env1.out.onError(
						"theorem '" + id2s(th.info.id) + "' was NOT reproved in " + ruTimePassed2s(th_timer) + ", time limit: " + ruTime2s(time_limit) + 
							(if (ruVerbose(conf) > 1) "\n" + ru2s(th, math) else ""), [
								RuPlace(ruDeclPlace(th, env1) with pos = -1)
							]
						);
						ruReproveOracleTheorem(th, time_limit, 
							RuReproveOracleConf(oracle_conf with debug = true), math, 
							RuEnv(env1 with conf = ruSetConfOpt(env1.conf, "proving-trace", "2"))
						);
						ruCrash("theorem '" + id2s(th.info.id) + "' was NOT reproved in " + ruTimePassed2s(th_timer) + 
							(if (ruVerbose(conf) > 1) "\n" + ru2s(th, math) else ""));
						RuMappedDecl(ruTimePassed(th_timer) < time_limit, false, decl);
					}
				}
			} else {
				if (ruVerbose(env1.conf) > 0) {
					env1.out.onMessage("theorem '" + id2s(th.info.id) + "' proof is not complete");
				}
				RuMappedDecl(true, false, decl);
			}
		}
		new_state = ruMapFnComm(
			RuUnit(unit.task, state, env.out),
			RuMapFn(
				RuMapFnInfo(
					"reprove-oracle", 
					\decl -> ruTargetPredicate(target)(decl) && ruDeclIsTheorem(decl), 
					ruProofLengthMeasure, 
					//\ -> "reproved: " + i2s(^reproved_count) + " theorems, failed: " + strGlue(map(^failed_theorems, id2s), ", ")
					\ -> "reproved: " + i2s(^reproved_count) + " theorems"
				),
				reprove_fn
			)
		);

		/*if (lookupTreeDef(env.conf.opts, "add-proof-stats", "") == "1") {
			env.out.onMessage("STATS(2):");
			env.out.onMessage(
				"size-time_direct:\n" + 
				ruShowStats("add-proof-stats", ruDistribLogAvgStats("size", "time_direct", 2)) + "\n\n" + 
				"size-time_large:\n" + 
				ruShowStats("add-proof-stats", ruDistribLogAvgStats("size", "time_large", 2)) + "\n\n"
				//+ "unify-inds-stats:\n" + 
				//ruShowStats("unify-inds-stats", ruDistribLogAvgStats("size", "time_unify_inds", 2)) + "\n\n" +
				//"intersect-cols-stats:\n" + 
				//ruShowStats("intersect-cols-stats", ruDistribLogAvgStats("size", "time_intersect_cols", 2))
			);
		} else {
			env.out.onMessage("NO STATS:");
		}*/

		if (ruVerbose(env.conf) > 0) {
			env.out.onMessage("reproved: " + i2s(^reproved_count) + " theorems");
		}
		if (length(^failed_theorems) > 0) {
			if (length(^failed_theorems) < 10) {
				env.out.onMessage("Failed to reprove theorems: " + strGlue(map(^failed_theorems, id2s), ", "));
			} else {
				env.out.onMessage("Failed to reprove theorems:\n" + strIndent(strGlue(map(^failed_theorems, id2s), "\n")));
			}
		}
		Some(RuState(new_state with 
			vars = setTree(new_state.vars, "reprove-oracle", pairs2tree([
				Pair("failed-count", flow(length(^failed_theorems))),
				Pair("failed-theorems", flow(map(^failed_theorems, id2s))),
				Pair("reproved-count", flow(^reproved_count))
			]));
		));
	} else {
		env.out.onMessage("no target for proof reproving with oracle");
		Some(state);
	}
}

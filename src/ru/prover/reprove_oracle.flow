import ds/vector;
import base/util/progress;
import ru/prover/prove;
import ru/prover/stats;
import ru/map_decls;
import comm;

export {
	ruCommReproveOracle : RuComm;
}

ruCommReproveOracle = RuComm(
	RuCommInfo(
		"reprove-oracle", "prover", "reprove theorems with the 'oracle', which leads the proof", "target", true, false, 
		[
			RuCommArg("target", true, "the target: a theorem, file or all", "all"),
			RuCommArg("max-proofs", true, "limit number of proofs in variant tree", "-1"),
			RuCommArg("max-variants", true, "limit number of assertion choice variants", "-1")
		], []
	),
	ruRunReproveOracle
);

ruReproveOracleTactic(theorem : RuTheorem, math : RuMath, mapping : ref Tree<RuProverProp, RuProofStep>) -> (RuProverTree) -> Maybe<RuProverProp> {
	proof = ruMakeTreeProof(theorem, math);
	leafs = ref [];
	queue = ref [];
	\tree -> {
		if (length(^queue) == 0) {
			if (sizeTree(^mapping) == 0) {
				traverseInOrder(tree.leafs, \__, n -> 
					if (length(^queue) == 0) {
						switch (n.parent) {
							RuProverRoot(__,__,__):
								if (n.assertion.info.id == proof.assertion) {
									refArrayPush(queue, Pair(n, proof));
								} 
							default: {	}
						}
					}
				);
			} else if (length(^leafs) > 0) {
				first_leaf = ^leafs[0];
				n = first_leaf.first;
				s = first_leaf.second;
				leafs := removeIndex(^leafs, 0);
				iteri(^(n.children), \i, child -> {
					step_child = s.children[i];
					switch (step_child) {
						RuProofStep(assertion,__,__) : {
							iter(^(child.children), \grand ->
								if (grand.assertion.info.id == assertion) {
									refArrayPush(queue, Pair(grand, step_child));
								}
							);
						}
						default: { }
					}
				});
			} else { }
		}
		if (length(^queue) > 0) {
			first_queue = ^queue[0];
			n = first_queue.first;
			s = first_queue.second;
			queue := removeIndex(^queue, 0);
			if (exists(s.children, \ch -> switch (ch) { RuProofStep(__,__,__): true; default: false; })) {
				refArrayPush(leafs, Pair(n, s));
			}
			mapping := setTree(^mapping, n, s);
			Some(n);
		} else {
			None();
		}
	}
}

ruReproveOracleUnifyPremise(
	th : RuTheorem, 
	unify : (RuProverHyp) -> [RuUnified<RuPremise>], 
	mapping : ref Tree<RuProverProp, RuProofStep>, 
	math : RuMath, 
	env : RuEnv,
	max_proofs : int
) -> (RuProverHyp) -> [RuUnified<RuPremise>] {
	if (lookupTreeDef(env.conf.opts, "reprove-singleton", "1") == "1") {
		\hyp : RuProverHyp ->  {
			unif = unify(hyp);
			switch (hyp) {
				RuProverExp(i, __,__,__, parent): {
					switch (lookupTree(^mapping, parent)) {
						Some(step): {
							switch (step.children[i]) {
								RuProofStep(__,__,__): [];
								RuProofHyp(ind,__): {
									p1 = filter(unif, \un -> un.data.ind == ind);
									if (max_proofs <= 1) p1 else {
										concat(p1, take(unif, max_proofs - 1));
									}
								}
							}
						}
						None(): {
							ruCrash("must not happen");
							[];
						}
					}
				}
				RuProverRoot(__,__,__): unif;
			}
		}
	} else unify;
}

ruReproveOracleUnifyAssertion(
	unify : (RuProverHyp) -> [RuUnified<RuAssertion>], 
	mapping : ref Tree<RuProverProp, RuProofStep>, 
	root : RuAssertion,
	math : RuMath, 
	env : RuEnv,
	max_variants : int
) -> (RuProverHyp) -> [RuUnified<RuAssertion>] {
	if (lookupTreeDef(env.conf.opts, "reprove-singleton", "1") == "1") {
		\hyp : RuProverHyp ->  {
			switch (hyp) {
				RuProverExp(i, __,__,__, parent): {
					switch (lookupTree(^mapping, parent)) {
						Some(step): {
							switch (step.children[i]) {
								RuProofStep(ass, children, expr): {
									e1 = hyp.expr;
									assertion = lookupTreeDef(math.decls.assertions, ass, ruNoAxiom);
									e2 = assertion.stat.prop;
									v1 = eitherMap(
										ruUnifyExps([e1, e2], makeTree(), math, env),
										\sub -> [RuUnified(sub, assertion, ruApplySubst(e1, sub))], []
									);
									if (max_variants <= 1) v1 else {
										v2 = unify(hyp);
										concat(v1, take(v2, max_variants - 1));
									}
								}
								RuProofHyp(h,__): [];
							}
						}
						None(): {
							ruCrash("must not happen");
							[];
						}
					}
				}
				RuProverRoot(__,e1,__): {
					e2 = root.stat.prop;
					eitherMap(
						ruUnifyExps([e1, e2], makeTree(), math, env),
						\sub -> [RuUnified(sub, root, ruApplySubst(e1, sub))], []
					);
				}
			}
		}
	} else {
		unify;
	}
}

ruReproveOracleTheorem(
	th : RuTheorem, 
	index : RuIndex<RuAssertion>, 
	time_limit : double, 
	max_proofs : int,
	max_variants : int, 
	math : RuMath, 
	env : RuEnv
) -> bool {
	timer = ruMakeTimer();
	mapping = ref makeTree();
	root = lookupTreeDef(math.decls.assertions, ruProofQedStep(th.proof).assertion, ruNoAxiom);
	prover_task = RuProverTask(id2s(th.info.id), th.stat.hyps, ruProofQedStep(th.proof));
	prover_env0 = ruInitProverEnv(prover_task, math, env, index, time_limit);
	prover_env1 = RuProverEnv(prover_env0 with
		fns = RuProverFuncs(prover_env0.fns with
			unifyAssertion = ruReproveOracleUnifyAssertion(
				prover_env0.fns.unifyAssertion, mapping, root, math, env, max_variants 
			),
			unifyPremise = ruReproveOracleUnifyPremise(
				th, prover_env0.fns.unifyPremise, mapping, math, env, max_proofs
			),
			tactic = ruReproveOracleTactic(th, math, mapping)
		)
	);
	prover_env2 = ruExpandHyp(prover_env1.tree.root, prover_env1);
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		init_stats = RuStatsRow("reprove init " + id2s(th.info.id), 
			pairs2tree([
				Pair("size", i2d(length(th.proof.steps))), 
				Pair("time", ruTimePassed(timer))
			])
		);
		ruAddStats("reprove_init", init_stats);
	}
	t = ruMakeTimer();
	prover_env3 = ruProve(prover_env2);
	prove_time = ruTimePassed(t);
	tm = ruTimePassed(timer);
	time = tm / 1000.0;
	if (lookupTreeDef(env.conf.opts, "reprove-stats", "") == "1") {
		reprove_stats = RuStatsRow("reprove do " + id2s(th.info.id), 
			pairs2tree([
				//Pair("depth", i2d(lookupTreeDef(depths, th.info.id, -1))),
				Pair("size", i2d(ruSizeProverTree(prover_env2.tree.root))),
				Pair("proof-size", i2d(length(th.proof.steps))), 
				Pair("proof-vol", i2d(fold(th.proof.steps, 0, \acc, step -> acc + length(step.expr.nodes)))), 
				Pair("time", prove_time),
				Pair("time-per-step", prove_time / i2d(length(th.proof.steps)))
			])
		);
		ruAddStats("reprove_time", reprove_stats);
		stats = RuStatsRow("reproved all " + id2s(th.info.id), 
			pairs2tree([
				Pair("size", i2d(ruSizeProverTree(prover_env2.tree.root))), 
				Pair("time", tm)
			])
		);
		ruAddStats("reprove_all", stats);
	}
	length(^(prover_env3.proofs)) > 0
}

ruRunReproveOracle(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	timer = ruMakeTimer();
	target = ruDetermineTarget(unit.task, math, env);
	if (target != RuTargetNone()) {
		reproved_count = ref 0;
		failed_theorems = ref [];
		inc_reproved = ruAtomicIntInc(reproved_count);
		th_fail = ruAtomicRefArrayPush(failed_theorems);
		max_proofs = s2i(lookupTreeDef(task.args, "max-proofs", "-1"));
		max_variants = s2i(lookupTreeDef(task.args, "max-variants", "-1"));
		all_imported = ruSourcesAllImported(math.sources, env);
		index = ruMakeIndexForTarget(target, math, env);
		reprove_fn = \decl, time_limit -> {
			th = cast(decl : RuDecl -> RuTheorem);
			th_timer = ruMakeTimer();
			if (ruReproveOracleTheorem(th, index, time_limit, max_proofs, max_variants, math, env)) {
				inc_reproved(1);
				if (ruVerbose(env.conf) > 1) {
					env.out.onMessage(i2s(^reproved_count) + " theorem '" + id2s(th.info.id) + "' was REPROVED in " + ruTimePassed2s(th_timer));
				}
			} else {
				th_fail(th.info.id);
				env.out.onError(
					"theorem '" + id2s(th.info.id) + "' was NOT reproved in " + ruTimePassed2s(th_timer) + 
					(if (ruVerbose(conf) > 1) "\n" + ru2s(th, math) else ""), [ruDeclPlace(th, env)]
				);
			}
			None();
		}
		new_state = ruMapFnComm(
			RuUnit(unit.task, state, env.out),
			RuMapFn(
				RuMapFnInfo(
					"reprove-oracle", 
					\decl -> ruTargetPredicate(target)(decl) && ruDeclIsTheorem(decl), 
					ruProofLengthMeasure, 
					\ -> "reproved: " + i2s(^reproved_count) + " theorems, failed: " + strGlue(map(^failed_theorems, id2s), ", ")
				),
				reprove_fn
			)
		);
		if (ruVerbose(env.conf) > 0) {
			env.out.onMessage("reproved: " + i2s(^reproved_count) + " theorems");
		}
		if (length(^failed_theorems) > 0) {
			if (length(^failed_theorems) < 10) {
				env.out.onMessage("Failed to reprove theorems: " + strGlue(map(^failed_theorems, id2s), ", "));
			} else {
				env.out.onMessage("Failed to reprove theorems:\n" + strIndent(strGlue(map(^failed_theorems, id2s), "\n")));
			}
		}
		Some(RuState(new_state with 
			vars = mergeTree(new_state.vars, pairs2tree([
				Pair("reprove-oracle.failed-count", ValInt(length(^failed_theorems))),
				Pair("reprove-oracle.failed-theorems", ValArray(map(^failed_theorems, \id -> ValString(id2s(id))))),
				Pair("reprove-oracle.reproved-count", ValInt(^reproved_count))
			]));
		));
	} else {
		env.out.onMessage("no target for proof reproving with oracle");
		Some(state);
	}
}

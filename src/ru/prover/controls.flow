import ru/prover/tree;

export {

	RuProverTactic(
		description : string,
		expand : (RuProverTree) -> [RuProverProp],
		finished : (RuProverTree) -> bool
	);

	RuProverStrategy(
		description : string,
		initTactic : () -> RuProverTactic,
		nextTactic : (RuProverTree) -> Maybe<RuProverTactic>,
	);

	ruBreadthFirstTactic : RuProverTactic;
	ruGiveupTactic : RuProverTactic;
	ruDefaultTactic : RuProverTactic = ruBreadthFirstTactic;
	ruDefaultStrategy : RuProverStrategy;

	ruSingleTacticStrategy(tactic : RuProverTactic) -> RuProverStrategy;
	ruLimitTactic(tactic : RuProverTactic, time_limit : double, applied_limit : int, procuded_limit : int) -> RuProverTactic;
}

ruBreadthFirstTactic = RuProverTactic("breadth-first-search",
	\tree -> getTreeValues(tree.leafs),
	\tree -> length(^(tree.proofs)) > 0
);

ruGiveupTactic = RuProverTactic("giveup",
	\tree -> [],
	\tree -> true
);

ruDefaultStrategy = RuProverStrategy("default strategy",
	\ -> ruBreadthFirstTactic,
	\tree -> None()
);

ruSingleTacticStrategy(tactic : RuProverTactic) -> RuProverStrategy {
	RuProverStrategy("single tactic: " + tactic.description,
		\ -> tactic,
		\tree -> None()
	);
}

ruLimitTactic(tactic : RuProverTactic, time_limit : double, applied_limit : int, procuded_limit : int) -> RuProverTactic {
	applied = ref 0;
	produced = ref 0;
	timer = ruMakeLimitedTimer(time_limit);
	RuProverTactic("limits: ",
		\tree -> {
			applied := ^applied + 1;
			expanded = tactic.expand(tree);
			produced := ^produced + length(expanded);
			expanded;
		},
		\tree -> 
			(time_limit > 0.0 && ruTimeIsOver(timer)) || 
			(applied_limit > 0 && ^applied > applied_limit) || 
			(procuded_limit > 0 && ^produced > procuded_limit) || 
			tactic.finished(tree)
	);
}
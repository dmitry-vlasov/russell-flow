import ru/prover/util;
import ru/unify/indexes;
import ru/verify/math;

export {

	RuProverEnv(
		info : string,
		timer : RuTimer,
		tree : RuProverTree,
		proofs : ref [RuProof],
		math : RuMath,
		env : RuEnv,
		fns : RuProverFuncs
	);

	RuProverFuncs(
		admitExp : (RuExp) -> bool,
		unifyAssertion : (RuProverHyp) -> [RuUnified<RuAssertion>],
		unifyPremise   : (RuProverHyp) -> [RuUnified<RuPremise>],
		tactic : (RuProverTree) -> Maybe<RuProverProp>,
		fresher : (RuVar) -> RuVar,
		unconst : (RuExp) -> RuExp,
		onProof : (RuProofTree) -> void,
		onProp : (RuProverProp) -> void,
		idxer : () -> int
	);

	ruInitProverEnv(
		task : RuProverTask,
		math : RuMath, 
		env : RuEnv, 
		assertions : RuIndex<RuAssertion>, 
		time_limit : double
	) -> RuProverEnv;

	ruSetProverEnvTactic(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv;
	ruProvedEnvIsProved(env : RuProverEnv) -> bool;
	ruProverEnvProof(env : RuProverEnv) -> Maybe<RuProof>;
}

ruEstimateMaxExp(index : RuIndex<RuAssertion>) -> int {
	len_num_max = ruFoldIndex(index, Triple(0.0, 0, 0), \acc, ass ->
		eitherMap(ruDecl2Theorem(ass), \th ->
			fold(th.proof.steps, acc, \ac, step -> {
				len = length(step.expr.nodes);
				Triple(ac.first + cast(len : int -> double), ac.second + 1, max(acc.third, len))
			}),
			acc
		)
	);
	if (len_num_max.second < 4096) 256 else {
		avg_len = len_num_max.first / cast(len_num_max.second : int -> double);
		sigma_sum = ruFoldIndex(index, 0.0, \acc, ass ->
			eitherMap(ruDecl2Theorem(ass), \th ->
				fold(th.proof.steps, acc, \ac, step -> {
					delta = cast(length(step.expr.nodes) : int -> double) - avg_len;
					ac + delta * delta;
				}),
				acc
			)
		);
		sigma = sqrt(sigma_sum / cast(len_num_max.second : int -> double));
		cast(avg_len + 3.0 * sigma : double -> int);
	}
	len_num_max.third + 64;
}

ruInitProverEnv(
	task : RuProverTask,
	math0 : RuMath, 
	env : RuEnv, 
	assertions : RuIndex<RuAssertion>, 
	time_limit : double
) -> RuProverEnv {
	//cth = ruConstTheorem(th, math0);
	c_task = ruConstProverTask(task, math0);
	math = c_task.env.math;
	//assertions = eitherFn(asses, idfn, \ -> ruInitTheoremAssertionsIndex(th, math, env));	
	//premises = ruInitPremisesIndex(cth.const, step.ind);
	premises = ruInitTaskPremisesIndex(c_task.const);
	vars = ref makeTree();
	proofs = ref [];
	root = RuProverRoot(ref [], c_task.const.goal.expr, ref []);
	id = ref 0;
	max_expr_len = ruEstimateMaxExp(assertions);
	funcs = RuProverFuncs(
		\expr -> length(expr.nodes) < max_expr_len,
		\hyp -> ruUnifyIndex(hyp.expr, assertions, makeTree(), math, env, max(time_limit / 100.0, 10.0)),
		\hyp -> ruUnifyIndex(hyp.expr, premises, makeTree(), math, env, max(time_limit/ 100.0, 10.0)),
		\tree -> {
			switch (tree.leafs) {
				TreeNode(__,prop,__,__,__): Some(prop);
				TreeEmpty(): None();
			}
		},
		\v -> {
			vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
			v_name = id2s(v.id) + "_" + i2s(lookupTreeDef(^vars, v, 0));
			RuVar(s2id(v_name), v.type);
		},
		c_task.env.unconst,
		\proof_root -> {
			steps = map(ruMakeLinearProof(proof_root), \st -> RuStep(st with expr = c_task.env.unconst(st.expr)));
			// ruMakeProofFromSteps(task : RuProverTask, steps : [RuStep], math : RuMath, env : RuEnv) -> Maybe<RuProof>
			switch (ruMakeProofFromSteps(task, steps, math, env)) {
				Some(proof): refArrayPush(proofs, proof);
				None(): {}
			}
			
			/*switch (ruUpdateTheoremWithSteps(th, steps, math, env)) {
				Some(theorem): refArrayPush(proofs, theorem.proof);
				None(): {}
			}*/
		},
		nop1, 
		\-> { ret = ^id; id := ^id + 1; ret; }
	);
	RuProverEnv(
		task.info,
		ruMakeLimitedTimer(time_limit),
		RuProverTree(makeTree(), root),
		proofs, math, env, funcs
	);
}

ruSetProverEnvTactic(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv {
	RuProverEnv(env with fns = RuProverFuncs(env.fns with tactic = tactic));
}

ruProvedEnvIsProved(env : RuProverEnv) -> bool {
	length(^(env.proofs)) > 0;
}

ruProverEnvProof(env : RuProverEnv) -> Maybe<RuProof> {
	proofs = ^(env.proofs);
	if (length(proofs) == 0) None() else {
		Some(fold(tail(proofs), proofs[0], \acc, proof -> 
			if (length(proof.steps) < length(acc.steps)) proof else acc
		));
	}
}
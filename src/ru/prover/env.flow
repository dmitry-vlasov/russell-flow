import ru/prover/util;
import ru/unify/indexes;
import ru/verify/math;

export {

	RuProverEnv(
		descr : string,
		timer : RuTimer,
		tree : RuProverTree,
		proofs : ref [RuProof],
		math : RuMath,
		env : RuEnv,
		fns : RuProverFuncs
	);

	RuProverFuncs(
		admitExp : (RuExp) -> bool,
		unifyAssertion : (RuProverHyp) -> [RuUnified<RuAssertion>],
		unifyPremise   : (RuProverHyp) -> [RuUnified<RuHyp>],
		tactic : (RuProverTree) -> Maybe<RuProverProp>,
		fresher : (RuVar) -> RuVar,
		unconst : (RuExp) -> RuExp,
		onProof : (RuProofTree) -> void,
		onProp : (RuProverProp) -> void,
		idxer : () -> int
	);

	ruInitProverEnv(
		theorem : RuTheorem, 
		math : RuMath, 
		env : RuEnv, 
		asses : Maybe<RuIndex<RuAssertion>>, 
		ms_time_limit : double
	) -> RuProverEnv;

	ruSetProverTactic(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv;
	ruIsProved(env : RuProverEnv) -> bool;
}

ruEstimateMaxExp(index : RuIndex<RuAssertion>) -> int {
	len_num_max = ruFoldIndex(index, Triple(0.0, 0, 0), \acc, ass ->
		eitherMap(ruAssertion2Theorem(ass), \th ->
			fold(th.proof.steps, acc, \ac, step -> {
				len = length(step.expr.nodes);
				Triple(ac.first + cast(len : int -> double), ac.second + 1, max(acc.third, len))
			}),
			acc
		)
	);
	if (len_num_max.second < 4096) 256 else {
		avg_len = len_num_max.first / cast(len_num_max.second : int -> double);
		sigma_sum = ruFoldIndex(index, 0.0, \acc, ass ->
			eitherMap(ruAssertion2Theorem(ass), \th ->
				fold(th.proof.steps, acc, \ac, step -> {
					delta = cast(length(step.expr.nodes) : int -> double) - avg_len;
					ac + delta * delta;
				}),
				acc
			)
		);
		sigma = sqrt(sigma_sum / cast(len_num_max.second : int -> double));
		cast(avg_len + 3.0 * sigma : double -> int);
	}
	len_num_max.third + 64;
}

ruInitProverEnv(
	th : RuTheorem, 
	math0 : RuMath, 
	env : RuEnv, 
	asses : Maybe<RuIndex<RuAssertion>>, 
	time_limit : double
) -> RuProverEnv {
	cth = ruConstTheorem(th, math0);
	math = cth.env.math;
	assertions = eitherFn(asses, idfn, \ -> ruInitTheoremAssertionsIndex(th, math, env));	
	premises = ruInitPremisesIndex(cth.const);
	vars = ref makeTree();
	proofs = ref [];
	root = RuProverRoot(ref [], cth.const.stat.prop, ref []);
	id = ref 0;
	max_expr_len = ruEstimateMaxExp(assertions);
	funcs = RuProverFuncs(
		\expr -> length(expr.nodes) < max_expr_len,
		\hyp -> ruUnifyIndex(hyp.expr, assertions, makeTree(), math, env, max(time_limit / 100.0, 10.0)),
		\hyp -> ruUnifyIndex(hyp.expr, premises, makeTree(), math, env, max(time_limit/ 100.0, 10.0)),
		\tree -> {
			switch (tree.leafs) {
				TreeNode(__,prop,__,__,__): Some(prop);
				TreeEmpty(): None();
			}
		},
		\v -> {
			vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
			v_name = id2s(v.id) + "_" + i2s(lookupTreeDef(^vars, v, 0));
			RuVar(s2id(v_name), v.type);
		},
		cth.env.unconst,
		\proof_root -> {
			steps = map(ruMakeLinearProof(proof_root), \step -> RuStep(step with expr = cth.env.unconst(step.expr)));
			switch (ruUpdateTheoremWithSteps(th, steps, math, env)) {
				Some(theorem): refArrayPush(proofs, theorem.proof);
				None(): {}
			}
		},
		nop1, 
		\-> { ret = ^id; id := ^id + 1; ret; }
	);
	RuProverEnv(
		id2s(th.descr.id),
		ruMakeLimitedTimer(time_limit),
		RuProverTree(makeTree(), root),
		proofs, math, env, funcs
	);
}

ruSetProverTactic(env : RuProverEnv, tactic : (RuProverTree) -> Maybe<RuProverProp>) -> RuProverEnv {
	RuProverEnv(env with fns = RuProverFuncs(env.fns with tactic = tactic));
}

ruIsProved(env : RuProverEnv) -> bool {
	length(^(env.proofs)) > 0;
}
import base/util/math;
import ru/prover/util;
import ru/unify/indexes;
import ru/verify/math;

export {

	RuProverEnv(
		task : RuProverTask,
		timer : RuTimer,
		tree : RuProverTree,
	
		toExpand : ref [int],
		tactic : ref RuProverTactic,
	
		math : RuMath,
		env : RuEnv,
		fns : RuProverFuncs,
		importDependencies : Tree<int, Set<int>>
	);

	RuProverFuncs(
		admitExp : (RuExp) -> bool,
		unifyAssertion : (RuProverHyp) -> [RuUnified<RuAssertion>],
		unifyPremise   : (RuProverHyp) -> [RuUnified<RuPremise>],
		fresher : (RuVar) -> RuVar,
		unconst : (RuExp) -> RuExp,
		onProof : (RuProofTree) -> void,
		onProp : (RuProverProp) -> void,
		idxer : () -> int
	);

	ruInitProverEnv(
		task : RuProverTask,
		math : RuMath, 
		env : RuEnv, 
		assertions : RuIndex<RuAssertion>, 
		time_limit : double
	) -> RuProverEnv;
}

ruEstimateMaxExp(index : RuIndex<RuAssertion>) -> int {
	theorems = filtermap(ruIndexValues(index), ruDecl2Theorem);
	proofs = map(theorems, \th -> th.proof);
	steps = ruConcatA(map(proofs, ruAllProofSteps));
	step_exp_lens = map(steps, \step -> i2d(length(step.expr.nodes)));

	sum_num_max = ruSumDoublesFromArray(step_exp_lens);
	len_num_max = ruMaxDoubleFromArray(step_exp_lens);
	if (len_num_max < 4096.0) 256 else {
		avg_len = sum_num_max / i2d(length(step_exp_lens));
		sigma_sum = fold(step_exp_lens, 0.0, \acc, len ->
			acc + (len - avg_len) * (len - avg_len)
		);
		sigma = sqrt(sigma_sum / len_num_max);
		round(avg_len + 3.0 * sigma);
	}
	round(len_num_max + 64.0);
}

ruEstimateMaxExp1(index : RuIndex<RuAssertion>) -> int {
	len_num_max = ruFoldIndex(index, Triple(0.0, 0, 0), \acc, ass ->
		eitherMap(ruDecl2Theorem(ass), \th ->
			fold(th.proof.steps, acc, \ac, step -> {
				len = length(step.expr.nodes);
				Triple(ac.first + i2d(len), ac.second + 1, max(acc.third, len))
			}),
			acc
		)
	);
	if (len_num_max.second < 4096) 256 else {
		avg_len = len_num_max.first / i2d(len_num_max.second);
		sigma_sum = ruFoldIndex(index, 0.0, \acc, ass ->
			eitherMap(ruDecl2Theorem(ass), \th ->
				fold(th.proof.steps, acc, \ac, step -> {
					delta = i2d(length(step.expr.nodes)) - avg_len;
					ac + delta * delta;
				}),
				acc
			)
		);
		sigma = sqrt(sigma_sum / i2d(len_num_max.second));
		round(avg_len + 3.0 * sigma);
	}
	len_num_max.third + 64;
}

ruInitProverEnv(
	task : RuProverTask,
	math0 : RuMath, 
	env : RuEnv, 
	assertions : RuIndex<RuAssertion>, 
	time_limit : double
) -> RuProverEnv {
	c_task = ruConstProverTask(task, math0);
	math = c_task.env.math;
	premises = ruInitTaskPremisesIndex(c_task.const);
	vars = ref makeTree();
	proofs : ref [RuProof] = ref [];
	root = RuProverRoot(makeVector(5), c_task.const.goal.expr, makeVector(1024));
	id = ref 0;
	inc_id = ruAtomicIntAdd(id);
	add_proof = synchronizedUnaryFn(proofs, \proof_root -> {
		steps = map(ruMakeLinearProof(proof_root), \st -> RuStep(st with expr = c_task.env.unconst(st.expr)));
		switch (ruMakeProofFromSteps(task, steps, math, env)) {
			Some(proof): {
				proving_trace = s2i(lookupTreeDef(task.args, "proving-trace", lookupTreeDef(env.conf.opts, "proving-trace", "0")));
				if (proving_trace >= 1) {
					env.out.onMessage("PROOF FOUND:\n" + ru2s(proof, math));
				}
				refArrayPush(proofs, proof);
			}
			None(): {}
		}
	})
	//max_expr_len = ruEstimateMaxExp(assertions);
	funcs = RuProverFuncs(
		\expr -> true,//length(expr.nodes) < max_expr_len,
		\hyp -> ruUnifyIndex(hyp.expr, assertions, ruEmptySubst, math, env, max(time_limit / 100.0, 10.0)),
		\hyp -> ruUnifyIndex(hyp.expr, premises, ruEmptySubst, math, env, max(time_limit/ 100.0, 10.0)),
		\v -> {
			vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
			v_name = id2s(v.id) + "_" + i2s(lookupTreeDef(^vars, v, 0));
			RuVar(s2id(v_name), v.type);
		},
		c_task.env.unconst,
		add_proof,
		nop1, 
		\-> inc_id(1)
	);
	RuProverEnv(
		task,
		ruMakeLimitedTimer(time_limit),
		RuProverTree(makeTree(), makeTree(), root, proofs),
		ref [], ref task.strategy.initTactic(),
		math, env, funcs,
		ruSourcesAllImported(math.sources, env)
	);
}

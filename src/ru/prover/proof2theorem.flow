import ru/prover/prove;
import ru/prover/stats;
import ru/util/reindex_theorem_vars;
import ru/util/dag;

export {
	ruProof2Theorem(info : RuDeclInfo, proof : RuDAG<int>, math : RuMath, env : RuEnv, time_limit : double) -> Maybe<RuTheorem>;
}

ruProof2Theorem(info : RuDeclInfo, proof : RuDAG<int>, math : RuMath, env : RuEnv, time_limit : double) -> Maybe<RuTheorem> {
	proof_root : ref Maybe<RuProofTree> = ref None();
	premises = ref ruMakeIndex();
	prover_env = ruProve(ruInitBuildProofEnv(info, proof, math, env, time_limit, proof_root, premises));
	
	maybeBind(^proof_root,
		\root -> {
			leafs = ruProofTreeHyps(root);
			pair = foldSet(leafs, Pair(ruMakeIndex(), makeTree()), \acc, leaf -> {
					index = acc.first;
					mapping = acc.second;
					hs = ruFindIndex(leaf.expr, index, math);
					if (hs == []) {
						old_hyp = RuHyp(leaf.ind, leaf.expr, -1);
						new_hyp = RuHyp(ruIndexDataCount(index), leaf.expr, -1);
						Pair(ruSetIndex(leaf.expr, new_hyp, index), setTree(mapping, old_hyp, new_hyp));
					} else {
						old_hyp = RuHyp(leaf.ind, leaf.expr, -1);
						new_hyp = RuHyp(hs[0].ind, hs[0].expr, -1);
						Pair(index, setTree(mapping, old_hyp, new_hyp));
					}
				}
			);
			hyps_index = pair.first;
			hyps = sortCustom(ruIndexValues(hyps_index), \hyp -> hyp.ind, true);
			updated_root = ruUpdateProofNodeHyps(root, pair.second);
			steps = map(ruMakeLinearProof(updated_root), \step -> RuStep(step with expr = prover_env.fns.unconst(step.expr)));
			prop = (steps)[length(steps) - 1].expr;
			vars = foldSet(
				fold(hyps, ruExp2Vars(prop), \acc, hyp -> mergeSets(acc, ruExp2Vars(hyp.expr))), 
				makeTree(),	\acc, v -> setTree(acc, v.id, v)
			);
			th = RuTheorem(info, 
				RuStatement(RuVarsDisjs(vars, makeSet()), hyps, prop), 
				makeSet(), ruNoProof
			);
			maybeBind(
				ruUpdateTheoremWithSteps(th, steps, math, env),
				\updated -> {
					reindexed = ruReindexTheoremVars(updated, env);
					res = ruFilterOutVerifyErrs(ruVerifyTheorem(reindexed, math, env), ruIsNonVerifiedRef);
					if (ruIsVerified(res)) {
						normalized = ruNormalizeTheoremVarsDisjs(res.theorem);
						Some(normalized) 
					} else {
						ruOutputVerifyErrs(ruFilterOutVerifyErrs(res, ruIsDisjointedViolation), math, env);
						None();
					}
				}
			);
		}
	);
}

ruInitBuildProofEnv(
	info : RuDeclInfo, proof : RuDAG<int>, 
	math : RuMath, env : RuEnv, time_limit : double, 
	root_proof : ref Maybe<RuProofTree>, premises : ref RuIndex<RuHyp>
) -> RuProverEnv {
	find_ass = \id -> lookupTreeDef(math.decls.assertions, id, ruNoAxiom);
	root_ass = find_ass(proof.data);
	mapping : ref Tree<RuProverProp, RuDAG<int>> = ref makeTree();
	vars = ref makeTree();
	fresher = \v -> {
		vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
		v_name = id2s(v.id) + "_" + i2s(lookupTreeDef(^vars, v, 0));
		RuVar(s2id(v_name), v.type);
	}
	root_exp = ruApplySubst(
		root_ass.stat.prop,
		ruMakeFresherSubst(set2array(ruExp2Vars(root_ass.stat.prop)), fresher)
	);
	root = RuProverRoot(makeVector(1), root_exp, makeVector(1));
	id = ref 0;
	funcs = RuProverFuncs(
		\__ -> true,
		ruBuildUnifyAssertion(math, env, mapping, root_ass),
		ruBuildUnifyPremise(math, env, mapping, premises),
		fresher,
		idfn,
		\n -> root_proof := Some(n),
		ruBuildOnProp(env, mapping, proof),
		\ -> { ret = ^id; id := ^id + 1; ret; },
	);
	tactic = ruBuildTactic();
	task = RuProverTask(info, 
		ruSingleTacticStrategy(tactic), 
		ruProofDAG2s(proof), 
		makeTree(), 
		[], ruNoStep
	);
	prover_env = RuProverEnv(
		RuProverConf(
			task,
			ruMakeLimitedTimer(time_limit)
		),
		RuProverTree(makeTree(), makeTree(), root, ref []),
		ref [], ref None(), 
		math, env, funcs,
		ruSourcesAllImported(math.sources, env)
	);
	ruExpandHyp(prover_env.tree.root, prover_env);
}

ruBuildUnifyAssertion(
	math : RuMath, 
	env : RuEnv, 
	mapping : ref Tree<RuProverProp, RuDAG<int>>,
	root_ass : RuAssertion
) -> (RuProverHyp) -> [RuUnified<RuAssertion>] {
	\hyp -> {
		switch (hyp) {
			RuProverExp(ind,__,expr,__,parent): {
				switch (lookupTree(^mapping, parent)) {
					Some(node): {
						switch (lookupTree(math.decls.assertions, node.children[ind].data)) {
							Some(a): {
								ass : RuAssertion = a;
								switch (ruUnifyExps([expr, ass.stat.prop], ruEmptySubst, math, env)) {
									Some(theta): [RuUnified(theta, ass, ruApplySubst(ass.stat.prop, theta))];
									None(): [];
								}
							}
							None(): [];
						}
					}
					None(): {
						ruCrash("must not happen: must be in mapping");
						[];
					}
				}
			}
			RuProverRoot(__,expr,__): {
				switch (ruUnifyExps([expr, root_ass.stat.prop], ruEmptySubst, math, env)) {
					Some(theta): [RuUnified(theta, root_ass, ruApplySubst(root_ass.stat.prop, theta))];
					None(): [];
				}
			}
		}
	}
}

ruBuildUnifyPremise(
	math : RuMath, 
	env : RuEnv, 
	mapping : ref Tree<RuProverProp, RuDAG<int>>,
	premises : ref RuIndex<RuHyp>
) -> (RuProverHyp) -> [RuUnified<RuHyp>] {
	\hyp -> {
		switch (hyp) {
			RuProverExp(ind,__,expr,__,parent): {
				switch (lookupTree(^mapping, parent)) {
					Some(node): {
						if (node.children[ind].data != -1) [] else {
							hyps = ruFindIndex(expr, ^premises, math);
							if (hyps == []) {
								h = RuHyp(ruIndexDataCount(^premises), expr, -1);
								premises := ruSetIndex(expr, h, ^premises);
								[RuUnified(ruEmptySubst, h, expr)];
							} else {
								[RuUnified(ruEmptySubst, hyps[0], expr)];
							}
						}
					}
					None(): {
						ruCrash("must not happen: must be in mapping");
						[];
					}
				}
			}
			RuProverRoot(__,__,__): [];
		}
	}
}

ruBuildTactic() -> RuProverTactic {
	RuProverTactic("build-proof-tactic",
		\tree -> {
			switch (tree.leafs) {
				TreeNode(__,prop,__,__,__): [prop];
				TreeEmpty(): [];
			}
		},
		\__ -> false
	)
}

ruBuildOnProp(env : RuEnv, mapping : ref Tree<RuProverProp, RuDAG<int>>, proof : RuDAG<int>) -> (RuProverProp) -> void {
	\prop -> {
		hyp = prop.parent;
		switch (hyp) {
			RuProverExp(ind,__,__,__,parent): {
				switch (lookupTree(^mapping, parent)) {
					Some(grand): mapping := setTree(^mapping, prop, grand.children[ind]);
					None(): {
						ruCrash("must not happen: must be in mapping");
					}
				}		
			}
			RuProverRoot(__,__,__): {
				mapping := setTree(^mapping, prop, proof);
			}
		}
	}
}


import ru/prover/prove;
import ru/prover/stats;
import ru/util/reindex_theorem_vars;

export {
	ruProof2Theorem(name : string, proof : RuDAG<string>, math : RuMath, conf : RuConf, time_limit : double) -> Maybe<RuTheorem>;
}

ruProof2Theorem(name : string, proof : RuDAG<string>, math : RuMath, conf : RuConf, time_limit : double) -> Maybe<RuTheorem> {
	proof_root = ref None();
	premises = ref ruMakeIndex();
	env = ruProve(ruInitBuildProofEnv(proof, math, conf, time_limit, proof_root, premises));
	
	switch (^proof_root) {
		Some(root): {
			leafs = ruProofNodeHyps(root);
			pair = foldSet(leafs, Pair(ruMakeIndex(), makeTree()), \acc, leaf -> {
					index = acc.first;
					mapping = acc.second;
					hs = ruFindIndex(leaf.expr, index, math);
					if (hs == []) {
						new_hyp = RuHyp(ruIndexDataCount(index), leaf.expr, -1);
						Pair(ruSetIndex(leaf.expr, new_hyp, index), setTree(mapping, leaf.hyp, new_hyp));
					} else {
						Pair(index, setTree(mapping, leaf.hyp, hs[0]));
					}
				}
			);
			hyps_index = pair.first;
			hyps = sortCustom(ruIndexValues(hyps_index), \hyp -> hyp.ind, true);
			updated_root = ruUpdateProofNodeHyps(root, pair.second);
			steps = map(ruMakeLinearProof(updated_root), \step -> RuStep(step with expr = env.unconst(step.expr)));
			prop = (steps)[length(steps) - 1].expr;
			vars = foldSet(
				fold(hyps, ruExp2Vars(prop.nodes), \acc, hyp -> mergeSets(acc, ruExp2Vars(hyp.expr.nodes))), 
				makeTree(),	\acc, v -> setTree(acc, v.name, v)
			);
			th = RuTheorem(name, "__no", vars, makeSet(), makeSet(), hyps, prop, ruNoProof, -1);
			maybeBind(
				ruUpdateTheoremWithSteps(th, steps, math, conf),
				\updated -> {
					reindexed = ruReindexTheoremVars(updated, conf);
					ruVerifyTheorem(reindexed, math, conf);
				}
			);
		}
		None(): {
			conf.onMessage("NO STEPS");
			conf.onMessage(ruProverTree2s(env.tree.root, math));
			None();
		}
	}
}

ruInitBuildProofEnv(
	proof : RuDAG<string>, 
	math : RuMath, conf : RuConf, ms_time_limit : double, 
	root_proof : ref Maybe<RuProofNode>, premises : ref RuIndex<RuHyp>
) -> RuProverEnv {
	find_ass = \name -> lookupTreeDef(math.assertions, name, ruNoAxiom);
	root_ass = find_ass(proof.data);
	mapping : ref Tree<RuProverProp, RuDAG<string>> = ref makeTree();
	vars = ref makeTree();
	fresher = \v -> {
		vars := setTree(^vars, v, lookupTreeDef(^vars, v, 0) + 1);
		RuVar(v.name + "_" + i2s(lookupTreeDef(^vars, v, 0)), v.type);
	}
	root_exp = ruApplySubst(
		root_ass.prop,
		ruMakeFresh(set2array(ruExp2Vars(root_ass.prop.nodes)), fresher)
	);
	root = RuProverRoot(ref [], root_exp, ref []);
	id = ref 0;
	env = RuProverEnv(
		{ started = timestamp(); \-> timestamp() - started > ms_time_limit },
		\__ -> true,
		RuProverTree(makeTree(), root),
		ruBuildUnifyAssertion(math, conf, mapping, root_ass),
		ruBuildUnifyPremise(math, conf, mapping, premises),
		ruBuildTactic(),
		math,
		conf,
		fresher,
		idfn,
		\n -> root_proof := Some(n),
		ruBuildOnProp(conf, mapping, proof),
		\ -> { ret = ^id; id := ^id + 1; ret; },
	);
	ruExpandHyp(env.tree.root, env);
}

ruBuildUnifyAssertion(
	math : RuMath, 
	conf : RuConf, 
	mapping : ref Tree<RuProverProp, RuDAG<string>>,
	root_ass : RuAssertion
) -> (RuProverHyp) -> [RuUnified<RuAssertion>] {
	\hyp -> {
		switch (hyp) {
			RuProverExp(ind,__,expr,__,parent): {
				switch (lookupTree(^mapping, parent)) {
					Some(node): {
						switch (lookupTree(math.assertions, node.children[ind].data)) {
							Some(a): {
								switch (ruUnifyExps([expr, a.prop], makeTree(), math, conf)) {
									Some(theta): [RuUnified(theta, a, ruApplySubst(a.prop, theta))];
									None(): [];
								}
							}
							None(): [];
						}
					}
					None(): {
						conf.onMessage("must not happen");
						quit(-1);
						[];
					}
				}
			}
			RuProverRoot(__,expr,__): {
				switch (ruUnifyExps([expr, root_ass.prop], makeTree(), math, conf)) {
					Some(theta): [RuUnified(theta, root_ass, ruApplySubst(root_ass.prop, theta))];
					None(): [];
				}
			}
		}
	}
}

ruBuildUnifyPremise(
	math : RuMath, 
	conf : RuConf, 
	mapping : ref Tree<RuProverProp, RuDAG<string>>,
	premises : ref RuIndex<RuHyp>
) -> (RuProverHyp) -> [RuUnified<RuHyp>] {
	\hyp -> {
		switch (hyp) {
			RuProverExp(ind,__,expr,__,parent): {
				switch (lookupTree(^mapping, parent)) {
					Some(node): {
						if (node.children[ind].data != "") [] else {
							hyps = ruFindIndex(expr, ^premises, math);
							if (hyps == []) {
								h = RuHyp(ruIndexDataCount(^premises), expr, -1);
								premises := ruSetIndex(expr, h, ^premises);
								[RuUnified(makeTree(), h, expr)];
							} else {
								[RuUnified(makeTree(), hyps[0], expr)];
							}
						}
					}
					None(): {
						conf.onMessage("must not happen");
						quit(-1);
						[];
					}
				}
			}
			RuProverRoot(__,__,__): [];
		}
	}
}

ruBuildTactic() -> (RuProverTree) -> Maybe<RuProverProp> {
	\tree -> {
		switch (tree.leafs) {
			TreeNode(__,prop,__,__,__): Some(prop);
			TreeEmpty(): None();
		}
	}
}

ruBuildOnProp(conf : RuConf, mapping : ref Tree<RuProverProp, RuDAG<string>>, proof : RuDAG<string>) -> (RuProverProp) -> void {
	\prop -> {
		hyp = prop.parent;
		switch (hyp) {
			RuProverExp(ind,__,__,__,parent): {
				switch (lookupTree(^mapping, parent)) {
					Some(grand): mapping := setTree(^mapping, prop, grand.children[ind]);
					None(): {
						conf.onMessage("must not happen");
						quit(-1);
					}
				}		
			}
			RuProverRoot(__,__,__): {
				mapping := setTree(^mapping, prop, proof);
			}
		}
	}
}


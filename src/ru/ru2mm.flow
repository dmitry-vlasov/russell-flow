import ru/verify/math;
import ru/math;
import mm/src;
import comm;

export {
	ruCommRu2Mm : RuComm;
}

ruCommRu2Mm = RuComm(
	RuCommDescr(
		"ru-to-mm", "translate", "translate Russell to Metamath", "file", true, false, 
		[RuCommArg("file", false, "input file", "")], []
	),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		timer = ruMakeTimer();
		mm = ru2mm(ruMakeMathFromSources(state.ru, env), env);
		Some(RuState(state with 
			mm = mm,
			vars = setTree(setTree(state.vars, 
				"ru-to-mm.time", ValDouble(ruTimePassed(timer))),
				"ru-to-mm.size", ValInt(sizeTree(mm))
			)
		))
	}
);

ru2mm(math : RuMath, env : RuEnv) -> Tree<int, MmSource> {
	timer = ruMakeTimer();
	srcs = mapTree(math.sources, \src -> ruSource2mm(src, math, env));
	/*add_hyps = \acc, hs -> fold(hs, acc, \ac, h : MmHyp -> setTree(ac, h.label, h));
	labeled_consts = foldTree(srcs, Pair(makeTree(), makeSet()), \__, src, acc ->
		fold(src.decls, acc, \ac, decl ->
			switch (decl) {
				MmAssertion(__, hyps, inner, stat):
					Pair(
						add_hyps(add_hyps(setTree(ac.first, stat.label, decl), hyps), inner),
						ac.second
					);
				MmConst(symbs): {
					Pair(ac.first, mergeSets(ac.second, buildSet(symbs)))
				}
				default: ac;
			}
		)
	);*/
	mm = ruAddTurnstile(math, srcs, env);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("ru translated in " + ruTimePassed2s(timer));
	}
	mm;
}

ruAddTurnstile(ru_math : RuMath, sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmSource> {
	leaf_srcs = filter(getTreeValues(sources), \src -> src.imports == []);
	common_dir = ruPath2s(ruCommonDir(map(leaf_srcs, \src -> ruSplitPath(src.info.path))));
	turnstile = ruMakeTurnstile(ru_math);
	path = common_dir + "turnstile.mm";
	module = ruTrimPath(path, env.conf, ".mm");
	module_id = s2id(module);
	turnstile_src = MmSource([], [MmConst([turnstile])], RuFileInfo(module_id, module, path, 0.0, ""));
	fold(leaf_srcs, setTree(sources, module_id, turnstile_src), \acc, src ->
		setTree(acc, src.info.id, 
			MmSource([MmImport(module_id)], src.decls, src.info)
		)
	);
}

ruMakeTurnstile(math : RuMath) -> int {
	ascii_consts = buildSet(map(getTreeValues(math.consts), \c -> c.ascii));
	ruDoMakeTurnstile(s2id("|-"), ascii_consts)
}

ruDoMakeTurnstile(turnstile : int, consts : Set<int>) -> int {
	if (!containsSet(consts, turnstile)) turnstile else {
		ruDoMakeTurnstile(s2id("|" + id2s(turnstile)), consts)
	}
}

ruSource2mm(src : RuSource, math : RuMath, env : RuEnv) -> MmSource {
	turnstile = ruMakeTurnstile(math);
	timer = ruMakeTimer();
	ret = MmSource(
		map(src.imports, \imp -> MmImport(imp.id)),
		concatA(ruConcurrent(map(src.decls, \decl -> \ -> ruDecl2mm(decl, turnstile, math, env)))),
		ruNewFileInfo(src.info.module, env.conf, ".mm")
	);
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tru translated: '" + src.info.module + "' in " + ruTimePassed2s(timer));
	}
	ret
}

ruVar2mm(th : int, var : int) -> int {
	// Mm labels must be: "Only letters, digits, "_", "-", and "." are allowed in labels."
	// Replace all characters not falling into these classes with those, who fall. 
	var0 = id2s(var);
	var1 = fold(
		map(s2a(var0), \i -> 
			if (i == 45 || i == 46 || i == 95) i else
			if (48 <= i  && i <= 57) i else 
			if (65 <= i  && i <= 90) i else
			if (97 <= i  && i <= 122) i else {
				if (i < 48) i + 32 else
				if (i < 65) i + 23 else 
				if (i < 97) i + 7 else i - 4
			}
		),
		"",
		\ac, i -> ac + fromCharCode(i)
	);
	s2id(id2s(th) + "_" + var1)
}

ruDecl2mm(decl : RuDecl, turnstile : int, math : RuMath, env : RuEnv) -> [MmDecl] {
	const2mm = \c -> if (c.ascii != -1) c.ascii else c.descr.id;
	term2mm = \t -> map(t.nodes, 
		\s -> switch (s) {
			RuVar(id,__): 
				MmSymb(id, true);
			RuConstRef(id):
				MmSymb(const2mm(lookupTreeDef(math.consts, id, ruNoConst)), false);
		}
	);
	tvars2mm = \n, t -> fold(t.nodes, [],
		\acc, s -> switch (s) {
			RuVar(id, type): 
				concat(acc, [MmFloating(ruVar2mm(n, id), type, id)]);
			RuConstRef(__):
				acc;
		}
	);
	expr2mm = \ex -> MmExp(concat([MmSymb(turnstile, false)], term2mm(ruExp2Term(ex, math.rules))));
	disj2mm = \disjs -> map(ruDisjs2Array(disjs), \ds -> MmDisj(map(set2array(ds), \d -> d.id)));
	vars2mm = \n, vs -> map(getTreeValues(vs), \v -> MmFloating(ruVar2mm(n, v.id), v.type, v.id));
	hyps2mm = \n, hs -> mapi(hs, \i, h -> MmEssential(s2id(id2s(n) + "_" + i2s(i)), expr2mm(h.expr)));
	comm2mm = \t -> {
		t0 = trim2(t, " \t\n\r");
		t1 = if (startsWith(t0, "/*") || startsWith(t0, "//")) strRight(t0, 2) else t0;
		if (endsWith(t1, "*/")) strLeft(t1, strlen(t1) - 2) else t1;
	}
	add_comments = \descr, arr -> {
		concat(map(descr.comments, \comm -> 
			MmComment(comm2mm(
				if (comm.annotation == JsonNull()) {
					comm.text 
				} else {
					json2string(comm.annotation) + "\n-----\n" + comm.text
				}
			))
		), arr);
	}
	switch (decl) {
		RuConst(descr, ascii,__):
			add_comments(descr, [MmConst([const2mm(decl)])]);
		RuType(descr, supers):
			add_comments(descr, concat(
				[MmConst([descr.id])], 
				concatA(filtermap(supers, \super -> 
					maybeMap(
						lookupTree(math.rules, ruSuperTypeName(super, descr.id)),
						\r -> ruDecl2mm(r, turnstile, math, env)
					)
				))
			));
		RuRule(descr, vars, term):
			add_comments(descr, [MmAssertion(
				[], 
				tvars2mm(descr.id, term), [],
				MmAxiomatic(descr.id, MmExp(concat([MmSymb(term.type, false)], term2mm(term))))
			)]);
		RuAxiom(descr, stat):
			add_comments(descr, [MmAssertion(
				disj2mm(stat.disjs),
				concat(vars2mm(descr.id, stat.vars), hyps2mm(descr.id, stat.hyps)), [],
				MmAxiomatic(descr.id, expr2mm(stat.prop))
			)]);
		RuTheorem(descr, stat, __, proof):
			add_comments(descr, [MmAssertion(
				disj2mm(mergeSets(stat.disjs, proof.disjs)),
				concat(vars2mm(descr.id, stat.vars), hyps2mm(descr.id, stat.hyps)),
				vars2mm(descr.id, proof.vars),
				MmProvable(descr.id, expr2mm(stat.prop), 
					MmNormalProof(ruProof2mmNormal(lastElement(proof.steps, ruNoStep), decl, math, env))
				)
			)]);
		RuDef(descr, stat,__,__):
			add_comments(descr, [MmAssertion(
				disj2mm(stat.disjs),
				concat(vars2mm(descr.id, stat.vars), hyps2mm(descr.id, stat.hyps)), [],
				MmAxiomatic(descr.id, expr2mm(stat.prop))
			)]);
	}
}

ruProofExp2mmNormal(i : int, nodes : [RuExpNode], name : int) -> Pair<[int], int> {
	switch (nodes[i]) {
		RuRuleNode(rule,__,arity, len): {
			args = fold(enumFromTo(1, arity), Pair([], i + 1), \acc, __ -> {
				arg = ruProofExp2mmNormal(acc.second, nodes, name);
				Pair(concat(acc.first, arg.first), arg.second);
			});
			Pair(concat(args.first, [rule]), args.second);
		}
		RuVar(id,__): Pair([ruVar2mm(name, id)], i + 1);
	}
}

ruProof2mmNormal(step : RuStep, th : RuTheorem, math : RuMath, env : RuEnv) -> [int] {
	switch (ruMatchStep(step, th, math, env)) {
		RuMatchedStep(ass, sub, ___): {
			subs = fold(getTreeValues(ass.stat.vars), [], \acc, v ->
				switch (lookupTree(sub, v)) {
					None(): acc;
					Some(ex): concat(acc, ruProofExp2mmNormal(0, ex.nodes, th.descr.id).first);
				}
			)
			refs = fold(step.refs, [], \acc, ref ->
				switch (ref) {
					RuHypRef(ind,__): concat(acc, [s2id(id2s(th.descr.id) + "_" + i2s(ind))]);
					RuStepRef(ind,__): concat(acc, ruProof2mmNormal(th.proof.steps[ind], th, math, env));
				}
			);
			concat3(subs, refs, [ass.descr.id]);
		}
		RuVerifyErr(): [];
	}
}

ruProofExp2mmCompressed(i : int, nodes : [RuExpNode], name : int) -> Pair<[int], int> {
	switch (nodes[i]) {
		RuRuleNode(rule,__,arity, len): {
			args = fold(enumFromTo(1, arity), Pair([], i + 1), \acc, __ -> {
				arg = ruProofExp2mmNormal(acc.second, nodes, name);
				Pair(concat(acc.first, arg.first), arg.second);
			});
			Pair(concat(args.first, [rule]), args.second);
		}
		RuVar(id,__): Pair([ruVar2mm(name, id)], i + 1);
	}
}

ruProof2mmCompre(step : RuStep, th : RuTheorem, math : RuMath, env : RuEnv) -> [int] {
	switch (ruMatchStep(step, th, math, env)) {
		RuMatchedStep(ass, sub, ___): {
			subs = fold(getTreeValues(ass.stat.vars), [], \acc, v ->
				switch (lookupTree(sub, v)) {
					None(): acc;
					Some(ex): concat(acc, ruProofExp2mmNormal(0, ex.nodes, th.descr.id).first);
				}
			)
			refs = fold(step.refs, [], \acc, ref ->
				switch (ref) {
					RuHypRef(ind,__): concat(acc, [s2id(id2s(th.descr.id) + "_" + i2s(ind))]);
					RuStepRef(ind,__): concat(acc, ruProof2mmNormal(th.proof.steps[ind], th, math, env));
				}
			);
			concat3(subs, refs, [ass.descr.id]);
		}
		RuVerifyErr(): [];
	}
}

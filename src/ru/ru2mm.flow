import formats/html/html;
import base/path;
import ru/verify/math;
import ru/util/lemma;
import ru/math;
import ru/refactor/left_recursion;
import mm/src;
import comm;

export {
	ruCommRu2Mm : RuComm;
}

ruCommRu2Mm = RuComm(
	RuCommInfo(
		"ru-to-mm", "translate", "translate Russell to Metamath", "file", true, false, 
		[
			RuCommArg("file", false, "input file", ""),
			RuCommArg("unfix-left-recursion", true, "restore potentially left recursive grammar rules", "1"),
			RuCommArg("make-unique-turnstile", true, "ensure that the '|-' prefix symbol for statements is not present in constants by replacin it with i.e. '|||-' ", "0"),
		], []
	),
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		timer = ruMakeTimer();
		task = unit.task;
		math = ruMathFromSources(state.ru, env);
		uniq_turnstile = ruTaskBoolArg(task, "make-unique-turnstile", false);
		unfixed_math = if (ruTaskBoolArg(task, "unfix-left-recursion", true)) {
			math 
		} else {
			if (ruVerbose(env.conf) > 0) {
				env.out.println("ru left-recursive rules are unfixed");
			}
			ruUnfixLeftRecursion(math, env);
		}
		mm = ru2mm(unfixed_math, uniq_turnstile, env);
		Some(RuState(state with 
			mm = mm,
			vars = setTree(state.vars, "ru-to-mm", pairs2tree([
				Pair("time", flow(ruTimePassed(timer))),
				Pair("size", flow(sizeTree(mm)))
			]))
		))
	}
);

ru2mm(math : RuMath, uniq_turnstile : bool, env : RuEnv) -> Tree<int, MmSource> {
	timer = ruMakeTimer();
	turnstile = ruMakeTurnstile(math, uniq_turnstile);
	var_renames = if (env.conf.project == "") makeTree() else {
		renamed_json = ruGetDbItem(env.conf.project, ["renamed_vars"]);
		renamed_array = map(getJsonObjectValue(renamed_json, []), \p -> 
			Pair(s2id(getJsonStringValue(p.second, "")), s2id(p.first))
		);
		pairs2tree(renamed_array);
	}
	var_typesetting = if (env.conf.project == "") makeTree() else {
		typesetting_json = ruGetDbItem(env.conf.project, ["vars_typesetting"]);
		typesetting_array = map(getJsonArrayValue(typesetting_json, []), \var -> {
			id = getJsonStringField(var, "unicode", "");
			ascii = getJsonStringField(var, "ascii", "");
			Pair(s2id(id), s2id(ascii));
		});
		pairs2tree(typesetting_array);
	}
	sup_renames = if (env.conf.project == "") makeTree() else {
		super_json = ruGetDbItem(env.conf.project, ["super_rules"]);
		super_array = map(getJsonObjectValue(super_json, []), \p -> 
			Pair(s2id(getJsonStringValue(p.second, "")), s2id(p.first))
		);
		pairs2tree(super_array);
	}
	srcs = mapTree(math.sources, \src -> ruSource2mm(src, turnstile, math, env, var_renames, sup_renames, var_typesetting));
	mm = ruAddTurnstile(turnstile, math, srcs, env);
	if (ruVerbose(env.conf) > 0) {
		env.out.println("ru translated " + i2s(sizeTree(math.decls.assertions)) + " assertions in " + ruTimePassed2s(timer));
	}
	mm;
}

ruAddTurnstile(turnstile : int, math : RuMath, sources : Tree<int, MmSource>, env : RuEnv) -> Tree<int, MmSource> {
	leaf_srcs = filter(getTreeValues(sources), \src -> src.imports == []);
	common_dir = ruPath2s(ruCommonDir(map(leaf_srcs, \src -> ruSplitPath(src.info.path))));
	path = common_dir + "turnstile.mm";
	module = ruTrimPath(path, env.conf, ".mm");
	module_id = s2id(module);
	turnstile_src = MmSource([], 
		[
			MmComment("The analog of |- symbol in Metamath. Used this one, because |- may be used as a meaningful terminal in expression grammar."), 
			MmConst([turnstile])
		], 
		RuFileInfo(module_id, module, path, 0.0, ruIdsVersion())
	);
	fold(leaf_srcs, setTree(sources, module_id, turnstile_src), \acc, src ->
		setTree(acc, src.info.id, 
			MmSource([MmImport(module_id)], src.decls, src.info)
		)
	);
}

ruMakeTurnstile(math : RuMath, uniq_turnstile : bool) -> int {
	if (!uniq_turnstile) ruIdTurnstile() else {
		ascii_consts = buildSet(map(getTreeValues(math.decls.lang.consts), \c -> c.ascii));
		ruDoMakeTurnstile(ruIdTurnstile(), ascii_consts);
	}
}

ruDoMakeTurnstile(turnstile : int, consts : Set<int>) -> int {
	if (!containsSet(consts, turnstile)) turnstile else {
		ruDoMakeTurnstile(s2id("|" + id2s(turnstile)), consts)
	}
}

ruSource2mm(
	src : RuSource, turnstile : int, math : RuMath, env : RuEnv, 
	var_renames : Tree<int, int>, 
	sup_renames : Tree<int, int>,
	var_typesetting : Tree<int, int>
) -> MmSource {
	timer = ruMakeTimer();
	ret = MmSource(
		map(src.imports, \imp -> MmImport(imp.id)),
		concatA(ruConcurrent(map(src.decls, \decl -> \env1 -> 
			ruDecl2mm(decl, turnstile, math, env1, var_renames, sup_renames, var_typesetting)
		), env)),
		ruNewFileInfo(src.info.module, env.conf, ".mm")
	);
	if (ruVerbose(env.conf) > 1) {
		env.out.println("\tru translated: '" + src.info.module + "' in " + ruTimePassed2s(timer));
	}
	ret
}

ruVar2mm(th : int, var : int) -> int {
	// Mm labels must be: "Only letters, digits, "_", "-", and "." are allowed in labels."
	// Replace all characters not falling into these classes with those, who fall. 
	s2id(id2s(th) + "_" + ruMakeValidMmId(id2s(var)));
}

ruComment2mm(comm : RuComment, math : RuMath, env : RuEnv) -> MmComment {
	comm2mm = \t -> {
		t0 = trim2(t, " \t\n\r");
		t1 = if (startsWith(t0, "/*") || startsWith(t0, "//")) strRight(t0, 2) else t0;
		if (endsWith(t1, "*/")) strLeft(t1, strlen(t1) - 2) else t1;
	}
	text = if (isAsciiString(comm.text)) comm.text else escapeHtml3(comm.text);
	if (!isAsciiString(text)) {
		env.out.error("Ascii-escaped string still contains non-ascii symbols:\n" + text, []);
	}
	MmComment(comm2mm(
		if (length(comm.annotation.members) == 0) {
			text 
		} else {
			json2string(comm.annotation) + "\n-----\n" + text
		}
	));
}

ruDecl2mm(
	decl : RuDecl, turnstile : int, math : RuMath, env : RuEnv, 
	var_renames : Tree<int, int>, 
	sup_renames : Tree<int, int>,
	var_typesetting : Tree<int, int>
) -> [MmDecl] {
	const2mm = \c -> if (c.ascii != -1) c.ascii else c.info.id;
	term2mm = \t -> map(t.nodes, 
		\s -> switch (s) {
			RuVar(id,__): 
				mmMakeSymb(lookupTreeDef(var_renames, id, id), true);
			RuConstRef(id):
				mmMakeSymb(const2mm(lookupTreeDef(math.decls.lang.consts, id, ruNoConst)), false);
		}
	);
	tvars2mm = \n, t -> fold(t.nodes, [],
		\acc, s -> switch (s) {
			RuVar(id, type): 
				concat(acc, [MmFloating(ruVar2mm(n, id), type, lookupTreeDef(var_renames, id, id))]);
			RuConstRef(__):
				acc;
		}
	);
	expr2mm = \ex -> MmExp(concat([mmMakeSymb(turnstile, false)], term2mm(ruExp2Term(ruExp(ex), math.decls.lang))));
	disj2mm = \disjs -> map(ruDisjs2Array(disjs), \ds -> MmDisj(map(ds, \d -> lookupTreeDef(var_renames, d.id, d.id))));
	vars2mm = \n, vs -> map(getTreeValues(vs), \v -> MmFloating(ruVar2mm(n, v.id), v.type, lookupTreeDef(var_renames, v.id, v.id)));
	hyps2mm = \n, hs -> mapi(hs, \i, h -> MmEssential(s2id(id2s(n) + "_" + i2s(i)), expr2mm(h.expr)));
	
	add_comments = \info, arr -> {
		concat(map(take(info.comments, length(info.comments) - 1), \c -> ruComment2mm(c, math, env)), arr);
	}
	last_comment = \info -> {
		if (length(info.comments) == 0) MmComment("") else 
		ruComment2mm(info.comments[length(info.comments) - 1], math, env);
	}
	switch (decl) {
		RuConst(info, ascii,__): 
			// Turnstile: '|-' is a special symbol, it is added at the very beginning.
			if (ascii == turnstile) {
				[] 
			} else { 
				add_comments(info, [MmConst([const2mm(decl)])]);
			}
		RuType(info, supers):
			add_comments(info, concat(
				[MmConst([info.id])], 
				concatA(filtermap(supers, \super -> 
					maybeMap(
						lookupTree(math.decls.lang.rules, ruSuperTypeName(super, info.id)),
						\r -> ruDecl2mm(r, turnstile, math, env, var_renames, sup_renames, var_typesetting)
					)
				))
			));
		RuRule(info, vars, term):
			add_comments(info, [MmAssertion(
				last_comment(info), [], [], 
				tvars2mm(info.id, term), [],
				MmAxiomatic(lookupTreeDef(sup_renames, info.id, info.id), MmExp(concat([mmMakeSymb(term.type, false)], term2mm(term))))
			)]);
		RuAxiom(info, stat):
			add_comments(info, [MmAssertion(
				last_comment(info), disj2mm(stat.vars.disjs), [], 
				concat(vars2mm(info.id, stat.vars.vars), hyps2mm(info.id, stat.hyps)), [],
				MmAxiomatic(info.id, expr2mm(stat.prop))
			)]);
		RuTheorem(info, stat, __, proof): {
			linearized = ruMergeAllLemmasIntoProof(proof, math, env);
			add_comments(info, [MmAssertion(
				last_comment(info), disj2mm(mergeSets(stat.vars.disjs, linearized.vars.disjs)), [], 
				concat(vars2mm(info.id, stat.vars.vars), hyps2mm(info.id, stat.hyps)),
				vars2mm(info.id, linearized.vars.vars),
				MmProvable(info.id, expr2mm(stat.prop), 
					MmNormalProof(ruProof2mmNormal(
						lastElement(linearized.steps, ruNoStep), 
						RuTheorem(decl with proof = linearized), math, env, sup_renames
					))
				)
			)]);
		}
		RuDef(info, stat,__,__):
			add_comments(info, [MmAssertion(
				last_comment(info), disj2mm(stat.vars.disjs), [], 
				concat(vars2mm(info.id, stat.vars.vars), hyps2mm(info.id, stat.hyps)), [],
				MmAxiomatic(info.id, expr2mm(stat.prop))
			)]);
	}
}

ruProofExp2mmNormal(i : int, nodes : [RuExpNode], name : int, sup_renames : Tree<int, int>) -> Pair<[int], int> {
	switch (nodes[i]) {
		RuRuleNode(rule_type, arity_len): {
			rule = ruIdType2Id(rule_type);
			type = ruIdType2Type(rule_type);
			arity = ruArityLen2Arity(arity_len);
			len = ruArityLen2Len(arity_len);
			args = fold(enumFromTo(1, arity), Pair([], i + 1), \acc, __ -> {
				arg = ruProofExp2mmNormal(acc.second, nodes, name, sup_renames);
				Pair(concat(acc.first, arg.first), arg.second);
			});
			Pair(concat(args.first, [lookupTreeDef(sup_renames, rule, rule)]), args.second);
		}
		RuVar(id,__): Pair([ruVar2mm(name, id)], i + 1);
	}
}

ruProof2mmNormal(step : RuStep, th : RuTheorem, math : RuMath, env : RuEnv, sup_renames : Tree<int, int>) -> [int] {
	switch (ruMatchStep(step, th.proof, th.stat.hyps, math, env)) {
		RuMatchedStep(ass, sub, ___): {
			subs = fold(getTreeValues(ass.stat.vars.vars), [], \acc, v ->
				switch (ruLookupSubst(sub, v)) {
					None(): acc;
					Some(ex): concat(acc, ruProofExp2mmNormal(0, ex.nodes, th.info.id, sup_renames).first);
				}
			)
			refs = fold(step.refs, [], \acc, ref ->
				switch (ref) {
					RuHypRef(ind): concat(acc, [s2id(id2s(th.info.id) + "_" + i2s(ind))]);
					RuStepRef(ind): concat(acc, ruProof2mmNormal(th.proof.steps[ind], th, math, env, sup_renames));
				}
			);
			concat3(subs, refs, [ass.info.id]);
		}
		RuVerifyErr(): [];
	}
}

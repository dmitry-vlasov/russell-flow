import base/util/concurrent;
import ru/util/utils;

export {
	ruRuleCacheClear() -> void;
	ruRuleCacheAdd(src : RuSource, env : RuEnv) -> void;
	ruRuleCacheRemove(src : RuSource, env : RuEnv) -> void;
	ruRuleCacheGet() -> Tree<int, RuRule>;
	ruRuleCacheInfo(full : bool) -> string;
}

ruRuleCache : ref Tree<int, RuRule> = ref makeTree();

ruRuleCacheClear() -> void {
	ruRuleCache := makeTree();
}

ruRuleCaheSet = ruMakeAtomicSetTree(ruRuleCache);

ruSourceRules(src : RuSource, env : RuEnv) -> [RuRule] {
	fold(src.decls, [], \acc, decl ->
		switch (decl) {
			RuRule(__,__,__): {
				concat(acc, [decl]);
			}
			RuType(info, supers): {
				concat(acc, map(supers, \super -> ruMakeSuperRule(super, info.id, info.src, info.pos)));
			}
			default: acc;
		}
	);
}

ruRuleCacheAdd(src : RuSource, env : RuEnv) -> void {
	iter(ruSourceRules(src, env), \rule -> {
		ruRuleCaheSet(rule.info.id, rule); {}
	});
}

ruRuleCacheRemove(src : RuSource, env : RuEnv) -> void {
	iter(ruSourceRules(src, env), \rule -> 
		ruRuleCache := removeFromTree(^ruRuleCache, rule.info.id)
	);
}

ruRuleCacheGet() -> Tree<int, RuRule> {
	^ruRuleCache;
}

ruRuleCacheInfo(full : bool) -> string {
	if (!full) {
		"rules in cache: " + i2s(sizeTree(^ruRuleCache));
	} else {
		"rules in cache:\n" + strIndent(strGlue(map(getTreeKeys(^ruRuleCache), id2s), "\n"));
	}
}
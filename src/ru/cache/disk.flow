import text/binary;
import ru/util/src;

export {
	ruDiskCacheFiles(env : RuEnv, mode : string) -> [string];
	ruDiskCacheMakeDir(env : RuEnv) -> void;
	ruDiskCacheClear(env : RuEnv) -> void;
	ruDiskCacheSave(src : RuSource, env : RuEnv) -> void;
	ruDiskCacheDelete(id : int, env : RuEnv) -> void;
	ruDiskCacheLoad(id : int, env : RuEnv) -> Maybe<RuSource>;

	ruDiskCacheInfo(full : bool, env : RuEnv) -> string;
}

ruCacheVersion = 5;

RuCachedFileSource(
	source : RuSource,
	version : int
);

ruDiskCacheMakeDir(env : RuEnv) -> void {
	ruEnsureDirectoryExists(ruCacheDir(env.conf, "exact"), env.out);
	ruEnsureDirectoryExists(ruCacheDir(env.conf, "proofless"), env.out);
}

ruDiskCacheFiles(env : RuEnv, mode : string) -> [string] {
	ruDoDiskCacheFiles(ruCacheDir(env.conf, mode), env);
}

ruDoDiskCacheFiles(dir : string, env : RuEnv) -> [string] {
	dir_content = readDirectory(dir);
	fold(readDirectory(dir), [], \acc, name -> {
		path = rtrim2(dir, "/") + "/" + name;
		if (isDirectory(path)) {
			concat(acc, ruDoDiskCacheFiles(path, env));
		} else if (endsWith(path, ".cache")) {
			concat(acc, [path]);
		} else {
			acc
		}
	});
}

ruDiskCacheClear(env : RuEnv) -> void {
	iter(
		concat(ruDiskCacheFiles(env, "exact"), ruDiskCacheFiles(env, "proofless")), \file -> {
		err = deleteFile(file);
		if (err != "") {
			env.out.onError("while deleting a cache file '" + file + "' happened: '" + err + "'", []);
		}
	});
}

ruDiskCacheSave(s : RuSource, env : RuEnv) -> void {
	src = RuSource(s with info = ruUpdateFileInfo(s.info, env.conf.workingDir));
	ruDiskCacheDoSave(
		toBinary(RuCachedFileSource(src, ruCacheVersion)), 
		src.info.module, "exact", env
	);
	ruDiskCacheDoSave(
		toBinary(RuCachedFileSource(
			ruClearSourceProofs(src), 
			ruCacheVersion
		)), 
		src.info.module, "proofless", env
	);
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tsaved to cache: '" + src.info.module + "'");
	}
}

ruDiskCacheDoSave(binary : string, module: string, mode : string, env : RuEnv) -> void {
	path = ruCachedPath(module, mode, env.conf);
	ruEnsureFileDirectoryExists(path, env.out);
	if (!setFileContent(path, binary)) {
		env.out.onError("cannot save cached source '" + module + "'", []);
	}
}

ruDiskCacheLoad(id : int, env : RuEnv) -> Maybe<RuSource> {
	if (lookupTreeDef(env.conf.opts, "disk-caching", "") == "0") None() else {
		file = id2s(id);
		path = ruCachedPath(file, "exact", env.conf);
		if (!fileExists(path)) None() else {
			serialized = getFileContent(path);
			deserialized = deserializeBinary(serialized, IllegalStruct());
			if (deserialized == IllegalStruct()) {
				env.out.onError("WARNING: Illegal structure of cache file for '" + file + "'. Incremental file deleted.\n\n" + serialized + "\n\n", []);
				ruDiskCacheDelete(id, env);
				None();
			} else {
				cached = cast(deserialized : flow -> RuCachedFileSource);
				if (cached.version == ruCacheVersion) {
					src = cached.source;
					changed = ruFileChangedMessage(src.info);
					if (changed == "") Some(src) else None();
				} else {
					if (ruVerbose(env.conf) > 1) {
						env.out.onMessage("\tcached file " + file + " has outdated version " + i2s(cached.version) + " while current version is " + i2s(ruCacheVersion));
						ruDiskCacheDelete(id, env);
					}
					None();
				}
			}
		}
	}
}

ruDiskCacheDelete(id : int, env : RuEnv) -> void {
	if (lookupTreeDef(env.conf.opts, "disk-caching", "") != "0") {
		file = id2s(id);
		path = ruCachedPath(file, "exact", env.conf);
		if (!fileExists(path)) {
			env.out.onMessage("source '" + file + "' is not cached on filesystem");
		} else {
			err = deleteFile(path);
			if (err != "") {
				env.out.onMessage("error wile deleting source '" + file + "': " + err);
			}
		}
	}
}

ruDiskCacheInfo(full : bool, env : RuEnv) -> string {
	cached = ruDiskCacheFiles(env, "exact");
	if (!full) {
		"filesystem cache: " + i2s(length(cached))
	} else {
		"filesystem cache:\n" + strGlue(map(cached, \n -> "\t" + n), "\n")
	};
}

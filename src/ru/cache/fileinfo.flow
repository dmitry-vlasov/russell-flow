import base/fileinfo;

export {
	ruFileInfoCacheClear() -> void;
	ruFileInfoCacheAdd(info : RuFileInfo) -> void;
	ruFileInfoCacheRemove(id : int) -> void;
	ruFileInfoCacheGet(id : int) -> Maybe<RuFileInfo>;

	ruFileInfoCacheInfo(full : bool) -> string;
}

ruFileInfoCache : ConcurHashMap<int, RuFileInfo> = makeConcurHashMap(idfn);

ruFileInfoCacheClear() -> void {
	clearConcurHashMap(ruFileInfoCache);
}

ruFileInfoCacheAdd(info : RuFileInfo) -> void {
	setConcurHashMap(ruFileInfoCache, info.id, info);
}

ruFileInfoCacheGet(id : int) -> Maybe<RuFileInfo> {
	lookupConcurHashMap(ruFileInfoCache, id);
}

ruFileInfoCacheRemove(id : int) -> void {
	removeConcurHashMap(ruFileInfoCache, id);
}

ruFileInfoCacheInfo(full : bool) -> string {
	if (!full) {
		"fileinfo cache: " + i2s(sizeConcurHashMap(ruFileInfoCache))
	} else {
		"fileinfo cache:\n" + 
			strGlue(map(valuesConcurHashMap(ruFileInfoCache), \info -> "\t" + id2s(info.id)), "\n")
	};
}

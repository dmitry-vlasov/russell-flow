import base/fileinfo;

export {
	ruFileInfoCacheClear() -> void;
	ruFileInfoCacheAdd(info : RuFileInfo) -> void;
	ruFileInfoCacheRemove(id : int) -> void;
	ruFileInfoCacheGet(id : int) -> Maybe<RuFileInfo>;

	ruFileInfoCacheInfo(full : bool) -> string;
}

ruFileInfoCache = initConcurrentHashMap();

ruFileInfoCacheClear() -> void {
	clearConcurrentHashMap(ruFileInfoCache);
}

ruFileInfoCacheAdd(info : RuFileInfo) -> void {
	setConcurrentHashMap(ruFileInfoCache, info.id, Some(info));
}

ruFileInfoCacheGet(id : int) -> Maybe<RuFileInfo> {
	getConcurrentHashMap(ruFileInfoCache, id, None());
}

ruFileInfoCacheRemove(id : int) -> void {
	removeConcurrentHashMap(ruFileInfoCache, id);
}

ruFileInfoCacheInfo(full : bool) -> string {
	if (!full) {
		"fileinfo cache: " + i2s(sizeConcurrentHashMap(ruFileInfoCache))
	} else {
		"fileinfo cache:\n" + 
			strGlue(map(valuesConcurrentHashMap(ruFileInfoCache), \info: Some<RuFileInfo> -> "\t" + id2s(info.value.id)), "\n")
	};
}

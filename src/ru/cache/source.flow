import ru/cache/code;

export {
	ruSourceCacheClear() -> void;
	ruSourceCacheAdd(src : RuSource, exact : bool, env : RuEnv) -> void;
	ruSourceCacheRemove(id : int, exact : bool, env : RuEnv) -> void;
	ruSourceCacheGet(id : int, exact : bool, env : RuEnv) -> Maybe<RuSource>;
	ruSourceCacheContains(id : int, exact : bool, env : RuEnv) -> bool;
	ruSourceCacheAll(exact : bool, env : RuEnv) -> [RuSource];

	ruSourceCacheInfo(full : bool) -> string;
}

ruSourceExactCache : ConcurHashMap<int, RuSource> = makeConcurHashMap(idfn);
ruSourceProoflessCache : ConcurHashMap<int, RuSource> = makeConcurHashMap(idfn);

ruSourceCacheClear() -> void {
	clearConcurHashMap(ruSourceExactCache);
	clearConcurHashMap(ruSourceProoflessCache);
}

ruSourceCacheAdd(src : RuSource, exact : bool, env : RuEnv) -> void {
	setConcurHashMap(ruSourceCacheSelect(exact), src.info.id, src);
	if (exact) {
		setConcurHashMap(ruSourceProoflessCache, src.info.id, ruClearSourceProofs(src));
	}
}

ruSourceCacheRemove(id : int, exact : bool, env : RuEnv) -> void {
	removeConcurHashMap(ruSourceCacheSelect(exact), id);
}

ruSourceCacheGet(id : int, exact : bool, env : RuEnv) -> Maybe<RuSource> {
	lookupConcurHashMap(ruSourceCacheSelect(exact), id);
}

ruSourceCacheContains(id : int, exact : bool, env : RuEnv) -> bool {
	containsKeyConcurHashMap(ruSourceCacheSelect(exact), id);
}

ruSourceCacheAll(exact : bool, env : RuEnv) -> [RuSource] {
	filtermap(
		map(keysConcurHashMap(ruSourceCacheSelect(exact)), \id -> ruSourceCacheGet(id, exact, env)), 
		idfn
	);
}

ruSourceCacheInfo(full : bool) -> string { 
	if (!full) {
		"cached exact sources: " + i2s(sizeConcurHashMap(ruSourceExactCache)) + "\n" +
		"cached proofless sources: " + i2s(sizeConcurHashMap(ruSourceProoflessCache));
	} else {
		"cached exact sources:\n" + 
			strGlue(map(keysConcurHashMap(ruSourceExactCache), \id -> "\t" + id2s(id)), "\n") + 
		"\n" +
		"cached proofless sources:\n" + 
			strGlue(map(keysConcurHashMap(ruSourceProoflessCache), \id -> "\t" + id2s(id)), "\n");
	};
}

ruSourceCacheSelect(exact : bool) -> ConcurHashMap<int, RuSource> {
	if (exact) {
		ruSourceExactCache;
	} else {
		ruSourceProoflessCache;
	}
}
import base/code;
import ru/util/utils;

export {
	ruCodeCacheClear() -> void;
	// Lookups a cached file source, if not found - loads and stores.
	ruCodeCacheGet(id : int, env : RuEnv) -> RuCode;
	// Stores a certain string as a source for some path.
	ruCodeCacheSet(id : int, src : string, env : RuEnv) -> void;
	// Loads file source from filesystem. May be used to undo fcSetFileSource function.
	ruCodeCacheLoad(id : int, env : RuEnv) -> void;
	// Remove a file source code from cache
	ruCodeCacheRemove(id : int, env : RuEnv) -> void;

	// Shows cache statistics
	ruCodeCacheInfo(full : bool) -> string;

	// Range of a declaration in a source code
	ruCodeCacheDeclRange(d : RuDecl, src : RuSource, env : RuEnv) -> RuRange;

	// A fragment of source code, containing decl
	ruCodeCacheDeclCode(d : RuDecl, src : RuSource, env : RuEnv) -> string;
}

ruCodeCache : ConcurHashMap<int, RuCode> = makeConcurHashMap(idfn);

ruCodeCacheClear() -> void {
	clearConcurHashMap(ruCodeCache);
}

ruCodeCacheGet(id : int, env : RuEnv) -> RuCode {
	file = id2s(id);
	path = ruFindPath(file, env.conf, ".ru");
	if (!fileExists(path)) {
		env.out.println("source file: '" + file + "' doesn't exist");
	}
	if (containsKeyConcurHashMap(ruCodeCache, id)) {
		getConcurHashMap(ruCodeCache, id, ruNoCode);
	} else if (fileExists(path)) {
		code = RuCode(getFileContent(path), path, fileModified(path));
		setConcurHashMap(ruCodeCache, id, code);
		code;
	}  else {
		ruNoCode;
	}
}

ruCodeCacheSet(id : int, code : string, env : RuEnv) -> void {
	file = id2s(id);
	path = ruFindPath(file, env.conf, ".ru");
	setConcurHashMap(ruCodeCache, id, RuCode(code, path, timestamp()));
}

ruCodeCacheLoad(id : int, env : RuEnv) -> void {
	file = id2s(id);
	path = ruFindPath(file, env.conf, ".ru");
	if (!fileExists(path)) {
		env.out.println("source file: '" + file + "' doesn't exist");
		removeConcurHashMap(ruCodeCache, id);
	} else {
		code = RuCode(getFileContent(path), path, fileModified(path));
		setConcurHashMap(ruCodeCache, id, code);
	}
}

ruCodeCacheRemove(id : int, env : RuEnv) -> void {
	removeConcurHashMap(ruCodeCache, id);
}

ruCodeCacheInfo(full : bool) -> string {
	if (full) {
		"cached source code texts:\n" + superglue(keysConcurHashMap(ruCodeCache), \c -> "\t" + id2s(c),"\n")
	} else {
		"cached source code texts: " + i2s(sizeConcurHashMap(ruCodeCache))
	}
}

ruCodeCacheDeclRange(d : RuDecl, src : RuSource, env : RuEnv) -> RuRange {
	ruDeclRange(d, src, ruCodeCacheGet(src.info.id, env).code, env);
}

ruCodeCacheDeclCode(d : RuDecl, src : RuSource, env : RuEnv) -> string {
	ruDeclCode(d, src, ruCodeCacheGet(src.info.id, env).code, env);
}

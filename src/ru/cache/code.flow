import base/code;
import ru/util/utils;

export {
	ruCodeCacheClear() -> void;
	// Lookups a cached file source, if not found - loads and stores.
	ruCodeCacheGet(id : int, env : RuEnv) -> RuCode;
	// Stores a certain string as a source for some path.
	ruCodeCacheSet(id : int, src : string, path : string, env : RuEnv) -> void;
	// Loads file source from filesystem. May be used to undo fcSetFileSource function.
	ruCodeCacheLoad(id : int, env : RuEnv) -> void;
	// Remove a file source code from cache
	ruCodeCacheRemove(id : int, env : RuEnv) -> void;

	// Shows cache statistics
	ruCodeCacheInfo(full : bool) -> string;

	// Range of a declaration in a source code
	ruCodeCacheDeclRange(d : RuDecl, src : RuSource, env : RuEnv) -> RuRange;

	// A fragment of source code, containing decl
	ruCodeCacheDeclCode(d : RuDecl, src : RuSource, env : RuEnv) -> string;
}

ruCodeCache = initConcurrentHashMap();

ruCodeCacheClear() -> void {
	clearConcurrentHashMap(ruCodeCache);
}

ruCodeCacheGet(id : int, env : RuEnv) -> RuCode {
	file = id2s(id);
	path = ruFindPath(file, env.conf, ".ru");
	if (!fileExists(path)) {
		env.out.onMessage("source file: '" + file + "' doesn't exist");
	}
	if (!containsConcurrentHashMap(ruCodeCache, id)) {
		if (!fileExists(path)) ruNoCode else {
			code = RuCode(getFileContent(path), path, fileModified(path));
			setConcurrentHashMap(ruCodeCache, path, code);
			code;
		}
	} else {
		cached = getConcurrentHashMap(ruCodeCache, id, ruNoCode);
		modified = fileModified(path);
		if (cached.modified != modified) {
			// Reload outdated source.
			text = getFileContent(path);
			code = RuCode(text, path, modified);
			setConcurrentHashMap(ruCodeCache, path, code);
			code;
		} else {
			cached;
		}
	}
}

ruCodeCacheSet(id : int, code : string, path : string, env : RuEnv) -> void {
	setConcurrentHashMap(ruCodeCache, id, RuCode(code, path, timestamp()));
}

ruCodeCacheLoad(id : int, env : RuEnv) -> void {
	file = id2s(id);
	path = ruFindPath(file, env.conf, ".ru");
	if (!fileExists(path)) {
		env.out.onMessage("source file: '" + file + "' doesn't exist");
		removeConcurrentHashMap(ruCodeCache, id);
	} else {
		code = RuCode(getFileContent(path), path, fileModified(path));
		setConcurrentHashMap(ruCodeCache, path, code);
	}
}

ruCodeCacheRemove(id : int, env : RuEnv) -> void {
	removeConcurrentHashMap(ruCodeCache, id);
}

ruCodeCacheInfo(full : bool) -> string {
	if (full) {
		"cached source code texts:\n" + strGlue(map(keysConcurrentHashMap(ruCodeCache), \n -> "\t" + n),"\n")
	} else {
		"cached source code texts: " + i2s(sizeConcurrentHashMap(ruCodeCache))
	}
}

ruCodeCacheDeclRange(d : RuDecl, src : RuSource, env : RuEnv) -> RuRange {
	ruDeclRange(d, src, ruCodeCacheGet(src.info.id, env).code, env);
}

ruCodeCacheDeclCode(d : RuDecl, src : RuSource, env : RuEnv) -> string {
	ruDeclCode(d, src, ruCodeCacheGet(src.info.id, env).code, env);
}

import ru/util/decls;

export {
	ruDeclCacheClear() -> void;
	ruDeclCacheAdd(src : RuSource, env : RuEnv) -> void;
	ruDeclCacheRemove(src : RuSource, env : RuEnv) -> void;
	ruDeclCacheGet(id : int) -> Maybe<RuDecl>;
	ruDeclCacheAll() -> [RuDecl];
	ruDeclCacheAssertions() -> Tree<int, RuAssertion>;
	ruDeclCacheDefs() -> Tree<int, RuDef>;
	ruDeclCacheAxioms() -> Tree<int, RuAxiom>;
	ruDeclCacheTheorems() -> Tree<int, RuTheorem>;
	ruDeclCacheDecls(env : RuEnv) -> RuDecls;
	ruDeclCacheTheoremAxioms() -> Tree<int, Set<int>>;

	ruDeclCacheInfo(full : bool) -> string;
	ruDeclCacheStats(mode : [string], env : RuEnv) -> string;
}

ruDeclCache = initConcurrentHashMap();

ruDeclCacheClear() -> void {
	clearConcurrentHashMap(ruDeclCache);
}

ruDeclCacheAdd(src : RuSource, env : RuEnv) -> void {
	iter(src.decls, \decl ->
		setConcurrentHashMap(ruDeclCache, decl.info.id, Some(decl))
	);
}

ruDeclCacheRemove(src : RuSource, env : RuEnv) -> void {
	iter(src.decls, \decl ->
		removeConcurrentHashMap(ruDeclCache, id2s(decl.info.id))
	);
}

ruDeclCacheGet(id : int) -> Maybe<RuDecl> {
	getConcurrentHashMap(ruDeclCache, id, None());
}

ruDeclCacheAll() -> [RuDecl] {
	filtermap(valuesConcurrentHashMap(ruDeclCache), idfn);
}

ruDeclCacheAssertions() -> Tree<int, RuAssertion> {
	values2tree(filtermap(ruDeclCacheAll(), ruDecl2Assertion), \ass -> ass.info.id);
}

ruDeclCacheDefs() -> Tree<int, RuDef> {
	values2tree(filtermap(ruDeclCacheAll(), ruDecl2Def), \def -> def.info.id);
}

ruDeclCacheAxioms() -> Tree<int, RuAxiom> {
	values2tree(filtermap(ruDeclCacheAll(), ruDecl2Axiom), \ax -> ax.info.id);
}

ruDeclCacheTheorems() -> Tree<int, RuTheorem> {
	values2tree(filtermap(ruDeclCacheAll(), ruDecl2Theorem), \th -> th.info.id);
}

ruDeclCacheDecls(env : RuEnv) -> RuDecls {
	fold(ruDeclCacheAll(), ruEmptyDecls, \acc, decl ->
		ruDeclsAddDecl(acc, decl, env)
	);
}

ruDeclCacheInfo(full : bool) -> string {
	"cached declarations: " + i2s(sizeConcurrentHashMap(ruDeclCache));
}

RuDeclInfoAcc(
	consts   : [RuConst],
	types    : [RuType],
	rules    : [RuRule],
	axioms   : [RuAxiom],
	defs     : [RuDef],
	theorems : [RuTheorem]
);

ruDeclCacheStats(mode : [string], env : RuEnv) -> string {
	opts = buildSet(mode);
	info_acc = fold(
		filtermap(valuesConcurrentHashMap(ruDeclCache), idfn), 
		RuDeclInfoAcc([], [], [], [], [], []),
		\acc, decl -> {
			switch (decl) {
				RuConst(__,__,__):      RuDeclInfoAcc(acc with consts = concat(acc.consts, [decl]));
				RuType(__,__):          RuDeclInfoAcc(acc with types  = concat(acc.types,  [decl]));
				RuRule(__,__,__):       RuDeclInfoAcc(acc with rules  = concat(acc.rules,  [decl]));
				RuAxiom(__,__):         RuDeclInfoAcc(acc with axioms = concat(acc.axioms, [decl]));
				RuDef(__,__,__,__):     RuDeclInfoAcc(acc with defs   = concat(acc.defs,   [decl]));
				RuTheorem(__,__,__,__): RuDeclInfoAcc(acc with theorems = concat(acc.theorems, [decl]));
			}
		}
	);
	rules = fold(info_acc.rules, makeTree(), \acc, r -> setTree(acc, r.info.id, r));
	math = RuMath(makeTree(), RuDecls(RuLang(makeTree(), makeTree(), rules), makeTree()));
	"consts:   " + i2s(length(info_acc.consts)) + "\n" + 
	"types:    " + i2s(length(info_acc.types)) + "\n" + 
	"rules:    " + i2s(length(info_acc.rules)) + "\n" + 
	"axioms:   " + i2s(length(info_acc.axioms)) + "\n" + 
	"defs:     " + i2s(length(info_acc.defs)) + "\n" + 
	"theorems: " + i2s(length(info_acc.theorems)) + "\n" + 
	(if (containsSet(opts, "consts") || containsSet(opts, "all")) {
		"consts:\n" + strGlue(map(info_acc.consts, \c -> "\t" + id2s(c.info.id)), "\n") + "\n"
	} else "") +
	(if (containsSet(opts, "types") || containsSet(opts, "all")) {
		"types:\n" + strGlue(map(info_acc.types, \t -> "\t" + ru2s(t, math)), "\n") + "\n"
	} else "") +
	(if (containsSet(opts, "rules") || containsSet(opts, "all")) {
		"rules:\n" + strGlue(map(info_acc.rules, \r -> "\t" + ru2s(r, math)), "\n") + "\n"
	} else "") +
	(if (containsSet(opts, "axioms") || containsSet(opts, "all")) {
		"axioms:\n" + strGlue(map(info_acc.axioms, \a -> "\t" + id2s(a.info.id)), "\n") + "\n"
	} else "") +
	(if (containsSet(opts, "defs") || containsSet(opts, "all")) {
		"defs:\n" + strGlue(map(info_acc.defs, \d -> "\t" + id2s(d.info.id)), "\n") + "\n"
	} else "");
}

ruDeclCacheTheoremAxioms() -> Tree<int, Set<int>> {
	assertions = ruDeclCacheAssertions();
	foldTree(assertions, makeTree(), \name, __, acc -> ruDoCachedTheoremAxioms(assertions, name, acc));
}

ruDoCachedTheoremAxioms(assertions : Tree<int, RuAssertion>, as_name : int, acc : Tree<int, Set<int>>) -> Tree<int, Set<int>> {
	switch (lookupTree(assertions, as_name)) {
		Some(ass): {
			switch (ass) {
				RuTheorem(info,__,__,proof): {
					switch (lookupTree(acc, info.id)) {
						Some(v): acc;
						None(): {
							acc1 = fold(proof.steps, acc, \ac, step -> ruDoCachedTheoremAxioms(assertions, step.assertion, ac));
							axioms = fold(proof.steps, makeSet(), \ac, step -> mergeSets(ac, lookupTreeDef(acc1, step.assertion, makeSet())));
							setTree(acc1, info.id, axioms);
						}
					}
				}
				RuAxiom(info,__):     setTree(acc, info.id, makeSet1(info.id));
				RuDef(info,__,__,__): setTree(acc, info.id, makeSet());
			}
		}
		None(): acc;
	}
}

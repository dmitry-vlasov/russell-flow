import base/conf;
import ru/cache/cache;
import comm;

export {
	ruSyncCommands : [RuComm];
	ruCacheCommands : [RuComm];
}

ruCacheCommands = [
	RuComm(
		RuCommDescr(
			"cache-load", "sync", "read cached sources", "file", false, false,
			[
				RuCommArg("file", true, "input file", ""),
				RuCommArg("full", true, "load complete files, not just declarations", "0")
			], []
		),
		\unit -> {
			env = ruUnitEnv(unit);
			conf = env.conf;
			file = lookupTreeDef(unit.task.args, "file", "");
			mode = if (lookupTreeDef(unit.task.args, "full", "0") == "1") "exact" else "proofless";
			timer = ruMakeTimer();
			if (file != "") {
				ruCacheLoad(ruFileId(file, env.conf), mode, env); 
			} else {
				ruCacheLoadAll(mode, env);
			}
			if (ruVerbose(conf) > 0) {
				if (ruTimePassed(timer) > 100.0) {
					unit.out.onMessage("cache loaded in " + ruTimePassed2s(timer));
				}
			}
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommDescr(
			"cache-clear", "sync", "clear up a cache: mem, disk or all", "cache", false, false,
			[RuCommArg("cache", false, "which cache: mem, disk or all to clear", "mem")], []
		),
		\unit -> {
			env = ruUnitEnv(unit);
			cache = lookupTreeDef(unit.task.args, "cache", "");
			if (cache == "mem") {
				ruMemCacheClear();
			} else if (cache == "disk") {
				ruDiskCacheClear(env);
			} else if (cache == "all") {
				ruCacheClear(env);
			}
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommDescr(
			"cache-save", "sync", "save cached sources", "file", false, false,
			[RuCommArg("file", true, "input file", "")], []
		),
		\unit -> { 
			env = ruUnitEnv(unit);
			file = lookupTreeDef(unit.task.args, "file", "");
			if (file == "") {
				ruCacheSaveAll(env); 
			} else {
				ruCacheSave(ruFileId(file, env.conf), env); 
			}
			Some(unit.state); 
		}
	),
	RuComm(
		RuCommDescr(
			"cache-info", "sync", "show cache info", "what", false, false,
			[
				RuCommArg("what", true, "what info to show: all, rules, disk,...", "all"),
				RuCommArg("full", true, "extended info or concise", "0")
			], []
		),
		\unit -> { 
			env = ruUnitEnv(unit);
			what = lookupTreeDef(unit.task.args, "what", "all");
			full = lookupTreeDef(unit.task.args, "full", "0") == "1";
			if (what == "all") {
				env.out.onMessage(ruCacheInfo(full, env));
			} else if (what == "rule" || what == "rules") {
				env.out.onMessage(ruRuleCacheInfo(full));
			} else if (what == "disk") {
				env.out.onMessage(ruDiskCacheInfo(full, env));
			} else {
				// TODO
				env.out.onMessage("'cache-info what=" + what + " is not yet implemented");
			}
			Some(unit.state); 
		}
	),
];

ruSyncCommands = [
	RuComm(
		RuCommDescr(
			"sync-file-source", "sync", "load an updated file source", "file", false, false,
			[RuCommArg("file", false, "input file", ""),  RuCommArg("text", false, "updated source", "")], []
		),
		\unit -> {
			env = ruUnitEnv(unit);
			file = lookupTreeDef(unit.task.args, "file", "");
			ruCodeCacheSet(
				ruFileId(file, env.conf), 
				lookupTreeDef(unit.task.args, "text", ""),
				env
			); 
			Some(unit.state);
		}
	),
	RuComm(
		RuCommDescr(
			"sync-file-changed", "sync", "apply changes to a file source", "file", false, false,
			[RuCommArg("file", false, "input file", ""),  RuCommArg("change", false, "change in JSON format", "")], []
		),
		\unit -> {
			env = ruUnitEnv(unit);
			json = lookupTreeDef(unit.task.args, "change-json", "");
			switch (json2LspDidChangeTextDocumentParams(parseJson(json))) {
				Some(params): {
					file = ruCorrectUriPath(params.textDocument.uri.path);
					id = ruFileId(file, env.conf);
					contents = ruCodeCacheGet(id, env).code;
					changed = fold(params.contentChanges, contents, \acc, changes -> lspApplyContentChangeEvent(changes, acc));
					ruCodeCacheSet(id, changed, env);
				}
				None(): {
					unit.out.onMessage("file-change: An option 'change-json' must be a vaid Json-encoded LSP DidChangeTextDocimentParams");
				}
			}
			Some(unit.state);
		}
	),
	RuComm(
		RuCommDescr(
			"sync-file-saved", "sync", "file was saved", "file", false, false,
			[RuCommArg("file", false, "input file", "")], []
		),
		\unit -> { 
			env = ruUnitEnv(unit);
			file = lookupTreeDef(unit.task.args, "file", "");
			ruCodeCacheLoad(ruFileId(file, env.conf), env); 
			Some(unit.state);
		}
	)
];

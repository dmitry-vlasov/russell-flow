import ru/util/src;
import ru/cache/lang;

export {
	ruDefCacheClear() -> void;
	ruInitDefCache(env : RuEnv) -> void;
	ruDefCacheAdd(src : RuSource, env : RuEnv) -> void;
	ruDefCacheRemove(src : RuSource, env : RuEnv) -> void;

	RuCachedDef(
		symbs : [int], // Unique symbols, which distingishes the definition from all others
		rule : int,    // The toplevel rule of defiendum
		def : RuDef
	);

	ruDefCacheRule2Def(rule_id : int, env : RuEnv) -> Maybe<RuCachedDef>;
	ruDefCacheSymb2Def(symb_id : int, env : RuEnv) -> Maybe<RuCachedDef>;
	ruDefCacheInfo(full : bool) -> string;
}

ruId2Def : ConcurHashMap<int, RuDef> = makeConcurHashMap(idfn); // Raw Definitions - a queue to be later added properly
ruId2CachedDef : ConcurHashMap<int, RuCachedDef> = makeConcurHashMap(idfn);  // Cached definitions
ruRule2CachedDef : ConcurHashMap<int, RuCachedDef> = makeConcurHashMap(idfn); 
ruSymb2CachedDef : ConcurHashMap<int, RuCachedDef> = makeConcurHashMap(idfn); 

ruDefCacheClear() -> void {
	clearConcurHashMap(ruId2Def);
	clearConcurHashMap(ruId2CachedDef);
	clearConcurHashMap(ruRule2CachedDef);
	clearConcurHashMap(ruSymb2CachedDef);
}

ruInitDefCache(env : RuEnv) -> void {
	if (sizeConcurHashMap(ruId2Def) > 0) {
		defs = valuesConcurHashMap(ruId2Def);
		clearConcurHashMap(ruId2Def);
		iter(defs, \d -> ruDefCacheAddDef(d, env));
	}
}

ruDefCacheRule2Def(rule_id : int, env : RuEnv) -> Maybe<RuCachedDef> {
	ruInitDefCache(env);
	lookupConcurHashMap(ruRule2CachedDef, rule_id);
}

ruDefCacheSymb2Def(symb_id : int, env : RuEnv) -> Maybe<RuCachedDef> {
	ruInitDefCache(env);
	lookupConcurHashMap(ruSymb2CachedDef, symb_id);
}

ruDefCacheAdd(src : RuSource, env : RuEnv) -> void {
	iter(src.decls, \decl -> 
		switch (decl) {
			RuDef(info,__,__,__): setConcurHashMap(ruId2Def, info.id, decl);
			default: {}
		}
	);
}

ru_def_ignored_ids : ref [int] = ref []; 

ruDefIgnoreId(id : int) -> bool {
	if (contains(^ru_def_ignored_ids, id)) true else {
		is_ignored = contains([ruIdLeftBracket(), ruIdRightBracket(), ruIdComma(), ruIdColon()], id);
		if (is_ignored) {
			ru_def_ignored_ids := concat(^ru_def_ignored_ids, [id]);
		}
		is_ignored;
	}
}

ruDefCacheAddDef(d : RuDef, env : RuEnv) -> void {
	switch (ruExp(d.defm).nodes[0]) {
		RuRuleNode(rule_type,__): {
			rule_id = ruIdType2Id(rule_type);
			switch (ruLangCacheRuleGet(rule_id)) {
				Some(rule): {
					all_symbs = filtermap(rule.term.nodes, \n ->
						switch (n) {
							RuConstRef(symb_id): 
								if (ruDefIgnoreId(symb_id)) None() else Some(symb_id);
							RuVar(__,__): None(); 
						}
					);
					symbs = filter(uniq(all_symbs), \symb_id -> !containsKeyConcurHashMap(ruSymb2CachedDef, symb_id));
					cached = RuCachedDef(symbs, rule.info.id, d);

					setConcurHashMap(ruId2CachedDef, d.info.id, cached);
					setConcurHashMap(ruRule2CachedDef, rule.info.id, cached);
					if (length(symbs) > 0) {
						iter(symbs, \symb ->
							setConcurHashMap(ruSymb2CachedDef, symb, cached)
						);
					} else {
						env.out.trace("def-cache", \-> "definition " + id2s(d.info.id) + " has no unique symbols");
						//ruDefCacheFixNoSymbs(d, rule, all_symbs);
					}
				}
				None(): {
					ruCrash("Rule '" + id2s(rule_id) + "' is not found in rule cache");
				}
			}
		}
		default: {
			ruCrash("defiendum must not be a variable: '" + ruExpRPN2s(d.defm) + "'");
		}
	}
}

/*
ruDefCacheFixNoSymbs(d : RuDef, all_symbs : [int]) ->  [int] {
	affected = filtermap(all_symbs, \symb -> getConcurHashMap(ruSymb2CachedDef, symb, None()), idfn);
	if (length(affected) != length(all_symbs)) {
		ruCrash("length(affected_rules) != length(all_symbs)");
	}
	symbs_removed = map(affected, \cached -> differenceSets(buildSet(cached.symbs), buildSet(all_symbs)));
	switch (findi(symbs_removed, \s -> !isEmptySet(s))) {
		Some(i): {
			new_symbs = symbs_removed[i];
		}
		None(): {

		}
	}
}
*/

ruDefCacheRemove(src : RuSource, env : RuEnv) -> void {
	iter(src.decls, \d ->
		switch (d) {
			RuDef(info,__,__, __): {
				switch (lookupConcurHashMap(ruId2CachedDef, info.id)) {
					Some(cached): {
						removeConcurHashMap(ruId2CachedDef, info.id);
						removeConcurHashMap(ruRule2CachedDef, cached.rule);
						iter(cached.symbs, \symb ->
							removeConcurHashMap(ruSymb2CachedDef, symb)
						);
					}
					None(): {
						if (containsKeyConcurHashMap(ruId2Def, info.id)) {
							removeConcurHashMap(ruId2Def, info.id);
						} else {
							ruCrash("Def '" + id2s(info.id) + "' is not cached");
						}
					}
				}
			}
			default: {}
		}
	);
}

ruDefCacheInfo(full : bool) -> string {
	"definitions cache: " + i2s(sizeConcurHashMap(ruId2CachedDef));
}

import ru/util/src;

export {
	ruDefCacheClear() -> void;
	ruDefCacheAdd(src : RuSource, env : RuEnv) -> void;
	ruDefCacheRemove(src : RuSource, env : RuEnv) -> void;

	ruDefCacheGet(id : int) -> Maybe<RuDef>;
	ruDefCacheInfo(full : bool) -> string;
}

ruDefCache = initConcurrentHashMap();  // Definitions

ruDefCacheClear() -> void {
	clearConcurrentHashMap(ruDefCache);
}

ruDefCacheGet(id : int) -> Maybe<RuDef> {
	getConcurrentHashMap(ruDefCache, id, None())
}

RuCachedDef(
	rule : int,
	def : RuDef
);

ruSourceDefs(src : RuSource, env : RuEnv) -> [RuCachedDef] {
	fold(src.decls, [], \acc, decl -> 
		switch (decl) {
			RuDef(__,__,defm, __): {
				switch (defm.nodes[0]) {
					RuRuleNode(rule,__,__,__): concat(acc, [RuCachedDef(rule, decl)]);
					default: { 
						ruCrash("defiendum must not be a variable: '" + ruExpRPN2s(defm) + "'");
						acc
					}
				}
			}
			default: acc;
		}
	);
}

ruDefCacheAdd(src : RuSource, env : RuEnv) -> void {
	iter(ruSourceDefs(src, env), \d -> 
		setConcurrentHashMap(ruDefCache, d.rule, Some(d.def))	
	);
}

ruDefCacheRemove(src : RuSource, env : RuEnv) -> void {
	iter(ruSourceDefs(src, env), \d -> 
		removeConcurrentHashMap(ruDefCache, d.rule)	
	);
}

ruDefCacheInfo(full : bool) -> string {
	"definitions cache: " + i2s(sizeConcurrentHashMap(ruDefCache));
}

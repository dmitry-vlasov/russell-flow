import ds/vector;
import base/util/timer;
import base/util/lsp;
import ru/cache/code;
import ru/cache/lang;
import ru/cache/decl;
import ru/cache/def;
import ru/cache/source;
import ru/cache/fileinfo;
import ru/cache/disk;

export {
	ruCacheAdd(src : RuSource, exact : bool, env : RuEnv) -> void;
	ruCacheForceAdd(src : RuSource, exact : bool, env : RuEnv) -> void;
	ruCacheGet(id : int, exact, env : RuEnv) -> Maybe<RuSource>;
	ruCacheRemove(id : int, env : RuEnv) -> void;

	ruCacheLoad(id : int, mode : string, with_imports : bool, env : RuEnv) -> void;
	ruCacheLoadAll(mode : string, env : RuEnv) -> void;

	ruCacheClear(env : RuEnv) -> void;
	ruMemCacheClear() -> void;

	ruCacheSaveAll(env : RuEnv) -> void;
	ruCacheSave(id : int, env : RuEnv) -> void;

	ruCachedDecl2s(id : int, env : RuEnv) -> string;
	ruCachedDecl2LspSymbolInfo(id : int, env : RuEnv) -> Maybe<LspSymbolInformation>;

	ruCacheInfo(full : bool, env : RuEnv) -> string;
}


ruCacheClear(env : RuEnv) -> void {
	ruDiskCacheClear(env);
	ruMemCacheClear();
}

ruMemCacheClear() -> void {
	ruCodeCacheClear();
	ruSourceCacheClear();
	ruLangCacheClear();
	ruDefCacheClear();
	ruDeclCacheClear();
}

ruCacheAdd(src : RuSource, exact : bool, env : RuEnv) -> void {
	if (!ruSourceCacheContains(src.info.id, exact, env)) {
		ruSourceCacheAdd(src, exact, env);
		ruLangCacheAdd(src, env);
		ruDefCacheAdd(src, env);
		ruDeclCacheAdd(src, env);
		ruFileInfoCacheAdd(src.info);
	}
}

ruCacheForceAdd(src : RuSource, exact : bool, env : RuEnv) -> void {
	ruSourceCacheAdd(src, exact, env);
	ruLangCacheAdd(src, env);
	ruDefCacheAdd(src, env);
	ruDeclCacheAdd(src, env);
	ruFileInfoCacheAdd(src.info);
}

ruCacheGet(id : int, exact : bool, env : RuEnv) -> Maybe<RuSource> {
	mode = if (exact) "exact" else "proofless";
	if (lookupTreeDef(env.conf.opts, "caching", "") == "0") None() else {
		switch (ruSourceCacheGet(id, exact, env)) {
			Some(cached): Some(cached);
			None(): {
				from_disk = ruDiskCacheLoad(id, mode, env);
				switch (from_disk.first) {
					Some(loaded): {
						ruCacheAdd(loaded, true, env);
						Some(loaded);
					}
					None(): None();
				}
			}
		}	
	}
}

ruCacheRemove(id : int, env : RuEnv) -> void {
	maybeApply(ruCacheGet(id, false, env), \src -> {
		ruLangCacheRemove(src, env);
		ruDefCacheRemove(src, env);
		ruDeclCacheRemove(src, env);
	});
	ruCodeCacheRemove(id, env);
	ruSourceCacheRemove(id, true, env);
	ruSourceCacheRemove(id, false, env);
}

ruCacheSaveAll(env : RuEnv) -> void {
	all_sources = concat(
		ruSourceCacheAll(true, env),
		ruSourceCacheAll(false, env)
	);
	iter(all_sources, 
		\src -> ruDiskCacheSave(src, env)
	);
}

ruCacheSave(id : int, env : RuEnv) -> void {
	switch (ruSourceCacheGet(id, true, env)) {
		Some(cached): ruDiskCacheSave(cached, env);
		None(): { }
	}
	switch (ruSourceCacheGet(id, false, env)) {
		Some(cached): ruDiskCacheSave(cached, env);
		None(): { }
	}
}

ruCacheLoad(id : int, mode : string, with_imports : bool, env : RuEnv) -> void {
	exact = (mode == "exact");
	if (!ruSourceCacheContains(id, exact, env)) {
		loaded = ruDoCacheLoad(id, mode, env, with_imports, [], makeSet()).first;
		iter(loaded, \src -> ruCacheAdd(src, exact, env));
	}
}

ruDoCacheLoad(id : int, mode : string, env : RuEnv, with_imports : bool, acc : [RuSource], visited : Set<int>) -> Pair<[RuSource], Set<int>> {
	if (containsSet(visited, id) || ruSourceCacheContains(id, mode == "exact", env)) {
		Pair(acc, visited) 
	} else {
		new_visited = insertSet(visited, id);
		from_disk = ruDiskCacheLoad(id, mode, env);
		switch (from_disk.first) {
			Some(cached): {
				new_acc = Pair(concat(acc, [cached]), new_visited);
				if (!with_imports) new_acc else {
					fold(cached.imports, new_acc, \ac, imp -> 
						ruDoCacheLoad(imp.id, mode, env, with_imports, ac.first, ac.second)
					);
				}
			}
			None(): {
				Pair(acc, new_visited);
			}
		}
	}
}

ruCacheLoadAll(mode : string, env0 : RuEnv) -> void {
	timer = ruMakeTimer();
	cached = ruDiskCacheFiles(env0, mode);
	exact = (mode == "exact");
	ruConcurrentVoid(mapi(ruSplitCachedFiles(cached), \i, paths -> \env -> {
		paths_timer = ruMakeTimer();
		iter(paths, \path -> {
			file = ruCachedFile(path, mode, env.conf);
			if (file == "") {
				env.out.onError("Cache path '" + path + "' was not converted to a cached module name", []);
			} else {
				module = ruTrimPath(file, env.conf, ".ru");
				mod_timer = ruMakeTimer();
				from_disk = ruDiskCacheLoad(s2id(module), mode, env);
				switch (from_disk.first) {
					Some(loaded): {
						ruCacheAdd(loaded, exact, env);
						if (ruVerbose(env.conf) > 2) {
							env.out.onMessage("\t\tmodule: '" + module + "' is loaded to cache in " + ruTimePassed2s(mod_timer));
						}
					}
					None(): {
						if (ruVerbose(env.conf) > 1) {
							env.out.onMessage(
								"failed to load '" + mode + "' cached from disk: '" + module + "'" + 
								(if (from_disk.second == "") "" else ": " + from_disk.second)
							);
						}
					}
				}
			}
		});
		if (ruVerbose(env.conf) > 1) {
			env.out.onMessage("\t" + i2s(i) + " chunk of " + i2s(length(paths)) + " modules is loaded to cache in " + ruTimePassed2s(paths_timer));
		}
	}), env0);
	if (ruVerbose(env0.conf) > 0) {
		env0.out.onMessage("mem cache (" + mode + ") loaded: " + i2s(length(cached)) + " modules in " + ruTimePassed2s(timer));
	}
}

ruSplitCachedFiles(files : [string]) -> [[string]] {
	file_size = map(files, \file -> Pair(file, fileSize(file)));
	sum_size = fold(file_size, 0.0, \acc, fs -> acc + fs.second);
	size_per_processor = sum_size / i2d(availableProcessors());
	curr = makeVector(128);
	split = fold(file_size, Pair([], 0.0), \acc, fs -> {
		sum =  acc.second + fs.second;
		if (sum < size_per_processor) {
			pushVector(curr, fs.first);
			Pair(acc with second = sum);
		} else {
			slice = vector2array(curr);
			clearVector(curr);
			pushVector(curr, fs.first);
			Pair(concat(acc.first, [slice]), 0.0);
		}
	});
	if (sizeVector(curr) == 0) split.first else {
		concat(split.first, [vector2array(curr)]);
	}
}

ruCachedDecl2s(id : int, env : RuEnv) -> string {
	eitherMap(ruDeclCacheGet(id), \decl -> 
		eitherMap(ruCacheGet(decl.info.src, false, env), \src -> 
			ruCodeCacheDeclCode(decl, src, env), ""
		), ""
	);
}

ruCachedDecl2LspSymbolInfo(id : int, env : RuEnv) -> Maybe<LspSymbolInformation> {
	maybeBind(ruDeclCacheGet(id), \decl -> 
		maybeMap(ruCacheGet(decl.info.src, false, env), \src -> {
			range = ruCodeCacheDeclRange(decl, src, env);
			location = ruRangeCode2LspLocation(range, src.info.path, ruCodeCacheGet(decl.info.src, env).code);
			LspSymbolInformation(id2s(id), ruDecl2LspSymbolKind(decl), false, location, "");
		})
	);
}

ruCacheInfo(full : bool, env : RuEnv) -> string {
	ruSourceCacheInfo(full) + "\n" +
	ruDeclCacheInfo(full) + "\n" +
	ruDefCacheInfo(full) + "\n" +
	ruLangCacheInfo(full) + "\n" +
	ruCodeCacheInfo(full) + "\n" +
	ruDiskCacheInfo(full, env) + "\n";
}

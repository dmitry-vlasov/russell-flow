import base/concurrent;
import ru/util/utils;

export {
	ruLangCacheClear() -> void;
	ruLangCacheAdd(src : RuSource, env : RuEnv) -> void;
	ruLangCacheRemove(src : RuSource, env : RuEnv) -> void;
	ruLangCacheInfo(full : bool) -> string;
	ruLangCacheGet() -> RuLang;
}

ruLangCacheClear() -> void {
	ruRuleCache := makeTree();
	ruConstCache := makeTree();
}

ruLangCacheAdd(src : RuSource, env : RuEnv) -> void {
	iter(ruSourceRules(src, env), \rule -> {
		ruRuleCaheSet(rule.info.id, rule); {}
	});
	iter(ruSourceConsts(src, env), \const -> {
		ruConstCaheSet(const.info.id, const); {}
	});
	iter(ruSourceTypes(src, env), \type -> {
		ruTypeCaheSet(type.info.id, type); {}
	});
}

ruLangCacheRemove(src : RuSource, env : RuEnv) -> void {
	iter(ruSourceRules(src, env), \rule -> 
		ruRuleCache := removeFromTree(^ruRuleCache, rule.info.id)
	);
	iter(ruSourceConsts(src, env), \const -> 
		ruConstCache := removeFromTree(^ruConstCache, const.info.id)
	);
	iter(ruSourceTypes(src, env), \type -> 
		ruTypeCache := removeFromTree(^ruTypeCache, type.info.id)
	);
}

ruLangCacheInfo(full : bool) -> string {
	if (!full) {
		"types in cache: " + i2s(sizeTree(^ruTypeCache)) + "\n" +
		"rules in cache: " + i2s(sizeTree(^ruRuleCache)) + "\n" +
		"consts in cache: " + i2s(sizeTree(^ruConstCache));
	} else {
		"types in cache:\n" + strIndent(strGlue(map(getTreeKeys(^ruTypeCache), id2s), "\n")) + "\n" +
		"rules in cache:\n" + strIndent(strGlue(map(getTreeKeys(^ruRuleCache), id2s), "\n")) + "\n" +
		"consts in cache:\n" + strIndent(strGlue(map(getTreeKeys(^ruConstCache), id2s), "\n"));
	}
}

ruLangCacheGet() -> RuLang {
	RuLang(
		^ruConstCache,
		^ruTypeCache,
		^ruRuleCache,
	);
}

ruTypeCache : ref Tree<int, RuType> = ref makeTree();
ruRuleCache : ref Tree<int, RuRule> = ref makeTree();
ruConstCache : ref Tree<int, RuConst> = ref makeTree();

ruTypeCaheSet = ruMakeAtomicSetTree(ruTypeCache);
ruRuleCaheSet = ruMakeAtomicSetTree(ruRuleCache);
ruConstCaheSet = ruMakeAtomicSetTree(ruConstCache);

ruSourceRules(src : RuSource, env : RuEnv) -> [RuRule] {
	fold(src.decls, [], \acc, decl ->
		switch (decl) {
			RuRule(__,__,__): {
				concat(acc, [decl]);
			}
			RuType(info, supers): {
				concat(acc, map(supers, \super -> ruMakeSuperRule(super, info.id, info.src, info.pos)));
			}
			default: acc;
		}
	);
}

ruSourceConsts(src : RuSource, env : RuEnv) -> [RuConst] {
	fold(src.decls, [], \acc, decl ->
		switch (decl) {
			RuConst(__,__,__): {
				concat(acc, [decl]);
			}
			default: acc;
		}
	);
}

ruSourceTypes(src : RuSource, env : RuEnv) -> [RuType] {
	fold(src.decls, [], \acc, decl ->
		switch (decl) {
			RuType(__,__): {
				concat(acc, [decl]);
			}
			default: acc;
		}
	);
}

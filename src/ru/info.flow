import command;
import ru/src_vol;

export {
	ruInfoCommands : [RuComm];
}

ruInfoCommands = [
	ruCommInfoOutline,
	ruCommInfoMath,
	ruCommInfoHover,
	ruCommInfoDecl,
	ruCommInfoUses,
	ruCommInfoFind,
	ruCommInfoSymbol,
	ruCommInfoSource,
	ruCommInfoShow,
	ruCommInfoAxiomatics,
	ruCommInfoVolume,
];

ruCommInfoDecl = RuComm(
	RuCommDescr(
		"info-decl", "info", "declaration of entity at the given position", "", false, 
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "line of expr", ""), 
			RuCommArg("col", false, "column of expr", "")
		]
	), 
	ruRunInfoDecl
);

ruRunInfoDecl(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	line = s2i(lookupTreeDef(task.args, "line", "-1"));
	col = s2i(lookupTreeDef(task.args, "col", "-1"));
	name = ruNameByLineCol(line, col, getFileContent(file));
	iter(ruCachedDecl(name), \d ->
		maybeApply(ruFromCache(d.info.id, env.conf), \cached -> 
			env.conf.onMessage(ruRange2s(cached.source.info.path, ruDeclRange(d.decl, cached.source), "declaration of " + name))
		)
	);
	Some(env);
}

ruCommInfoHover = RuComm(
	RuCommDescr(
		"info-hover", "info", "hover info", "", false, 
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "line of expr", ""), 
			RuCommArg("col", false, "column of expr", "")
		]
	), 
	ruRunInfoHover
);

ruRunInfoHover(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	line = s2i(lookupTreeDef(task.args, "line", "-1"));
	col = s2i(lookupTreeDef(task.args, "col", "-1"));
	name = ruNameByLineCol(line, col, getFileContent(file));
	env.conf.onMessage(ruCachedDecl2s(name, env.conf));
	Some(env);
}

ruCommInfoFind = RuComm(
	RuCommDescr(
		"info-find", "info", "find entity with a given name", "name", false, 
		[RuCommArg("name", false, "entity name", "")]
	),
	ruRunInfoFind
);

ruRunInfoFind(task : ScTask, env : RuState) -> Maybe<RuState> {
	name = lookupTreeDef(task.args, "name", "");
	decls = ruCachedDecl(name);
	if (length(decls) == 0) {
		env.conf.onMessage("Declaration '" + name + "' is not found");
	} else {
		iter(decls, \d ->
			maybeApply(ruFromCache(d.info.id, env.conf), \cached -> 
				env.conf.onMessage(ruRange2s(cached.source.info.path, ruDeclRange(d.decl, cached.source), "declaration of " + name))
			)
		);
	}
	Some(env);
}

ruCommInfoSymbol = RuComm(
	RuCommDescr(
		"info-symbol", "info", "find entity with a given name, output result in JSON format", "name", false, 
		[RuCommArg("name", false, "entity name", "")]
	),
	ruRunInfoSymbol
);

ruRunInfoSymbol(task : ScTask, env : RuState) -> Maybe<RuState> {
	name = lookupTreeDef(task.args, "name", "");
	decls = ruCachedDecl2LspSymbolInfos(name, env.conf);
	json = JsonArray(map(decls, lspSymbolInformation2Json));
	env.conf.onMessage(json2string(json));
	Some(env);
}

ruCommInfoSource = RuComm(
	RuCommDescr(
		"info-source", "info", "find source and output it's characteristics", "name", false, 
		[RuCommArg("name", false, "entity name", "")]
	),
	ruRunInfoSource
);

ruRunInfoSource(task : ScTask, env : RuState) -> Maybe<RuState> {
	name = lookupTreeDef(task.args, "name", "");
	switch (ruFromCache(s2id(name), env.conf)) {
		Some(cached): {
			src = cached.source;
			env.conf.onMessage("Source '" + name + "' decls (" + i2s(length(src.decls)) + "):\n" +
				strGlue(map(src.decls, \d -> "\t" + ruDeclKind(d) + " " + id2s(d.descr.id)), "\n")
			);
		}
		None(): {
			env.conf.onMessage("Source '" + name + "' is not found");
		}
	};
	Some(env);
}

ruCommInfoShow = RuComm(
	RuCommDescr(
		"info-show", "info", "find entity with a given name, and print it", "name", false, 
		[RuCommArg("name", false, "entity name", "")]
	),
	ruRunInfoShow
);

ruRunInfoShow(task : ScTask, env : RuState) -> Maybe<RuState> {
	conf = env.conf;
	math = ruMakeMathFromSources(env.ru, conf);
	name = lookupTreeDef(task.args, "name", "");
	switch (ruFindDecl(s2id(name), math, conf)) {
		Some(decl): {
			conf.onMessage(ru2s(decl, math));
		}
		None(): { 
			conf.onMessage("Declaration '" + name + "' is not found");
		}
	}
	Some(env);
}

ruCommInfoOutline = RuComm(
	RuCommDescr(
		"info-outline", "info", "prints a file outline", "file", false, 
		[RuCommArg("file", false, "input file", "")]
	),
	ruRunInfoOutline
);

ruRunInfoOutline(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	maybeApply(ruFromCache(s2id(file), env.conf), \cached -> {
		src = cached.source;
		code = ruFileSource(src.info.path);
		resolver = makeLineResolver(code);
		iter(src.imports, \imp -> 
			maybeApply(ruNameRangeByPos(imp.pos, code), \range -> 
				env.conf.onMessage(ruRangeWithResolver2s(src.info.path, range, "import " + id2s(imp.id), resolver))
			)
		);
		iter(src.decls, \decl ->
			maybeApply(ruNameRangeByPos(decl.descr.pos, code),
				\range ->
					env.conf.onMessage(ruRangeWithResolver2s(src.info.path, range, ruDeclKind(decl) + " " + id2s(decl.descr.id), resolver))
			)
		);
	});
	Some(env)
}

ruCommInfoUses = RuComm(
	RuCommDescr(
		"info-uses", "info", "prints all uses of a name", "name", false, 
		[RuCommArg("name", false, "entity name", "")]
	),
	ruRunInfoUses
);

ruRunInfoUses(task : ScTask, env : RuState) -> Maybe<RuState> {
	name = lookupTreeDef(task.args, "name", "");
	iter(ruCachedDecl(name), \decl ->
		maybeApply(ruFromCache(decl.info.id, env.conf), \cached ->
			iter(ruSourcesCache(), \s -> { 
				iter(s.decls, \d ->
					switch (d) {
						RuTheorem(__,__,__,proof):
							iter(proof.steps, \step ->
								if (id2s(step.assertion) == name) {
									code = ruFileSource(s.info.path);
									maybeApply(ruNameRangeByPos(step.pos, code),
										\range -> 
											env.conf.onMessage(ruRange2s(cached.source.info.path, range, "uses " + name))
									);
								}
							);
						default: { }
					}
				);
			})
		)
	);
	Some(env)
}

ruCommInfoMath = RuComm(
	RuCommDescr(
		"info-math", "info", "prints info about math entities of different kinds", "kind", false, 
		[RuCommArg("kind", true, "kind of math, one of: consts, types, axioms, rules, defs. No kind means all of them", "")]
	),
	ruRunInfoMath
);

ruRunInfoMath(task : ScTask, env : RuState) -> Maybe<RuState> {
	kind = lookupTreeDef(task.args, "kind", "");
	info = JsonArray(filtermap(
		filter(ruCachedDecls(), \cached ->
			switch (cached.decl) {
				RuConst(__,__,__):      kind == "const" || kind == "";
				RuType(__,__):          kind == "type"  || kind == "";
				RuRule(__,__,__):       kind == "rule"  || kind == "";
				RuAxiom(__,__):         kind == "axiom" || kind == "";
				RuDef(__,__,__,__):     kind == "def"   || kind == "";
				RuTheorem(__,__,__,__): kind == "theorem";
			}
		),
		\cached -> {
			path = cached.info.path;
			decl = cached.decl;
			name = id2s(decl.descr.id);
			code = ruFileSource(path);
			maybeMap(ruNameRangeByPos(decl.descr.pos, code),
				\range ->
					JsonObject([
						Pair("kind", JsonString(ruDeclKind(decl))),
						Pair("location", lspLocation2Json(ruRange2LspLocation(range, path))),
						Pair("name", JsonString(name)),
						Pair("tooltip", JsonString(ruCachedDecl2s(name, env.conf)))
					])
			)
		}
	));
	env.conf.onMessage(json2string(info));
	Some(env);
}

ruCommInfoAxiomatics = RuComm(
	RuCommDescr("info-axiomatics", "info", "prints axiomatics info: base axioms for theorems", "", false, []),
	ruRunInfoAxiomatics
);

ruRunInfoAxiomatics(task : ScTask, env : RuState) -> Maybe<RuState> {
	th_axioms = ruCachedTheoremAxioms();
	ax_sets = foldTree(th_axioms, makeTree(), \th, axs, acc -> 
		switch (findInOrder(acc, \as, ths -> if (equalSet(as, axs)) Some(Pair(as, ths)) else None())) {
			Some(pair): setTree(acc, pair.first, insertSet(pair.second, th));
			None(): setTree(acc, axs, makeSet1(th));
		}
	);
	traverseInOrder(ax_sets,
		\axs, names -> {
			if (sizeSet(axs) > 1) {
				out = "axioms: {" + strGlue(set2array(axs), ", ") + "}\n" + "theorems: {" + strGlue(set2array(names), ", ") + "}\n";
				ruDebugLog(out, env.conf);
				ruAddStats("theorem-axioms", RuStatsRow(out, pairs2tree([
					Pair("axioms", i2d(sizeSet(axs))),
					Pair("theorems", i2d(sizeSet(names))),
				])));
				env.conf.onMessage(out);
			}
		}
	);
	stats = "<< theorem axioms distribution >>\n" +
	"distrib: \n" +
	strIndent(ruProcStats("theorem-axioms", ruDistribLinSumStats("axioms", "theorems", 10))) + "\n" +
	"max axioms:   " + ruProcStats("theorem-axioms", ruMaxStats("axioms")) + "\n" +
	"avg axioms:   " + ruProcStats("theorem-axioms", ruAvgStats("axioms")) + "\n" +
	"sigma axioms: " + ruProcStats("theorem-axioms", ruSigmaStats("axioms")) + "\n"
	"\n" +
	"max theorems:   " + ruProcStats("theorem-axioms", ruMaxStats("theorems")) + "\n" +
	"avg theorems:   " + ruProcStats("theorem-axioms", ruAvgStats("theorems")) + "\n" +
	"sigma theorems: " + ruProcStats("theorem-axioms", ruSigmaStats("theorems")) + "\n";
	env.conf.onMessage(stats);
	ruDebugLog(stats, env.conf);
	Some(env);
}

ruCommInfoVolume = RuComm(
	RuCommDescr("info-volume", "info", "prints how much of a heap space each kind of AST nodes occupy", "", false, []), 
	ruRunInfoVolume
);

ruRunInfoVolume(task : ScTask, env : RuState) -> Maybe<RuState> {
	ru_math = ruMakeMathFromSources(env.ru, env.conf);
	ru_sources_vol    = ruJavaTreeVol(ru_math.sources, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_consts_vol     = ruJavaTreeVol(ru_math.consts, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_types_vol      = ruJavaTreeVol(ru_math.types, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_rules_vol      = ruJavaTreeVol(ru_math.rules, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_assertions_vol = ruJavaTreeVol(ru_math.assertions, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_proofs_vol     = ruJavaTreeVol(ruMathProofs(ru_math), \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_headers_vol    = ru_assertions_vol - ru_proofs_vol;

	mm_sources = env.mm;
	mm_sources_vol = ruJavaTreeVol(mm_sources, \_ -> ruJavaIntVol(), mmJavaMmVol);

	ids_vol           = ruJavaArrayVol(ruIds(), ruJavaStringVol);

	total_vol = ru_sources_vol + mm_sources_vol + ids_vol;
	print_precent  = \x, all -> " (" + d2st(x*100.0 / all, 2) + "%)";
	env.conf.onMessage(
		"Memory volume statistics:\n" +
		"-------------------------\n" +
		(if (ru_sources_vol <= 64.0) "  ru sources:    0 b\n" else {
		"  ru sources:    " + memory2s(ru_sources_vol)    + print_precent(ru_sources_vol, total_vol) + "\n" +
		"  ru constants:  " + memory2s(ru_consts_vol)     + print_precent(ru_consts_vol, total_vol) + "\n" +
		"  ru types:      " + memory2s(ru_types_vol)      + print_precent(ru_types_vol, total_vol) + "\n" +
		"  ru rules:      " + memory2s(ru_rules_vol)      + print_precent(ru_rules_vol, total_vol) + "\n" +
		"  ru assertions: " + memory2s(ru_assertions_vol) + print_precent(ru_assertions_vol, total_vol) + "\n" +
		"  ru proofs:     " + memory2s(ru_proofs_vol)     + print_precent(ru_proofs_vol, total_vol) + "\n" +
		"  ru headers:    " + memory2s(ru_headers_vol)    + print_precent(ru_headers_vol, total_vol) + "\n" +
		}) +
		"\n" +
		(if (mm_sources_vol <= 64.0) "  mu sources:    0 b\n" else {
		"  mm sources:    " + memory2s(mm_sources_vol)    + print_precent(mm_sources_vol, total_vol) + "\n" +
		}) +
		"\n" +
		"  ids:           " + memory2s(ids_vol) + print_precent(ids_vol, total_vol) + "\n"
	);
	Some(env);
}

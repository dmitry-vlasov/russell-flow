import command;

export {
	ruInfoCommands : [RuComm];
}

ruInfoCommands = [
	ruCommInfoOutline,
	ruCommInfoMath,
	ruCommInfoHover,
	ruCommInfoDecl,
	ruCommInfoUses,
	ruCommInfoFind,
	ruCommInfoSymbol,
	ruCommInfoSource,
	ruCommInfoAxiomatics,
];

ruCommInfoDecl = RuComm(
	"info-decl", "info", "declaration of entity at the given position", "",
	[
		RuCommArg("file", false, "input file", ""), 
		RuCommArg("line", false, "line of expr", ""), 
		RuCommArg("col", false, "column of expr", "")
	], 
	ruRunInfoDecl
);

ruRunInfoDecl(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	line = s2i(lookupTreeDef(task.args, "line", "-1"));
	col = s2i(lookupTreeDef(task.args, "col", "-1"));
	name = ruNameByLineCol(line, col, getFileContent(file));
	iter(ruCachedDecl(name), \d ->
		maybeApply(ruFromCache(d.info.module, env.conf), \cached -> 
			env.conf.onMessage(ruRange2s(cached.source.info.path, ruDeclRange(d.decl, cached.source), "declaration of " + name))
		)
	);
	Some(env);
}

ruCommInfoHover = RuComm(
	"info-hover", "info", "hover info", "",
	[
		RuCommArg("file", false, "input file", ""), 
		RuCommArg("line", false, "line of expr", ""), 
		RuCommArg("col", false, "column of expr", "")
	], 
	ruRunInfoHover
);

ruRunInfoHover(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	line = s2i(lookupTreeDef(task.args, "line", "-1"));
	col = s2i(lookupTreeDef(task.args, "col", "-1"));
	name = ruNameByLineCol(line, col, getFileContent(file));
	env.conf.onMessage(ruCachedDecl2s(name, env.conf));
	Some(env);
}

ruCommInfoFind = RuComm(
	"info-find", "info", "find entity with a given name", "name",
	[RuCommArg("name", false, "entity name", "")],
	ruRunInfoFind
);

ruRunInfoFind(task : ScTask, env : RuState) -> Maybe<RuState> {
	name = lookupTreeDef(task.args, "name", "");
	decls = ruCachedDecl(name);
	if (length(decls) == 0) {
		env.conf.onMessage("Declaration '" + name + "' is not found");
	} else {
		iter(decls, \d ->
			maybeApply(ruFromCache(d.info.module, env.conf), \cached -> 
				env.conf.onMessage(ruRange2s(cached.source.info.path, ruDeclRange(d.decl, cached.source), "declaration of " + name))
			)
		);
	}
	Some(env);
}

ruCommInfoSymbol = RuComm(
	"info-symbol", "info", "find entity with a given name, output result in JSON format", "name",
	[RuCommArg("name", false, "entity name", "")],
	ruRunInfoSymbol
);

ruRunInfoSymbol(task : ScTask, env : RuState) -> Maybe<RuState> {
	name = lookupTreeDef(task.args, "name", "");
	decls = ruCachedDecl2LspSymbolInfos(name, env.conf);
	json = JsonArray(map(decls, lspSymbolInformation2Json));
	env.conf.onMessage(json2string(json));
	Some(env);
}

ruCommInfoSource = RuComm(
	"info-source", "info", "find source and output it's characteristics", "name",
	[RuCommArg("name", false, "entity name", "")],
	ruRunInfoSource
);

ruRunInfoSource(task : ScTask, env : RuState) -> Maybe<RuState> {
	name = lookupTreeDef(task.args, "name", "");
	switch (ruFromCache(name, env.conf)) {
		Some(cached): {
			src = cached.source;
			env.conf.onMessage("Source '" + name + "' decls (" + i2s(length(src.decls)) + "):\n" +
				strGlue(map(src.decls, \d -> "\t" + ruDeclKind(d) + " " + ruDeclName(d)), "\n")
			);
		}
		None(): {
			env.conf.onMessage("Source '" + name + "' is not found");
		}
	};
	Some(env);
}

ruCommInfoOutline = RuComm(
	"info-outline", "info", "prints a file outline", "file",
	[RuCommArg("file", false, "input file", "")],
	ruRunInfoOutline
);

ruRunInfoOutline(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	maybeApply(ruFromCache(file, env.conf), \cached -> {
		src = cached.source;
		code = ruFileSource(src.info.path);
		resolver = makeLineResolver(code);
		iter(src.imports, \imp -> 
			maybeApply(ruNameRangeByPos(imp.pos, code), \range -> 
				env.conf.onMessage(ruRangeWithResolver2s(src.info.path, range, "import " + imp.module, resolver))
			)
		);
		iter(src.decls, \decl ->
			maybeApply(ruNameRangeByPos(ruDeclPos(decl), code),
				\range ->
					env.conf.onMessage(ruRangeWithResolver2s(src.info.path, range, ruDeclKind(decl) + " " + ruDeclName(decl), resolver))
			)
		);
	});
	Some(env)
}

ruCommInfoUses = RuComm(
	"info-uses", "info", "prints all uses of a name", "name",
	[RuCommArg("name", false, "entity name", "")],
	ruRunInfoUses
);

ruRunInfoUses(task : ScTask, env : RuState) -> Maybe<RuState> {
	name = lookupTreeDef(task.args, "name", "");
	iter(ruCachedDecl(name), \decl ->
		maybeApply(ruFromCache(decl.info.module, env.conf), \cached ->
			iter(ruSourcesCache(), \s -> { 
				iter(s.decls, \d ->
					switch (d) {
						RuTheorem(__,__,__,proof):
							iter(proof.steps, \step ->
								if (step.assertion == name) {
									code = ruFileSource(s.info.path);
									maybeApply(ruNameRangeByPos(step.pos, code),
										\range -> 
											env.conf.onMessage(ruRange2s(cached.source.info.path, range, "uses " + name))
									);
								}
							);
						default: { }
					}
				);
			})
		)
	);
	Some(env)
}

ruCommInfoMath = RuComm(
	"info-math", "info", "prints info about math entities of different kinds", "kind",
	[RuCommArg("kind", true, "kind of math, one of: consts, types, axioms, rules, defs. No kind means all of them", "")],
	ruRunInfoMath
);

ruRunInfoMath(task : ScTask, env : RuState) -> Maybe<RuState> {
	kind = lookupTreeDef(task.args, "kind", "");
	info = JsonArray(filtermap(
		filter(ruCachedDecls(), \cached ->
			switch (cached.decl) {
				RuConst(__,__,__):           kind == "const" || kind == "";
				RuType(__,__):               kind == "type"  || kind == "";
				RuRule(__,__,__):            kind == "rule"  || kind == "";
				RuAxiom(__,__):              kind == "axiom" || kind == "";
				RuDef(__,__,__,__,__,__,__): kind == "def"   || kind == "";
				RuTheorem(__,__,__,__):      kind == "theorem";
			}
		),
		\cached -> {
			path = cached.info.path;
			decl = cached.decl;
			name = ruDeclName(decl);
			code = ruFileSource(path);
			maybeMap(ruNameRangeByPos(ruDeclPos(decl), code),
				\range ->
					JsonObject([
						Pair("kind", JsonString(ruDeclKind(decl))),
						Pair("location", lspLocation2Json(ruRange2LspLocation(range, path))),
						Pair("name", JsonString(name)),
						Pair("tooltip", JsonString(ruCachedDecl2s(name, env.conf)))
					])
			)
		}
	));
	env.conf.onMessage(json2string(info));
	Some(env);
}

ruCommInfoAxiomatics = RuComm(
	"info-axiomatics", "info", "prints axiomatics info: base axioms for theorems", "",
	[],
	ruRunInfoAxiomatics
);

ruRunInfoAxiomatics(task : ScTask, env : RuState) -> Maybe<RuState> {
	th_axioms = ruCachedTheoremAxioms();
	ax_sets = foldTree(th_axioms, makeTree(), \th, axs, acc -> 
		switch (findInOrder(acc, \as, ths -> if (equalSet(as, axs)) Some(Pair(as, ths)) else None())) {
			Some(pair): setTree(acc, pair.first, insertSet(pair.second, th));
			None(): setTree(acc, axs, makeSet1(th));
		}
	);
	traverseInOrder(ax_sets,
		\axs, names -> {
			if (sizeSet(axs) > 1) {
				out = "axioms: {" + strGlue(set2array(axs), ", ") + "}\n" + "theorems: {" + strGlue(set2array(names), ", ") + "}\n";
				ruDebugLog(out, env.conf);
				ruAddStats("theorem-axioms", RuStatsRow(out, pairs2tree([
					Pair("axioms", i2d(sizeSet(axs))),
					Pair("theorems", i2d(sizeSet(names))),
				])));
				env.conf.onMessage(out);
			}
		}
	);
	stats = "<< theorem axioms distribution >>\n" +
	"distrib: \n" +
	ruIndent(ruProcStats("theorem-axioms", ruDistribLinSumStats("axioms", "theorems", 10))) + "\n" +
	"max axioms:   " + ruProcStats("theorem-axioms", ruMaxStats("axioms")) + "\n" +
	"avg axioms:   " + ruProcStats("theorem-axioms", ruAvgStats("axioms")) + "\n" +
	"sigma axioms: " + ruProcStats("theorem-axioms", ruSigmaStats("axioms")) + "\n"
	"\n" +
	"max theorems:   " + ruProcStats("theorem-axioms", ruMaxStats("theorems")) + "\n" +
	"avg theorems:   " + ruProcStats("theorem-axioms", ruAvgStats("theorems")) + "\n" +
	"sigma theorems: " + ruProcStats("theorem-axioms", ruSigmaStats("theorems")) + "\n";
	env.conf.onMessage(stats);
	ruDebugLog(stats, env.conf);
	Some(env);
}

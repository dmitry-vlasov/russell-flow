import text/blueprint;
import comm;
import base/util/lsp;
import lsp/util;
import ru/util/vol;
import ru/util/cursor;
import ru/util/ontology;
import ru/cache/cache;

export {
	ruInfoCommands : [RuComm];
}

ruInfoCommands = [
	ruCommInfoOutline,
	ruCommInfoMath,
	ruCommInfoHover,
	ruCommInfoDecl,
	ruCommInfoUses,
	ruCommInfoFind,
	ruCommInfoSymbol,
	ruCommInfoSource,
	ruCommInfoShow,
	ruCommInfoAxiomatics,
	ruCommInfoOntology,
	ruCommInfoVolume,
	ruCommInfoVars,
	ruCommInfoLatex,
];

ruCommInfoDecl = RuComm(
	RuCommInfo(
		"info-decl", "info", "declaration of entity at the given position", "", false, false, 
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "line of expr", ""), 
			RuCommArg("col",  false, "column of expr", "")
		], []
	), 
	ruRunInfoDecl
);

ruRunInfoDecl(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	lsp = ruTaskBoolArg(task, "lsp", false);
	maybeApply(ruTask2LineCol(task), \lc -> {
		cursor = ruUnderACursor(lc, env);
		id = ruCursorMostSpecificId(cursor, env);
		if (id != -1) {
			switch (ruDeclCacheGet(id)) {
				Some(decl): {
					maybeApply(ruCacheGet(decl.info.src, false, env), \src -> {
						range = ruCodeCacheDeclRange(decl, src, env);
						code = ruCodeCacheGet(decl.info.src, env).code;
						if (lsp) {
							loc = ruRangeCode2LspLocation(range, src.info.path, code);
							env.out.respond(JsonArray([lspLocation2Json(loc)]));
						} else {
							env.out.println(
								ruRange2s(
									range, 
									"declaration of " + cursor.strs.name, 
									src.info.path, 
									code
								)
							)
						}
					});
				}
				None(): {
					code = ruCodeCacheGet(id, env);
					range = RuRange(0, ruFirstNLinesPos(code.code, 32));
					if (lsp) {
						loc = ruRangeCode2LspLocation(range, code.path, code.code);
						env.out.respond(JsonArray([lspLocation2Json(loc)]));
					} else {
						env.out.println(
							ruRange2s(range, cursor.strs.line, code.path, code.code)
						);
					}
				}
			}
		}
	});
	Some(state);
}

ruCommInfoHover = RuComm(
	RuCommInfo(
		"info-hover", "info", "hover info", "", false, false, 
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "line of expr", ""), 
			RuCommArg("col", false, "column of expr", "")
		], []
	), 
	ruRunInfoHover
);

ruRunInfoHover(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	lsp = ruTaskBoolArg(task, "lsp", false);
	maybeApply(ruTask2LineCol(task), \lc -> {
		cursor = ruUnderACursor(lc, env);
		hover = ruCursorHover(cursor, env);
		if (hover.message != "") {
			if (lsp) {
				lsp_hover = LspHover([ruHover2LspMarkupContent(hover)], None());
				env.out.respond(lspHover2Json(lsp_hover));
			} else {
				env.out.println(hover.message);
			}
		}
	});
	Some(state);
}

ruCommInfoFind = RuComm(
	RuCommInfo(
		"info-find", "info", "find entity with a given name", "name", false, false, 
		[RuCommArg("name", false, "entity name", "")], []
	),
	ruRunInfoFind
);

ruRunInfoFind(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	name = ruTaskStringArg(task, "name", "");

	decl_info = \decl -> maybeApply(ruCacheGet(decl.info.src, false, env), \cached ->
		env.out.println(
			ruRange2s(
				ruCodeCacheDeclRange(decl, cached, env), 
				"declaration of " + name, 
				cached.info.path, 
				ruCodeCacheGet(cached.info.id, env).code
			)
		)
	);
	id = s2id_(name);
	switch (ruDeclCacheGet(id)) {
		Some(decl): {
			decl_info(decl);
		}
		None(): {
			code = ruCodeCacheGet(id, env);
			if (code.path != "") {
				range = RuRange(0, ruFirstNLinesPos(code.code, 32));
				/*if (lsp) {
					loc = ruRangeCode2LspLocation(range, code.path, code.code);
					env.out.respond(JsonArray([lspLocation2Json(loc)]));
				} else {*/
					env.out.println(
						code.path + ":\n\n" + 
						ruTakeFirstNLines(code.code, 32)
					);
				//}
			} else {
				lang = ruLangCacheGet();
				normalize = \s -> strReplaces(s, [" ", "", "\t", ""]);
				nm = normalize(name);
				mconst = findInOrder(lang.consts, \__, const -> 
					if (normalize(const.latex) == nm || id2s(const.ascii) == nm) Some(const) else None()
				);
				switch (mconst) {
					Some(const): {
						decl_info(const);
					}
					None(): {
						env.out.println("Declaration '" + name + "' is not found");
					}
				}
			}
		}
	}
	Some(state);
}

ruCommInfoSymbol = RuComm(
	RuCommInfo(
		"info-symbol", "info", "find entity with a given name, output result in JSON format", "name", false, false, 
		[RuCommArg("name", false, "entity name", "")], []
	),
	ruRunInfoSymbol
);

ruRunInfoSymbol(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	name = ruTaskStringArg(task, "name", "");
	lsp = ruTaskBoolArg(task, "lsp", false);
	id = s2id_(name);
	if (lsp) {
		switch (ruCachedDecl2LspSymbolInfo(id, env)) {
			Some(info): {
				json = JsonArray([lspSymbolInformation2Json(info)]);
				env.out.respond(json);
			}
			None(): {
				code = ruCodeCacheGet(id, env);
				if (code.path != "") {
					range = RuRange(0, ruFirstNLinesPos(code.code, 32));
					loc = ruRangeCode2LspLocation(range, code.path, code.code);
					env.out.respond(JsonArray([lspLocation2Json(loc)]));
				} else {
					// ??
				}
			}
		}
		maybeApply(ruCachedDecl2LspSymbolInfo(id, env), \info -> {
			json = JsonArray([lspSymbolInformation2Json(info)]);
			env.out.respond(json);
		});
	} else {
		info = ruCachedDecl2s(s2id_(name), env);
		if (info != "") {
			env.out.println(info);
		} else {
			code = ruCodeCacheGet(id, env);
			if (code.path != "") {
				range = RuRange(0, ruFirstNLinesPos(code.code, 32));
				env.out.println(
					code.path + ":\n\n" + 
					ruTakeFirstNLines(code.code, 32)
				);
			} else {
				// ??
			}
		}
	}
	Some(state);
}

ruCommInfoSource = RuComm(
	RuCommInfo(
		"info-source", "info", "find source and output it's characteristics", "name", false, false, 
		[RuCommArg("name", false, "entity name", "")], []
	),
	ruRunInfoSource
);

ruRunInfoSource(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	name = ruTaskStringArg(task, "name", "");
	switch (ruCacheGet(s2id_(name), false, env)) {
		Some(src): {
			env.out.println("Source '" + name + "' decls (" + i2s(length(src.decls)) + "):\n" +
				strGlue(map(src.decls, \d -> "\t" + ruDeclKind(d) + " " + id2s(d.info.id)), "\n")
			);
		}
		None(): {
			env.out.println("Source '" + name + "' is not found");
		}
	};
	Some(state);
}

ruCommInfoShow = RuComm(
	RuCommInfo(
		"info-show", "info", "find entity with a given name, and print it", "name", false, false, 
		[RuCommArg("name", false, "entity name", "")], []
	),
	ruRunInfoShow
);

ruRunInfoShow(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	name = ruTaskStringArg(task, "name", "");
	id = s2id_(name);
	switch (ruFindDecl(id, math.decls, env)) {
		Some(decl): {
			env.out.println(ru2s(decl, math));
		}
		None(): {
			code = ruCodeCacheGet(id, env);
			if (code.path != "") {
				range = RuRange(0, ruFirstNLinesPos(code.code, 32));
				env.out.println(
					code.path + ":\n\n" + 
					ruTakeFirstNLines(code.code, 32)
				);
			} else {
				env.out.println("Declaration '" + name + "' is not found");
			}
		}
	}
	Some(state);
}

ruCommInfoOutline = RuComm(
	RuCommInfo(
		"info-outline", "info", "prints a file outline", "file", false, false, 
		[RuCommArg("file", false, "input file", "")], []
	),
	ruRunInfoOutline
);

ruRunInfoOutline(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	file = ruTaskStringArg(task, "file", "");
	lsp = ruTaskBoolArg(task, "lsp", false);
	module = ruTrimPath(file, conf, ".ru");
	maybeApply(ruCacheGet(s2id_(module), false, env), \src -> {
		code = ruCodeCacheGet(src.info.id, env).code;
		resolver = makeLineResolver(code);
		if (lsp) {
			imports = filtermap(src.imports, \imp -> 
				maybeMap(ruNameRangeByPos(imp.pos, code), \range -> {
						name = id2s(imp.id);
						loc = ruRangeResolver2LspLocation(range, src.info.path, resolver);
						kind = ruString2LspSymbolKind("import");
						lspSymbol2Json(LspSymbol(name, "", kind, false, loc.range, loc.range, []));
					}
				)
			);
			decls = filtermap(src.decls, \decl -> 
				maybeMap(ruNameRangeByPos(decl.info.pos, code), \range -> {
						name = id2s(decl.info.id);
						loc = ruRangeResolver2LspLocation(range, src.info.path, resolver);
						kind = ruString2LspSymbolKind(ruDeclKind(decl));
						lspSymbol2Json(LspSymbol(name, "", kind, false, loc.range, loc.range, []));
					}
				)
			);
			json = JsonArray(concat(imports, decls));
			env.out.respond(json);
		} else {
			iter(src.imports, \imp -> 
				maybeApply(ruNameRangeByPos(imp.pos, code), \range -> 
					env.out.println(
						ruRangeWithResolver2s(src.info.path, range, "import " + id2s(imp.id), resolver)
					)
				)
			);
			iter(src.decls, \decl ->
				maybeApply(ruNameRangeByPos(decl.info.pos, code),
					\range ->
						env.out.println(
							ruRangeWithResolver2s(src.info.path, range, ruDeclKind(decl) + " " + 
							id2s(decl.info.id), resolver)
						)
				)
			);
		}
	});
	Some(state)
}

ruCommInfoUses = RuComm(
	RuCommInfo(
		"info-uses", "info", "prints all uses of a name", "name", false, false, 
		[
			RuCommArg("name", true, "entity name", ""),
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "line of expr", ""), 
			RuCommArg("col", false, "column of expr", "")
		], []
	),
	ruRunInfoUses
);

ruRunInfoUses(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	maybeApply(ruTask2LineCol(task), \lc -> {
		cursor = ruUnderACursor(lc, env);
		name = ruTaskStringArg(task, "name", cursor.strs.name);
		if (name != "") {
			lsp = ruTaskBoolArg(task, "lsp", false);
			id = s2id_(name);
			maybeApply(ruDeclCacheGet(id), \decl ->
				maybeApply(ruCacheGet(decl.info.src, false, env), \src -> {
					locations = fold(ruSourceCacheAll(true, env), makeList(), \acc, s ->
						fold(s.decls, acc, \ac, d ->
							switch (d) {
								RuTheorem(__,__,__,proof):
									fold(proof.steps, ac, \a, step ->
										if (step.assertion != id) a else {
											code = ruCodeCacheGet(s.info.id, env).code;
											resolver = makeLineResolver(code);
											eitherMap(ruNameRangeByPos(step.pos, code),
												\range -> Cons(Pair(RuLocation(s.info.id, s.info.path, range), resolver), a), a
											);
										}
									);
								default: ac;
							}
						)
					);
					if (lsp) {
						env.out.respond(JsonArray(
								map(list2array(locations), 
									\location -> lspLocation2Json(ruLocation2LspLocation(location.first, "", Some(location.second)))
								)
						));
					} else {
						env.out.println(superglue(
								list2array(locations), 
								\location -> ruLocationWithResolver2s(location.first, "uses " + name, location.second), 
								"\n"
						));
					}
				})
			);
		}
	});
	Some(state);
}

ruCommInfoMath = RuComm(
	RuCommInfo(
		"info-math", "info", "prints info about math entities of different kinds", "kind", false, false, 
		[RuCommArg("kind", true, "kind of math, one of: consts, types, axioms, rules, defs. No kind means all of them", "")], []
	),
	ruRunInfoMath
);

// Source with helper info: code and line resolver.
RuInfoSource(
	src : RuSource,
	code : string,
	path : string,
	resolver : LineResolver
);

ruRunInfoMath(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	kind = ruTaskStringArg(task, "kind", "");
	lsp = ruTaskBoolArg(task, "lsp", false);
	timer = ruMakeTimer();
	decls = filter(ruDeclCacheAll(), \decl ->
		switch (decl) {
			RuConst(__,__,__):      kind == "const" || kind == "";
			RuType(__,__):          kind == "type"  || kind == "";
			RuRule(__,__,__):       kind == "rule"  || kind == "";
			RuAxiom(__,__):         kind == "axiom" || kind == "";
			RuDef(__,__,__,__):     kind == "def"   || kind == "";
			RuTheorem(__,__,__,__): kind == "theorem";
		}
	);
	srcs = set2array(fold(decls, makeSet(), \acc, decl -> insertSet(acc, decl.info.src)));
	infos = fold(
		filtermap(
			ruConcurrent(
				map(srcs, \s -> \env1 ->
					maybeBind(ruSourceCacheGet(s, false, env1), \src -> {
							code = ruCodeCacheGet(s, env1);
							if (!ruCodeIsDefined(code)) None() else {
								Some(RuInfoSource(
									src, code.code, code.path, 
									makeLineResolver(code.code),
								));
							}
						}
					)
				), env
			), 
			idfn 
		),
		makeTree(), \acc, info -> setTree(acc, info.src.info.id, info)
	);
	if (lsp) {
		info = JsonArray(filtermap(decls,
			\decl -> {
				maybeBind(lookupTree(infos, decl.info.src), \info -> {
					maybeMap(ruNameRangeByPos(decl.info.pos, info.code),
						\range -> {
							JsonObject([
								Pair("kind", JsonString(ruDeclKind(decl))),
								Pair("location", lspLocation2Json(ruRangeResolver2LspLocation(range, info.path, info.resolver))),
								Pair("name", JsonString(id2s(decl.info.id))),
								Pair("tooltip", JsonString(ruDeclCode(decl, info.src, info.code, env)))
							])
						}
					)
				});
			}
		));
		env.out.respond(info);
	} else {
		info = concatStrings(filtermap(decls,
			\decl -> {
				maybeBind(lookupTree(infos, decl.info.src), \info -> {
					maybeMap(ruNameRangeByPos(decl.info.pos, info.code),
						\range -> {
							lspLocation2s(ruRangeResolver2LspLocation(range, info.path, info.resolver)) + 
							": " + ruDeclKind(decl) + " " + id2s(decl.info.id) + "\n"
						}
					)
				});
			}
		));
		env.out.println(info);
	}
	Some(state);
}

ruCommInfoOntology = RuComm(
	RuCommInfo(
		"info-ontology", "info", "shows the ontology of definitions", "", false, false, 
		[], []
	),
	ruRunInfoOntology
);

ruRunInfoOntology(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	math = ruMathFromSources(state.ru, env);
	lsp = ruTaskBoolArg(task, "lsp", false);
	timer = ruMakeTimer();
	ontology = ruMakeOntology(env);
	if (lsp) {
		json = ruOntology2json(ontology, env);
		env.out.respond(json);
	} else {
		env.out.println("TODO: ruRunInfoOntology in non-lsp mode");
	}
	Some(state);
}

ruCommInfoAxiomatics = RuComm(
	RuCommInfo("info-axiomatics", "info", "prints axiomatics info: base axioms for theorems", "", false, false, [], []),
	ruRunInfoAxiomatics
);

ruRunInfoAxiomatics(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	th_axioms = foldTree(ruDeclCacheTheoremAxioms(), makeTree(), \k, set, acc ->
		setTree(acc, id2s(k), mapSet(set, id2s))
	);
	ax_sets = foldTree(th_axioms, makeTree(), \th, axs, acc -> 
		switch (findInOrder(acc, \as, ths -> if (equalSet(as, axs)) Some(Pair(as, ths)) else None())) {
			Some(pair): setTree(acc, pair.first, insertSet(pair.second, th));
			None(): setTree(acc, axs, makeSet1(th));
		}
	);
	traverseInOrder(ax_sets,
		\axs, names -> {
			if (sizeSet(axs) > 1) {
				out = "axioms: {" + strGlue(set2array(axs), ", ") + "}\n" + "theorems: {" + strGlue(set2array(names), ", ") + "}\n";
				//ruDebugLog(out, conf);
				ruAddStats("theorem-axioms", RuStatsRow(out, pairs2tree([
					Pair("axioms", i2d(sizeSet(axs))),
					Pair("theorems", i2d(sizeSet(names))),
				])));
				env.out.println(out);
			}
		}
	);
	stats = "<< theorem axioms distribution >>\n" +
	"distrib: \n" +
	strIndent(ruShowStats("theorem-axioms", ruDistribLinSumStats("axioms", "theorems", 10))) + "\n" +
	"max axioms:   " + ruShowStats("theorem-axioms", ruMaxStats("axioms")) + "\n" +
	"avg axioms:   " + ruShowStats("theorem-axioms", ruAvgStats("axioms")) + "\n" +
	"sigma axioms: " + ruShowStats("theorem-axioms", ruSigmaStats("axioms")) + "\n"
	"\n" +
	"max theorems:   " + ruShowStats("theorem-axioms", ruMaxStats("theorems")) + "\n" +
	"avg theorems:   " + ruShowStats("theorem-axioms", ruAvgStats("theorems")) + "\n" +
	"sigma theorems: " + ruShowStats("theorem-axioms", ruSigmaStats("theorems")) + "\n";
	env.out.println(stats);
	//ruDebugLog(stats, conf);
	Some(state);
}

ruCommInfoVolume = RuComm(
	RuCommInfo("info-volume", "info", "prints how much of a heap space each kind of AST nodes occupy", "", false, false, [], []), 
	ruRunInfoVolume
);

ruRunInfoVolume(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	ru_math = ruMathFromSources(state.ru, env);
	ru_sources_vol    = ruJavaTreeVol(ru_math.sources, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_consts_vol     = ruJavaTreeVol(ru_math.decls.lang.consts, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_types_vol      = ruJavaTreeVol(ru_math.decls.lang.types, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_rules_vol      = ruJavaTreeVol(ru_math.decls.lang.rules, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_assertions_vol = ruJavaTreeVol(ru_math.decls.assertions, \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_proofs_vol     = ruJavaTreeVol(ruDeclsProofs(ru_math.decls), \_ -> ruJavaIntVol(), ruJavaRuVol);
	ru_headers_vol    = ru_assertions_vol - ru_proofs_vol;

	mm_sources = state.mm;
	mm_sources_vol = ruJavaTreeVol(mm_sources, \_ -> ruJavaIntVol(), mmJavaMmVol);

	ids_vol           = ruJavaArrayVol(ruIds(), ruJavaStringVol);

	total_vol = ru_sources_vol + mm_sources_vol + ids_vol;
	print_precent  = \x, all -> " (" + d2st(x*100.0 / all, 2) + "%)";
	env.out.println(
		"Memory volume statistics:\n" +
		"-------------------------\n" +
		(if (ru_sources_vol <= 64.0) "  ru sources:    0 b\n" else {
		"  ru sources:    " + memory2s(ru_sources_vol)    + print_precent(ru_sources_vol, total_vol) + "\n" +
		"  ru constants:  " + memory2s(ru_consts_vol)     + print_precent(ru_consts_vol, total_vol) + "\n" +
		"  ru types:      " + memory2s(ru_types_vol)      + print_precent(ru_types_vol, total_vol) + "\n" +
		"  ru rules:      " + memory2s(ru_rules_vol)      + print_precent(ru_rules_vol, total_vol) + "\n" +
		"  ru assertions: " + memory2s(ru_assertions_vol) + print_precent(ru_assertions_vol, total_vol) + "\n" +
		"  ru proofs:     " + memory2s(ru_proofs_vol)     + print_precent(ru_proofs_vol, total_vol) + "\n" +
		"  ru headers:    " + memory2s(ru_headers_vol)    + print_precent(ru_headers_vol, total_vol) + "\n"
		}) +
		"\n" +
		(if (mm_sources_vol <= 64.0) "  mu sources:    0 b\n" else {
		"  mm sources:    " + memory2s(mm_sources_vol)    + print_precent(mm_sources_vol, total_vol) + "\n"
		}) +
		"\n" +
		"  ids:           " + memory2s(ids_vol) + print_precent(ids_vol, total_vol) + "\n"
	);
	Some(state);
}

ruCommInfoVars = RuComm(
	RuCommInfo("info-vars", "info", "prints all variable declarations", "", false, false, [], []), 
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		math = ruMathFromSources(state.ru, env);
		unit.out.println(concatStrings(
			map(
				sortCustom(set2array(ruDeclsDeclaredVars(math.decls)), \v -> id2s(v.id), true),
				\v -> "\t" + id2s(v.id) + " : " + id2s(v.type) + "\n"
			)
		));
		Some(state);
	}
);

ruDeclsDeclaredVars(decls : RuDecls) -> Set<RuVar> {
	foldTree(decls.assertions, 
		foldTree(decls.lang.rules, makeSet(), 
			\__, rule, acc -> foldTree(rule.vars, acc, \__, v, ac -> insertSet(ac, v))
		), 
		\__, ass, acc -> ruAssertionDeclaredVars(ass, acc)
	);
}

ruAssertionDeclaredVars(ass : RuAssertion, acc : Set<RuVar>) -> Set<RuVar> {
	ass_vars = foldTree(ass.stat.vars.vars, acc, \__, v, ac -> insertSet(ac, v));
	switch (ass) {
		RuTheorem(__,__,__,proof): ruProofDeclaredVars(proof, ass_vars);
		default: ass_vars;
	}
}

ruProofDeclaredVars(proof : RuProof, acc : Set<RuVar>) -> Set<RuVar> {
	proof_vars = foldTree(proof.vars.vars, acc, \__, v, ac -> insertSet(ac, v));
	fold(proof.steps, proof_vars, \ac, step -> ruProofDeclaredVars(step.proof, ac));
}

ruCommInfoLatex = RuComm(
	RuCommInfo("info-latex", "info", "find a proper symbol for latex definition", "", false, false, 
		[RuCommArg("def", false, "latex definition of a symbol", "")], []
	), 
	\unit -> {
		env = ruUnitEnv(unit);
		state = unit.state;
		task = unit.task;
		lsp = ruTaskBoolArg(task, "lsp", false);
		lang = ruLangCacheGet();
		normalize = \s -> strReplaces(s, [" ", "", "\t", ""]);
		latex = normalize(ruTaskStringArg(task, "def", ""));
		traverseInOrder(lang.consts, \id, const ->
			if (normalize(const.latex) == latex) {
				symbol = id2s(id);
				imp = id2s(const.info.src);
				if (lsp) {
					env.out.println(
						"import " + imp + ";;\n\n" +
						symbol
					);
					env.out.respond(JsonObject([
						Pair("import", JsonString(imp)),
						Pair("symbol", JsonString(symbol))
					]));
				} else {
					env.out.println(
						"import " + imp + ";;\n\n" +
						symbol
					);
				}
			}
		);
		Some(state);
	}
);

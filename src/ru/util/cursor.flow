import ru/cache/cache;
import ru/parse/exps/sources;

export {
	// Description of what is under a cursor at some position in source code
	RuCursor(
		act  : string, // actual string
		type : int,    // type of what is under a cursor
		rule : int,    // grammar rule of construction under a cursor 
		def  : int,    // definition of what is under a cursor
		expr : RuTermExp, // expression or term, in which scope the cursor lies
		path : [RuPositioned] // path to the cursor from the toplevel
	);

	RuHover(
		lang : string, // 'russell' or 'latex'
		message : string
	);

	ruCursorHover(cursor : RuCursor, env : RuEnv) -> RuHover;
	ruCursorMostSpecificId(cursor : RuCursor, env : RuEnv) -> int;
	ruUnderACursor(lc : RuLineCol, env : RuEnv) -> RuCursor;
	ruFindPositioned(lc : RuLineCol, env : RuEnv) -> Maybe<[RuPositioned]>;
	ruHover2LspMarkupContent(hover : RuHover) -> LspMarkupContent;
}

ruCursorHover(cursor : RuCursor, env : RuEnv) -> RuHover {
	if (cursor.act == "|-" || cursor.act == "#") {
		expr = cursor.expr;
		RuHover("markdown", 
			if (expr == ruNoExp) "" else {
				switch (expr) {
					RuExp(__,__,__): {
						//"$$\n\\displaystyle\n" + 
						//ruExp2latex(expr, ruLangCacheGet(), env) + 
						//"\n$$"

						//"$$\n" + ruExp2latex(expr, ruLangCacheGet(), env) + "\n$";

						"$ " + ruExp2latex(expr, ruLangCacheGet(), env) + " $";
					}
					RuTerm(__,__,__): {
						//"$$\n\\displaystyle\n" +  
						//ruTerm2latex(expr, ruLangCacheGet(), env) + 
						//"\n$$";

						//"$$\n" +  ruTerm2latex(expr, ruLangCacheGet(), env) + "\n$";
						"$ " +  ruTerm2latex(expr, ruLangCacheGet(), env) + " $";
					}
				}
			}
		)
	} else if (cursor.def != -1) {
		RuHover("russell", ruCachedDecl2s(cursor.def, env));
	} else if (cursor.rule != -1) {
		RuHover("russell", ruCachedDecl2s(cursor.rule, env));
	} else if (cursor.type != -1) {
		RuHover("russell", cursor.act + " : " + id2s(cursor.type));
	} else {
		RuHover("russell", ruCachedDecl2s(s2id_(cursor.act), env));
	}
}

ruHover2LspMarkupContent(hover : RuHover) -> LspMarkupContent {
	LspMarkupContent(
		"markdown",
		"```" + hover.lang + "\n" +
		hover.message + "\n" +
		"```"
	);
}

ruCursorMostSpecificId(cursor : RuCursor, env : RuEnv) -> int {
	if (cursor.def != -1) {
		cursor.def;
	} else if (cursor.rule != -1) {
		cursor.rule;
	} else {
		s2id_(cursor.act);
	}
}

ruFindPositioned(lc : RuLineCol, env : RuEnv) -> Maybe<[RuPositioned]> {
	module = ruFileId(lc.path, env.conf);
	code = ruCodeCacheGet(module, env).code;
	maybeBind(ruCacheGet(module, true, env), \src -> {
			resolver = makeLineResolver(code);
			pos = findLineIndex(resolver, lc.line, lc.col);
			posTree = ruPositionsTree(src);
			treeIntervalSearch(posTree, pos);
		}
	);
}

ruUnderACursor(lc : RuLineCol, env : RuEnv) -> RuCursor {
	module = ruFileId(lc.path, env.conf);
	cached = ruCodeCacheGet(module, env);
	resolver = makeLineResolver(cached.code);
	pos0 = findLineIndex(resolver, lc.line, lc.col);
	act = ruNameByPos(pos0, cached.code);
	pos = if (!(act == "|-" || act == "#")) pos0 else {
		// In this case find the first position of a real expression, which follows act:
		// hyp 1 : wff = |- ( X = ( BaseSet â€˜ U ) ) ;;
		//               ^  ^
		//             act  pos
		for(pos0 + 2, 
			\p -> isSpace(getCharAt(cached.code, p)),
			\p -> p + 1
		);
	}
	source = switch (ruCacheGet(module, true, env)) {
		Some(src): src;
		None(): {
			ruParseSource2RuSource(
				ruParseSourceAnyway(ruRawSourceFromCode(cached, env), env), env
			);
		}
	}
	ruUnderACursorInSource(source, act, cached.code, pos, env);
}

ruUnderACursorInSource(src : RuSource, act : string, code : string, pos : int, env : RuEnv) -> RuCursor {
	posTree = ruPositionsTree(src);
	switch (treeIntervalSearch(posTree, pos)) {
		Some(path): {
			if (length(path) == 0) {
				RuCursor(act, -1, -1, -1, ruNoExp, []);
			} else {
				x = lastElement(path, ruNoAxiom);
				positions = getTreeKeys(posTree);
				curr = ruPos(x);
				ind = elemIndex(positions, curr, -1) + 1;
				next = if (ind == length(positions)) strlen(code) else positions[ind];
				expr = substring(code, curr, next - curr);
				exp_ind = ruIndexOfPosInsideExp(expr, pos - curr);
				switch (x) {
					RuExp(nodes, mterm, __): {
						if (length(nodes) > 0) {
							ruUnderACursorInExp(x, path, act, exp_ind, env);
						} else {
							switch (mterm) {
								Some(term): ruUnderACursorInTerm(term, path, act, exp_ind, env);
								None(): {
									RuCursor(act, -1, -1, -1, x, path);
								}
							}
						}
					}
					RuTerm(type, term_nodes, __): {
						ruUnderACursorInTerm(x, path, act, exp_ind, env);
					}
					default: RuCursor(act, -1, -1, -1, ruNoExp, path);
				}
			}
		}
		None(): RuCursor(act, -1, -1, -1, ruNoExp, []);
	}
}

ruUnderACursorInTerm(term : RuTerm, path : [RuPositioned], act : string, exp_ind : int, env : RuEnv) -> RuCursor {
	if (exp_ind >= length(term.nodes)) {
		RuCursor(act, -1, -1, -1, term, path);
	} else {
		switch (term.nodes[exp_ind]) {
			RuVar(v, t): {
				RuCursor(act, t, -1, -1, term, path);
			}
			RuConstRef(symb_id): {
				switch (ruDefCacheSymb2Def(symb_id, env)) {
					Some(cached): {
						RuCursor(act, term.type, cached.rule, cached.def.info.id, term, path);
					}
					None(): {
						RuCursor(act, -1, -1, -1, term, path);
					}
				}
			}
		}
	}
}

ruUnderACursorInExp(exp : RuExp, path : [RuPositioned], act : string, exp_ind : int, env : RuEnv) -> RuCursor {
	exp_nodes = ruExp2Nodes(exp, ruLangCacheGet().rules);
	if (exp_ind >= length(exp_nodes)) {
		RuCursor(act, -1, -1, -1, exp, path);
	} else {
		switch (exp_nodes[exp_ind]) {
			RuVar(v, t): {
				RuCursor(act, t, -1, -1, exp, path);
			}
			RuRuleNode(rule_id, type,__,__): {
				switch (ruDefCacheRule2Def(rule_id, env)) {
					Some(cached): {
						RuCursor(act, type, rule_id, cached.def.info.id, exp, path);
					}
					None(): {
						RuCursor(act, type, rule_id, -1, exp, path);
					}
				}
			}
		}
	}
}

ruIndexOfPosInsideExp(expr : string, pos : int) -> int {
	ruDoIndexOfPosInsideExp(expr, pos, false, 0, 0);
}

ruDoIndexOfPosInsideExp(expr : string, pos : int, ws : bool, curr : int, acc : int) -> int {
	if (curr == pos) acc else {
		ch = getCharAt(expr, curr);
		ws1 = (ch == " " || ch == "\n" || ch == "\t" || ch == "\r");
		ruDoIndexOfPosInsideExp(
			expr, pos, ws1, curr + 1, 
			acc + (if (!ws && ws1) 1 else 0)
		);
	}
}

import ru/util/exp2s;

export {
	ru2s(a : RuAny, math : RuMath) -> string;
	ru2sWrapExp(a : RuAny, math : RuMath, wrap_exp : (string) -> string) -> string;
	ruDeclShort2s(d : RuDecl, math : RuMath) -> string;

	ruVars2s(vars : Tree<int, RuVar>) -> string;
	ruDisj2s(d : RuDisj) -> string;
	ruDisjs2s(disjs : Set<RuDisj>) -> string;
	ruMeta2s(meta : Set<int>) -> string;

	ruRemoveProof(th : RuTheorem) -> RuTheorem;
	ruDisjs2Array(disjs : Set<RuDisj>) -> [Set<RuVar>];

	Ru2SEnv(
		indent : string,
		wrapExp : (string) -> string,
		forceDisjs : bool,
		rules : Tree<int, RuRule>,
	);

	ruMakeRu2SEnv(math : RuMath) -> Ru2SEnv;
	ruSteps2s(steps : [RuStep], env : Ru2SEnv) -> string;
	ruAny2s(a : RuAny, env : Ru2SEnv) -> string;
}

ruIndentRu2SEnv(env : Ru2SEnv) -> Ru2SEnv {
	Ru2SEnv(env with indent = env.indent + "\t");
}

ruMakeRu2SEnv(math : RuMath) -> Ru2SEnv {
	Ru2SEnv("", idfn, false, math.decls.rules)
}

ru2s(a : RuAny, math : RuMath) -> string {
	ruAny2s(a, Ru2SEnv("", idfn, false, math.decls.rules));
}

ru2sWrapExp(a : RuAny, math : RuMath, wrap_exp : (string) -> string) -> string {
	ruAny2s(a, Ru2SEnv("", wrap_exp, false, math.decls.rules));
}

ruOrderVars(vars : Tree<int, RuVar>) -> [RuVar] {
	sortCustom(getTreeValues(vars), \v -> id2s(v.id), true);
}

ruOrderDisjs(disjs0 : [Set<RuVar>]) -> [[RuVar]] {
	disjs = map(disjs0, \vs -> sortCustom(set2array(vs), \v -> id2s(v.id), true));
	sortCustom(disjs, \disj -> length(disj), true);
}

ruVars2s(vars : Tree<int, RuVar>) -> string {
	if (sizeTree(vars) == 0) "" else 
	"(" + strGlue(map(ruOrderVars(vars), \v -> id2s(v.id) + " : " + id2s(v.type)), ", ") + ") ";
}

ruDisj2s(d : RuDisj) -> string {
	id2s(d.v1.id) + " " + id2s(d.v2.id);
}

ruDisjs2s(disjs : Set<RuDisj>) -> string {
	if (sizeSet(disjs) == 0) "" else 
	"disjointed(" + 
		strGlue(map(
			ruOrderDisjs(ruDisjs2Array(disjs)), 
			\vs -> strGlue(map(vs, \v -> id2s(v.id)), " ")
		), ", ") + 
	") ";
}

ruMeta2s(meta : Set<int>) -> string {
	if (sizeSet(meta) == 0) "" else 
	"meta(" + strGlue(map(set2array(meta), id2s), ", ") + ") ";
}

ruExpDelim2s(expr : RuExp, delim : string, env : Ru2SEnv) -> string {
	ex = env.wrapExp(ruExp2s(expr, env.rules));
	multiline = strContains(ex, "\n");
	": " + id2s(ruExpType(expr)) + " = " + delim + " " +
	(if (!multiline) ex else ltrim2(ruIndentWith(ex, env.indent), "\t")) + " ;;";
}

ruProp2s(prop : RuExp, env : Ru2SEnv) -> string {
	env.indent + "prop " + ruExpDelim2s(prop, "|-", env) + "\n";
}

ruRef2s(rf : RuRef) -> string {
	switch (rf) {
		RuHypRef(i, __): "hyp " + i2s(i + 1);
		RuStepRef(i, __): "step " + i2s(i + 1);
	}
}

ruRefs2s(refs : [RuRef]) -> string {
	"(" + strGlue(map(refs, ruRef2s), ", ") + ")";
}

ruHyp2s(hyp : RuHyp, env : Ru2SEnv) -> string {
	env.indent + "hyp " + i2s(hyp.ind + 1) + " " + ruExpDelim2s(hyp.expr, "|-", env) + "\n";
}

ruHyps2s(hyps : [RuHyp], env : Ru2SEnv) -> string {
	if (hyps == []) "" else concatStrings(map(hyps, \hyp -> ruHyp2s(hyp, env)));
}

ruComment2s(comm : RuComment, env : Ru2SEnv) -> string {
	str = if (length(comm.annotation.members) == 0) "/*" + comm.text + "*/\n" else
	"/**" +json2string(comm.annotation) + (if (comm.text == "") "" else "\n-----\n" + comm.text) + "*/\n";
	ruIndentWith(str, env.indent)
}

ruComments2s(comms : [RuComment], env : Ru2SEnv) -> string {
	if (comms == []) "" else strGlue(map(comms, \comm -> ruComment2s(comm, env)), "\n") + "\n";
}

ruImport2s(imp : RuImport, env : Ru2SEnv) -> string {
	env.indent + "import " + id2s(imp.id) + ";;\n";
}

ruImports2s(imps : [RuImport], env : Ru2SEnv) -> string {
	concatStrings(map(imps, \imp -> ruImport2s(imp, env)));
}

ruConst2s(const : RuConst, env : Ru2SEnv) -> string {
	ruComments2s(const.descr.comments, env) + 
	env.indent + "constant {\n" + 
		env.indent + "\tsymbol " + id2s(const.descr.id) + " ;;\n" +
		env.indent + (if (const.ascii != -1) "\tascii " + id2s(const.ascii) + " ;;\n" else "") + 
		env.indent + (if (const.latex != -1) "\tlatex " + id2s(const.latex) + " ;;\n" else "") +
	env.indent + "}\n";
}

ruType2s(type : RuType, env : Ru2SEnv) -> string {
	ruComments2s(type.descr.comments, env) + 
	env.indent + "type " + id2s(type.descr.id) + 
	(if (type.supers == []) "" else " : " + strGlue(map(type.supers, id2s), ", ")) + 
	" ;;\n";
}

ruRule2s(rule : RuRule, env : Ru2SEnv) -> string {
	ruComments2s(rule.descr.comments, env) + 
	env.indent + "rule " + id2s(rule.descr.id) + " " + ruVars2s(rule.vars) + "{\n" +
		env.indent + "\tterm : " + id2s(rule.term.type) + " = # " + ruTerm2s(rule.term) + " ;;\n" +
	env.indent + "}\n";
}

ruAxiom2s(ax : RuAxiom, env : Ru2SEnv) -> string {
	ind_env = ruIndentRu2SEnv(env);
	ruComments2s(ax.descr.comments, env) + 
	env.indent + "axiom " + id2s(ax.descr.id) + " " + ruVars2s(ax.stat.vars) + ruDisjs2s(ax.stat.disjs) + "{\n" +
		ruHyps2s(ax.stat.hyps, ind_env) +
		(if (ax.stat.hyps == []) "" else env.indent + "\t----------\n") +
		ruProp2s(ax.stat.prop, ind_env) +
	env.indent + "}\n";
}

ruDef2s(def : RuDef, env : Ru2SEnv) -> string {
	ind_env = ruIndentRu2SEnv(env);
	ruComments2s(def.descr.comments, env) + 
	env.indent + "definition " + id2s(def.descr.id) + " " + ruVars2s(def.stat.vars) + ruDisjs2s(def.stat.disjs) + "{\n" +
		ruHyps2s(def.stat.hyps, ind_env) +
		env.indent + "\tdefiendum " + ruExpDelim2s(def.defm, "#", ind_env) + "\n" +
		env.indent + "\tdefiniens " + ruExpDelim2s(def.defs, "#", ind_env) + "\n" +
		env.indent + "\t-------------\n" +
		ruProp2s(ruMakeDefProp(def.stat.prop.nodes, def.defm.nodes, def.defs.nodes), ind_env) +
	env.indent + "}\n";
}

ruTheorem2s(th : RuTheorem, env : Ru2SEnv) -> string {
	ind_env = ruIndentRu2SEnv(env);
	ruComments2s(th.descr.comments, env) + 
	env.indent + "theorem " + id2s(th.descr.id) + " " + 
	ruVars2s(th.stat.vars) + 
	(if (env.forceDisjs) ruDisjs2s(th.stat.disjs) else "") + 
	ruMeta2s(th.meta) + "{\n" +
		ruHyps2s(th.stat.hyps, ind_env) + 
		(if (th.stat.hyps == []) "" else env.indent + "\t----------\n") +
		ruProp2s(th.stat.prop, ind_env) +
	env.indent + "} " + ruProof2s(th.proof, env);
}

ruProof2s(proof : RuProof, env : Ru2SEnv) -> string {
	"proof " + 
	ruVars2s(proof.vars) + 
	(if (env.forceDisjs) ruDisjs2s(proof.disjs) else "") + 
	"{\n" + 
		ruSteps2s(proof.steps, ruIndentRu2SEnv(env)) +
	env.indent + "}\n";
}

ruStep2s(step : RuStep, env : Ru2SEnv) -> string {
	ex = env.wrapExp(ruExp2s(step.expr, env.rules));
	multiline = strContains(ex, "\n"); 
	env.indent + "step " + i2s(step.ind + 1) + " : " + id2s(ruExpType(step.expr)) + " = " + 
		(if (step.assertion == ruStepLemma) "lemma" else if (step.assertion == ruStepProblem) "?" else id2s(step.assertion)) + " " + 
		ruRefs2s(step.refs) + " |- " + 
		(if (!multiline) ex else ltrim2(ruIndentWith(ex, env.indent), "\t")) + " ;; " + 
		(if (step.assertion == ruStepLemma) ruProof2s(step.proof, env) else "\n");
}

ruSteps2s(steps : [RuStep], env : Ru2SEnv) -> string {
	concatStrings(map(steps, \step -> ruStep2s(step, env)));
}

ruSource2s(src : RuSource, env : Ru2SEnv) -> string {
	(if (src.imports == []) "" else ruImports2s(src.imports, env) + "\n") +
	(if (src.comments == []) "" else ruComments2s(src.comments, env) + "\n") + 
	concatStrings(map(src.decls, \d -> ruAny2s(d, env) + "\n")) + "\n";
}

ruAny2s(a : RuAny, env : Ru2SEnv) -> string {
	switch (a) {
		RuSource(__,__,__,__):  ruSource2s(a, env);
		RuImport(__,__):        ruImport2s(a, env);
		RuConst(__,__,__):      ruConst2s(a, env);
		RuType(__,__):          ruType2s(a, env);
		RuRule(__,__,__):       ruRule2s(a, env);
		RuAxiom(__,__):         ruAxiom2s(a, env);
		RuDef(__,__,__,__):     ruDef2s(a, env);
		RuTheorem(__,__,__,__): ruTheorem2s(a, env);
		RuHyp(__,__,__):        ruHyp2s(a, env);
		RuProof(__,__,__,__):   ruProof2s(a, env);
		RuStep(__,__,__,__,__,__): ruStep2s(a, env);
		RuComment(__,__,__): ruComment2s(a, env);
		RuDisj(__,__):       ruDisj2s(a);
		RuExp(__,__):        env.wrapExp(ruExp2s(a, env.rules));
		RuHypRef(__,__):     ruRef2s(a);
		RuStepRef(__, __):   ruRef2s(a);
		RuVar(id,__):        id2s(id);
		RuTerm(__,__,__):    ruTerm2s(a);
		RuConstRef(id):      id2s(id);
		RuRuleNode(r,__,__,__): id2s(r);
	}
}

ruRemoveProof(th : RuTheorem) -> RuTheorem {
	RuTheorem(th with proof = RuProof(th.proof with steps = []));
}

ruDeclShort2s(d : RuDecl, math : RuMath) -> string {
	switch (d) {
		RuTheorem(__,__,__,proof): {
			str = ru2s(ruRemoveProof(d), math);
			takeBefore(str, "proof", str);
		}
		default: ru2s(d, math);
	}
}

ruDisjs2Array(disjs : Set<RuDisj>) -> [Set<RuVar>] {
	make_disj = \v, w -> if (v.id < w.id) RuDisj(v, w) else RuDisj(w, v);
	may_be_added = \v, s ->
		forall(set2array(s), \w -> 
			if (v == w) true else {
				containsSet(disjs, make_disj(v, w))
			}
		);
	foldSet(disjs, [], \acc, disj ->
		if (exists(acc, \s -> containsSet(s, disj.v1) && containsSet(s, disj.v2))) acc else {
			switch (findi(acc, \s -> containsSet(s, disj.v1) && may_be_added(disj.v2, s))) {
				Some(i): replace(acc, i, insertSet(acc[i], disj.v2));
				None(): 
					switch (findi(acc, \s -> containsSet(s, disj.v2) && may_be_added(disj.v1, s))) {
						Some(i): replace(acc, i, insertSet(acc[i], disj.v1));
						None(): concat(acc, [insertSet(makeSet1(disj.v1), disj.v2)]);
					}
			}
		}
	);
}

ruIndOfArr(arr1 : [?], arr2 : [?]) -> int {
	foldi(arr1, -1, \i, ac, x -> 
		if (ac >= 0) ac else {
			if (i <= length(arr1) - length(arr2)) {
				ind = fold(arr2, i, \j, y ->
					if (j == -1) -1 else
					if (y == arr1[j]) j + 1 else -1
				);
				if (ind != -1) i else -1;
			} else {
				-1
			}
		}
	)
}

ruMakeDefProp(prop : [RuExpNode], dfm : [RuExpNode], dfs: [RuExpNode]) -> RuExp {
	dfs_i = ruIndOfArr(prop, dfs);
	dfm_i = ruIndOfArr(prop, dfm);
	dfs_len = length(dfs);
	dfm_len = length(dfm);
	if (dfs_i == -1 || dfm_i == -1) {
		ruNoExp
	} else {
		RuExp(foldi(prop, [], \i, ac, s ->
			if (i == dfm_i) concat(ac, [RuVar(s2id("defiendum"), -1)]) else
			if (dfm_i < i && i < dfm_i + dfm_len) ac else
			if (i == dfs_i) concat(ac, [RuVar(s2id("definiens"), -1)]) else
			if (dfs_i < i && i < dfs_i + dfs_len) ac else
			concat(ac, [s])
		), -1)
	}
}

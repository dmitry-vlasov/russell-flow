import ru/util/exp2s;
import ru/util/src_base;
import ru/math;

export {
	ru2s(a : RuAny, math : RuMath) -> string;
	ru2sWrapExp(a : RuAny, math : RuMath, wrap_exp : (string) -> string) -> string;
	ruDeclShort2s(d : RuDecl, math : RuMath) -> string;

	ruVars2s(vars : Tree<int, RuVar>) -> string;
	ruDisj2s(d : RuDisj) -> string;
	ruDisjs2s(disjs : Set<RuDisj>) -> string;
	ruMeta2s(meta : Set<int>) -> string;

	ruRemoveProof(th : RuTheorem) -> RuTheorem;

	Ru2SEnv(
		indent : string,
		wrapExp : (string) -> string,
		forceDisjs : bool,
		rules : Tree<int, RuRule>,
	);

	ruMakeRu2SEnv(math : RuMath) -> Ru2SEnv;
	ruSteps2s(steps : [RuStep], env : Ru2SEnv) -> string;
	ruAny2s(a : RuAny, env : Ru2SEnv) -> string;
}

ruIndentRu2SEnv(env : Ru2SEnv) -> Ru2SEnv {
	Ru2SEnv(env with indent = env.indent + "\t");
}

ruMakeRu2SEnv(math : RuMath) -> Ru2SEnv {
	Ru2SEnv("", idfn, true, math.decls.lang.rules)
}

ru2s(a : RuAny, math : RuMath) -> string {
	ruAny2s(a, Ru2SEnv("", idfn, true, math.decls.lang.rules));
}

ru2sWrapExp(a : RuAny, math : RuMath, wrap_exp : (string) -> string) -> string {
	ruAny2s(a, Ru2SEnv("", wrap_exp, true, math.decls.lang.rules));
}

ruVars2s(vars : Tree<int, RuVar>) -> string {
	if (sizeTree(vars) == 0) "" else 
	"(" + strGlue(map(ruOrderVars(vars), \v -> id2s(v.id) + " : " + id2s(v.type)), ", ") + ") ";
}

ruDisj2s(d : RuDisj) -> string {
	id2s(d.v1.id) + " " + id2s(d.v2.id);
}

ruDisjs2s(disjs : Set<RuDisj>) -> string {
	if (sizeSet(disjs) == 0) "" else 
	"disjointed(" + 
		strGlue(map(
			ruDisjs2Array(disjs), 
			\vs -> strGlue(map(vs, \v -> id2s(v.id)), " ")
		), ", ") + 
	") ";
}

ruVarsDisjs2s(vd : RuVarsDisjs, do_disjs : bool) -> string {
	ruVars2s(vd.vars) + (if (do_disjs) ruDisjs2s(vd.disjs) else "");
}

ruMeta2s(meta : Set<int>) -> string {
	if (sizeSet(meta) == 0) "" else 
	"meta(" + strGlue(map(set2array(meta), id2s), ", ") + ") ";
}

ruExpDelim2s(expr : RuExp, delim : string, env : Ru2SEnv) -> string {
	ex = env.wrapExp(ruExp2s(expr, env.rules));
	multiline = strContains(ex, "\n");
	": " + id2s(ruExpType(expr)) + " = " + delim + " " +
	(if (!multiline) ex else ltrim2(ruIndentWith(ex, env.indent), "\t")) + " ;;";
}

ruProp2s(prop : RuExp, env : Ru2SEnv) -> string {
	env.indent + "prop " + ruExpDelim2s(prop, "|-", env) + "\n";
}

ruRef2s(rf : RuRef) -> string {
	switch (rf) {
		RuHypRef(i): "hyp " + i2s(i + 1);
		RuStepRef(i): "step " + i2s(i + 1);
	}
}

ruRefs2s(refs : [RuRef]) -> string {
	"(" + strGlue(map(refs, ruRef2s), ", ") + ")";
}

ruHyp2s(hyp : RuHyp, env : Ru2SEnv) -> string {
	env.indent + "hyp " + i2s(hyp.ind + 1) + " " + ruExpDelim2s(hyp.expr, "|-", env) + "\n";
}

ruHyps2s(hyps : [RuHyp], env : Ru2SEnv) -> string {
	if (hyps == []) "" else concatStrings(map(hyps, \hyp -> ruHyp2s(hyp, env)));
}

ruComment2s(comm : RuComment, env : Ru2SEnv) -> string {
	str = if (length(comm.annotation.members) == 0) "/*" + comm.text + "*/\n" else
	"/**" +json2string(comm.annotation) + (if (comm.text == "") "" else "\n-----\n" + comm.text) + "*/\n";
	ruIndentWith(str, env.indent)
}

ruComments2s(comms : [RuComment], env : Ru2SEnv) -> string {
	if (comms == []) "" else strGlue(map(comms, \comm -> ruComment2s(comm, env)), "\n") + "\n";
}

ruImport2s(imp : RuImport, env : Ru2SEnv) -> string {
	env.indent + "import " + id2s(imp.id) + ";;\n";
}

ruImports2s(imps : [RuImport], env : Ru2SEnv) -> string {
	if (imps == []) "" else concatStrings(map(imps, \imp -> ruImport2s(imp, env))) + "\n";
}

ruConst2s(const : RuConst, env : Ru2SEnv) -> string {
	ruComments2s(const.info.comments, env) + 
	env.indent + "constant {\n" + 
		env.indent + "\tsymbol " + id2s(const.info.id) + " ;;\n" +
		env.indent + (if (const.ascii != -1) "\tascii " + id2s(const.ascii) + " ;;\n" else "") + 
		env.indent + (if (const.latex != "") "\tlatex " + const.latex + " ;;\n" else "") +
	env.indent + "}\n";
}

ruType2s(type : RuType, env : Ru2SEnv) -> string {
	ruComments2s(type.info.comments, env) + 
	env.indent + "type " + id2s(type.info.id) + 
	(if (type.supers == []) "" else " : " + strGlue(map(type.supers, id2s), ", ")) + 
	" ;;\n";
}

ruRule2s(rule : RuRule, env : Ru2SEnv) -> string {
	ruComments2s(rule.info.comments, env) + 
	env.indent + "rule " + id2s(rule.info.id) + " " + ruVars2s(rule.vars) + "{\n" +
		env.indent + "\tterm : " + id2s(rule.term.type) + " = # " + ruTerm2s(rule.term) + " ;;\n" +
	env.indent + "}\n";
}

ruAxiom2s(ax : RuAxiom, env : Ru2SEnv) -> string {
	ind_env = ruIndentRu2SEnv(env);
	ruComments2s(ax.info.comments, env) + 
	env.indent + "axiom " + id2s(ax.info.id) + " " + ruVarsDisjs2s(ax.stat.vars, true) + "{\n" +
		ruHyps2s(ax.stat.hyps, ind_env) +
		(if (ax.stat.hyps == []) "" else env.indent + "\t----------\n") +
		ruProp2s(ax.stat.prop, ind_env) +
	env.indent + "}\n";
}

ruDef2s(def : RuDef, env : Ru2SEnv) -> string {
	ind_env = ruIndentRu2SEnv(env);
	ruComments2s(def.info.comments, env) + 
	env.indent + "definition " + id2s(def.info.id) + " " + ruVarsDisjs2s(def.stat.vars, true) + "{\n" +
		ruHyps2s(def.stat.hyps, ind_env) +
		env.indent + "\tdefiendum " + ruExpDelim2s(def.defm, "#", ind_env) + "\n" +
		env.indent + "\tdefiniens " + ruExpDelim2s(def.defs, "#", ind_env) + "\n" +
		env.indent + "\t-------------\n" +
		ruProp2s(ruMakeDefProp(def.stat.prop.nodes, def.defm.nodes, def.defs.nodes), ind_env) +
	env.indent + "}\n";
}

ruTheorem2s(th : RuTheorem, env : Ru2SEnv) -> string {
	ind_env = ruIndentRu2SEnv(env);
	ruComments2s(th.info.comments, env) + 
	env.indent + "theorem " + id2s(th.info.id) + " " + ruVarsDisjs2s(th.stat.vars, env.forceDisjs) + ruMeta2s(th.meta) + "{\n" +
		ruHyps2s(th.stat.hyps, ind_env) + 
		(if (th.stat.hyps == []) "" else env.indent + "\t----------\n") +
		ruProp2s(th.stat.prop, ind_env) +
	env.indent + "} " + ruProof2s(th.proof, env);
}

ruProof2s(proof : RuProof, env : Ru2SEnv) -> string {
	"proof " + ruVarsDisjs2s(proof.vars, env.forceDisjs) + "{\n" + 
		ruSteps2s(proof.steps, ruIndentRu2SEnv(env)) +
	env.indent + "}\n";
}

ruStep2s(step : RuStep, env : Ru2SEnv) -> string {
	ex = env.wrapExp(ruExp2s(step.expr, env.rules));
	multiline = strContains(ex, "\n"); 
	env.indent + "step " + i2s(step.ind + 1) + " : " + id2s(ruExpType(step.expr)) + " = " + 
		(if (step.assertion == ruStepLemma) "lemma" else if (step.assertion == ruStepProblem) "?" else id2s(step.assertion)) + " " + 
		ruRefs2s(step.refs) + " |- " + 
		(if (!multiline) ex else ltrim2(ruIndentWith(ex, env.indent), "\t")) + " ;; " + 
		(if (step.assertion == ruStepLemma) ruProof2s(step.proof, env) else "\n");
}

ruSteps2s(steps : [RuStep], env : Ru2SEnv) -> string {
	concatStrings(map(steps, \step -> ruStep2s(step, env)));
}

ruDecls2s(decls : [RuDecl], env : Ru2SEnv) -> string {
	if (decls == []) "" else concatStrings(map(decls, \decl -> ruAny2s(decl, env))) + "\n";
}

ruSource2s(src : RuSource, env : Ru2SEnv) -> string {
	ruImports2s(src.imports, env) +
	ruComments2s(src.comments, env) + 
	ruDecls2s(src.decls, env);
}

ruAny2s(a : RuAny, env : Ru2SEnv) -> string {
	switch (a) {
		RuSource(__,__,__,__):  ruSource2s(a, env);
		RuImport(__,__):        ruImport2s(a, env);
		RuConst(__,__,__):      ruConst2s(a, env);
		RuType(__,__):          ruType2s(a, env);
		RuRule(__,__,__):       ruRule2s(a, env);
		RuAxiom(__,__):         ruAxiom2s(a, env);
		RuDef(__,__,__,__):     ruDef2s(a, env);
		RuTheorem(__,__,__,__): ruTheorem2s(a, env);
		RuHyp(__,__,__):        ruHyp2s(a, env);
		RuProof(__,__,__):      ruProof2s(a, env);
		RuStep(__,__,__,__,__,__): ruStep2s(a, env);
		RuVarsDisjs(__,__):        ruVarsDisjs2s(a, env.forceDisjs);
		RuComment(__,__,__): ruComment2s(a, env);
		RuDisj(__,__):       ruDisj2s(a);
		RuExp(__,__):        env.wrapExp(ruExp2s(a, env.rules));
		RuHypRef(__):        ruRef2s(a);
		RuStepRef(__):       ruRef2s(a);
		RuVar(id,__):        id2s(id);
		RuTerm(__,__,__):    ruTerm2s(a);
		RuConstRef(id):      id2s(id);
		RuRuleNode(r,__,__,__): id2s(r);
	}
}

ruRemoveProof(th : RuTheorem) -> RuTheorem {
	RuTheorem(th with proof = RuProof(th.proof with steps = []));
}

ruDeclShort2s(d : RuDecl, math : RuMath) -> string {
	switch (d) {
		RuTheorem(__,__,__,proof): {
			str = ru2s(ruRemoveProof(d), math);
			takeBefore(str, "proof", str);
		}
		default: ru2s(d, math);
	}
}

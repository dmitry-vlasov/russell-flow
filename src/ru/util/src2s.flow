import ru/math;

export {
	ruExpType(exp : RuExp) -> int;
	ru2s(a : RuAny, math : RuMath) -> string;
	ru2sWrapExp(a : RuAny, math : RuMath, wrap_exp : (string) -> string) -> string;
	ruExp2s(e : RuExp, rules : Tree<int, RuRule>) -> string;
	ruDeclShort2s(d : RuDecl, math : RuMath) -> string;

	ruExp2Term(e : RuExp, rules : Tree<int, RuRule>) -> RuTerm;
	ruExp2Nodes(e : RuExp, rules : Tree<int, RuRule>) -> [RuExpNode];
	ruTerm2s(term : RuTerm) -> string;
	ruExpRPN2s(exp : RuExp) -> string;
	ruRemoveProof(th : RuTheorem) -> RuTheorem;
	ruDisjs2Array(disjs : Set<RuDisj>) -> [Set<RuVar>];
	ruSteps2s(steps : [RuStep], math : RuMath) -> string;
}

ruExpType(exp : RuExp) -> int {
	exp.nodes[0].type
}

ru2s(a : RuAny, math : RuMath) -> string {
	ru2sWrapExp(a, math, idfn);
}

ruOrderVars(vars : Tree<int, RuVar>) -> [RuVar] {
	sortCustom(getTreeValues(vars), \v -> id2s(v.id), true);
}

ruOrderDisjs(disjs0 : [Set<RuVar>]) -> [[RuVar]] {
	disjs = map(disjs0, \vs -> sortCustom(set2array(vs), \v -> id2s(v.id), true));
	sortCustom(disjs, \disj -> length(disj), true);
}

ruVars2s(vars : Tree<int, RuVar>) -> string {
	if (sizeTree(vars) == 0) "" else 
	"(" + strGlue(map(ruOrderVars(vars), \v -> id2s(v.id) + " : " + id2s(v.type)), ", ") + ") ";
}

ruDisjs2s(disjs : Set<RuDisj>) -> string {
	if (sizeSet(disjs) == 0) "" else 
	"disjointed(" + 
		strGlue(map(
			ruOrderDisjs(ruDisjs2Array(disjs)), 
			\vs -> strGlue(map(vs, \v -> id2s(v.id)), " ")
		), ", ") + 
	") ";
}

ruMeta2s(meta : Set<int>) -> string {
	if (sizeSet(meta) == 0) "" else 
	"meta(" + strGlue(map(set2array(meta), id2s), ", ") + ") ";
}

Ru2SEnv(
	indent : int,
	wrapExp : (string) -> string,
	forceDisjs : bool,
	rules : Tree<int, RuRule>,
);

ruExpDelim2s(expr : RuExp, delim : string, env : Ru2SEnv) -> string {
	ex = env.wrapExp(ruExp2s(expr, env.rules));
	multiline = strContains(ex, "\n");
	": " + id2s(ruExpType(expr)) + " = " + delim + " " +
	(if (!multiline) ex else ltrim2(strIndent(ex), "\t")) + " ;;";
}

ru2sWrapExp(a : RuAny, math : RuMath, wrap_exp : (string) -> string) -> string {
	rules = math.decls.rules;
	aru2s   = \x -> ru2sWrapExp(x, math, wrap_exp);
	exp2s   = \expr, delim -> {
		ex = wrap_exp(ruExp2s(expr, rules));
		multiline = strContains(ex, "\n");
		": " + id2s(ruExpType(expr)) + " = " + delim + " " +
		(if (!multiline) ex else ltrim2(strIndent(ex), "\t")) + " ;;";
	}
	prop2s  = \prop -> "\tprop " + exp2s(prop, "|-") + "\n";
	refs2s  = \refs -> "(" + strGlue(map(refs, aru2s), ", ") + ")";
	hyps2s  = \hyps -> if (hyps == []) "" else strGlue(map(hyps, aru2s), "\n") + "\n";
	comm2s  = \comms -> if (comms == []) "" else strGlue(map(comms, aru2s), "\n") + "\n";
	switch (a) {
		RuSource(imps, decls, comms, info): 
			(if (imps == []) "" else strGlue(map(imps, aru2s), "\n") + "\n\n") +
			(if (comms == []) "" else strGlue(map(comms, aru2s), "\n") + "\n") + 
			concatStrings(map(decls, \d -> aru2s(d) + "\n")) + "\n";
		RuImport(id,__):
			"import " + id2s(id) + ";;";
		RuConst(descr, ascii, latex): 
			comm2s(descr.comments) + 
			"constant {\n" + 
				"\tsymbol " + id2s(descr.id) + " ;;\n" +
				(if (ascii != -1) "\tascii " + id2s(ascii) + " ;;\n" else "") + 
				(if (latex != -1) "\tlatex " + id2s(latex) + " ;;\n" else "") +
			"}\n";
		RuType(descr, supers): 
			comm2s(descr.comments) + 
			"type " + id2s(descr.id) + (if (supers == []) "" else " : " + strGlue(map(supers, id2s), ", ")) + " ;;\n";
		RuRule(descr, vars, term):
			comm2s(descr.comments) + 
			"rule " + id2s(descr.id) + " " + ruVars2s(vars) + "{\n" +
				"\tterm " + aru2s(term) + "\n" +
			"}\n";
		RuAxiom(descr, stat): 
			comm2s(descr.comments) + 
			"axiom " + id2s(descr.id) + " " + ruVars2s(stat.vars) + ruDisjs2s(stat.disjs) + "{\n" +
				hyps2s(stat.hyps) +
				(if (stat.hyps == []) "" else "\t----------\n") +
				prop2s(stat.prop) +
			"}\n";
		RuDef(descr, stat, defm, defs): 
			comm2s(descr.comments) + 
			"definition " + id2s(descr.id) + " " + ruVars2s(stat.vars) + ruDisjs2s(stat.disjs) + "{\n" +
				hyps2s(stat.hyps) +
				"\tdefiendum " + exp2s(defm, "#") + "\n" +
				"\tdefiniens " + exp2s(defs, "#") + "\n" +
				"\t-------------\n" +
				prop2s(ruMakeDefProp(stat.prop.nodes, defm.nodes, defs.nodes)) +
			"}\n";
		RuTheorem(descr, stat, meta, proof): 
			comm2s(descr.comments) + 
			"theorem " + id2s(descr.id) + " " + 
			ruVars2s(stat.vars) + 
			//ruDisjs2s(stat.disjs) + 
			ruMeta2s(meta) + "{\n" +
				hyps2s(stat.hyps) + 
				(if (stat.hyps == []) "" else "\t----------\n") +
				prop2s(stat.prop) +
			"} " + aru2s(proof);
		RuHyp(ind, expr, __): 
			"\thyp " + i2s(ind + 1) + " " + exp2s(expr, "|-");
		RuProof(vars, disjs, steps, __): 
			"proof " + 
			ruVars2s(vars) + 
			//ruDisjs2s(disjs) + 
			"{\n" +
				strGlue(map(steps, aru2s), "\n") + "\n" +
			"}\n";
		RuStep(ind, assertion, refs, expr, proof, __): {
			ex = wrap_exp(ruExp2s(expr, rules));
			multiline = strContains(ex, "\n"); 
			"\tstep " + i2s(ind + 1) + " : " + id2s(ruExpType(expr)) + " = " + 
				(if (assertion == -1) "claim" else if (assertion == -2) "?" else id2s(assertion)) + " " + 
				refs2s(refs) + " |- " + 
				(if (!multiline) ex else ltrim2(strIndent(ex), "\t")) + " ;; " + 
				(if (assertion == -1) aru2s(proof) else "");
		}
		RuComment(text, ann, __): 
			if (length(ann.members) == 0) "/*" + text + "*/\n" else
			"/**" +json2string(ann) + (if (text == "") "" else "\n-----\n" + text) + "*/\n";
		RuDisj(v1, v2): id2s(v1.id) + " " + id2s(v2.id);
		RuExp(nodes, __): wrap_exp(ruExp2s(a, rules));
		RuHypRef(i, __): "hyp " + i2s(i + 1);
		RuStepRef(i, __): "step " + i2s(i + 1);
		RuVar(id, type_id): id2s(id);
		RuTerm(type_id, expr, __): 
			": " + id2s(type_id) + " = # " + strGlue(map(expr, aru2s), " ") + " ;;";
		RuConstRef(id): id2s(id);
		RuRuleNode(rule, type_id, arity, len): id2s(rule);
	}
}

ruExp2s(e : RuExp, rules : Tree<int, RuRule>) -> string {
	ruTerm2s(ruExp2Term(e, rules));
}

ruTerm2s(term : RuTerm) -> string {
	strGlue(map(term.nodes, \n -> id2s(n.id)), " ")
}

ruExpRPN2s(exp : RuExp) -> string {
	strGlue(map(exp.nodes, \n -> {
		switch (n) {
			RuRuleNode(rule, __,__, l): id2s(rule) + "-" + i2s(l);
			RuVar(id, __): id2s(id);
		}
	}), " ")
}

ruRemoveProof(th : RuTheorem) -> RuTheorem {
	RuTheorem(th with proof = RuProof(th.proof with steps = []));
}

ruDeclShort2s(d : RuDecl, math : RuMath) -> string {
	switch (d) {
		RuTheorem(__,__,__,proof): {
			str = ru2s(ruRemoveProof(d), math);
			takeBefore(str, "proof", str);
		}
		default: ru2s(d, math);
	}
}

// This function is strict: crashes in case of errors
ruExp2Term(e : RuExp, rules : Tree<int, RuRule>) -> RuTerm {
	switch (foldr(e.nodes, None(), \acc, n -> ruExp2TermAccOperation(n, acc, rules, true))) {
		Some(stack): RuTerm(ruExpType(e), map(stack.nodes, \n -> n.first), e.pos);
		None(): {
			ruCrash("empty expression");
			ruNoTerm;
		}
	}
}

// This function permits errors: no rules/empty exprs as it is used with cached files
ruExp2Nodes(e : RuExp, rules : Tree<int, RuRule>) -> [RuExpNode] {
	switch (foldr(e.nodes, None(), \acc, n -> ruExp2TermAccOperation(n, acc, rules, false))) {
		Some(stack): map(stack.nodes, \n -> n.second);
		None(): [];
	}
}

RuExp2TermStack(
	parent : Maybe<RuExp2TermStack>,
	nodes : [Pair<RuTermNode, RuExpNode>]
);

ruExp2TermAccOperation(node : RuExpNode, stack : Maybe<RuExp2TermStack>, rules : Tree<int, RuRule>, crash : bool) -> Maybe<RuExp2TermStack> {
	switch (node) {
		RuVar(__,__): 
			Some(RuExp2TermStack(stack, [Pair(node, node)]));
		RuRuleNode(id, type_id, arity, len): {
			switch (lookupTree(rules, id)) {
				Some(rule): {
					Some(fold(rule.term.nodes, RuExp2TermStack(stack, []), 
						\acc, symb -> {
							switch (symb) {
								RuVar(__,__): {
									switch (acc.parent) {
										Some(st): RuExp2TermStack(st.parent, concat(acc.nodes, st.nodes));
										None(): {
											if (crash) {
												ruCrash("stack must not be empty");
											}
											acc
										}
									}
								}
								RuConstRef(__):
									RuExp2TermStack(acc.parent, concat(acc.nodes, [Pair(symb, node)]));
							}
						}
					));
				}
				None(): {
					if (crash) {
						ruCrash("rule '" + id2s(id) + "' is not found");
					}
					None();
				}
			}
		}
	}
}

ruDisjs2Array(disjs : Set<RuDisj>) -> [Set<RuVar>] {
	make_disj = \v, w -> if (v.id < w.id) RuDisj(v, w) else RuDisj(w, v);
	may_be_added = \v, s ->
		forall(set2array(s), \w -> 
			if (v == w) true else {
				containsSet(disjs, make_disj(v, w))
			}
		);
	foldSet(disjs, [], \acc, disj ->
		if (exists(acc, \s -> containsSet(s, disj.v1) && containsSet(s, disj.v2))) acc else {
			switch (findi(acc, \s -> containsSet(s, disj.v1) && may_be_added(disj.v2, s))) {
				Some(i): replace(acc, i, insertSet(acc[i], disj.v2));
				None(): 
					switch (findi(acc, \s -> containsSet(s, disj.v2) && may_be_added(disj.v1, s))) {
						Some(i): replace(acc, i, insertSet(acc[i], disj.v1));
						None(): concat(acc, [insertSet(makeSet1(disj.v1), disj.v2)]);
					}
			}
		}
	);
}

ruIndOfArr(arr1 : [?], arr2 : [?]) -> int {
	foldi(arr1, -1, \i, ac, x -> 
		if (ac >= 0) ac else {
			if (i <= length(arr1) - length(arr2)) {
				ind = fold(arr2, i, \j, y ->
					if (j == -1) -1 else
					if (y == arr1[j]) j + 1 else -1
				);
				if (ind != -1) i else -1;
			} else {
				-1
			}
		}
	)
}

ruMakeDefProp(prop : [RuExpNode], dfm : [RuExpNode], dfs: [RuExpNode]) -> RuExp {
	dfs_i = ruIndOfArr(prop, dfs);
	dfm_i = ruIndOfArr(prop, dfm);
	dfs_len = length(dfs);
	dfm_len = length(dfm);
	if (dfs_i == -1 || dfm_i == -1) {
		ruNoExp
	} else {
		RuExp(foldi(prop, [], \i, ac, s ->
			if (i == dfm_i) concat(ac, [RuVar(s2id("defiendum"), -1)]) else
			if (dfm_i < i && i < dfm_i + dfm_len) ac else
			if (i == dfs_i) concat(ac, [RuVar(s2id("definiens"), -1)]) else
			if (dfs_i < i && i < dfs_i + dfs_len) ac else
			concat(ac, [s])
		), -1)
	}
}

ruSteps2s(steps : [RuStep], math : RuMath) -> string {
	strGlue(map(steps, \step -> ru2s(step, math)), "\n");
}
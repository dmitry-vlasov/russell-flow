import ru/util/src;

export {
	RuComputedDisjs ::= RuDisjsInherent, RuDisjViolation;
		RuDisjsInherent(disjs : Set<RuDisj>);
		RuDisjViolation(disj : RuDisj, commonVars : Set<RuVar>);
	ruComputeDisjs(s : Tree<RuVar, RuExp>, disjs : Set<RuDisj>, acc : RuComputedDisjs) -> RuComputedDisjs;
	ruCheckDisjs(s : Tree<RuVar, RuExp>, disjs : Set<RuDisj>) -> bool;
	ruCheckDisjsInherent(s : Tree<RuVar, RuExp>, ass_disjs : Set<RuDisj>, thm_disjs : Set<RuDisj>) -> bool;
	ruEqualDisjs(disjs_1 : Set<RuDisj>, disjs_2 : Set<RuDisj>) -> bool;
	ruSubsetDisjs(less : Set<RuDisj>, greater : Set<RuDisj>) -> bool;
	ruDiffDisjs(less : Set<RuDisj>, greater : Set<RuDisj>) -> [RuDisj];
}

ruComputeDisjs(s : Tree<RuVar, RuExp>, disjs : Set<RuDisj>, acc : RuComputedDisjs) -> RuComputedDisjs {
	foldSet(disjs, acc, \ac, disj -> {
		e1 = lookupTreeDef(s, disj.v1, RuExp([disj.v1], -1));
		e2 = lookupTreeDef(s, disj.v2, RuExp([disj.v2], -1));
		e1_vars = ruExp2Vars(e1);
		e2_vars = ruExp2Vars(e2);
		common_vars = intersectSets(e1_vars, e2_vars);
		if (!isEmptySet(common_vars)) {
			switch (ac) {
				RuComputedDisjs(__):  RuDisjViolation(disj, common_vars);
				RuDisjViolation(__,__): ac;
			}
		} else {
			switch (ac) {
				RuDisjsInherent(dsj): {
					RuDisjsInherent(
						foldSet(e1_vars, dsj, \ac1, v1 ->
							foldSet(e2_vars, ac1, \a, v2 ->
								if (v1.id < v2.id) insertSet(a, RuDisj(v1, v2)) else
								if (v2.id < v1.id) insertSet(a, RuDisj(v2, v1)) else a
							)
						)
					);
				}
				RuDisjViolation(__,__): ac;
			}
		}
	});
}

ruCheckDisjs(s : Tree<RuVar, RuExp>, disjs : Set<RuDisj>) -> bool {
	forall(set2array(disjs), \disj -> {
		e1 = lookupTreeDef(s, disj.v1, RuExp([disj.v1], -1));
		e2 = lookupTreeDef(s, disj.v2, RuExp([disj.v2], -1));
		e1_vars = ruExp2Vars(e1);
		e2_vars = ruExp2Vars(e2);
		isEmptySet(intersectSets(e1_vars, e2_vars));
	})
}

ruCheckDisjsInherent(s : Tree<RuVar, RuExp>, ass_disjs : Set<RuDisj>, thm_disjs : Set<RuDisj>) -> bool {
	forall(set2array(ass_disjs), \disj -> {
		e1 = lookupTreeDef(s, disj.v1, RuExp([disj.v1], -1));
		e2 = lookupTreeDef(s, disj.v2, RuExp([disj.v2], -1));
		e1_vars = set2array(ruExp2Vars(e1));
		e2_vars = set2array(ruExp2Vars(e2));
		forall(e1_vars, \v1 ->
			forall(e2_vars, \v2 ->
				if (v1.id < v2.id) containsSet(thm_disjs, RuDisj(v1, v2)) else
				if (v2.id < v1.id) containsSet(thm_disjs, RuDisj(v2, v1)) else 
				true
			)
		);
	});
}

ruEqualDisjs(disjs_1 : Set<RuDisj>, disjs_2 : Set<RuDisj>) -> bool {
	if (sizeSet(disjs_1) != sizeSet(disjs_2)) false else {
		ruSubsetDisjs(disjs_1, disjs_2);
	} 
}

ruSubsetDisjs(less : Set<RuDisj>, greater : Set<RuDisj>) -> bool {
	forall(set2array(less), \disj -> containsSet(greater, disj));
}

ruDiffDisjs(less : Set<RuDisj>, greater : Set<RuDisj>) -> [RuDisj] {
	foldSet(greater, [], \acc, disj ->
		if (containsSet(less, disj)) acc else concat(acc, [disj])
	);
}

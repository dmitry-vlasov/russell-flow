import ru/util/src;

export {
	ruProofQedStep(proof : RuProof) -> RuStep;
	ruIndexOfDecl(id : int, src : RuSource) -> int;

	// In case a declaration has comments before it, we take the start position of a first
	// comment right before the declaration. Otherwise the position of decl itself.
	ruStartPosition(decl : RuDecl) -> int;

	ruUpdateTheoremVars(theorem : RuTheorem) -> RuTheorem;
	ruUpdateProofVars(proof : RuProof, th_new : RuTheorem, th_old : RuTheorem) -> RuProof;

	ruSetDeclDescr(decl : RuDecl, descr : RuDescr) -> RuDecl;
	ruSetDeclComments(decl : RuDecl, comms : [RuComment]) -> RuDecl;
	ruModifyAnnotation(decl : RuDecl, modify : (JsonObject) -> JsonObject) -> RuDecl;

	ruMakeSuperRule(super : int, infer : int, src : int, pos : int) -> RuRule;
	ruFixLeftRecursiveRule(r : RuRule) -> RuRule;

	ruSourceTheorems(src : RuSource) -> [RuTheorem];

	ruPositionsTree(src : RuSource) -> Tree<int, RuPositioned>;

	ruDeclRange(d : RuDecl, src : RuSource, code : string, env : RuEnv) -> RuRange;
	ruDeclCode(decl : RuDecl, src : RuSource, code : string, env : RuEnv) -> string;
	ruSourceDeclsPos(src : RuSource) -> [int];

	ruLinearizeProof(proof : RuProof) -> RuProof; 
}

ruProofQedStep(proof : RuProof) -> RuStep {
	proof.steps[length(proof.steps) - 1];
}

ruIndexOfDecl(id : int, src : RuSource) -> int {
	findiDef(src.decls, 
		\decl -> switch (decl) {
			RuConst(d,__,__):      d.id == id;
			RuType(d,__):          d.id == id;
			RuRule(d,__,__):       d.id == id;
			RuAxiom(d,__):         d.id == id;
			RuTheorem(d,__,__,__): d.id == id;
			RuDef(d,__,__,__):     d.id == id;
		},
		-1
	)
}

ruStartPosition(decl : RuDecl) -> int {
	if (decl.descr.comments == []) decl.descr.pos else {
		lastElement(decl.descr.comments, ruNoComment).pos;
	}
}

ruUpdateProofVars(proof : RuProof, th_new : RuTheorem, th_old : RuTheorem) -> RuProof {
	proof_vars = ruProof2Vars(proof);
	RuProof(proof with
		vars = filterTree(
			mergeTree(proof.vars, th_old.stat.vars), 
			\__,v -> 
				containsSet(proof_vars, v) && 
				!containsKeyTree(th_new.stat.vars, v.id)
		),
		disjs = filterSet(
			mergeSets(proof.disjs, th_old.stat.disjs), 
			\d -> 
				containsSet(proof_vars, d.v1) && 
				containsSet(proof_vars, d.v2) &&
				!containsSet(th_new.stat.disjs, d)
		)
	);
}

ruUpdateTheoremVars(th_old : RuTheorem) -> RuTheorem {
	ass_vars = ruAssertion2Vars(th_old);
	th_new = RuTheorem(th_old with 
		stat = RuStatement(th_old.stat with
			vars = filterTree(th_old.stat.vars, \__,v -> containsSet(ass_vars, v)),
			disjs = filterSet(th_old.stat.disjs, \d -> containsSet(ass_vars, d.v1) && containsSet(ass_vars, d.v2))
		)
	);
	RuTheorem(th_new with
		proof = ruUpdateProofVars(th_new.proof, th_new, th_old)
	);
}

ruSetDeclComments(decl : RuDecl, comms : [RuComment]) -> RuDecl {
	switch (decl) {
		RuConst(__,__,__):
			RuConst(decl with descr = RuDescr(decl.descr with comments = comms));
		RuType(__,__):
			RuType(decl with descr = RuDescr(decl.descr with comments = comms));
		RuRule(__,__,__):
			RuRule(decl with descr = RuDescr(decl.descr with comments = comms));
		RuAxiom(__,__):
			RuAxiom(decl with descr = RuDescr(decl.descr with comments = comms));
		RuTheorem(__,__,__,__):
			RuTheorem(decl with descr = RuDescr(decl.descr with comments = comms));
		RuDef(__,__,__,__):
			RuDef(decl with descr = RuDescr(decl.descr with comments = comms));
	}
}

ruSetDeclDescr(decl : RuDecl, descr : RuDescr) -> RuDecl {
	switch (decl) {
		RuConst(__,__,__):      RuConst(decl with descr = descr);
		RuType(__,__):          RuType(decl with descr = descr);
		RuRule(__,__,__):       RuRule(decl with descr = descr);
		RuAxiom(__,__):         RuAxiom(decl with descr = descr);
		RuDef(__,__,__,__):     RuDef(decl with descr = descr);
		RuTheorem(__,__,__,__): RuTheorem(decl with descr = descr);
	}
}

ruModifyAnnotation(decl : RuDecl, modify : (JsonObject) -> JsonObject) -> RuDecl {
	old_annotation = JsonObject(fold(decl.descr.comments, [], \acc, comm -> concat(acc, comm.annotation.members)));
	new_annotation = modify(old_annotation);
	num_comments = length(decl.descr.comments);
	comments_modified = if (num_comments == 0) {
		if (new_annotation == JsonNull()) [] else
		[RuComment("", new_annotation, -1)];
	} else {
		mapi(decl.descr.comments, \i, comm ->
			if (i + 1 == num_comments) {
				RuComment(comm with annotation = new_annotation)
			} else {
				RuComment(comm with annotation = JsonObject([]))
			}
		);
	}
	ruSetDeclDescr(decl, RuDescr(decl.descr with comments = comments_modified));
}

ruMakeSuperRule(super : int, infer : int, src : int, pos : int) -> RuRule {
	id = ruSuperTypeName(super, infer);
	x = RuVar(s2id("x"), infer);
	RuRule(
		RuDescr(id, src, [], pos),
		makeTree1(x.id, x), 
		RuTerm(super, [x], pos)
	);
}

ruFixLeftRecursiveRule(r : RuRule) -> RuRule { 
	if (length(r.term.nodes) <= 1) r else {
		switch (r.term.nodes[0]) {
			RuVar(__,__):
				RuRule(r with term = RuTerm(r.term with nodes = 
					concat3([RuConstRef(s2id("("))], r.term.nodes, [RuConstRef(s2id(")"))])
				));
			default: r;
		}
	}
}

ruSourceTheorems(src : RuSource) -> [RuTheorem] {
	filtermap(src.decls, \decl -> 
		switch (decl) {
			RuTheorem(__,__,__,__): Some(decl);
			default: None();
		}
	)
}

ruPositionsTree(src : RuSource) -> Tree<int, RuPositioned> {
	add_stat = \acc : Tree<int, RuPositioned>, stat : RuStatement -> fold(
		stat.hyps, 
		setTree(acc, stat.prop.pos, stat.prop), 
		\ac, hyp : RuHyp -> setTree(setTree(ac, hyp.pos, hyp), hyp.expr.pos, hyp.expr) 
	);
	add_step = \ac : Tree<int, RuPositioned>, step : RuStep -> 
		setTree(setTree(ac, step.pos, step), step.expr.pos, step.expr);
	fold(src.decls, makeTree(), \acc, decl : RuDecl -> {
		acc1 = setTree(acc, decl.descr.pos, decl);
		switch (decl) {
			RuConst(__,__,__): 
				acc1;
			RuType(__,__):
				acc1;
			RuRule(__,__, term):
				setTree(acc1, term.pos, term);
			RuAxiom(__, stat):
				add_stat(acc1, stat);
			RuDef(__, stat, defm, defs): 
				setTree(
					setTree(
						add_stat(acc1, stat), 
						defm.pos, 
						defm
					), 
					defs.pos, defs
				);
			RuTheorem(__, stat,__, proof):
				fold(
					proof.steps, 
					add_stat(acc1, stat), 
					add_step
				);
		}
	});
}

ruDeclRange(d : RuDecl, src : RuSource, code : string, env : RuEnv) -> RuRange {
	ind = ruIndexOfDecl(d.descr.id, src);
	if (ind < 0) RuRange(-1, -1) else {
		start = ruStartPosition(d);
		end = if (ind + 1 < length(src.decls)) {
			src.decls[ind + 1].descr.pos;
		} else {
			strlen(code);
		}
		switch (d) {
			RuTheorem(__,__,__,__):
				RuRange(start, strRangeIndexOf(code, "proof {", start, end));
			default: RuRange(start, end);
		}
	}
}

ruDeclCode(decl : RuDecl, src : RuSource, code : string, env : RuEnv) -> string {
	range = ruDeclRange(decl, src, code, env);
	str = ruTrimAll(substring(code, range.start, range.end - range.start));
	end = strLastIndexOf(str, "}");
	strLeft(str, end + 1);
}

ruSourceDeclsPos(src : RuSource) -> [int] {
	map(src.decls, \decl -> decl.descr.pos);
}

ruLinearizeProof(proof : RuProof) -> RuProof {
	fold(proof.steps, RuProof(proof with steps = []), \acc, step ->
		if (step.assertion != -1) {
			/*upd_step = RuStep(st with
				ind = length(acc.steps),
				refs = map(st.refs, \rf -> 
					switch (rf) {
						RuHypRef(i, pos):  step.refs[i];
						RuStepRef(i, pos): RuStepRef(i + length(acc.steps), pos);
					}
				)
			);*/
			RuProof(acc with 
				steps = concat(acc.steps, [step])
			);
		} else {
			subproof = ruLinearizeProof(step.proof);
			substeps = map(subproof.steps, \st -> 
				RuStep(st with
					ind = st.ind + length(acc.steps),
					refs = map(st.refs, \rf -> 
						switch (rf) {
							RuHypRef(i):  step.refs[i];
							RuStepRef(i): RuStepRef(i + length(acc.steps));
						}
					)
				)
			);
			RuProof(acc with 
				steps = concat(acc.steps, substeps),
				vars = mergeTree(acc.vars, subproof.vars),
				disjs = mergeSets(acc.disjs, subproof.disjs)
			);
		}
	);
}

import ru/util/src;
import base/id_consts;

export {
	ruProofQedStep(proof : RuProof) -> RuStep;
	ruIndexOfDecl(id : int, src : RuSource) -> int;

	// In case a declaration has comments before it, we take the start position of a first
	// comment right before the declaration. Otherwise the position of decl itself.
	ruStartPosition(decl : RuDecl) -> int;

	ruUpdateTheoremVars(theorem : RuTheorem) -> RuTheorem;
	ruUpdateProofVars(proof : RuProof, th_new : RuTheorem, th_old : RuTheorem) -> RuProof;

	ruSetDeclInfo(decl : RuDecl, info : RuDeclInfo) -> RuDecl;
	ruSetDeclComments(decl : RuDecl, comms : [RuComment]) -> RuDecl;
	ruModifyAnnotation(decl : RuDecl, modify : (JsonObject) -> JsonObject) -> RuDecl;

	ruMakeSuperRule(super : int, infer : int, src : int, pos : int) -> RuRule;

	ruSourceTheorems(src : RuSource) -> [RuTheorem];

	ruPositionsTree(src : RuSource) -> Tree<int, [RuPositioned]>;

	ruDeclRange(d : RuDecl, src : RuSource, code : string, env : RuEnv) -> RuRange;
	ruDeclCode(decl : RuDecl, src : RuSource, code : string, env : RuEnv) -> string;
	ruSourceDeclsPos(src : RuSource) -> [int];
}

ruProofQedStep(proof : RuProof) -> RuStep {
	proof.steps[length(proof.steps) - 1];
}

ruIndexOfDecl(id : int, src : RuSource) -> int {
	findiDef(src.decls, 
		\decl -> switch (decl) {
			RuConst(d,__,__):      d.id == id;
			RuType(d,__):          d.id == id;
			RuRule(d,__,__):       d.id == id;
			RuAxiom(d,__):         d.id == id;
			RuTheorem(d,__,__,__): d.id == id;
			RuDef(d,__,__,__):     d.id == id;
		},
		-1
	)
}

ruStartPosition(decl : RuDecl) -> int {
	if (decl.info.comments == []) decl.info.pos else {
		lastElement(decl.info.comments, ruNoComment).pos;
	}
}

ruUpdateProofVars(proof : RuProof, th_new : RuTheorem, th_old : RuTheorem) -> RuProof {
	proof_vars = ruProof2Vars(proof);
	RuProof(proof with
		vars = RuVarsDisjs(proof.vars with
			vars = filterTree(
				mergeTree(proof.vars.vars, th_old.stat.vars.vars), 
				\__,v -> 
					containsSet(proof_vars, v) && 
					!containsKeyTree(th_new.stat.vars.vars, v.id)
			),
			disjs = filterSet(
				mergeSets(proof.vars.disjs, th_old.stat.vars.disjs), 
				\d -> 
					containsSet(proof_vars, d.v1) && 
					containsSet(proof_vars, d.v2) &&
					!containsSet(th_new.stat.vars.disjs, d)
			)
		)
	);
}

ruUpdateTheoremVars(th_old : RuTheorem) -> RuTheorem {
	ass_vars = ruAssertion2Vars(th_old);
	th_new = RuTheorem(th_old with 
		stat = RuStatement(th_old.stat with
			vars = RuVarsDisjs(th_old.stat.vars with
				vars = filterTree(th_old.stat.vars.vars, \__,v -> containsSet(ass_vars, v)),
				disjs = filterSet(th_old.stat.vars.disjs, \d -> containsSet(ass_vars, d.v1) && containsSet(ass_vars, d.v2))
			)
		)
	);
	RuTheorem(th_new with
		proof = ruUpdateProofVars(th_new.proof, th_new, th_old)
	);
}

ruSetDeclComments(decl : RuDecl, comms : [RuComment]) -> RuDecl {
	switch (decl) {
		RuConst(__,__,__):
			RuConst(decl with info = RuDeclInfo(decl.info with comments = comms));
		RuType(__,__):
			RuType(decl with info = RuDeclInfo(decl.info with comments = comms));
		RuRule(__,__,__):
			RuRule(decl with info = RuDeclInfo(decl.info with comments = comms));
		RuAxiom(__,__):
			RuAxiom(decl with info = RuDeclInfo(decl.info with comments = comms));
		RuTheorem(__,__,__,__):
			RuTheorem(decl with info = RuDeclInfo(decl.info with comments = comms));
		RuDef(__,__,__,__):
			RuDef(decl with info = RuDeclInfo(decl.info with comments = comms));
	}
}

ruSetDeclInfo(decl : RuDecl, info : RuDeclInfo) -> RuDecl {
	switch (decl) {
		RuConst(__,__,__):      RuConst(decl with info = info);
		RuType(__,__):          RuType(decl with info = info);
		RuRule(__,__,__):       RuRule(decl with info = info);
		RuAxiom(__,__):         RuAxiom(decl with info = info);
		RuDef(__,__,__,__):     RuDef(decl with info = info);
		RuTheorem(__,__,__,__): RuTheorem(decl with info = info);
	}
}

ruModifyAnnotation(decl : RuDecl, modify : (JsonObject) -> JsonObject) -> RuDecl {
	old_annotation = JsonObject(fold(decl.info.comments, [], \acc, comm -> concat(acc, comm.annotation.members)));
	new_annotation = modify(old_annotation);
	num_comments = length(decl.info.comments);
	comments_modified = if (num_comments == 0) {
		if (new_annotation == JsonNull()) [] else
		[RuComment("", new_annotation, -1)];
	} else {
		mapi(decl.info.comments, \i, comm ->
			if (i + 1 == num_comments) {
				RuComment(comm with annotation = new_annotation)
			} else {
				RuComment(comm with annotation = JsonObject([]))
			}
		);
	}
	ruSetDeclInfo(decl, RuDeclInfo(decl.info with comments = comments_modified));
}

ruMakeSuperRule(super : int, infer : int, src : int, pos : int) -> RuRule {
	id = ruSuperTypeName(super, infer);
	x = RuVar(ruIdX(), infer);
	RuRule(
		RuDeclInfo(id, src, [], pos),
		makeTree1(x.id, x), 
		RuTerm(super, [x], pos)
	);
}

ruSourceTheorems(src : RuSource) -> [RuTheorem] {
	filtermap(src.decls, \decl -> 
		switch (decl) {
			RuTheorem(__,__,__,__): Some(decl);
			default: None();
		}
	)
}

ruPositionsTree(src : RuSource) -> Tree<int, [RuPositioned]> {
	fold(src.decls, makeTree(), \acc, decl : RuDecl ->
		ruDoPositionsTree(decl, [], acc)
	);
}

ruDoPositionsTree(positioned : RuPositioned, path : [RuPositioned], acc : Tree<int, [RuPositioned]>) -> Tree<int, [RuPositioned]> {
	path1 = concat(path, [positioned]);
	acc1 = setTree(acc, ruPos(positioned), path1);
	add_stat = \ac, stat -> fold(stat.hyps, ruDoPositionsTree(stat.prop, path1, ac), \a, hyp : RuHyp -> 
		ruDoPositionsTree(hyp, path1, a)
	);
	switch (positioned) {
		RuHyp(ind, expr, pos): {
			ruDoPositionsTree(expr, path1, acc1);
		}
		RuRule(__,__, term): {
			ruDoPositionsTree(term, path1, acc1);
		}
		RuStep(ind, assertion, refs, expr, proof, pos): {
			acc2 = ruDoPositionsTree(expr, path1, acc1);
			if (proof.steps == []) acc2 else {
				ruDoPositionsTree(proof, path1, acc1);
			}
		}
		RuProof(vars, steps, pos): {
			fold(steps, acc1, \ac, step -> ruDoPositionsTree(step, path1, ac));
		}
		RuAxiom(__, stat): {
			add_stat(acc1, stat);
		}
		RuDef(__, stat, defm, defs): {
			acc2 = add_stat(acc1, stat);
			acc3 = ruDoPositionsTree(defm, path1, acc2);
			ruDoPositionsTree(defs, path1, acc3);
		}
		RuTheorem(__, stat,__, proof): {
			acc2 = add_stat(acc1, stat);
			ruDoPositionsTree(proof, path1, acc2);
		}
		RuImport(__,__):    acc1;
		RuComment(__,__,_): acc1;
		RuConst(__,__,__): 	acc1;
		RuType(__,__):      acc1;
		RuTerm(__,__,__):   acc1;
		RuExp(__,_):        acc1;
	}
}

ruDeclRange(d : RuDecl, src : RuSource, code : string, env : RuEnv) -> RuRange {
	ind = ruIndexOfDecl(d.info.id, src);
	if (ind < 0) {
		env.out.onError("Declaration '" + id2s(d.info.id) + "' is not found in source: '" + id2s(src.info.id) + "'", []);
		RuRange(-1, -1);
	} else {
		start = ruStartPosition(d);
		end = if (ind + 1 < length(src.decls)) {
			src.decls[ind + 1].info.pos;
		} else {
			strlen(code);
		}
		switch (d) {
			RuTheorem(__,__,__,__):
				RuRange(start, strRangeIndexOf(code, "proof {", start, end));
			default: RuRange(start, end);
		}
	}
}

ruDeclCode(decl : RuDecl, src : RuSource, code : string, env : RuEnv) -> string {
	range = ruDeclRange(decl, src, code, env);
	str = ruTrimAll(substring(code, range.start, range.end - range.start));
	end = strLastIndexOf(str, "}");
	strLeft(str, end + 1);
}

ruSourceDeclsPos(src : RuSource) -> [int] {
	map(src.decls, \decl -> decl.info.pos);
}

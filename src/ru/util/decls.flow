import ru/decls;
import ru/util/src;
import script/value;

export {
	ruFindSourceId(id : int, decls : RuDecls) -> int;

	ruDeclsAxioms(decls : RuDecls) -> Tree<int, RuAxiom>;
	ruDeclsTheorems(decls : RuDecls) -> Tree<int, RuTheorem>;
	ruDeclsProofs(decls : RuDecls) -> Tree<int, RuProof>;
	ruDeclsDefs(decls : RuDecls) -> Tree<int, RuDef>;
	ruDeclsAxiomsNum(decls : RuDecls) -> int;
	ruDeclsTheoremsNum(decls : RuDecls) -> int;
	ruDeclsDefsNum(decls : RuDecls) -> int;
	ruDeclsStepsNum(decls : RuDecls) -> int;
	ruDeclsTree(decls : RuDecls) ->Tree<int, RuDecl>;

	ruDeclsStats(decls : RuDecls) -> string;
	ruDeclsStats1(decls : RuDecls) -> ValMap;

	ruDeclsMerge(d1 : RuDecls, d2 : RuDecls, env : RuEnv) -> RuDecls;

	ruDeclsContainsDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> bool;
	ruDeclsSetDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls;
	ruDeclsAddDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls;
	ruDeclsReplaceDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls;
	ruDeclsRemoveDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls;

	ruDeclsAddSource(decls : RuDecls, src : RuSource, env : RuEnv) -> RuDecls;
	ruDeclsRemoveSource(decls : RuDecls, src : RuSource, env : RuEnv) -> RuDecls;

	ruFindDecl(id : int, m : RuDecls, env : RuEnv) -> Maybe<RuDecl>;
	
	ruDeclsFromSource(src : RuSource, env : RuEnv) -> RuDecls;
	ruDeclsFromSources(srcs : Tree<int, RuSource>, env : RuEnv) -> RuDecls;

	ruFindTheoremInDecls(id : int, decls : RuDecls, env : RuEnv) -> RuTheorem;
	ruSuperRule(infer : int, super : int, decls : RuDecls, env : RuEnv) -> Maybe<RuRule>;
}

ruFindSourceId(id : int, decls : RuDecls) -> int {
	switch (lookupTree(decls.assertions, id)) {
		Some(a): a.descr.src;
		None(): {
			switch (lookupTree(decls.consts, id)) {
				Some(c): c.descr.src;
				None(): {
					switch (lookupTree(decls.types, id)) {
						Some(t): t.descr.src;
						None(): {
							switch (lookupTree(decls.rules, id)) {
								Some(r): r.descr.src;
								None(): -1;
							}
						}
					}
				}
			}
		}
	}
}

ruDeclsAxioms(decls : RuDecls) ->Tree<int, RuAxiom> {
	foldTree(decls.assertions, makeTree(),
		\id, ass, acc -> {
			switch (ass) { 
				RuAxiom(__,__): setTree(acc, id, ass); 
				default: acc; 
			} 
		}
	)
}

ruDeclsTheorems(decls : RuDecls) ->Tree<int, RuTheorem> {
	foldTree(decls.assertions, makeTree(),
		\id, ass, acc -> {
			switch (ass) { 
				RuTheorem(__,__,__,__): setTree(acc, id, ass); 
				default: acc; 
			} 
		}
	)
}

ruDeclsProofs(decls : RuDecls) ->Tree<int, RuProof> {
	mapTree(ruDeclsTheorems(decls), \th -> th.proof);
}

ruDeclsDefs(decls : RuDecls) ->Tree<int, RuDef> {
	foldTree(decls.assertions, makeTree(),
		\id, ass, acc -> {
			switch (ass) { 
				RuDef(__,__,__,__): setTree(acc, id, ass); 
				default: acc; 
			} 
		}
	)
}

ruDeclsAxiomsNum(decls : RuDecls) -> int {
	foldTree(decls.assertions, 0, \__,a, acc -> 
		if (ruDeclIsAxiom(a)) acc + 1 else acc
	);
}

ruDeclsTheoremsNum(decls : RuDecls) -> int {
	foldTree(decls.assertions, 0, \__,a, acc -> 
		if (ruDeclIsTheorem(a)) acc + 1 else acc
	);
}

ruDeclsDefsNum(decls : RuDecls) -> int {
	foldTree(decls.assertions, 0, \__,a, acc -> 
		if (ruDeclIsDef(a)) acc + 1 else acc
	);
}

ruDeclsStepsNum(decls : RuDecls) -> int {
	foldTree(ruDeclsProofs(decls), 0, \__, proof, acc -> 
		acc + length(proof.steps)
	);
}

ruDeclsTree(decls : RuDecls) ->Tree<int, RuDecl> {
	foldTree(decls.assertions, 
		foldTree(decls.rules, 
			foldTree(decls.types, 
				foldTree(decls.consts, makeTree(), 
					\id, type, acc -> setTree(acc, id, type)
				),
				\id, type, acc -> setTree(acc, id, type)
			),
			\id, rule, acc -> setTree(acc, id, rule)
		),
		\id, ass, acc -> setTree(acc, id, ass)
	);
}

ruDeclsStats(decls : RuDecls) -> string {
	strGlue([
		"  consts:     " + i2s(sizeTree(decls.consts)),
		"  types:      " + i2s(sizeTree(decls.types)),
		"  rules:      " + i2s(sizeTree(decls.rules)),
		"  assertions: " + i2s(sizeTree(decls.assertions)),
		"    axioms:   " + i2s(ruDeclsAxiomsNum(decls)),
		"    theorems: " + i2s(ruDeclsTheoremsNum(decls)),
		"    defs:     " + i2s(ruDeclsDefsNum(decls)),
		"    steps:    " + i2s(ruDeclsStepsNum(decls))
	], "\n")
}

ruDeclsStats1(decls : RuDecls) -> ValMap {
	ValMap(pairs2tree([
		Pair(ValString("consts"), ValInt(sizeTree(decls.consts))),
		Pair(ValString("types"), ValInt(sizeTree(decls.types))),
		Pair(ValString("rules"), ValInt(sizeTree(decls.rules))),
		Pair(ValString("assertions"), ValArray([
			ValInt(sizeTree(decls.assertions)),
			ValMap(pairs2tree([
				Pair(ValString("axioms"), ValInt(ruDeclsAxiomsNum(decls))),
				Pair(ValString("theorems"), ValInt(ruDeclsTheoremsNum(decls))),
				Pair(ValString("defs"), ValInt(ruDeclsDefsNum(decls))),
				Pair(ValString("steps"), ValInt(ruDeclsStepsNum(decls)))
			]))
		]))
	]));
}

ruDeclsMerge(d1 : RuDecls, d2 : RuDecls, env : RuEnv) -> RuDecls {
	RuDecls(
		mergeTreeCustom(d1.consts, d2.consts, \id, c1, c2 -> { env.out.onError("duplicate constant: " + id2s(id), []); c1 }),
		mergeTreeCustom(d1.types, d2.types, \id, t1, t2 -> { env.out.onError("duplicate type: " + id2s(id), []); t1 }),
		mergeTreeCustom(d1.rules, d2.rules, \id, r1, r2 -> { env.out.onError("duplicate rule: " + id2s(id), []); r1 }),
		mergeTreeCustom(d1.assertions, d2.assertions, \id, a1, a2 -> { env.out.onError("duplicate assertion: " + id2s(id), []); a1 })
	);
}

ruDeclsContainsDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> bool {
	switch (decl) {
		RuConst(descr,__,__):      containsKeyTree(decls.consts, descr.id);
		RuType(descr,__):          containsKeyTree(decls.types, descr.id);
		RuRule(descr, __,__):      containsKeyTree(decls.rules, descr.id);
		RuAxiom(descr,__):         containsKeyTree(decls.assertions, descr.id);
		RuTheorem(descr,__,__,__): containsKeyTree(decls.assertions, descr.id);
		RuDef(descr,__,__,__):     containsKeyTree(decls.assertions, descr.id);
	}
}

ruDeclsSetDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls {
	switch (decl) {
		RuConst(descr,__,__):
			RuDecls(decls with consts = setTree(decls.consts, descr.id, decl));
		RuType(descr, supers):
			RuDecls(decls with 
				types = setTree(decls.types, descr.id, decl),
				rules = fold(supers, decls.rules, \a, super -> {
					rule = ruMakeSuperRule(super, descr.id, descr.src, descr.pos);
					setTree(a, rule.descr.id, rule);
				})
			);
		RuRule(descr, __,__):
			RuDecls(decls with rules = setTree(decls.rules, descr.id, decl));
		RuAxiom(descr,__):
			RuDecls(decls with assertions = setTree(decls.assertions, descr.id, decl));
		RuTheorem(descr,__,__,__):
			RuDecls(decls with assertions = setTree(decls.assertions, descr.id, decl));
		RuDef(descr,__,__,__):
			RuDecls(decls with assertions = setTree(decls.assertions, descr.id, decl));
	}
}

ruDeclsAddDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls {
	if (ruDeclsContainsDecl(decls, decl, env)) {
		ruCrash("decl '" + id2s(decl.descr.id) + "' is already added");
		env.out.onError("decl '" + id2s(decl.descr.id) + "' is already added", [ruDeclPlace(decl)]); 
		decls;
	} else {
		ruDeclsSetDecl(decls, decl, env);
	}
}

ruDeclsReplaceDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls {
	if (!ruDeclsContainsDecl(decls, decl, env)) {
		ruCrash("decl '" + id2s(decl.descr.id) + "' is not found");
		env.out.onError("decl '" + id2s(decl.descr.id) + "' is not found", [ruDeclPlace(decl)]); 
		decls;
	} else {
		ruDeclsSetDecl(ruDeclsRemoveDecl(decls, decl, env), decl, env);
	}
}

ruDeclsRemoveDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls {
	if (!ruDeclsContainsDecl(decls, decl, env)) {
		env.out.onError("decl '" + id2s(decl.descr.id) + "' is not found", [ruDeclPlace(decl)]); 
		decls;
	} else {
		switch (decl) {
			RuConst(descr,__,__):
				RuDecls(decls with consts = removeFromTree(decls.consts, descr.id));
			RuType(descr, supers):
				RuDecls(decls with 
					types = removeFromTree(decls.types, descr.id),
					rules = fold(supers, decls.rules, \a, super ->
						removeFromTree(a, ruSuperTypeName(super, descr.id))
					)
				);
			RuRule(descr, __,__):
				RuDecls(decls with rules = removeFromTree(decls.rules, descr.id));
			RuAxiom(descr,__):
				RuDecls(decls with assertions = removeFromTree(decls.assertions, descr.id));
			RuTheorem(descr,__,__,__):
				RuDecls(decls with assertions = removeFromTree(decls.assertions, descr.id));
			RuDef(descr,__,__,__):
				RuDecls(decls with assertions = removeFromTree(decls.assertions, descr.id));
		}
	}
}

ruDeclsAddSource(decls : RuDecls, src : RuSource, env : RuEnv) -> RuDecls {
	fold(src.decls, decls, \acc, decl -> ruDeclsAddDecl(acc, decl, env));
}

ruDeclsRemoveSource(decls : RuDecls, src : RuSource, env : RuEnv) -> RuDecls {
	fold(src.decls, decls, \acc, decl -> ruDeclsRemoveDecl(acc, decl, env));
}

ruDeclsFromSource(src : RuSource, env : RuEnv) -> RuDecls {
	ruDeclsAddSource(ruEmptyDecls, src, env);
}

ruDeclsFromSources(srcs : Tree<int, RuSource>, env : RuEnv) -> RuDecls {
	foldTree(srcs, ruEmptyDecls, \__, src, acc -> ruDeclsAddSource(acc, src, env));
}

ruFindDecl(id : int, decls : RuDecls, env : RuEnv) -> Maybe<RuDecl> {
	switch (lookupTree(decls.assertions, id)) {
		Some(decl): Some(decl);
		None(): {
			switch (lookupTree(decls.consts, id)) {
				Some(decl): Some(decl);
				None(): {
					switch (lookupTree(decls.rules, id)) {
						Some(decl): Some(decl);
						None(): lookupTree(decls.types, id);
					}
				}
			}
		}
	}
}

ruFindTheoremInDecls(id : int, decls : RuDecls, env : RuEnv) -> RuTheorem {
	switch (lookupTree(decls.assertions, id)) {
		Some(th): {
			switch (th) {
				RuTheorem(__,__,__,__): th;
				default: {
					env.out.onError("'" + id2s(id) + "' is not a theorem", []);
					ruNoTheorem;
				}
			}
		}
		None(): {
			env.out.onError("assertion '" + id2s(id) + "' is not found", []);
			ruNoTheorem;
		}
	}
}

ruSuperRule(infer : int, super : int, decls : RuDecls, env : RuEnv) -> Maybe<RuRule> {
	id = ruSuperTypeName(super, infer);
	lookupTree(decls.rules, id);
}

import ru/util/lang;
import ru/util/assertions;
import ru/decls;

export {
	ruFindSourceId(id : int, decls : RuDecls) -> int;

	ruDeclsAxioms(decls : RuDecls) -> Tree<int, RuAxiom>;
	ruDeclsTheorems(decls : RuDecls) -> Tree<int, RuTheorem>;
	ruDeclsProofs(decls : RuDecls) -> Tree<int, RuProof>;
	ruDeclsDefs(decls : RuDecls) -> Tree<int, RuDef>;
	ruDeclsAxiomsNum(decls : RuDecls) -> int;
	ruDeclsTheoremsNum(decls : RuDecls) -> int;
	ruDeclsDefsNum(decls : RuDecls) -> int;
	ruDeclsStepsNum(decls : RuDecls) -> int;
	ruDeclsHypsNum(decls : RuDecls) -> int;
	ruDeclsTree(decls : RuDecls) ->Tree<int, RuDecl>;

	ruDeclsStats2s(decls : RuDecls) -> string;
	ruDeclsStats2tree(decls : RuDecls) -> Tree<string, int>;

	ruDeclsMerge(d1 : RuDecls, d2 : RuDecls, env : RuEnv) -> RuDecls;

	ruDeclsContainsDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> bool;
	ruDeclsGetDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> Maybe<RuDecl>;
	ruDeclsSetDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls;
	ruDeclsAddDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls;
	ruDeclsReplaceDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls;
	ruDeclsRemoveDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls;

	ruDeclsAddSource(decls : RuDecls, src : RuSource, env : RuEnv) -> RuDecls;
	ruDeclsRemoveSource(decls : RuDecls, src : RuSource, env : RuEnv) -> RuDecls;

	ruFindDecl(id : int, m : RuDecls, env : RuEnv) -> Maybe<RuDecl>;
	
	ruDeclsFromSource(src : RuSource, env : RuEnv) -> RuDecls;
	ruDeclsFromSources(srcs : Tree<int, RuSource>, env : RuEnv) -> RuDecls;

	ruFindTheoremInDecls(id : int, decls : RuDecls, env : RuEnv) -> RuTheorem;
}

ruFindSourceId(id : int, decls : RuDecls) -> int {
	switch (lookupTree(decls.assertions, id)) {
		Some(a): a.info.src;
		None(): {
			switch (lookupTree(decls.lang.consts, id)) {
				Some(c): c.info.src;
				None(): {
					switch (lookupTree(decls.lang.types, id)) {
						Some(t): t.info.src;
						None(): {
							switch (lookupTree(decls.lang.rules, id)) {
								Some(r): r.info.src;
								None(): -1;
							}
						}
					}
				}
			}
		}
	}
}

ruDeclsAxioms(decls : RuDecls) ->Tree<int, RuAxiom> {
	foldTree(decls.assertions, makeTree(),
		\id, ass, acc -> {
			switch (ass) { 
				RuAxiom(__,__): setTree(acc, id, ass); 
				default: acc; 
			} 
		}
	)
}

ruDeclsTheorems(decls : RuDecls) ->Tree<int, RuTheorem> {
	foldTree(decls.assertions, makeTree(),
		\id, ass, acc -> {
			switch (ass) { 
				RuTheorem(__,__,__,__): setTree(acc, id, ass); 
				default: acc; 
			} 
		}
	)
}

ruDeclsProofs(decls : RuDecls) ->Tree<int, RuProof> {
	mapTree(ruDeclsTheorems(decls), \th -> th.proof);
}

ruDeclsDefs(decls : RuDecls) ->Tree<int, RuDef> {
	foldTree(decls.assertions, makeTree(),
		\id, ass, acc -> {
			switch (ass) { 
				RuDef(__,__,__,__): setTree(acc, id, ass); 
				default: acc; 
			} 
		}
	)
}

ruDeclsAxiomsNum(decls : RuDecls) -> int {
	foldTree(decls.assertions, 0, \__, a, acc -> 
		if (ruDeclIsAxiom(a)) acc + 1 else acc
	);
}

ruDeclsTheoremsNum(decls : RuDecls) -> int {
	foldTree(decls.assertions, 0, \__, a, acc -> 
		if (ruDeclIsTheorem(a)) acc + 1 else acc
	);
}

ruDeclsDefsNum(decls : RuDecls) -> int {
	foldTree(decls.assertions, 0, \__, a, acc -> 
		if (ruDeclIsDef(a)) acc + 1 else acc
	);
}

ruDeclsStepsNum(decls : RuDecls) -> int {
	foldTree(ruDeclsProofs(decls), 0, \__, proof, acc -> 
		acc + length(proof.steps)
	);
}

ruDeclsHypsNum(decls : RuDecls) -> int {
	foldTree(decls.assertions, 0, \__, ass, acc -> 
		acc + length(ass.stat.hyps)
	);
}

ruDeclsTree(decls : RuDecls) ->Tree<int, RuDecl> {
	foldTree(decls.assertions, ruLangTree(decls.lang), 
		\id, ass, acc -> setTree(acc, id, ass)
	);
}

ruDeclsStats2s(decls : RuDecls) -> string {
	ruLangStats2s(decls.lang) + "\n" + 
	strGlue([
		"  assertions: " + i2s(sizeTree(decls.assertions)),
		"    axioms:   " + i2s(ruDeclsAxiomsNum(decls)),
		"    theorems: " + i2s(ruDeclsTheoremsNum(decls)),
		"    defs:     " + i2s(ruDeclsDefsNum(decls)),
		"    steps:    " + i2s(ruDeclsStepsNum(decls)),
		"    hyps:     " + i2s(ruDeclsHypsNum(decls))
	], "\n")
}

ruDeclsStats2tree(decls : RuDecls) -> Tree<string, int> {
	langStats = ruLangStats2tree(decls.lang);
	mergeTree(langStats,
		pairs2tree([
			Pair("assertions", sizeTree(decls.assertions)),
			Pair("axioms", ruDeclsAxiomsNum(decls)),
			Pair("theorems", ruDeclsTheoremsNum(decls)),
			Pair("defs", ruDeclsDefsNum(decls)),
			Pair("steps", ruDeclsStepsNum(decls)),
			Pair("hyps", ruDeclsHypsNum(decls))
		])
	);
}

ruDeclsMerge(d1 : RuDecls, d2 : RuDecls, env : RuEnv) -> RuDecls {
	RuDecls(
		ruLangMerge(d1.lang, d2.lang, env),
		ruAssertionsMerge(d1.assertions, d2.assertions, env)
		//mergeTreeCustom(d1.assertions, d2.assertions, \id, a1, a2 -> { env.out.error("duplicate assertion: " + id2s(id), []); a1 })
	);
}

ruDeclsContainsDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> bool {
	switch (decl) {
		RuConst(info,__,__):      containsKeyTree(decls.lang.consts, info.id);
		RuType(info,__):          containsKeyTree(decls.lang.types, info.id);
		RuRule(info, __,__):      containsKeyTree(decls.lang.rules, info.id);
		RuAxiom(info,__):         containsKeyTree(decls.assertions, info.id);
		RuTheorem(info,__,__,__): containsKeyTree(decls.assertions, info.id);
		RuDef(info,__,__,__):     containsKeyTree(decls.assertions, info.id);
	}
}

ruDeclsGetDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> Maybe<RuDecl> {
	switch (decl) {
		RuConst(info,__,__):      lookupTree(decls.lang.consts, info.id);
		RuType(info,__):          lookupTree(decls.lang.types, info.id);
		RuRule(info, __,__):      lookupTree(decls.lang.rules, info.id);
		RuAxiom(info,__):         lookupTree(decls.assertions, info.id);
		RuTheorem(info,__,__,__): lookupTree(decls.assertions, info.id);
		RuDef(info,__,__,__):     lookupTree(decls.assertions, info.id);
	}
}

ruDeclsSetDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls {
	switch (decl) {
		RuAxiom(info,__):
			RuDecls(decls with assertions = setTree(decls.assertions, info.id, decl));
		RuTheorem(info,__,__,__):
			RuDecls(decls with assertions = setTree(decls.assertions, info.id, decl));
		RuDef(info,__,__,__):
			RuDecls(decls with assertions = setTree(decls.assertions, info.id, decl));
		default:
			RuDecls(decls with lang = ruLangSetDecl(decls.lang, decl, env));
	}
}

ruDeclsAddDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls {
	switch (ruDeclsGetDecl(decls, decl, env)) {
		Some(old): {
			ruCrash("decl '" + id2s(decl.info.id) + "' is already added.\n" +
				"already in decls:\n" + strIndent(ru2sLang(old, decls.lang)) + "\n" + 
				"new one:\n" + strIndent(ru2sLang(decl, decls.lang))
			);
			env.out.error("decl '" + id2s(decl.info.id) + "' is already added", [ruDeclPlace(decl, env)]); 
			decls;
		}
		None(): ruDeclsSetDecl(decls, decl, env);
	}
}

ruDeclsReplaceDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls {
	if (!ruDeclsContainsDecl(decls, decl, env)) {
		ruCrash("decl '" + id2s(decl.info.id) + "' is not found");
		env.out.error("decl '" + id2s(decl.info.id) + "' is not found", [ruDeclPlace(decl, env)]); 
		decls;
	} else {
		ruDeclsSetDecl(ruDeclsRemoveDecl(decls, decl, env), decl, env);
	}
}

ruDeclsRemoveDecl(decls : RuDecls, decl : RuDecl, env : RuEnv) -> RuDecls {
	if (!ruDeclsContainsDecl(decls, decl, env)) {
		env.out.error("decl '" + id2s(decl.info.id) + "' is not found", [ruDeclPlace(decl, env)]); 
		decls;
	} else {
		switch (decl) {
			RuAxiom(info,__):
				RuDecls(decls with assertions = removeFromTree(decls.assertions, info.id));
			RuTheorem(info,__,__,__):
				RuDecls(decls with assertions = removeFromTree(decls.assertions, info.id));
			RuDef(info,__,__,__):
				RuDecls(decls with assertions = removeFromTree(decls.assertions, info.id));
			default:
				RuDecls(decls with lang = ruLangRemoveDecl(decls.lang, decl, env));
		}
	}
}

ruDeclsAddSource(decls : RuDecls, src : RuSource, env : RuEnv) -> RuDecls {
	fold(src.decls, decls, \acc, decl -> ruDeclsAddDecl(acc, decl, env));
}

ruDeclsRemoveSource(decls : RuDecls, src : RuSource, env : RuEnv) -> RuDecls {
	fold(src.decls, decls, \acc, decl -> ruDeclsRemoveDecl(acc, decl, env));
}

ruDeclsFromSource(src : RuSource, env : RuEnv) -> RuDecls {
	ruDeclsAddSource(ruEmptyDecls, src, env);
}

ruDeclsFromSources(srcs : Tree<int, RuSource>, env : RuEnv) -> RuDecls {
	foldTree(srcs, ruEmptyDecls, \__, src, acc -> ruDeclsAddSource(acc, src, env));
}

ruFindDecl(id : int, decls : RuDecls, env : RuEnv) -> Maybe<RuDecl> {
	switch (lookupTree(decls.assertions, id)) {
		Some(decl): Some(decl);
		None(): ruLangFindDecl(id, decls.lang, env);
	}
}

ruFindTheoremInDecls(id : int, decls : RuDecls, env : RuEnv) -> RuTheorem {
	switch (lookupTree(decls.assertions, id)) {
		Some(th): {
			switch (th) {
				RuTheorem(__,__,__,__): th;
				default: {
					env.out.error("'" + id2s(id) + "' is not a theorem", []);
					ruNoTheorem;
				}
			}
		}
		None(): {
			env.out.error("assertion '" + id2s(id) + "' is not found", []);
			ruNoTheorem;
		}
	}
}

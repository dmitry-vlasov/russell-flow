import base/util/timer;
import base/concurrent;
import ru/cache/decl;
import ru/util/src2json;
import ru/util/src2s;

export {
	RuOntologyItem(
		rule : RuRule,
		def : Maybe<RuDef>,
		children : ref Set<int>,
		parents : ref Set<int>,
		deps : ref Set<int>
	);

	ruMakeOntology(env : RuEnv) -> Tree<int, RuOntologyItem>;
	ruOntology2json(ontology : Tree<int, RuOntologyItem>, env : RuEnv) -> Json;
	ruOntologyItem2json(item : RuOntologyItem, math : RuMath) -> Json;
	ruOntologyItem2s(item : RuOntologyItem, math : RuMath) -> string;
	ruOntology2s(ontology : Tree<int, RuOntologyItem>, math : RuMath) -> string;

	ruNoOntologyItem = RuOntologyItem(ruNoRule, None(), ref makeSet(), ref makeSet(), ref makeSet());
}

ruMakeOntology(env : RuEnv) -> Tree<int, RuOntologyItem> {
	t0 = ruMakeTimer();
	decls = ruDeclCacheDecls(env);
	math = RuMath(makeTree(), decls);
	rules_tree = decls.lang.rules;
	rules = getTreeValues(rules_tree);
	defs = filtermap(getTreeValues(decls.assertions), \ass -> 
		switch (ass) {
			RuDef(__,__,__,__): Some(ass);
			default: None();
		}
	);
	defs_tree = values2tree(defs, \def -> def.info.id);
	rule2def = fold(defs, makeTree(), \acc, def -> {
		def_defm = ruExp(def.defm);
		switch (def_defm.nodes[0]) {
			RuRuleNode(rule,__,__,__): setTree(acc, rule, def);
			default: { 
				ruCrash("defiendum must not be a variable: '" + ruExpRPN2s(def_defm) + "'");
				acc
			}
		}
	});

	items = map(rules, \rule ->
		RuOntologyItem(rule, lookupTree(rule2def, rule.info.id), ref makeSet(), ref makeSet(), ref makeSet())
	);
	tree = fold(items, makeTree(), \acc, item -> setTree(acc, item.rule.info.id, item));
	t1 = ruMakeTimer();
	ruDoMakeOntology(items, makeSet(), tree, env, math, 1);
	//ruDebugLog("ruDoMakeOntology(items, makeSet(), tree, env, math, 1): " + ruTimePassed2s(t0) + ", " + ruTimePassed2s(t1));
	tree;
}

ruDefDeps(def : RuDef) -> [int] {
	def_defs = ruExp(def.defs);
	filtermap(def_defs.nodes, \node ->
		switch (node) {
			RuRuleNode(rule,__,__,__): Some(rule);
			RuVar(__,__): None();
		}
	);
}

ruOntologyItemIsAncestorSibling(id : int, item : RuOntologyItem, tree : Tree<int, RuOntologyItem>, visited : Set<int>) -> Pair<bool, Set<int>> {
	if (containsSet(^(item.children), id)) Pair(true, visited) else 
	if (containsSet(visited, item.rule.info.id)) Pair(false, visited) else {
		new_visited = insertSet(visited, item.rule.info.id);
		foldSet(^(item.parents), 
			Pair(false, new_visited), 
			\acc, par -> 
				if (acc.first) acc else
				switch (lookupTree(tree, par)) {
					Some(parent): ruOntologyItemIsAncestorSibling(id, parent, tree, acc.second)
					None(): acc;
				}
		);
	}
}

ruDoMakeOntology(
	left : [RuOntologyItem], 
	visited: Set<int>, 
	tree : Tree<int, RuOntologyItem>, 
	env : RuEnv,
	math : RuMath,
	count : int
) -> void {
	ready0 = filter(left, \item -> 
		switch (item.def) {
			Some(def): forall(ruDefDeps(def), \dep -> containsSet(visited, dep) || dep == item.rule.info.id);
			None(): true; // root
		}
	);
	proc_ready = \ready -> {
		ruConcurrent(map(ready, \item -> \__ ->
			maybeApply(item.def, 
				\def -> {
					deps = ruDefDeps(def);
					iter(deps, \dep -> {
						parent = lookupTreeDef(tree, dep, ruNoOntologyItem);
						if (!ruOntologyItemIsAncestorSibling(item.rule.info.id, parent, tree, makeSet()).first) {
							parent.children := insertSet(^(parent.children), item.rule.info.id);
						}
						item.parents := insertSet(^(item.parents), dep);
						item.deps := mergeSets(insertSet(^(item.deps), dep), ^(parent.deps));
					});
				}
			)
		), env);
		ready_ids = buildSet(map(ready, \item -> item.rule.info.id));
		new_left = filter(left, \item -> 
			!containsSet(ready_ids, item.rule.info.id)
		);
		new_visited = fold(ready, visited, \acc, item -> insertSet(acc, item.rule.info.id));
		ruDoMakeOntology(new_left, new_visited, tree, env, math, count + 1);
	}
	if (ready0 == []) {
		if (left != []) {
			closures = ruConcurrent(map(left, \item -> \ env1 -> {
				closure = map(
					set2array(ruOntologyItemClosure(item, item, visited, makeSet(), tree, env1, math)), 
					\i -> lookupTreeDef(tree, i, ruNoOntologyItem)
				);
				Pair(item, closure);
			}), env);
			sorted = sortCustom(closures, \pair -> length(pair.second), true);

			least = sorted[0].first;
			closure = sorted[0].second;
			proc_ready(closure);
		}
	} else {
		proc_ready(ready0);
	}
}

ruOntologyItemClosure(
	orig : RuOntologyItem,
	item : RuOntologyItem,
	visited : Set<int>,
	closure : Set<int>,
	tree : Tree<int, RuOntologyItem>,
	env : RuEnv,
	math : RuMath
) -> Set<int> {
	closure1 = if (containsSet(visited, item.rule.info.id)) closure else insertSet(closure, item.rule.info.id);
	switch (item.def) {
		Some(def): {
			deps = ruDefDeps(def);
			not_visited = filter(deps, \dep -> 
				!(containsSet(visited, dep) || containsSet(closure1, dep))
			);
			if (not_visited == []) closure1 else {
				fold(not_visited, closure1, \ac, dep -> {
					dep_item = lookupTreeDef(tree, dep, ruNoOntologyItem);
					ruOntologyItemClosure(orig, dep_item, visited, ac, tree, env, math);
				});
			}
		}
		None(): {
			closure1;
		}
	}
}

ruOntology2json(ontology : Tree<int, RuOntologyItem>, env : RuEnv) -> Json {
	decls = ruDeclCacheDecls(env);
	math = RuMath(makeTree(), decls);
	JsonArray(ruConcurrent(map(getTreeValues(ontology), \item -> \__ -> ruOntologyItem2json(item, math)), env));
}

ruOntologyItem2json(item : RuOntologyItem, math : RuMath) -> Json {
	JsonObject(filtermap([
		Some(Pair("id", JsonString(id2s(item.rule.info.id)))),
		Some(Pair("rule", ru2json(item.rule, math.decls.lang.rules))),
		maybeMap(item.def, \def -> Pair("def", ru2json(def, math.decls.lang.rules))),
		Some(Pair("rule_str", JsonString(ru2s(item.rule, math)))),
		maybeMap(item.def, \def -> Pair("def_str", JsonString(ru2s(def, math)))),
		Some(Pair("children", JsonArray(map(set2array(^(item.children)), \ch -> JsonString(id2s(ch)))))),
		Some(Pair("parents", JsonArray(map(set2array(^(item.parents)), \par -> JsonString(id2s(par)))))),
	], idfn));
}

ruOntologyItem2s(item : RuOntologyItem, math : RuMath) -> string {
	"rule: " + id2s(item.rule.info.id) + " " + 
	"def: " + (switch (item.def) { Some(def): id2s(def.info.id); None(): "none" } ) + " " + 
	"children: [" + superglue(set2array(^(item.children)), id2s, ", ") + "] " +
	"parents: [" + superglue(set2array(^(item.parents)), id2s, ", ") + "]";
}

ruOntology2s(ontology : Tree<int, RuOntologyItem>, math : RuMath) -> string {
	superglue(getTreeValues(ontology), \item -> ruOntologyItem2s(item, math), "\n");
}
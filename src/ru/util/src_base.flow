import base/id_consts;
import ru/src;

export {
	ruOrderVars(vars : Tree<int, RuVar>) -> [RuVar];
	ruOrderDisjs(disjs0 : [Set<RuVar>]) -> [[RuVar]];
	ruDisjs2Array(disjs : Set<RuDisj>) -> [[RuVar]];
	ruMakeDefProp(prop : [RuExpNode], dfm : [RuExpNode], dfs: [RuExpNode]) -> RuExp;
}

ruOrderVars(vars : Tree<int, RuVar>) -> [RuVar] {
	sortCustom(getTreeValues(vars), \v -> id2s(v.id), true);
}

ruOrderDisjs(disjs0 : [Set<RuVar>]) -> [[RuVar]] {
	disjs = map(disjs0, \vs -> sortCustom(set2array(vs), \v -> id2s(v.id), true));
	mergeSort(disjs, \disj_1, disj_2 ->
		if (length(disj_1) < length(disj_2)) {
			-1
		} else if (length(disj_2) < length(disj_1)) {
			1
		} else {
			foldi(disj_1, 0, \i, acc, dv1 ->
				if (acc != 0) acc else {
					v1 = id2s(dv1.id);
					v2 = id2s(disj_2[i].id);
					if (v1 < v2) -1 else 
					if (v2 < v1) 1 else acc;
				}
			);
		}
	);
}

ruDisjs2Array(disjs : Set<RuDisj>) -> [[RuVar]] {
	make_disj = \v, w -> if (v.id < w.id) RuDisj(v, w) else RuDisj(w, v);
	may_be_added = \v, s ->
		forall(set2array(s), \w -> 
			if (v == w) true else {
				containsSet(disjs, make_disj(v, w))
			}
		);
	arr = foldSet(disjs, [], \acc, disj ->
		if (exists(acc, \s -> containsSet(s, disj.v1) && containsSet(s, disj.v2))) acc else {
			switch (findi(acc, \s -> containsSet(s, disj.v1) && may_be_added(disj.v2, s))) {
				Some(i): replace(acc, i, insertSet(acc[i], disj.v2));
				None(): 
					switch (findi(acc, \s -> containsSet(s, disj.v2) && may_be_added(disj.v1, s))) {
						Some(i): replace(acc, i, insertSet(acc[i], disj.v1));
						None(): concat(acc, [insertSet(makeSet1(disj.v1), disj.v2)]);
					}
			}
		}
	);
	ruOrderDisjs(arr);
}

ruIndOfArr(arr1 : [?], arr2 : [?]) -> int {
	foldi(arr1, -1, \i, ac, x -> 
		if (ac >= 0) ac else {
			if (i <= length(arr1) - length(arr2)) {
				ind = fold(arr2, i, \j, y ->
					if (j == -1) -1 else
					if (y == arr1[j]) j + 1 else -1
				);
				if (ind != -1) i else -1;
			} else {
				-1
			}
		}
	)
}

ruMakeDefProp(prop : [RuExpNode], dfm : [RuExpNode], dfs: [RuExpNode]) -> RuExp {
	dfs_i = ruIndOfArr(prop, dfs);
	dfm_i = ruIndOfArr(prop, dfm);
	dfs_len = length(dfs);
	dfm_len = length(dfm);
	if (dfs_i == -1 || dfm_i == -1) {
		ruNoExp
	} else {
		RuExp(foldi(prop, [], \i, ac, s ->
			if (i == dfm_i) concat(ac, [RuVar(ruIdDefiendum(), -1)]) else
			if (dfm_i < i && i < dfm_i + dfm_len) ac else
			if (i == dfs_i) concat(ac, [RuVar(ruIdDefiniens(), -1)]) else
			if (dfs_i < i && i < dfs_i + dfs_len) ac else
			concat(ac, [s])
		), -1)
	}
}

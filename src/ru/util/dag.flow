import ru/math;
import ru/util/src2s;

export {
	RuDAG(data : ?, children : [RuDAG<?>]);
	ruProofToDAG(proof : RuProof) -> RuDAG<int>;
	ruDAG2s(dag : RuDAG<?>, show_data : (?) -> string) -> string;
	ruProofDAG2s(dag : RuDAG<int>) -> string;
}

ruProofToDAG(proof : RuProof) -> RuDAG<int> {
	ruDoProofToDAG(proof.steps, lastElement(proof.steps, ruNoStep));
}

ruDoProofToDAG(steps : [RuStep], curr : RuStep) -> RuDAG<int> {
	RuDAG(curr.assertion, map(curr.refs, \ref -> 
		switch(ref) {
			RuStepRef(i,__): ruDoProofToDAG(steps, steps[i]);
			RuHypRef(i,__): RuDAG(-1, []);
		}
	));
}

ruDAG2s(dag : RuDAG<?>, show_data : (?) -> string) -> string {
	show_data(dag.data) + 
	if (length(dag.children) == 0) "" else {
		"{\n" +
			strIndent(strGlue(map(dag.children, \ch -> ruDAG2s(ch, show_data)), "\n"))
		+ "\n}";
	};
}

ruProofDAG2s(dag : RuDAG<int>) -> string {
	ruDAG2s(dag, \id -> if (id == -1) "hyp " else id2s(id) + " ");
}

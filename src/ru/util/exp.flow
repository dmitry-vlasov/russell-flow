import base/util/bits;
import base/util/long_array;

// At each change of any source struct/union bump ruCacheVersion in ru/cache/disk.

export {
	ruMakeRuleType(rule : int, type : int) -> int;
	ruMakeArityLen(arity : int, len : int) -> int;

	ruIdType2Id(rule_type : int) -> int;
	ruIdType2Type(rule_type : int) -> int;
	ruArityLen2Arity(arity_len : int) -> int;
	ruArityLen2Len(arity_len : int) -> int;

	ruExpNodeMake(rule: int, type: int, arity: int, len: int) -> Long;
	ruExpNodeSetLen(n: Long, len: int) -> Long;

	ruExpNodesIsVar(nodes: ArrayOfLong, i: int) -> bool;
	ruExpNodesGetId(nodes: ArrayOfLong, i: int) -> int;
	ruExpNodesGetType(nodes: ArrayOfLong, i: int) -> int;
	ruExpNodesGetArity(nodes: ArrayOfLong, i: int) -> int;
	ruExpNodesGetLen(nodes: ArrayOfLong, i: int) -> int;
}

ruMakeRuleType(rule : int, type : int) -> int {
	rule + bitShl(type, 20);
}

ruMakeArityLen(arity : int, len : int) -> int {
	arity + bitShl(len, 16);
}

ruIdType2IdInd(rule_type : int) -> int {
	bitAnd(rule_type, 0xFFFFF);
}

ruIdType2TypeInd(rule_type : int) -> int {
	bitUshr(rule_type, 20);
}

ruIdType2Id(rule_type : int) -> int {
	bitAnd(rule_type, 0xFFFFF);
}

ruIdType2Type(rule_type : int) -> int {
	bitUshr(rule_type, 20);
}

ruArityLen2Arity(arity_len : int) -> int {
	bitAnd(arity_len, 0xFFFF);
}

ruArityLen2Len(arity_len : int) -> int {
	bitUshr(arity_len, 16);
}

// Exp nodes - plain array of longs


ruExpNodeMake(rule: int, type: int, arity: int, len: int) -> Long {
	makeLong(arity + bitShl(len, 16), rule + bitShl(type, 20));
}

ruExpNodeSetLen(n: Long, len: int) -> Long {
	arity = bitAnd(longLow(n), 0xFFFF);
	makeLong(arity + bitShl(len, 16), longHigh(n));
}

ruExpNodesIsVar(nodes: ArrayOfLong, i: int) -> bool {
	ruExpNodesGetArity(nodes, i) == -1;
}
ruExpNodesGetId(nodes: ArrayOfLong, i: int) -> int {
	bitAnd(longHigh(getLongArray(nodes, i)), 0xFFFFF);
}
ruExpNodesGetType(nodes: ArrayOfLong, i: int) -> int {
	bitUshr(longHigh(getLongArray(nodes, i)), 20);
}
ruExpNodesGetArity(nodes: ArrayOfLong, i: int) -> int {
	bitAnd(longLow(getLongArray(nodes, i)), 0xFFFF);
}
ruExpNodesGetLen(nodes: ArrayOfLong, i: int) -> int {
	bitUshr(longLow(getLongArray(nodes, i)), 16);
}

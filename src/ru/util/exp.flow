import base/util/bits;
import base/util/long_array;

// At each change of any source struct/union bump ruCacheVersion in ru/cache/disk.

export {
	ruMakeRuleType(rule : int, type : int) -> int;
	ruMakeArityLen(arity : int, len : int) -> int;

	ruRuleType2Rule(rule_type : int) -> int;
	ruRuleType2Type(rule_type : int) -> int;
	ruArityLen2Arity(arity_len : int) -> int;
	ruArityLen2Len(arity_len : int) -> int;

	ruExpNodesPushFront(nodes: native, rule: int, type: int, arity: int, len: int) -> native;
	ruExpNodesPushBack(nodes: native, rule: int, type: int, arity: int, len: int) -> native;

	ruExpNodesIsVar(nodes: native, i: int) -> bool;
	ruExpNodesGetId(nodes: native, i: int) -> int;
	ruExpNodesGetType(nodes: native, i: int) -> int;
	ruExpNodesGetArity(nodes: native, i: int) -> int;
	ruExpNodesGetLen(nodes: native, i: int) -> int;
}

ruMakeRuleType(rule : int, type : int) -> int {
	rule + bitShl(type, 20);
}

ruMakeArityLen(arity : int, len : int) -> int {
	arity + bitShl(len, 16);
}

ruRuleType2RuleInd(rule_type : int) -> int {
	bitAnd(rule_type, 0xFFFFF);
}

ruRuleType2TypeInd(rule_type : int) -> int {
	bitUshr(rule_type, 20);
}

ruRuleType2Rule(rule_type : int) -> int {
	bitAnd(rule_type, 0xFFFFF);
}

ruRuleType2Type(rule_type : int) -> int {
	bitUshr(rule_type, 20);
}

ruArityLen2Arity(arity_len : int) -> int {
	bitAnd(arity_len, 0xFFFF);
}

ruArityLen2Len(arity_len : int) -> int {
	bitUshr(arity_len, 16);
}

// Exp nodes - plain array of longs

ruExpNodesPushFront(nodes: native, rule: int, type: int, arity: int, len: int) -> native {
	pushLongArrayFront(makeLong(arity + bitShl(len, 16), rule + bitShl(type, 20)), nodes);
}
ruExpNodesPushBack(nodes: native, rule: int, type: int, arity: int, len: int) -> native {
	pushLongArrayBack(nodes, makeLong(arity + bitShl(len, 16), rule + bitShl(type, 20)));
}

ruExpNodesIsVar(nodes: native, i: int) -> bool {
	ruExpNodesGetArity(nodes, i) == -1;
}
ruExpNodesGetId(nodes: native, i: int) -> int {
	bitAnd(longHigh(getLongArray(nodes, i)), 0xFFFFF);
}
ruExpNodesGetType(nodes: native, i: int) -> int {
	bitUshr(longHigh(getLongArray(nodes, i)), 20);
}
ruExpNodesGetArity(nodes: native, i: int) -> int {
	bitAnd(longLow(getLongArray(nodes, i)), 0xFFFF);
}
ruExpNodesGetLen(nodes: native, i: int) -> int {
	bitUshr(longLow(getLongArray(nodes, i)), 16);
}

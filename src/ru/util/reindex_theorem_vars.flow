import ru/subst;

export {
	ruReindexTheoremVars(th : RuTheorem, conf : RuConf) -> RuTheorem;
}

RuIndexedVar(
	var : RuVar,
	ind : int
);

ruReindexTheoremVars(th : RuTheorem, conf : RuConf) -> RuTheorem {
	th_vars = ruAssertion2Vars(th);
	make_indexed = \var_set, acc -> 
		foldSet(var_set, acc, \ac, v -> {
				pair = strSplit(v.name, "_");
				name = pair[0];
				ind = if (length(pair) == 1) -1 else s2i(pair[1]);
				setTree(ac, name, insertSet(lookupTreeDef(ac, name, makeSet()), RuIndexedVar(v, ind)));
			}
		);
	indexed = make_indexed(ruProof2Vars(th.proof), make_indexed(th_vars, makeTree()));
	re_indexed = mapTree(indexed,
		\vs -> {
			vars = set2array(vs);
			if (length(vars) == 1) {
				v = vars[0];
				[RuIndexedVar(v.var, -1)];
			} else {
				sorted = sortCustom(vars, \v -> if (containsSet(th_vars, v.var)) 0 else 1, true);
				mapi(sorted, \i, v -> RuIndexedVar(v with ind = i + 1));
			}
		}
	);
	renaming = foldTree(re_indexed, makeTree(), \name, vs, acc ->
		fold(vs, acc, \ac, v -> 
			setTree(ac, v.var, RuVar(v.var with 
				name = if (v.ind == -1) name else name + "_" + i2s(v.ind)
			))
		)
	);
	ruApplyRenaming2Theorem(renaming, th);
}

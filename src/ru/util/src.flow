import ru/cache/fileinfo;
import ru/math;
import ru/util/src2s;

export {
	ruTermIsVar(t : RuTerm) -> bool;
	ruArity(a : RuAssertion) -> int;
	ruIsVar(e : RuExp) -> bool;
	ruIsConst(e : RuExp) -> bool;
	ruExp2Var(e : RuExp) -> Maybe<RuVar>;
	ruExp2Const(e : RuExp) -> Maybe<Pair<int, int>>;
	ruDeclKind(d : RuDecl) -> string;
	ruDecl2LspSymbolKind(decl : RuDecl) -> int;

	ruDeclIsLang(d : RuDecl) -> bool;
	ruDeclIsAssertion(d : RuDecl) -> bool;
	ruDeclIsConst(d : RuDecl) -> bool;
	ruDeclIsType(d : RuDecl) -> bool;
	ruDeclIsRule(d : RuDecl) -> bool;
	ruDeclIsTheorem(d : RuDecl) -> bool;
	ruDeclIsAxiom(d : RuDecl) -> bool;
	ruDeclIsDef(d : RuDecl) -> bool;
	
	ruSetDeclPos(d : RuDecl, pos : int) -> RuDecl;

	ruDecl2Lang(d : RuDecl) -> Maybe<RuLangDecl>;
	ruDecl2Assertion(d : RuDecl) -> Maybe<RuAssertion>;
	ruDecl2Theorem(d : RuDecl) -> Maybe<RuTheorem>;
	ruDecl2Axiom(d : RuDecl) -> Maybe<RuAxiom>;
	ruDecl2Def(d : RuDecl) -> Maybe<RuDef>;

	ruExp2Vars(exp : RuExp) -> Set<RuVar>;
	ruExpContainsVar(exp : RuExp, v : RuVar) -> bool;
	ruAssertion2Vars(ass : RuAssertion) -> Set<RuVar>;
	ruProof2Vars(proof : RuProof) -> Set<RuVar>;
	
	ruSuperTypeName(super : int, infer : int) -> int;
	ruDeclPreceeds(less : RuDecl, greater : RuDecl, imported_map : Tree<int, Set<int>>) -> bool;
	
	ruPos(x : RuPositioned) -> int;
	ruPositionedKind(p : RuPositioned) -> string;
	ruPositioned2s(p : RuPositioned) -> string;
	ruClearSourceProofs(src : RuSource) -> RuSource;

	ruRef2StepRef(rf : RuRef) -> Maybe<RuStepRef>;
	ruRef2HypRef(rf : RuRef) -> Maybe<RuHypRef>;
	ruStep2StepRefs(step : RuStep) -> [RuStepRef];
	ruStep2HypRefs(step : RuStep) -> [RuHypRef];

	ruDeclPlace(decl : RuDecl, env : RuEnv) -> RuPlace;
	ruIsTrivialSource(source : RuSource) -> bool;

	ruAssertionDirectDependencies(ass : RuAssertion) -> [int];
	ruProofDirectDependencies(proof : RuProof) -> [int];
	ruAssertionProofSize(ass : RuAssertion) -> int;
	ruProofSize(proof : RuProof) -> int;

	ruTheoremIsProved(th : RuTheorem) -> bool;
	ruProofIsComplete(proof : RuProof) -> bool;
}

ruTermIsVar(t : RuTerm) -> bool {
	length(t.nodes) == 1 && 
	switch (t.nodes[0]) { 
		RuVar(__,__): true; 
		default: false 
	}
}

ruArity(a : RuAssertion) -> int {
	length(a.stat.hyps);
}

ruIsVar(e : RuExp) -> bool {
	length(e.nodes) == 1 && 
	switch (e.nodes[0]) { 
		RuVar(__,__): true; 
		default: false 
	}
}

ruExp2Var(e : RuExp) -> Maybe<RuVar> {
	if (length(e.nodes) != 1) None() else {
		n = e.nodes[0];
		switch (n) { 
			RuVar(__,__): Some(n); 
			default: None(); 
		}
	}
}

ruIsConst(e : RuExp) -> bool {
	length(e.nodes) == 1 && 
	switch (e.nodes[0]) { 
		RuVar(__,__): false; 
		RuRuleNode(id,__, arity, len): 
			arity == 0 && len == 1;
	}
}

ruExp2Const(e : RuExp) -> Maybe<Pair<int, int>> {
	if (length(e.nodes) != 1) None() else {
		switch (e.nodes[0]) { 
			RuVar(__,__): None(); 
			RuRuleNode(rule, type, arity, len): 
				if (arity == 0 && len == 1) Some(Pair(rule, type)) else None();
		}
	}
}

ruExp2Vars(exp : RuExp) -> Set<RuVar> {
	fold(exp.nodes, makeSet(), \acc, n ->
		switch (n) {
			RuRuleNode(__,__,__,__): acc;
			RuVar(__,__): insertSet(acc, n);
		}
	)
}

ruExpContainsVar(exp : RuExp, v : RuVar) -> bool {
	exists(exp.nodes, \n ->
		switch (n) {
			RuVar(__,__): n == v;
			default: false;
		}
	);
}

ruAssertion2Vars(ass : RuAssertion) -> Set<RuVar> {
	fold(ass.stat.hyps, ruExp2Vars(ass.stat.prop), \acc, h ->
		mergeSets(acc, ruExp2Vars(h.expr))
	)
}

ruProof2Vars(proof : RuProof) -> Set<RuVar> {
	fold(proof.steps, makeSet(), \acc, step ->
		mergeSets(acc, ruExp2Vars(step.expr))
	)
}

ruDeclKind(d : RuDecl) -> string {
	switch (d) {
		RuConst(__,__,__):      "const";
		RuType(__,__):          "type";
		RuRule(__,__,__):       "rule";
		RuAxiom(__,__):         "axiom";
		RuDef(__,__,__,__):     "def";
		RuTheorem(__,__,__,__): "theorem";
	}
}

ruDecl2LspSymbolKind(decl : RuDecl) -> int {
	switch (decl) {
		RuConst(__,__,__):      lookupTreeDef(lspSymbolKindName2id, "Object", 0);
		RuType(__,__):          lookupTreeDef(lspSymbolKindName2id, "Enum", 0);
		RuRule(__,__,__):       lookupTreeDef(lspSymbolKindName2id, "Variable", 0);
		RuAxiom(__,__):         lookupTreeDef(lspSymbolKindName2id, "Interface", 0);
		RuTheorem(__,__,__,__): lookupTreeDef(lspSymbolKindName2id, "Function", 0)
		RuDef(__,__,__,__):     lookupTreeDef(lspSymbolKindName2id, "Method", 0);
	}
}

ruDeclIsLang(decl : RuDecl) -> bool {
	switch (decl) {
		RuConst(__,__,__):      true;
		RuType(__,__):          true;
		RuRule(__,__,__):       true;
		RuAxiom(__,__):         false;
		RuTheorem(__,__,__,__): false;
		RuDef(__,__,__,__):     false;
	}
}

ruDeclIsConst(d : RuDecl) -> bool {
	switch (d) {
		RuConst(__,__,__): true;
		default: false;
	}
}

ruDeclIsType(d : RuDecl) -> bool {
	switch (d) {
		RuType(__,__): true;
		default: false;
	}
}

ruDeclIsRule(d : RuDecl) -> bool {
	switch (d) {
		RuRule(__,__,__): true;
		default: false;
	}
}

ruDeclIsAssertion(d : RuDecl) -> bool {
	switch (d) {
		RuAssertion(): true;
		default: false;
	}
}

ruDeclIsTheorem(d : RuDecl) -> bool {
	switch (d) {
		RuTheorem(__,__,__,__): true;
		default: false;
	}
}

ruDeclIsAxiom(d : RuDecl) -> bool {
	switch (d) {
		RuAxiom(__,__): true;
		default: false;
	}
}

ruDeclIsDef(d : RuDecl) -> bool {
	switch (d) {
		RuDef(__,__,__,__): true;
		default: false;
	}
}

ruSetDeclPos(d : RuDecl, pos : int) -> RuDecl {
	switch (d) {
		RuConst(info,__,__):      RuConst(d with info = RuDeclInfo(info with pos = pos));
		RuType(info,__):          RuType(d with info = RuDeclInfo(info with pos = pos));
		RuRule(info,__,__):       RuRule(d with info = RuDeclInfo(info with pos = pos));
		RuAxiom(info,__):         RuAxiom(d with info = RuDeclInfo(info with pos = pos));
		RuDef(info,__,__,__):     RuDef(d with info = RuDeclInfo(info with pos = pos));
		RuTheorem(info,__,__,__): RuTheorem(d with info = RuDeclInfo(info with pos = pos));
	}
}

ruDecl2Lang(d : RuDecl) -> Maybe<RuLangDecl> {
	switch (d) {
		RuConst(__,__,__):      Some(d);
		RuType(__,__):          Some(d);
		RuRule(__,__,__):       Some(d);
		RuAxiom(__,__):         None();
		RuTheorem(__,__,__,__): None();
		RuDef(__,__,__,__):     None();
	}
}

ruDecl2Assertion(d : RuDecl) -> Maybe<RuAssertion> {
	switch (d) {
		RuAxiom(__,__):         Some(d);
		RuDef(__,__,__,__):     Some(d);
		RuTheorem(__,__,__,__): Some(d);
		default: None()
	}
}

ruDecl2Theorem(d : RuDecl) -> Maybe<RuTheorem> {
	switch (d) {
		RuTheorem(__,__,__,__): Some(d);
		default: None()
	}
}

ruDecl2Axiom(d : RuDecl) -> Maybe<RuAxiom> {
	switch (d) {
		RuAxiom(__,__): Some(d);
		default: None()
	}
}

ruDecl2Def(d : RuDecl) -> Maybe<RuDef> {
	switch (d) {
		RuDef(__,__,__,__): Some(d);
		default: None()
	}
}

ruSuperTypeName(super : int, infer : int) -> int {
	s2id(id2s(infer) + "-" + id2s(super));
}

ruDeclPreceeds(less : RuDecl, greater : RuDecl, imported_map : Tree<int, Set<int>>) -> bool {
	if (less.info.src == greater.info.src) {
		less.info.pos < greater.info.pos;
	} else {
		containsSet(lookupTreeDef(imported_map, greater.info.src, makeSet()), less.info.src);
	}
}

ruPos(p : RuPositioned) -> int {
	switch (p) {
		RuImport(__, pos):          pos;
		RuConst(info,__,__):        info.pos;
		RuType(info,__):            info.pos;
		RuRule(info,__,__):         info.pos;
		RuAxiom(info,__):           info.pos;
		RuDef(info,__,__,__):       info.pos;
		RuTheorem(info,__,__,__):   info.pos;
		RuComment(__,__,pos):       pos;
		RuStep(__,__,__,__,__,pos): pos;
		RuExp(__,pos):              pos;
		RuHyp(__,__,pos):           pos;
		RuProof(__,__, pos):        pos;
		RuTerm(__,__,pos):          pos;
	}
}

ruPositionedKind(p : RuPositioned) -> string {
	switch (p) {
		RuImport(__,__):           "import";
		RuConst(__,__,__):         "const";
		RuType(__,__):             "type";
		RuRule(__,__,__):          "rule";
		RuAxiom(__,__):            "axiom";
		RuDef(__,__,__,__):        "def";
		RuTheorem(__,__,__,__):    "theorem";
		RuComment(__,__,__):       "comment";
		RuStep(__,__,__,__,__,__): "step";
		RuExp(__,__):              "exp";
		RuHyp(__,__,__):           "hyp";
		RuProof(__,__,__):         "proof";
		RuTerm(__,__,__):          "term";
	}
}

ruPositioned2s(p : RuPositioned) -> string {
	switch (p) {
		RuImport(id,__):             "import " + id2s(id);
		RuConst(info,__,__):         "const " + id2s(info.id);
		RuType(info,__):             "type " + id2s(info.id);
		RuRule(info,__,__):          "rule " + id2s(info.id);
		RuAxiom(info,__):            "axiom " + id2s(info.id);
		RuDef(info,__,__,__):        "def " + id2s(info.id);
		RuTheorem(info,__,__,__):    "theorem " + id2s(info.id);
		RuComment(text,__,__):       "comment";
		RuStep(ind,__,__,__,__,__):  "step " + i2s(ind);
		RuExp(__,__):                "exp";
		RuHyp(__,__,__):             "hyp";
		RuProof(__,__,__):           "proof";
		RuTerm(__,__,__):            "term";
	}
}

ruClearSourceProofs(src : RuSource) -> RuSource {
	RuSource(src with 
		decls = map(src.decls, \decl -> 
			switch (decl) {
				RuTheorem(__,__,__,proof): RuTheorem(decl with proof = ruNoProof);
				default: decl;
			}
		)
	);
}

ruRef2StepRef(rf : RuRef) -> Maybe<RuStepRef> {
	switch (rf) {
		RuStepRef(__): Some(rf);
		default: None();
	}
}

ruRef2HypRef(rf : RuRef) -> Maybe<RuHypRef> {
	switch (rf) {
		RuHypRef(__): Some(rf);
		default: None();
	}
}

ruStep2StepRefs(step : RuStep) -> [RuStepRef] {
	filtermap(step.refs, ruRef2StepRef);
}

ruStep2HypRefs(step : RuStep) -> [RuHypRef] {
	filtermap(step.refs, ruRef2HypRef);
}

ruDeclPlace(decl : RuDecl, env : RuEnv) -> RuPlace {
	switch (ruFileInfoCacheGet(decl.info.src)) {
		Some(info): {
			RuPlace(info.path, decl.info.pos);
		}
		None(): {
			env.out.onError("Source: '" + id2s(decl.info.src) + "' is not cached", []);
			RuPlace(id2s(decl.info.src), decl.info.pos);
		}
	}
}

ruIsTrivialSource(src : RuSource) -> bool {
	forall(src.decls, \decl -> 
		switch (decl) {
			RuComment(__,__,__): true;
			default: false;
		}
	);
}

ruAssertionDirectDependencies(ass : RuAssertion) -> [int] {
	switch (ass) {
		RuTheorem(__,__,__,proof): ruProofDirectDependencies(proof);
		default: [];
	}
}

ruProofDirectDependencies(proof : RuProof) -> [int] {
	fold(proof.steps, [], \acc, step ->
		if (step.assertion == ruStepLemma) {
			concat(acc, ruProofDirectDependencies(step.proof));
		} else if (step.assertion == ruStepProblem) {
			acc;
		} else {
			concat(acc, [step.assertion]);
		}
	);
}

ruAssertionProofSize(ass : RuAssertion) -> int {
	switch (ass) {
		RuTheorem(__,__,__,proof): ruProofSize(proof);
		default: 0;
	}
}

ruProofSize(proof : RuProof) -> int {
	fold(proof.steps, length(proof.steps), \acc, step ->
		if (step.assertion == ruStepLemma) {
			acc + ruProofSize(step.proof);
		} else {
			acc;
		}
	);
}

ruTheoremIsProved(th : RuTheorem) -> bool {
	ruProofIsComplete(th.proof);
}

ruProofIsComplete(proof : RuProof) -> bool {
	forall(proof.steps, \step -> 
		if (step.assertion == ruStepLemma) {
			ruProofIsComplete(step.proof);
		} else {
			step.assertion != ruStepProblem;
		}
	);
}
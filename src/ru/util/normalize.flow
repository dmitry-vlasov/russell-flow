import ru/util/src;

export {
	ruNormalizeTheoremVarsDisjs(th : RuTheorem) -> RuTheorem;
}

ruNormalizeTheoremVarsDisjs(th : RuTheorem) -> RuTheorem {
	all = ruMergeVarsDisjs(th.stat.vars, ruAllProofVarsDisjs(th.proof));
	th_vars_set = ruAssertion2Vars(th);
	th_vars = filterTree(all.vars, \__, v -> 
		containsSet(th_vars_set, v)
	);
	th_ds = filterSet(all.disjs, \d -> 
		containsSet(th_vars_set, d.v1) && containsSet(th_vars_set, d.v2)
	);
	RuTheorem(th with
		stat = RuStatement(th.stat with
			vars = RuVarsDisjs(th_vars, th_ds)
		),
		proof = ruNormalizeProofVarsDisjs(th.proof, th_vars_set, all)
	);
}

ruNormalizeProofVarsDisjs(proof : RuProof, outer : Set<RuVar>, all : RuVarsDisjs) -> RuProof {
	pr_vars_set = ruProof2Vars(proof);
	new_outer = mergeSets(outer, pr_vars_set);
	pr_vars = filterTree(all.vars, \__, v -> 
		!containsSet(outer, v) && containsSet(pr_vars_set, v)
	);
	pr_ds = filterSet(all.disjs, \d -> 
		!(containsSet(outer, d.v1) && containsSet(outer, d.v2)) &&
		containsSet(new_outer, d.v1) && containsSet(new_outer, d.v2)
	);
	RuProof(proof with
		vars = RuVarsDisjs(pr_vars, pr_ds),
		steps = map(proof.steps, \step -> 
			if (step.assertion != ruStepLemma) step else
			RuStep(step with proof = ruNormalizeProofVarsDisjs(step.proof, new_outer, all))
		)
	);
}

ruMergeVarsDisjs(vd1 : RuVarsDisjs, vd2 : RuVarsDisjs) -> RuVarsDisjs {
	RuVarsDisjs(
		mergeTree(vd1.vars, vd2.vars),
		mergeSets(vd1.disjs, vd2.disjs)
	);
}

ruAllProofVarsDisjs(proof : RuProof) -> RuVarsDisjs {
	fold(proof.steps, proof.vars, \acc, step ->
		if (step.assertion != ruStepLemma) acc else
		ruMergeVarsDisjs(acc, ruAllProofVarsDisjs(step.proof))
	);
}

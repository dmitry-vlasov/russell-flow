import ru/math;
import ru/util/decls;
import ru/util/sources;
import script/ast;

export {
	RuTarget ::= RuTargetMath, RuTargetSource, RuTargetDecl, RuTargetNone, RuTargetRandom;
		RuTargetNone();
		RuTargetMath(concurrent : bool); // if all decls may be processed concurrently or not
		RuTargetSource(source : RuSource, concurrent : bool);
		RuTargetDecl(decl : RuDecl);
		RuTargetRandom(decls : [RuDecl], ids : Set<int>, concurrent : bool);
	
	ruDetermineTarget(task : RuTask, math : RuMath, env : RuEnv) -> RuTarget;
	ruTargetDecls(target : RuTarget, math : RuMath, env : RuEnv) -> [RuDecl];
	ruTargetIsConcurrent(target : RuTarget) -> bool;
	ruTarget2s(target : RuTarget) -> string;

	ruTargetPredicate(target : RuTarget) -> (RuDecl) -> bool;

	ruProofLengthMeasure(decl : RuDecl) -> double;
	ruProofExpSizeMeasure(decl : RuDecl) -> double;
}

ruDetermineTarget(task : RuTask, math : RuMath, env : RuEnv) -> RuTarget {
	target0 = lookupTreeDef(task.args, "target", "");
	if (target0 == "") RuTargetNone() else {
		concurrent = !endsWith(target0, "-seq");
		target = if (concurrent) target0 else strLeft(target0, strlen(target0) - 4);
		if (ruVerbose(env.conf) > 2) {
			env.out.onMessage("determining target: '" + target + "'");
		}
		if (target == "all" || target == "all-seq") {
			RuTargetMath(concurrent);
		} else if (startsWith(target, "random-")) {
			size = s2i(strRight(target, 7));
			randomizer = randomGenerator(round(timestamp()));
			theorems = getTreeValues(ruDeclsTheorems(math.decls));
			decls = generate(0, size, \__ -> theorems[round(randomizer() * i2d(length(theorems)))]);
			ids = buildSet(map(decls, \d -> d.info.id));
			RuTargetRandom(decls, ids, concurrent);
		} else {
			target_id = s2id_(ruTrimPath(target, env.conf, ".ru"));
			switch (lookupTree(math.sources, target_id)) {
				Some(src): RuTargetSource(src, concurrent);
				None(): 
					switch (ruFindDecl(target_id, math.decls, env)) {
						Some(decl): RuTargetDecl(decl);
						None(): RuTargetNone();
					}
			}
		}
	}
}

ruTargetDecls(target : RuTarget, math : RuMath, env : RuEnv) -> [RuDecl] {
	switch (target) {
		RuTargetMath(__):           concatA(map(ruSourcesOrder(math.sources, env.out), \src -> src.decls));
		RuTargetSource(src,__):     src.decls;
		RuTargetDecl(decl):         [decl];
		RuTargetRandom(decls,__,__): decls;
		RuTargetNone(): [];
	}
}

ruTargetIsConcurrent(target : RuTarget) -> bool {
	switch (target) {
		RuTargetMath(c):         c;
		RuTargetSource(__,c):    c;
		RuTargetDecl(__):        false;
		RuTargetRandom(__,__,c): c;  
		RuTargetNone():          false;
	}
}

ruTarget2s(target : RuTarget) -> string {
	concurr = \c -> if (c) "" else "-seq";
	switch (target) {
		RuTargetMath(c):            "all" + concurr(c);
		RuTargetSource(src, c):     id2s(src.info.id) + concurr(c);
		RuTargetDecl(decl):         id2s(decl.info.id);
		RuTargetRandom(decls,__,c): "random-" + i2s(length(decls)) + concurr(c);
		RuTargetNone():             "";
	}
}

ruTargetPredicate(target : RuTarget) -> (RuDecl) -> bool {
	switch (target) {
		RuTargetMath(__):         \__ -> true;
		RuTargetSource(src,__):   \d -> d.info.src == src.info.id;
		RuTargetDecl(decl):       \d -> d.info.id == decl.info.id;
		RuTargetRandom(__,ids,c): \d -> containsSet(ids, d.info.id);
		RuTargetNone():           \__ -> false;
	}
}

ruProofLengthMeasure(decl : RuDecl) -> double {
	switch (decl) {
		RuTheorem(__,__,__,proof): i2d(length(proof.steps));
		default: 0.0;
	}
}

ruProofExpSizeMeasure(decl : RuDecl) -> double {
	switch (decl) {
		RuTheorem(__,__,__,proof): ruDoProofExpSizeMeasure(proof);
		default: 0.0;
	}
}

ruDoProofExpSizeMeasure(proof : RuProof) -> double {
	fold(proof.steps, 0.0, \acc, step ->
		acc + i2d(length(step.expr.nodes)) + ruDoProofExpSizeMeasure(step.proof)
	);
}

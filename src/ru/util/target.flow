import ru/math;
import script/script;

export {
	RuTarget ::= RuTargetMath, RuTargetSource, RuTargetAssertion;
		RuTargetMath();
		RuTargetSource(source : RuSource);
		RuTargetAssertion(assertion : RuDecl);
	
	ruDetermineTarget(task : ScTask, math : RuMath, conf : RuConf) -> Maybe<RuTarget>;
}

ruDetermineTarget(task : ScTask, math : RuMath, conf : RuConf) -> Maybe<RuTarget> {
	target0 = lookupTreeDef(task.args, "target", "");
	if (target0 == "") None() else {
		target = ruTrimPath(target0, conf, ".ru");
		//if (ruVerbose(conf) > 0) {
		//	conf.onMessage("repoving target: '" + target + "'");
		//}
		if (target == "all" || target == "1" || target == "math") {
			Some(RuTargetMath());
		} else {
			target_id = s2id(target);
			switch (lookupTree(math.sources, target_id)) {
				Some(src): Some(RuTargetSource(src));
				None(): 
					maybeMap(lookupTree(math.decls.assertions, target_id),
						\ass -> RuTargetAssertion(ass)
					);
			}
		}
	}
}
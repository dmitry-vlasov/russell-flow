import ru/util/src;

export {
	ruExtractLemmaFromProof(proof : RuProof, i : int, math : RuMath, env : RuEnv) -> RuProof;
	ruMergeLemmaIntoProof(proof : RuProof, i : int, math : RuMath, env : RuEnv) -> RuProof;
}

ruExtractLemmaFromProof(proof : RuProof, i : int, math : RuMath, env : RuEnv) -> RuProof {
	RuProof(proof with
		steps = ruExtractLemmaFromSteps(proof.steps, i, math, env)
	);
}

ruExtractLemmaFromSteps(steps : [RuStep], i : int, math : RuMath, env : RuEnv) -> [RuStep] {
	lemma = ruExtractLemmaBody(steps, i, math, env);
	outer_reindex = ruMakeLemmaOuterReindex(steps, i, lemma);
	final_steps = fold(steps, [], \acc, step ->
		if (step.ind == i) {
			lemma_step = ruReindexStep(RuStep(lemma.step with ind = length(acc)), outer_reindex);
			concat(acc, [lemma_step]);
		} else if (!containsSet(lemma.subproof, step)) {
			concat(acc, [ruReindexStep(step, outer_reindex)])
		} else {
			acc;
		}
	);
	//println("final_steps:\n" + ruSteps2s1(final_steps, math) + "\n");
	final_steps;
}

RuLemmaBody(
	step : RuStep,
	subproof : Set<RuStep>
);

ruExtractLemmaBody(steps : [RuStep], i : int, math : RuMath, env : RuEnv) -> RuLemmaBody {
	full_subproof1 = ruFindSubProof(steps, i, env);
	full_subproof = sortCustom(set2array(full_subproof1), \step -> step.ind, true);
	//println("ruTreefySteps1:\n" + ruSteps2s1(steps, math) + "\n");
	//println("i: " + i2s(i + 1));
	//println("full_subproof:\n" + ruSteps2s1(full_subproof, math) + "\n");
	other = set2array(differenceSets(buildSet(steps), buildSet(full_subproof)));
	//println("other:\n" + ruSteps2s1(other, math) + "\n");
	other_ref_inds = fold(other, makeSet(), \acc, step -> 
		fold(ruStep2StepRefs(step), acc,  \ac, rf -> insertSet(ac, rf.ind))
	);
	common_steps = filter(full_subproof, \step -> 
		step.ind != i && containsSet(other_ref_inds, step.ind)
	);
	//println("common_steps:\n" + ruSteps2s1(common_steps, math) + "\n");
	common_steps_ind = buildSet(map(common_steps, \step -> step.ind));
	transitive_common = for(buildSet(common_steps),
		\comm -> exists(set2array(comm), \step -> 
			exists(ruStep2StepRefs(step), \rf -> 
				!containsSet(comm, steps[rf.ind])
			)
		),
		\comm -> foldSet(comm, comm, \acc,step ->
			fold(ruStep2StepRefs(step), acc, \ac, rf ->
				insertSet(ac, steps[rf.ind])
			)
		)
	);
	//println("transitive_common:\n" + ruSteps2s1(set2array(transitive_common), math) + "\n");
	reduced_subproof = filter(full_subproof, \step -> !containsSet(transitive_common, step));
	subproof_hyp_premises = sortCustom(set2array(fold(reduced_subproof, makeSet(), \acc, step -> 
		fold(ruStep2HypRefs(step), acc, \ac, rf -> insertSet(ac, rf))
	)), \hyp -> hyp.ind, true);
	//println("reduced_subproof:\n" + ruSteps2s1(reduced_subproof, math) + "\n");
	//reduced_subproof_inds = buildSet(map(reduced_subproof, \step -> step.ind));

	other1 = set2array(differenceSets(buildSet(steps), buildSet(reduced_subproof)));
	other1_ref_inds = fold(other1, makeSet(), \acc, step -> 
		fold(ruStep2StepRefs(step), acc,  \ac, rf -> insertSet(ac, rf.ind))
	);

	subproof_step_premises = filter(full_subproof, \step -> 
		step.ind != i && containsSet(other1_ref_inds, step.ind)
	);
	lemma_reindex = ruMakeLemmaInnerReindex(
		reduced_subproof,
		subproof_step_premises,
		subproof_hyp_premises,
	);
	RuLemmaBody(
		RuStep(steps[i] with
			ind = -1,
			assertion = -1,
			refs = concat(
				subproof_hyp_premises,
				map(subproof_step_premises, \st -> RuStepRef(st.ind))
			),
			proof = RuProof(makeTree(), makeSet(), 
				map(reduced_subproof, \st -> ruReindexStep(st, lemma_reindex)), -1
			),
			pos = -1
		),
		buildSet(reduced_subproof)
	);
}

ruReindexStep(step : RuStep, reindex : Tree<RuRef, RuRef>) -> RuStep {
	RuStep(step with 
		ind = lookupTreeDef(reindex, RuStepRef(step.ind), RuStepRef(step.ind)).ind,
		refs = map(step.refs, \rf -> lookupTreeDef(reindex, rf, rf))
	)
}

ruMakeLemmaInnerReindex(subproof : [RuStep], stepPremises : [RuStep], hypPremises : [RuHypRef]) -> Tree<RuRef, RuRef> {
	hypsReindex = fold(hypPremises, makeTree(), \acc, rf -> 
		setTree(acc, rf, RuHypRef(sizeTree(acc)))
	);
	premiseReindex = fold(stepPremises, hypsReindex, \acc, step -> 
		setTree(acc, RuStepRef(step.ind), RuHypRef(sizeTree(acc)))
	);
	stepReindex = fold(subproof, makeTree(), \acc, step -> 
		setTree(acc, RuStepRef(step.ind), RuStepRef(sizeTree(acc)))
	);
	mergeTree(premiseReindex, stepReindex);
}

ruMakeLemmaOuterReindex(steps : [RuStep], i : int, lemma : RuLemmaBody) -> Tree<RuRef, RuRef> {
	fold(steps, makeTree(), \acc, step -> 
		if (step.ind != i && containsSet(lemma.subproof, step)) acc else
		setTree(acc, RuStepRef(step.ind), RuStepRef(sizeTree(acc)))
	);
}

ruFindSubProof(steps : [RuStep], i : int, env : RuEnv) -> Set<RuStep> {
	fold(ruStep2StepRefs(steps[i]), makeSet1(steps[i]), \acc, rf -> 
		mergeSets(acc, ruFindSubProof(steps, rf.ind, env))
	);
}

ruMergeLemmaIntoProof(proof : RuProof, i : int, math : RuMath, env : RuEnv) -> RuProof {
	if (i >= length(proof.steps)) proof else {
		step = proof.steps[i];
		subproof = step.proof.steps;
		if (length(subproof) == 0) proof else {
			inner_reindex1 = foldi(step.refs, makeTree(), \j, acc, rf -> 
				setTree(acc, RuHypRef(j), rf)
			);
			inner_reindex2 = foldi(subproof, inner_reindex1, \j, acc, __ ->
				setTree(acc, RuStepRef(j), RuStepRef(i + j))
			);
			outer_reindex = fold(enumFromTo(i, length(proof.steps) - 1), makeTree(), \acc, j -> 
				setTree(acc, RuStepRef(j), RuStepRef(j + length(subproof)))
			);
			//lemma_body = map(subproof, \st -> ruReindexStep(st, inner_reindex2));
			merged_steps = concat3(
				take(proof.steps, i),
				map(subproof, \st -> ruReindexStep(st, inner_reindex2)),
				map(tailFrom(proof.steps, i + 1), \st -> ruReindexStep(st, outer_reindex))
			);
			RuProof(proof with steps = merged_steps);
		}
	}
}

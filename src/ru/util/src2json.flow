import ru/util/exp2s;
import ru/util/src_base;
import ru/math;

export {
	ruVars2json(vars : Tree<int, RuVar>) -> Json;
	ruDisj2json(d : RuDisj) -> Json;
	ruDisjs2json(disjs : Set<RuDisj>) -> Json;
	ruMeta2json(meta : Set<int>) -> Json;
	ruSteps2json(steps : [RuStep], rules : Tree<int, RuRule>) -> Json;
	ru2json(a : RuAny, rules : Tree<int, RuRule>) -> Json;
}

ru2jsonWrapExp(a : RuAny, math : RuMath, wrap_exp : (string) -> Json) -> Json {
	ru2json(a, math.decls.lang.rules);
}

ruVar2json(var : RuVar) -> Json {
	JsonObject([
		Pair("id", JsonString(id2s(var.id))),
		Pair("type", JsonString(id2s(var.type))),
	]);
}

ruVars2json(vars : Tree<int, RuVar>) -> Json {
	JsonArray(map(getTreeValues(vars), ruVar2json));
}

ruDisj2json(d : RuDisj) -> Json {
	JsonObject([
		Pair("v1", ruVar2json(d.v1)),
		Pair("v2", ruVar2json(d.v2))
	]);
}

ruDisjs2json(disjs : Set<RuDisj>) -> Json {
	JsonArray(map(ruDisjs2Array(disjs), \vs ->
		JsonArray(map(vs, \v -> JsonString(id2s(v.id))))
	));
}

ruVarsDisjs2json(vd : RuVarsDisjs) -> Json {
	JsonObject([
		Pair("vars", ruVars2json(vd.vars)),
		Pair("disjs", ruDisjs2json(vd.disjs)),
	]);
}

ruMeta2json(meta : Set<int>) -> Json {
	JsonArray(map(set2array(meta), \v -> JsonString(id2s(v))));
}

ruExp2json(expr : RuExp, rules : Tree<int, RuRule>) -> Json {
	JsonObject([
		Pair("type", JsonString(id2s(ruExpType(expr)))),
		Pair("string", JsonString(ruExp2s(expr, rules))),
	]);
}

ruTerm2json(term : RuTerm) -> Json {
	JsonObject([
		Pair("type", JsonString(id2s(term.type))),
		Pair("string", JsonString(ruTerm2s(term))),
	]);
}

ruRef2json(rf : RuRef) -> Json {
	kind = switch (rf) {
		RuHypRef(i): "hyp";
		RuStepRef(i): "step";
	}
	JsonObject([
		Pair("kind", JsonString(kind)),
		Pair("ind", JsonDouble(i2d(rf.ind)))
	]);
}

ruRefs2json(refs : [RuRef]) -> Json {
	JsonArray(map(refs, ruRef2json));
}

ruHyp2json(hyp : RuHyp, rules : Tree<int, RuRule>) -> Json {
	JsonObject([
		Pair("ind", JsonDouble(i2d(hyp.ind))),
		Pair("exp", ruExp2json(hyp.expr, rules)),
	]);
}

ruHyps2json(hyps : [RuHyp], rules : Tree<int, RuRule>) -> Json {
	JsonArray(map(hyps, \hyp -> ruHyp2json(hyp, rules)));
}

ruComment2json(comm : RuComment) -> Json {
	JsonObject(filtermap([
		if (comm.text == "") None() else Some(Pair("text", JsonString(comm.text))),
		if (comm.annotation == JsonNull()) None() else Some(Pair("annotation", comm.annotation)),
	], idfn));
}

ruComments2json(comms : [RuComment]) -> Json {
	JsonArray(map(comms, ruComment2json));
}

ruImport2json(imp : RuImport) -> Json {
	JsonString(id2s(imp.id));
}

ruImports2json(imps : [RuImport]) -> Json {
	JsonArray(map(imps, ruImport2json));
}

ruConst2json(const : RuConst) -> Json {
	JsonObject(filtermap([
		Some(Pair("kind", JsonString("const"))),
		if (const.info.comments == []) None() else Some(Pair("comments", ruComments2json(const.info.comments))),
		Some(Pair("symbol", JsonString(id2s(const.info.id)))),
		if (const.ascii == -1) None() else Some(Pair("ascii", JsonString(id2s(const.ascii)))),
		if (const.latex == -1) None() else Some(Pair("latex", JsonString(id2s(const.latex)))),
	], idfn));
}

ruType2json(type : RuType) -> Json {
	JsonObject(filtermap([
		Some(Pair("kind", JsonString("type"))),
		if (type.info.comments == []) None() else Some(Pair("comments", ruComments2json(type.info.comments))),
		Some(Pair("id", JsonString(id2s(type.info.id)))),
		Some(Pair("supers", JsonArray(map(type.supers, \super -> 
			JsonString(id2s(super))
		))))
	], idfn));
}

ruRule2json(rule : RuRule) -> Json {
	JsonObject(filtermap([
		Some(Pair("kind", JsonString("rule"))),
		if (rule.info.comments == []) None() else Some(Pair("comments", ruComments2json(rule.info.comments))),
		Some(Pair("id", JsonString(id2s(rule.info.id)))),
		Some(Pair("vars", ruVars2json(rule.vars))),
		Some(Pair("term", ruTerm2json(rule.term))),
	], idfn));
}

ruAxiom2json(ax : RuAxiom, rules : Tree<int, RuRule>) -> Json {
	JsonObject(filtermap([
		Some(Pair("kind", JsonString("axiom"))),
		if (ax.info.comments == []) None() else Some(Pair("comments", ruComments2json(ax.info.comments))),
		Some(Pair("id", JsonString(id2s(ax.info.id)))),
		Some(Pair("vars", ruVarsDisjs2json(ax.stat.vars))),
		Some(Pair("hyps", ruHyps2json(ax.stat.hyps, rules))),
		Some(Pair("prop", ruExp2json(ax.stat.prop, rules))),
	], idfn));
}

ruDef2json(def : RuDef, rules : Tree<int, RuRule>) -> Json {
	prop = ruMakeDefProp(def.stat.prop.nodes, def.defm.nodes, def.defs.nodes);
	JsonObject(filtermap([
		Some(Pair("kind", JsonString("def"))),
		if (def.info.comments == []) None() else Some(Pair("comments", ruComments2json(def.info.comments))),
		Some(Pair("id", JsonString(id2s(def.info.id)))),
		Some(Pair("vars", ruVarsDisjs2json(def.stat.vars))),
		Some(Pair("hyps", ruHyps2json(def.stat.hyps, rules))),
		Some(Pair("prop", ruExp2json(def.stat.prop, rules))),
		Some(Pair("defiendum", ruExp2json(def.defm, rules))),
		Some(Pair("definiens", ruExp2json(def.defs, rules))),
		Some(Pair("definition", ruExp2json(prop, rules))),
	], idfn));
}

ruTheorem2json(th : RuTheorem, rules : Tree<int, RuRule>) -> Json {
	JsonObject(filtermap([
		Some(Pair("kind", JsonString("theorem"))),
		if (th.info.comments == []) None() else Some(Pair("comments", ruComments2json(th.info.comments))),
		Some(Pair("id", JsonString(id2s(th.info.id)))),
		Some(Pair("vars", ruVarsDisjs2json(th.stat.vars))),
		if (isEmptySet(th.meta)) None() else Some(Pair("meta", ruMeta2json(th.meta))),
		Some(Pair("hyps", ruHyps2json(th.stat.hyps, rules))),
		Some(Pair("prop", ruExp2json(th.stat.prop, rules))),
		Some(Pair("proof", ruProof2json(th.proof, rules))),
	], idfn));
}

ruProof2json(proof : RuProof, rules : Tree<int, RuRule>) -> Json {
	JsonObject([
		Pair("vars", ruVarsDisjs2json(proof.vars)),
		Pair("steps", ruSteps2json(proof.steps, rules)),
	]);
}

ruStep2json(step : RuStep, rules : Tree<int, RuRule>) -> Json {
	JsonObject(filtermap([
		Some(Pair("ind", JsonDouble(i2d(step.ind)))),
		Some(Pair("assertions", JsonString(
			if (step.assertion == ruStepLemma) "lemma" else if (step.assertion == ruStepProblem) "?" else id2s(step.assertion))
		)),
		Some(Pair("refs", ruRefs2json(step.refs))),
		Some(Pair("exp", ruExp2json(step.expr, rules))),
		if (step.assertion == ruStepLemma) Some(Pair("proof", ruProof2json(step.proof, rules))) else None()
	], idfn));
}

ruSteps2json(steps : [RuStep], rules : Tree<int, RuRule>) -> Json {
	JsonArray(map(steps, \step -> ruStep2json(step, rules)));
}

ruDecls2json(decls : [RuDecl], rules : Tree<int, RuRule>) -> Json {
	JsonArray(map(decls, \decl -> ru2json(decl, rules)));
}

ruSource2json(src : RuSource, rules : Tree<int, RuRule>) -> Json {
	JsonObject([
		Pair("id", JsonString(id2s(src.info.id))),
		Pair("imports", ruImports2json(src.imports)),
		Pair("comments", ruComments2json(src.comments)),
		Pair("decls", ruDecls2json(src.decls, rules)),
	]);
}

ru2json(a : RuAny, rules : Tree<int, RuRule>) -> Json {
	switch (a) {
		RuSource(__,__,__,__):  ruSource2json(a, rules);
		RuImport(__,__):        ruImport2json(a);
		RuConst(__,__,__):      ruConst2json(a);
		RuType(__,__):          ruType2json(a);
		RuRule(__,__,__):       ruRule2json(a);
		RuAxiom(__,__):         ruAxiom2json(a, rules);
		RuDef(__,__,__,__):     ruDef2json(a, rules);
		RuTheorem(__,__,__,__): ruTheorem2json(a, rules);
		RuHyp(__,__,__):        ruHyp2json(a, rules);
		RuProof(__,__,__):      ruProof2json(a, rules);
		RuStep(__,__,__,__,__,__): ruStep2json(a, rules);
		RuVarsDisjs(__,__):      ruVarsDisjs2json(a);
		RuComment(__,__,__): ruComment2json(a);
		RuDisj(__,__):       ruDisj2json(a);
		RuExp(__,__):        ruExp2json(a, rules);
		RuHypRef(__):        ruRef2json(a);
		RuStepRef(__):       ruRef2json(a);
		RuVar(id,__):        ruVar2json(a);
		RuTerm(__,__,__):    ruTerm2json(a);
		RuConstRef(id):      JsonString(id2s(id));
		RuRuleNode(r,__,__,__): JsonString(id2s(r));
	}
}

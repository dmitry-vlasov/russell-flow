import ru/unify/index;
import ru/prover/util;

export {
	RuAssertionMatch(
		sub : Tree<RuVar, RuExp>,
		hypsMap : Tree<int, int>
	);
	ruMatchAssertions(a1 : RuAssertion, a2 : RuAssertion, math : RuMath, conf : RuConf) -> Maybe<RuAssertionMatch>;
}

ruMatchAssertions(a1 : RuAssertion, a2 : RuAssertion, math : RuMath, conf : RuConf) -> Maybe<RuAssertionMatch> {
	a2c = ruConstAssertion(a2, math);
	a2_hyps = fold(a2c.const.hyps, ruMakeIndex(), \acc, hyp -> ruSetIndex(hyp.expr, hyp, acc));
	a1_hyps = sortCustom(a1.hyps, \hyp -> sizeSet(ruExp2Vars(hyp.expr.nodes)), false);
	ret = maybeMap(
		maybeBind(ruUnifyExps([a1.prop, a2c.const.prop], makeTree(), math, conf),
			\theta -> ruMatchAssertionHyps(a1_hyps, a2_hyps, 0, RuAssertionMatch(theta, makeTree()), a2c.env.math, conf)
		),
		\match -> RuAssertionMatch(match with sub = ruTransformSubst(match.sub, a2c.env.unconst))
	);
	maybeApply(ret, \m -> ruCheckAssertionsMatch(a1, a2, m, math, conf));
	ret
}

ruMatchAssertionHyps(
	a1_hyps : [RuHyp], 
	a2_hyps : RuIndex<RuHyp>, 
	i : int, 
	match : RuAssertionMatch, 
	math : RuMath, 
	conf : RuConf
) -> Maybe<RuAssertionMatch> {
	if (i == length(a1_hyps)) Some(match) else {
		fold(
			ruUnifyIndex(a1_hyps[i].expr, a2_hyps, match.sub, math, conf), 
			None(), \m, unif ->
			if (isSome(m)) m else {
				ruMatchAssertionHyps(
					a1_hyps, a2_hyps, i + 1, 
					RuAssertionMatch(unif.sub, setTree(match.hypsMap, a1_hyps[i].ind, unif.data.ind)), 
					math, conf
				);
			}
		);
	}
}

ruAssertionsMatch2s(match : RuAssertionMatch, math : RuMath) -> string {
	"sub:\n" + ruSubst2s(match.sub, math) + "\n" +
	"hyps map: " + strGlue(map(tree2pairs(match.hypsMap), \p -> i2s(p.first) + " => " + i2s(p.second)), ", ");
}

ruCheckAssertionsMatch(a1 : RuAssertion, a2 : RuAssertion, match : RuAssertionMatch, math : RuMath, conf : RuConf) -> void {
	check_exps_are_eq = \e1, e2 -> {
		e1_prime = ruApplySubst(e1, match.sub);
		if (e2.nodes != e1_prime.nodes) {
			conf.onError("Error: matched propositions doesn't coincide:", []);
			conf.onError(ru2s(e2, math.rules), []);
			conf.onError(ru2s(e1_prime, math.rules), []);
			conf.onError(ruExpRPN2s(e2.nodes), []);
			conf.onError(ruExpRPN2s(e1_prime.nodes), []);
			quit(-1);
		}
	}
	if (sizeTree(match.hypsMap) != length(a1.hyps)) {
		conf.onError("Error: matched hyps lentgh doesn't match: " + i2s(sizeTree(match.hypsMap)) + " != " + i2s(length(a1.hyps)), []);
		quit(-1);
	}
	check_exps_are_eq(a1.prop, a2.prop);
	iteri(a1.hyps, \i, hyp ->
		check_exps_are_eq(hyp.expr, a2.hyps[lookupTreeDef(match.hypsMap, i, -1)].expr)
	);
}

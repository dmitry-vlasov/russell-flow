import ru/unify/index;
import ru/prover/util;
import ru/unify/prod;

export {
	RuAssertionMatch(
		less : RuAssertion, // The less general assertion
		more : RuAssertion, // The more general assertion
		sub : RuSubst, // Substitution, which makes a less general from more general
		hypsMap : [int]   // The hypothesis map: for each more hypothesis the index of corresponding less hyp.
	);
	ruMatchAssertions(a1 : RuAssertion, a2 : RuAssertion, math : RuMath, env : RuEnv) -> Maybe<RuAssertionMatch>;

	// Replace all occurrences of less with more general
	ruReplaceMatch(match : RuAssertionMatch, math : RuMath, name2thms : Tree<int, Set<int>>, env : RuEnv) -> RuMath;
	ruAssertionsMatch2s(match : RuAssertionMatch, math : RuMath) -> string;
}

ruMatchAssertions(a1 : RuAssertion, a2 : RuAssertion, math : RuMath, env : RuEnv) -> Maybe<RuAssertionMatch> {
	a2c = ruConstAssertion(a2, math);
	a2_hyps = fold(a2c.const.stat.hyps, ruMakeIndex(), \acc, hyp -> ruSetIndex(hyp.expr, hyp, acc));
	a1_hyps = a1.stat.hyps;
	time_limit = 10000.0;
	timer = ruMakeLimitedTimer(time_limit);
	check_disj = \s -> {
		unc_s = ruTransformSubst(s, a2c.env.unconst);
		switch (ruComputeDisjs(unc_s, a1.stat.vars.disjs, RuDisjsInherent(makeSet()))) {
			RuDisjsInherent(disjs): ruIsSubset(disjs, a2.stat.vars.disjs);
			RuDisjViolation(__,__): false;
		}
	}
	ret = maybeMap(
		maybeBind(ruUnifyExps([a1.stat.prop, a2c.const.stat.prop], ruEmptySubst, math, env),
			\sub -> {
				if (length(a1_hyps) == 0) Some(RuAssertionMatch(a2, a1, sub, [])) else {
					hyps_prod = map(a1_hyps, \h -> {
						hyp_unified = ruUnifyIndex(
							ruApplySubst(h.expr, sub), a2_hyps, sub, 
							math, env, ruMakeTaskTimer(time_limit / i2d(ruArity(a1)))
						);
						map(hyp_unified, \un -> RuSubData(un.sub, un.data));
					});
					sub_unified = ruUnifySubsProd(hyps_prod, \__-> true, RuTaskTimer(timer, ref false), math, env);
					findmap(sub_unified, \sd -> {
						if (!check_disj(sd.sub)) {
							None();
						} else {
							Some(RuAssertionMatch(a2, a1, sd.sub, 
								map(a1.stat.hyps, \h -> sd.data[h.ind].ind)
							))
						}
					});
				}
			}
		),
		\match -> {
			match_sub = ruTransformSubst(match.sub, a2c.env.unconst);
			RuAssertionMatch(match with sub = ruReduceSubst(match_sub));
		}
	);
	maybeMap(ret, \match -> ruCheckAssertionsMatch(match, math, env));
	ret
}

ruAssertionsMatch2s(match : RuAssertionMatch, math : RuMath) -> string {
	"sub:\n" + strIndent(ruSubst2s(match.sub, math)) + "\n" +
	"hyps map: [" + strGlue(map(match.hypsMap, i2s), ", ") + "]";
}

ruCheckAssertionsMatch(match : RuAssertionMatch, math : RuMath, env : RuEnv) -> void {
	a1 = match.more;
	a2 = match.less; 
	check_exps_are_eq = \e1, e2, i -> {
		e1_prime = ruApplySubst(e1, match.sub);
		if (e2.nodes != e1_prime.nodes) {
			ruCrash(
				"Error: matched propositions doesn't coincide:\n" +
				"more:\n" + ruDeclShort2s(match.more, math) + "\n" +
				"less:\n" + ruDeclShort2s(match.less, math) + "\n" +
				"match:\n" + strIndent(ruAssertionsMatch2s(match, math)) + "\n" +
				(if (i < 0) "" else "hyp ind: " + i2s(i) + "\n") +
				ru2s(e2, math) + "\n" +
				ru2s(e1_prime, math) + "\n" +
				ruExpRPN2s(e2) + "\n" +
				ruExpRPN2s(e1_prime) + "\n"
			);
		}
	}
	if (length(match.hypsMap) != ruArity(a1)) {
		ruCrash("Error: matched hyps lentgh doesn't match: " + i2s(length(match.hypsMap)) + " != " + i2s(ruArity(a1)));
	}
	check_exps_are_eq(a1.stat.prop, a2.stat.prop, -1);
	iter(a1.stat.hyps, \hyp ->
		check_exps_are_eq(hyp.expr, a2.stat.hyps[match.hypsMap[hyp.ind]].expr, hyp.ind)
	);
}

ruReplaceMatch(match : RuAssertionMatch, math : RuMath, name2uses : Tree<int, Set<int>>, env : RuEnv) -> RuMath {
	uses = filtermap(
		set2array(lookupTreeDef(name2uses, match.less.info.id, makeSet())),
		\id -> maybeBind(lookupTree(math.decls.assertions, id), ruDecl2Theorem)
	);
	fold(uses, math, \acc, th -> {
		if (ruVerbose(env.conf) > 2) {
			env.out.onMessage("\t\treplacing less general '" + id2s(match.less.info.id) + "' in theorem '" + id2s(th.info.id) + "'");
		}
		new_proof = RuProof(th.proof with 
			steps = map(th.proof.steps, \step ->
				if (step.assertion != match.less.info.id) step else {
					if (ruVerbose(env.conf) > 3) {
						env.out.onMessage("\t\t\treplacing step " + i2s(step.ind + 1) + " from '" + id2s(step.assertion) + "' to '" + id2s(match.more.info.id) + "'");
					}
					RuStep(step with 
						assertion = match.more.info.id,
						refs = map(match.hypsMap, \i -> step.refs[i])
					);
				}
			)
		);
		if (ruVerbose(env.conf) > 2) {
			env.out.onMessage("\t\tnew proof for '" + id2s(th.info.id) + "':\n" + 
				strIndent(strIndent(ru2s(new_proof, math)))
			);
		}
		ruMathReplaceDecl(acc, ruUpdateTheoremVars(RuTheorem(th with proof = new_proof)), env);
	});
}

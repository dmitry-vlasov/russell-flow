import ru/parse/parse;
import ru/math;

export {
	ruUpdateSourcePositions(src : RuSource, env : RuEnv) -> RuSource;
}

ruUpdateConstPositions(const1 : RuConst, decl2 : RuParseDecl) -> RuConst {
	switch (decl2) {
		RuParseConst(__,__,__,__,pos2): 
			RuConst(const1 with info = RuDeclInfo(const1.info with pos = pos2));
		default:
			ruClearConstPositions(const1);
	}
}

ruUpdateTypePositions(type1 : RuType, decl2 : RuParseDecl) -> RuType {
	switch (decl2) {
		RuParseType(__,__,__,pos2):
			RuType(type1 with info = RuDeclInfo(type1.info with pos = pos2));
		default:
			ruClearTypePositions(type1);
	}
}

ruUpdateRulePositions(rule1 : RuRule, decl2 : RuParseDecl) -> RuRule {
	switch (decl2) {
		RuParseRule(__,__,__,term2, pos2): {
			RuRule(rule1 with
				info = RuDeclInfo(rule1.info with pos = pos2),
				term = RuTerm(rule1.term with pos = term2.pos)
			);
		}
		default:
			ruClearRulePositions(rule1);
	}
}

ruUpdateAxiomPositions(axiom1 : RuAxiom, decl2 : RuParseDecl) -> RuAxiom {
	switch (decl2) {
		RuParseAxiom(__,__,__,__,hyps2, prop2, pos2): {
			RuAxiom(axiom1 with 
				info = RuDeclInfo(axiom1.info with pos = pos2),
				stat = RuStatement(axiom1.stat with
					hyps = if (length(axiom1.stat.hyps) != length(hyps2)) {
						ruClearHypsPositions(axiom1.stat.hyps);
					} else {
						mapi(axiom1.stat.hyps, \i, hyp ->
							RuHyp(hyp with 
								expr = RuExp(hyp.expr with pos = hyps2[i].expr.pos),
								pos = hyps2[i].pos
							)
						)
					},
					prop = RuExp(axiom1.stat.prop with pos = prop2.pos)
				)
			);
		}
		default: ruClearAxiomPositions(axiom1);
	}
}

ruUpdateTheoremPositions(th1 : RuTheorem, decl2 : RuParseDecl) -> RuTheorem {
	switch (decl2) {
		RuParseTheorem(__,__,__,__,__,hyps2, prop2, proof2, pos2): {
			RuTheorem(th1 with 
				info = RuDeclInfo(th1.info with pos = pos2),
				stat = RuStatement(th1.stat with
					hyps = if (length(th1.stat.hyps) != length(hyps2)) {
						ruClearHypsPositions(th1.stat.hyps);
					} else {
						mapi(th1.stat.hyps, \i, hyp -> 
							RuHyp(hyp with 
								expr = RuExp(hyp.expr with pos = hyps2[i].expr.pos),
								pos = hyps2[i].pos
							)
						);
					},
					prop = RuExp(th1.stat.prop with pos = prop2.pos),
				),
				proof = RuProof(th1.proof with 
					steps = if (length(th1.proof.steps) != length(proof2.steps)) {
						ruClearStepsPositions(th1.proof.steps);
					} else {
						mapi(th1.proof.steps, \i, step -> 
							RuStep(step with
								expr = RuExp(step.expr with pos = proof2.steps[i].expr.pos),
								pos = proof2.steps[i].pos
							)
						);
					}
				)
			);
		}
		default: ruClearTheoremPositions(th1);
	}
}

ruUpdateDefPositions(def1 : RuDef, decl2 : RuParseDecl) -> RuDef {
	switch (decl2) {
		RuParseDef(__,__,__,__,hyps2, defm2, defs2, prop2, pos2): {
			RuDef(def1 with 
				info = RuDeclInfo(def1.info with pos = pos2),
				stat = RuStatement(def1.stat with 
					hyps = if (length(def1.stat.hyps) != length(hyps2)) {
						ruClearHypsPositions(def1.stat.hyps);
					} else {
						mapi(def1.stat.hyps, \i, hyp -> 
							RuHyp(hyp with 
								expr = RuExp(hyp.expr with pos = hyps2[i].expr.pos),
								pos = hyps2[i].pos
							)
						);
					},
					prop = RuExp(def1.stat.prop with pos = prop2.pos)
				),
				defm = RuExp(def1.defm with pos = defm2.pos),
				defs = RuExp(def1.defs with pos = defs2.pos),
			);
		}
		default: ruClearDefPositions(def1);
	}
}

ruUpdateDeclPositions(decl1 : RuDecl, decl2 : RuParseDecl) -> RuDecl {
	if (decl1.info.id != decl2.id) {
		ruClearDeclPositions(decl1);
	} else {
		switch (decl1) {
			RuConst(__,__,__): ruUpdateConstPositions(decl1, decl2);
			RuType(__,__):     ruUpdateTypePositions(decl1, decl2);
			RuRule(__,__,__):  ruUpdateRulePositions(decl1, decl2);
			RuAxiom(__,__):    ruUpdateAxiomPositions(decl1, decl2);
			RuTheorem(__,__,__,__): ruUpdateTheoremPositions(decl1, decl2);
			RuDef(__,__,__,__):     ruUpdateDefPositions(decl1, decl2);
		}
	}
}

ruClearHypsPositions(hyps : [RuHyp]) -> [RuHyp] {
	map(hyps, \hyp ->
		RuHyp(hyp with 
			expr = RuExp(hyp.expr with pos = -1),
			pos = -1
		)
	);
}

ruClearStepsPositions(steps : [RuStep]) -> [RuStep] {
	map(steps, \step -> 
		RuStep(step with
			expr = RuExp(step.expr with pos = -1),
			pos = -1
		)
	);
}

ruClearConstPositions(const : RuConst) -> RuConst {
	RuConst(const with info = RuDeclInfo(const.info with pos = -1));
}

ruClearTypePositions(type : RuType) -> RuType {
	RuType(type with info = RuDeclInfo(type.info with pos = -1));
}

ruClearRulePositions(rule : RuRule) -> RuRule {
	RuRule(rule with
		info = RuDeclInfo(rule.info with pos = -1),
		term = RuTerm(rule.term with pos = -1)
	);
}

ruClearAxiomPositions(axiom : RuAxiom) -> RuAxiom {
	RuAxiom(axiom with 
		info = RuDeclInfo(axiom.info with pos = -1),
		stat = RuStatement(axiom.stat with
			hyps = ruClearHypsPositions(axiom.stat.hyps),
			prop = RuExp(axiom.stat.prop with pos = -1)
		)
	);
}

ruClearTheoremPositions(th : RuTheorem) -> RuTheorem {
	RuTheorem(th with 
		info = RuDeclInfo(th.info with pos = -1),
		stat = RuStatement(th.stat with
			hyps = ruClearHypsPositions(th.stat.hyps),
			prop = RuExp(th.stat.prop with pos = -1),
		),
		proof = RuProof(th.proof with 
			steps = ruClearStepsPositions(th.proof.steps)
		)
	);
}

ruClearDefPositions(def : RuDef) -> RuDef {
	RuDef(def with 
		info = RuDeclInfo(def.info with pos = -1),
		stat = RuStatement(def.stat with 
			hyps = ruClearHypsPositions(def.stat.hyps),
			prop = RuExp(def.stat.prop with pos = -1)
		),
		defm = RuExp(def.defm with pos = -1),
		defs = RuExp(def.defs with pos = -1),
	);
}


ruClearDeclPositions(decl : RuDecl) -> RuDecl {
	switch (decl) {
		RuConst(__,__,__): ruClearConstPositions(decl);
		RuType(__,__):     ruClearTypePositions(decl);
		RuRule(__,__,__):  ruClearRulePositions(decl);
		RuAxiom(__,__):    ruClearAxiomPositions(decl);
		RuTheorem(__,__,__,__): ruClearTheoremPositions(decl);
		RuDef(__,__,__,__):     ruClearDefPositions(decl);
	}
}

ruUpdateSourcePositions(src : RuSource, env : RuEnv) -> RuSource {
	switch (ruLoadRawSource(src.info.id, env, ruLoader)) {
		Some(loaded): {
			switch (ruParseSource(loaded, env)) {
				Some(parsed): {
					imps_pos = fold(parsed.imports, makeTree(), \acc, imp -> setTree(acc, imp.module, imp.pos));
					decls_tree = fold(parsed.decls, makeTree(), \acc, decl -> setTree(acc, decl.id, decl));
					RuSource(src with 
						imports = mapi(src.imports, \i, imp -> 
							RuImport(imp with pos = lookupTreeDef(imps_pos, imp.id, -1))
						),
						decls = map(src.decls, \d1 -> 
							switch (lookupTree(decls_tree, d1.info.id)) {
								Some(d2): ruUpdateDeclPositions(d1, d2);
								None(): ruClearDeclPositions(d1);
							}
						)
					);
				}
				None(): src;
			}
		}
		None(): src;
	}
}

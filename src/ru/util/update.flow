import ru/parse/parse;
import ru/math;

export {
	ruUpdateSourcePositions(src : RuSource, env : RuEnv) -> RuSource;
}

ruUpdateDeclPositions(decl1 : RuDecl, decl2 : RuParseDecl) -> RuDecl {
	if (decl1.descr.id != decl2.id) {
		ruClearDeclPositions(decl1);
	} else {
		set_pos = \d -> RuDescr(d with pos = decl2.pos);
		switch (decl1) {
			RuConst(descr,__,__):
				RuConst(decl1 with descr = set_pos(descr));
			RuType(descr,__):
				RuType(decl1 with descr = set_pos(descr));
			RuRule(descr,__,term): {
				rule = cast(decl2 : RuParseDecl -> RuParseRule);
				RuRule(decl1 with
					descr = set_pos(descr),
					term = RuTerm(term with pos = rule.term.pos)
				);
			}
			RuAxiom(descr, stat): {
				axiom = cast(decl2 : RuParseDecl -> RuParseAxiom);
				RuAxiom(decl1 with 
					descr = set_pos(descr),
					stat = RuStatement(stat with
						hyps = if (length(stat.hyps) != length(axiom.hyps)) {
							ruClearHypsPositions(stat.hyps);
						} else {
							mapi(stat.hyps, \i, hyp ->
								RuHyp(hyp with 
									expr = RuExp(hyp.expr with pos = axiom.hyps[i].expr.pos),
									pos = axiom.hyps[i].pos
								)
							)
						},
						prop = RuExp(stat.prop with pos = axiom.prop.pos)
					)
				);
			}
			RuTheorem(descr,stat,__,proof): {
				theorem = cast(decl2 : RuParseDecl -> RuParseTheorem);
				if (length(stat.hyps) != length(theorem.hyps) || length(proof.steps) != length(theorem.proof.steps)) {
					ruClearDeclPositions(decl1);
				} else {
					RuTheorem(decl1 with 
						descr = set_pos(descr),
						stat = RuStatement(stat with
							hyps = if (length(stat.hyps) != length(theorem.hyps)) {
								ruClearHypsPositions(stat.hyps);
							} else {
								mapi(stat.hyps, \i, hyp -> 
									RuHyp(hyp with 
										expr = RuExp(hyp.expr with pos = theorem.hyps[i].expr.pos),
										pos = theorem.hyps[i].pos
									)
								);
							},
							prop = RuExp(stat.prop with pos = theorem.prop.pos),
						),
						proof = RuProof(proof with 
							steps = if (length(proof.steps) != length(theorem.proof.steps)) {
								ruClearStepsPositions(proof.steps);
							} else {
								mapi(proof.steps, \i, step -> 
									RuStep(step with
										expr = RuExp(step.expr with pos = theorem.proof.steps[i].expr.pos),
										refs = if (length(step.refs) != length(theorem.proof.steps[i].refs)) {
											ruClearRefsPositions(step.refs);
										} else {
											mapi(step.refs, \j, ref -> 
												switch (ref) {
													RuHypRef(ind,__): RuHypRef(ind, theorem.proof.steps[i].refs[j].pos);
													RuStepRef(ind,__): RuStepRef(ind, theorem.proof.steps[i].refs[j].pos);
												}
											)
										},
										pos = theorem.proof.steps[i].pos
									)
								);
							}
						)
					);
				}
			}
			RuDef(descr, stat, defm, defs): {
				def = cast(decl2 : RuParseDecl -> RuParseDef);
				RuDef(decl1 with 
					descr = set_pos(descr),
					stat = RuStatement(stat with 
						hyps = if (length(stat.hyps) != length(def.hyps)) {
							ruClearHypsPositions(stat.hyps);
						} else {
							mapi(stat.hyps, \i, hyp -> 
								RuHyp(hyp with 
									expr = RuExp(hyp.expr with pos = def.hyps[i].expr.pos),
									pos = def.hyps[i].pos
								)
							);
						},
						prop = RuExp(stat.prop with pos = def.prop.pos)
					),
					defm = RuExp(defm with pos = def.defm.pos),
					defs = RuExp(defs with pos = def.defs.pos),
				);
			}
		}
	}
}

ruClearHypsPositions(hyps : [RuHyp]) -> [RuHyp] {
	map(hyps, \hyp ->
		RuHyp(hyp with 
			expr = RuExp(hyp.expr with pos = -1),
			pos = -1
		)
	);
}

ruClearStepsPositions(steps : [RuStep]) -> [RuStep] {
	map(steps, \step -> 
		RuStep(step with
			expr = RuExp(step.expr with pos = -1),
			refs = ruClearRefsPositions(step.refs),
			pos = -1
		)
	);
}

ruClearRefsPositions(refs : [RuRef]) -> [RuRef] {
	map(refs, \rf -> 
		switch (rf) {
			RuHypRef(ind,__): RuHypRef(ind, -1);
			RuStepRef(ind,__): RuStepRef(ind, -1);
		}
	);
}

ruClearDeclPositions(decl : RuDecl) -> RuDecl {
	clear_pos = \d -> RuDescr(d with pos = -1);
	switch (decl) {
		RuConst(descr,__,__):
			RuConst(decl with descr = clear_pos(descr));
		RuType(descr,__):
			RuType(decl with descr = clear_pos(descr));
		RuRule(descr,__,term): {
			RuRule(decl with
				descr = clear_pos(descr),
				term = RuTerm(term with pos = -1)
			);
		}
		RuAxiom(descr, stat): {
			RuAxiom(decl with 
				descr = clear_pos(descr),
				stat = RuStatement(stat with
					hyps = ruClearHypsPositions(stat.hyps),
					prop = RuExp(stat.prop with pos = -1)
				)
			);
		}
		RuTheorem(descr,stat,__,proof): {
			RuTheorem(decl with 
				descr = clear_pos(descr),
				stat = RuStatement(stat with
					hyps = ruClearHypsPositions(stat.hyps),
					prop = RuExp(stat.prop with pos = -1),
				),
				proof = RuProof(proof with 
					steps = ruClearStepsPositions(proof.steps)
				)
			);
		}
		RuDef(descr, stat, defm, defs): {
			RuDef(decl1 with 
				descr = clear_pos(descr),
				stat = RuStatement(stat with 
					hyps = ruClearHypsPositions(stat.hyps),
					prop = RuExp(stat.prop with pos = -1)
				),
				defm = RuExp(defm with pos = -1),
				defs = RuExp(defs with pos = -1),
			);
		}
	}
}

ruUpdateSourcePositions(src : RuSource, env : RuEnv) -> RuSource {
	switch (ruLoadRawSource(src.info.id, env, ruLoadDescr)) {
		Some(loaded): {
			switch (ruParseSource(loaded, env)) {
				Some(parsed): {
					imps_pos = fold(parsed.imports, makeTree(), \acc, imp -> setTree(acc, imp.module, imp.pos));
					decls_tree = fold(parsed.decls, makeTree(), \acc, decl -> setTree(acc, decl.id, decl));
					RuSource(src with 
						imports = mapi(src.imports, \i, imp -> 
							RuImport(imp with pos = lookupTreeDef(imps_pos, imp.id, -1))
						),
						decls = map(src.decls, \d1 -> 
							switch (lookupTree(decls_tree, d1.descr.id)) {
								Some(d2): {
									ruUpdateDeclPositions(d1, d2);
								}
								None(): ruClearDeclPositions(d1);
							}
						)
					);
				}
				None(): src;
			}
		}
		None(): src;
	}
}

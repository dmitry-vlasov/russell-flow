import ru/proof_tree;

export {
	RuIProofNode ::= RuIProofStep, RuIProofHyp;
	RuIProofStep(assertion : int, children : [int], parent : int, expr : RuExp);
	RuIProofHyp(ind : int, parent : int, expr : RuExp);
	RuIProofTree(nodes : [RuIProofNode]);
	RuIProofTreeSteps(steps : [RuIProofStep]);

	ruProofTree2IProofTree(node : RuProofTree) -> RuIProofTree;
	ruIProofTree2ProofTree(tree : RuIProofTree) -> RuProofTree;

	ruTheoremIProofTree(theorem : RuTheorem, math : RuMath) -> RuIProofTree;
	ruIProofTree2s(tree : RuIProofTree, math : RuMath) -> string;

	// Strip off all hyps
 	ruIProofTree2Steps(tree : RuIProofTree) -> RuIProofTreeSteps;
	ruIProofTree2Steps2s(tree : RuIProofTreeSteps, reverse : bool, math : RuMath) -> string;

	// Make the root last step
	ruReverseRuIProofTreeSteps(tree : RuIProofTreeSteps) -> RuIProofTreeSteps;
}

ruProofTree2IProofTree(tree : RuProofTree) -> RuIProofTree {
	switch (tree) {
		RuProofStep(__,__,__): {
			inode = ruProofTree2IiProofNode(tree);
			inodes = list2array(ruIiProofNode2List(inode, None(), makeList()));
			iteri(inodes, \k, n -> 
				switch (n) {
					RuIiProofHyp(i,__,__,__): i := k;
					RuIiProofStep(i,__,__,__,__): i := k;
				}
			)
			RuIProofTree(map(inodes, \n -> 
				switch (n) {
					RuIiProofStep(__, ass, children, par, expr): {
						parent = switch (^par) {
							Some(p): ^(p.i);
							None(): -1;
						}
						RuIProofStep(ass, map(children, \ch -> ^(ch.i)), parent, expr);
					}
					RuIiProofHyp(__, ind, par, expr): {
						parent = switch (^par) {
							Some(p): ^(p.i);
							None(): -1;
						}
						RuIProofHyp(ind, parent, expr);
					}
				}
			));
		}
		RuProofHyp(ind,expr): {
			RuIProofTree([RuIProofHyp(ind, -1, expr)]);
		}
	}
}

	RuIiProofNode ::= RuIiProofStep, RuIiProofHyp;
	RuIiProofStep(i : ref int, assertion : int, children : [RuIiProofNode], parent : ref Maybe<RuIiProofStep>, expr : RuExp);
	RuIiProofHyp(i : ref int, ind : int, parent : ref Maybe<RuIiProofStep>, expr : RuExp);

ruProofTree2IiProofNode(node : RuProofTree) -> RuIiProofNode {
	switch (node) {
		RuProofHyp(ind, expr): {
			RuIiProofHyp(ref -1, ind, ref None(), expr);
		}
		RuProofStep(ass, children, expr): {
			RuIiProofStep(ref -1, ass, map(children, ruProofTree2IiProofNode), ref None(), expr);
		}
	}
}


ruIiProofNode2List(node : RuIiProofNode, parent : Maybe<RuIiProofStep>, acc : List<RuIiProofNode>) -> List<RuIiProofNode> {
	switch (node) {
		RuIiProofStep(__,__, children, par,__): {
			par := parent;
			fold(children, Cons(node, acc), \ac, ch -> ruIiProofNode2List(ch, Some(node), ac));
		}
		RuIiProofHyp(__,__, par,__): {
			par := parent;
			Cons(node, acc);
		}
	}
}

ruIProofTree2ProofTree(tree : RuIProofTree) -> RuProofTree {
	ruDoIProofTree2ProofTree(tree.nodes[0], tree);
}

ruDoIProofTree2ProofTree(node : RuIProofNode, tree : RuIProofTree) -> RuProofTree {
	switch (node) {
		RuIProofHyp(ind,__,expr): RuProofHyp(ind, expr);
		RuIProofStep(ass, children,__, expr): {
			RuProofStep(ass, map(children, \ch -> 
				ruDoIProofTree2ProofTree(tree.nodes[ch], tree)
			), expr);
		}
	}
}

ruTheoremIProofTree(th : RuTheorem, math : RuMath) -> RuIProofTree {
	ruProofTree2IProofTree(ruTheoremProofTree(th, math));
}

ruIProofTree2s(tree : RuIProofTree, math : RuMath) -> string {
	ruProofTree2s(ruIProofTree2ProofTree(tree), math);
}

ruIProofTree2Steps(tree : RuIProofTree) -> RuIProofTreeSteps {
	triple = foldi(tree.nodes, Triple(makeTree(), makeList(), 0), \i, acc, n -> 
		switch (n) {
			RuIProofHyp(__,__,__): acc;
			RuIProofStep(__,__,__,__): 
				Triple(
					setTree(acc.first, i, acc.third),
					Cons(n, acc.second),
					acc.third + 1
				);
		}
	);
	mapping = triple.first;
	steps = list2array(triple.second);
	RuIProofTreeSteps(map(steps, \step ->
		RuIProofStep(step with 
			parent = lookupTreeDef(mapping, step.parent, -1),
			children = map(step.children, \ch -> lookupTreeDef(mapping, ch, -1))
		)
	));
}

ruIProofTree2Steps2s(tree : RuIProofTreeSteps, reverse : bool, math : RuMath) -> string {
	tree1 = if (reverse) ruReverseRuIProofTreeSteps(tree) else tree;
	strGlue(mapi(tree1.steps, \i, step -> ruIProofTreeStep2s(i, step, math)), "\n");
}

ruIProofTreeStep2s(i : int, step : RuIProofStep, math : RuMath) -> string {
	"step " + i2s(i + 1) + " : " + id2s(ruExpType(step.expr)) + " = " + id2s(step.assertion) + 
	"(" + superglue(step.children, \ch -> if (ch == -1) "hyp ?" else "step " + i2s(ch + 1), ", ") + ") " + 
	"|- " + ru2s(step.expr, math) + " ;; // parent: " + (if (step.parent < 0) "<none>" else i2s(step.parent + 1));
}

ruReverseRuIProofTreeSteps(tree : RuIProofTreeSteps) -> RuIProofTreeSteps {
	last = length(tree.steps) - 1;
	RuIProofTreeSteps(reverseA(map(tree.steps, \step -> 
		RuIProofStep(step with 
			parent = if (step.parent == -1) -1 else last - step.parent,
			children = map(step.children, \ch -> if (ch == -1) -1 else last - ch)
		)
	)));
}

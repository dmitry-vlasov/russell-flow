import ds/vector;
import ru/subst;
import base/util/timed;
import base/util/progress;
import base/stats;

export {

	RuIndex(
		rules : HashMap<int, RuIndexNode<?>>,
		vars  : HashMap<int, RuIndexNode<?>>,
		nodes : Vector<RuIndexNode<?>>
	);

	ruMakeIndex() -> RuIndex<?>;

	ruSetIndex(key : RuExp, data : ?, index : RuIndex<?>) -> RuIndex<?>;

	ruIndexNodeCount(ind : RuIndex<?>) -> int;
	ruIndexDataCount(ind : RuIndex<?>) -> int;

	ruFindIndex(e : RuExp, index : RuIndex<?>, math : RuMath) -> [?];
	ruIndex2s(index : RuIndex<?>, show_data : (?) -> string, math : RuMath) -> string;
	ruIndexRaw2s(index : RuIndex<?>) -> string;
	ruIndexValues(index : RuIndex<?>) -> [?];

	ruIterIndex(index : RuIndex<?>, f : (?) -> void) -> void;
	ruFoldIndex(index : RuIndex<?>, val : ??, f : (??, ?) -> ??) -> ??;

	ruIndexSubexpr(beg : RuIndexNode<?>, end : RuIndexNode<?>) -> RuExp;

	RuIndexNode(
		id    : int,
		name_id : int,  // id of var or rule name
		type_id : int,
		arity : int,    // -1 means that it is a variable, not rule

		ends  : Set<int>, // ends of subterms, starting at this node
		lens  : Set<int>, // distances to the beginnings of subterms, with end at this node

		data  : [?],
		expr  : Maybe<RuExp>,

		index : RuIndex<?>, // children nodes
		parent : int,
	);

	ruNoIndexNode = RuIndexNode(-1, -1, -1, -1, makeSet(), makeSet(), [], None(), ruMakeIndex(), -1);
}

ruIndexNode2s(n : RuIndexNode<?>) -> string {
	"id: " + i2s(n.id) + ", " + id2s(n.name_id) + ":" + id2s(n.type_id) + ", arity=" + i2s(n.arity) + ", " +
	"lens=[" + strGlue(map(set2array(n.lens), i2s), ", ") + "], " + 
	"ends=[" + strGlue(map(set2array(n.ends), i2s), ", ") + "], " + 
	"data.length=" + i2s(length(n.data)) + ", " +
	(switch (n.expr){ Some(e): "expr=" + ruExpRPN2s(e) + ", "; None(): ""}) + 
	"parent=" + i2s(n.parent)
}

ruMakeIndex() -> RuIndex<?> {
	RuIndex(makeHashMap(idfn), makeHashMap(idfn), makeVector(16));
}

ruIndexNodeCount(ind : RuIndex<?>) -> int {
	s1 = foldHashMap(ind.rules, 0, \__, n, acc -> acc + ruIndexNodeCount(n.index));
	s2 = foldHashMap(ind.vars, 0, \__, n, acc -> acc + ruIndexNodeCount(n.index));
	s1 + s2 + 1;
}

ruIndexDataCount(ind : RuIndex<?>) -> int {
	s1 = foldHashMap(ind.rules, 0, \__, n, acc -> acc + ruIndexDataCount(n.index) + length(n.data));
	s2 = foldHashMap(ind.vars, 0, \__, n, acc -> acc + ruIndexDataCount(n.index) + length(n.data));
	s1 + s2;
}

ruIndexValues(index : RuIndex<?>) -> [?] {
	//concatA(map(vector2array(index.nodes), \n -> n.data));
	data = makeVector(128);
	iter(vector2array(index.nodes), \node -> 
		iter(node.data, \d -> pushVector(data, d))
	);
	vector2array(data);
}

ruIterIndex(index : RuIndex<?>, fn : (?) -> void) -> void {
	iterVector(index.nodes, \node -> 
		iter(node.data, fn)
	);
}

ruFoldIndex(index : RuIndex<?>, val : ??, fn : (??, ?) -> ??) -> ?? {
	foldVector(index.nodes, val, \acc, node -> 
		fold(node.data, acc, fn)
	);
}

ruSetIndex(key : RuExp, data : ?, index : RuIndex<?>) -> RuIndex<?> {
	insert_int = \t, i, v -> {
		w = lookupTreeDef(t, i, makeSet());
		setTree(t, i, insertSet(w, v));
	}
	env0 = RuIndexAddEnv(key, data, makeTree(), makeTree(), ref makeTree());
	lens = ref makeTree();
	ends = ref makeTree();
	iteri(key.nodes, \i, n ->
		switch (n) {
			RuRuleNode(__,arity_len): {
				len = ruArityLen2Len(arity_len);
				lens := insert_int(^lens, i + len, len);
				ends := insert_int(^ends, i, i + len);
			}
			RuVar(__,__): { }
		}
	);
	ruDoAdd2Index(0, index, -1, RuIndexAddEnv(env0 with lens = ^lens, ends = ^ends));
}

RuIndexAddEnv(
	key : RuExp, 
	data : ?,
	lens : Tree<int, Set<int>>,
	ends : Tree<int, Set<int>>,
	branch : ref Tree<int, int>
);

ruDoAdd2Index(i : int, index : RuIndex<?>, parent : int, env : RuIndexAddEnv<?>) -> RuIndex<?> {
	new_node = \id, t_id, a -> {
		m = RuIndexNode(
			sizeVector(index.nodes), 
			id, t_id, a, makeSet(), makeSet(), [], None(), 
			RuIndex(makeHashMap(idfn), makeHashMap(idfn), index.nodes), parent
		);
		pushVector(index.nodes, m);
		m
	}
	switch (env.key.nodes[i]) {
		RuRuleNode(rule_type, arity_len): {
			rule_id = ruIdType2Id(rule_type);
			type_id = ruIdType2Type(rule_type);
			arity = ruArityLen2Arity(arity_len);
			len = ruArityLen2Len(arity_len);
			n = switch(lookupHashMap(index.rules, rule_id)) {
				Some(x): x;
				None(): new_node(rule_id, type_id, arity);
			}
			m = ruDoAdd2IndexNode(i, n, env);
			setHashMap(index.rules, rule_id, m);
			//RuIndex(index with rules = setTree(index.rules, rule_id, m));
			index;
		}
		RuVar(id, type_id): {
			n = switch(lookupHashMap(index.vars, id)) {
				Some(x): x;
				None(): new_node(id, type_id, -1);
			}
			m = ruDoAdd2IndexNode(i, n, env);
			setHashMap(index.vars, id, m);
			//RuIndex(index with vars = setTree(index.vars, id, m));
			index;
		}
	}
}

ruDoAdd2IndexNode(i : int, n : RuIndexNode<?>, env : RuIndexAddEnv<?>) -> RuIndexNode<?> {
	n1 = if (i + 1 == length(env.key.nodes)) {
		RuIndexNode(n with data = concat(n.data, [env.data]), expr = Some(env.key));
	} else {
		RuIndexNode(n with index = ruDoAdd2Index(i + 1, n.index, n.id, env));
	}
	n2 = RuIndexNode(n1 with 
		lens = mergeSets(n1.lens, lookupTreeDef(env.lens, i, makeSet())),
	);
	n3 = RuIndexNode(n2 with ends = 
		eitherMap(lookupTree(env.ends, i), \ends -> 
			mergeSets(n2.ends, mapSet(ends, \end -> 
				lookupTreeDef(^(env.branch), end, if (i == end) n.id else -1)
			)), 
		n2.ends)
	);
	env.branch := setTree(^(env.branch), i, n3.id);
	setVector(n.index.nodes, n.id, n3);
	n3
}

ruIndex2s(index : RuIndex<?>, show_data : (?) -> string, math : RuMath) -> string {
	ruDoIndex2s(index, show_data, None(), "", math)
}

ruDoIndex2s(index : RuIndex<?>, show_data : (?) -> string, beg : Maybe<RuIndexNode<?>>, acc : string, math : RuMath) -> string {
	begin = \n -> switch (beg) {
		Some(b): b;
		None(): n;
	}
	acc1 = foldHashMap(index.rules, acc, \__, n, ac ->
		ruDoIndexNode2s(n, show_data, begin(n), ac, math, index.nodes)
	);
	foldHashMap(index.vars, acc1, \__, n, ac ->
		ruDoIndexNode2s(n, show_data, begin(n), ac, math, index.nodes)
	);
}

ruDoIndexNode2s(node : RuIndexNode<?>, show_data : (?) -> string, beg : RuIndexNode<?>, acc : string, math : RuMath, nodes : Vector<RuIndexNode<?>>) -> string {
	acc1 = if (node.data == []) acc else {
		acc + 
		ru2s(ruIndexSubexpr(beg, node), math) + " --> {" + 
		strGlue(map(node.data, show_data), ", ") + "}\n";
	}
	ruDoIndex2s(node.index, show_data, Some(beg), acc1, math);
}

ruIndexRaw2s(index : RuIndex<?>) -> string {
	ruDoIndexRaw2s(index, [], "")
}

ruDoIndexRaw2s(index : RuIndex<?>, nodes : [RuIndexNode<?>], acc : string) -> string {
	acc1 = foldHashMap(index.rules, acc, \__, n, ac ->
		ruDoIndexNodeRaw2s(n, concat(nodes, [n]), ac)
	);
	foldHashMap(index.vars, acc1, \__, n, ac ->
		ruDoIndexNodeRaw2s(n, concat(nodes, [n]), ac)
	);
}

ruDoIndexNodeRaw2s(node : RuIndexNode<?>, nodes : [RuIndexNode<?>], acc : string) -> string {
	acc1 = if (node.data == []) acc else {
		acc + strGlue(
			map(nodes, \n -> 
				i2s(n.id) + "=" + id2s(n.name_id) + ":" + id2s(n.type_id) + 
				",lens=[" + strGlue(map(set2array(n.lens), i2s), ", ") + "]" + 
				",ends=[" + strGlue(map(set2array(n.ends), i2s), ", ") + "]" + 
				(if (length(n.data) > 0) "*" else "")
			), 
		" ") + " --> " + i2s(length(node.data)) + "\n";
	};
	ruDoIndexRaw2s(node.index, nodes, acc1);
}

ruFindIndex(e : RuExp, index : RuIndex<?>, math : RuMath) -> [?] {
	ruDoFindIndex(0, e, index, math)
}

ruDoFindIndex(i : int, e : RuExp, index : RuIndex<?>, math : RuMath) -> [?] {
	switch (e.nodes[i]) {
		RuRuleNode(rule_type,__): {
			rule_id = ruIdType2Id(rule_type);
			switch(lookupHashMap(index.rules, rule_id)) {
				Some(n): 
					if (i + 1 == length(e.nodes)) n.data 
					else ruDoFindIndex(i + 1, e, n.index, math);
				None(): [];
			}
		}
		RuVar(id,__): {
			switch(lookupHashMap(index.vars, id)) {
				Some(n):
					if (i + 1 == length(e.nodes)) n.data 
					else ruDoFindIndex(i + 1, e, n.index, math);
				None(): [];
			}
		}
	}
}

/*ruIndexBranch(beg : RuIndexNode<?>, end : int) -> List<RuIndexNode<?>> {
	if (beg.id == end) makeList1(beg) else {
		n = getVectorUnsafe(beg.index.nodes, end);
		Cons(n, ruIndexBranch(beg, n.parent));
	}
}*/

ruIndexBranch1(beg : RuIndexNode<?>, end : int, acc : List<RuIndexNode<?>>) -> List<RuIndexNode<?>> {
	if (beg.id == end) Cons(beg, acc) else {
		n = getVectorUnsafe(beg.index.nodes, end);
		ruIndexBranch1(beg, n.parent, Cons(n, acc));
	}
}

ruIndexBranch2(beg : RuIndexNode<?>, end : int, acc : Vector<RuIndexNode<?>>) -> void {
	if (beg.id == end) {
		pushVector(acc, beg) 
	} else {
		n = getVectorUnsafe(beg.index.nodes, end);
		pushVector(acc, n);
		ruIndexBranch2(beg, n.parent, acc);
	}
}

//index_subexpr_counter_1 = ref 0;
//index_subexpr_stats_1 = initConcurrentHashMap();

//index_subexpr_counter_2 = ref 0;
//index_subexpr_stats_2 = initConcurrentHashMap();

/*
RuInformer(
		isOn     : ref bool,  // to switch off a progress tracker set this to 'false'
		delta_ms : int,       // a timeout in ms, when a progress is reported
		timer    : RuTimer,   // the timer of  a progress
		init     : bool,      // the first call to track progress
		inform   : () -> void // is called report progress (each delta ms)
	);
	ruTrackInformer(informer : RuInformer) -> void;
	ruMakeInformer(time_limit : double, delta : int) -> RuInformer;
	ruInformerMessage(informet : RuInformer) -> string;
*/

index_subexpr_init_informer : ref bool = ref true;
/*
RuDistrib(
		avg : double,
		disp : double,
		median : double,
		min : double,
		max : double
	);

	ruTable2Distrib(table : [double]) -> RuDistrib;
	ruDistrib2s(distrib : RuDistrib) -> string;
*/
ruIndexSubexpr(beg : RuIndexNode<?>, end : RuIndexNode<?>) -> RuExp {
	//branch = list2array(ruIndexBranch(beg, end.id));
	//branch = reverseA(list2array(ruIndexBranch1(beg, end.id, makeList())));

	/*if (^index_subexpr_init_informer) {
		index_subexpr_init_informer := false;
		print ln("STAAARTING INFERMER");
		informer1 = ruMakeInformer(-1.0, 1000);
		informer = RuInformer(informer1 with
			inform = \-> {
				table1 = map(valuesConcurrentHashMap(index_subexpr_stats_1), i2d);
				table2 = map(valuesConcurrentHashMap(index_subexpr_stats_2), i2d);
				print ln(
					"COUNT: " + i2s(^index_subexpr_counter_2) + " " + ruInformerMessage(informer1) + "\n" + 
					"TABLE1: \n" + strIndent(ruDistrib2s(ruTable2Distrib(table1))) + "\n"+
					"TABLE2: \n" + strIndent(ruDistrib2s(ruTable2Distrib(table2))) + "\n"
				);
			}
		);
		ruTrackInformer(informer);
	}*/

	branch1 = makeVector(16);
	ruIndexBranch2(beg, end.id, branch1);
	branch = reverseA(vector2array(branch1));
	lens = makeHashMap(idfn);
	iteri(branch, \i, n -> {
		//index_subexpr_counter_1 := ^index_subexpr_counter_1 + 1;
		//setConcurrentHashMap(index_subexpr_stats_1, ^index_subexpr_counter_1, sizeSet(n.lens));

		iterSet(n.lens, \len -> setHashMap(lens, i - len, len))
	});
	//index_subexpr_counter_2 := ^index_subexpr_counter_2 + 1;
	//setConcurrentHashMap(index_subexpr_stats_1, ^index_subexpr_counter_2, length(branch));
	//setConcurrentHashMap(index_subexpr_stats_2, ^index_subexpr_counter_2, sizeHashMap(lens));
	nodes = mapi(branch, \i, n ->
		if (n.arity == -1) {
			RuVar(n.name_id, n.type_id);
		} else {
			switch (lookupHashMap(lens, i)) {
				Some(len): {
					ruMakeRuleNode(n.name_id, n.type_id, n.arity, len);
				}
				None(): {
					ruCrash(
						"ruIndexSubexpr: must not happen\n" +
						"beg:\n" + strIndent(ruIndexNode2s(beg)) + "\n" +
						"end:\n" + strIndent(ruIndexNode2s(end)) + "\n"
					);
					RuVar(-1, -1);
				}
			}
		}
	);
	RuExp(nodes, -1);
}

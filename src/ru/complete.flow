import text/blueprint;
import comm;
import base/util/lsp;
import base/util/substr;
import base/path;
import lsp/util;
import ru/util/vol;
import ru/util/cursor;
import ru/util/ontology;
import ru/cache/cache;

export {
	ruCommComplete : RuComm;
}

ruCommComplete = RuComm(
	RuCommInfo(
		"complete", "info", "output a possible completion at given line-column position", "", false, false, 
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "position line", ""), 
			RuCommArg("col",  false, "position column", ""),
			RuCommArg("kind", true, "kind of completion: 1, 2 or 3 (see completion in LSP protocol)", "1"), 
			RuCommArg("character",  true, "character, which triggered the completion", ""),
		], []
	), 
	ruRunComplete
);

ruRunComplete(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	lsp = ruTaskBoolArg(task, "lsp", false);
	char = ruTaskStringArg(task, "character", "");
	maybeApply(ruTask2LineCol(task), \lc -> {
		module = ruFileId(lc.path, env.conf);
		cached = ruCodeCacheGet(module, env);
		resolver = makeLineResolver(cached.code);
		pos = findLineIndex(resolver, lc.line, lc.col);
		line_ss = ruRTrimSubstr(ruSubstrLine(cached.code, pos));
		line = ruSubstr2s(line_ss);
		col0 = pos - line_ss.beg;
		col = if (col0 >= strlen(line)) strlen(line) - 1 else col0;
		word_ss = ruSubstrWord(line, col);
		word = ruSubstr2s(word_ss);
		ruDebugLog(
			"ruRunComplete:\n" +
			"line: '" + line + "'\n" + 
			"line_ss.len: " + i2s(line_ss.len) + "\n" +
			"col: " + i2s(col) + "\n" +
			"word: '" + word + "'\n" +
			"word_ss.len: " + i2s(word_ss.len) + "\n" + 
			"word_ss.beg: " + i2s(word_ss.beg) + "\n"
		);
		edit = ruMakeInsertLspEdit(lc);
		completions = if (startsWith(trim2(line, " \t\r"), "import")) {
			ruCompleteImports(conf, word, edit);
		} else if (char == "\\" && ruPosInExpression(cached.code, pos)) {
			ruCompleteSymbols(conf, word, word_ss, lc.line);
		} else if (ruPosInExpression(cached.code, pos)) {
			ruCompleteSymbols(conf, word, word_ss, lc.line);
		} else {
			// TODO: name
			[]
		}
		if (lsp) {
			env.out.respond(lspCompletionList2Json(LspCompletionList(false, completions)));
		} else {
			// TODO
		}
	});
	Some(state);
}

ruPosInExpression(code : string, pos : int) -> bool {
	exp_end_after = ruFirstAfterPos(code, pos, ";;");
	exp_beg_after = ruMinPos(ruFirstAfterPos(code, pos, "|-"), ruFirstAfterPos(code, pos, "#"));

	exp_end_before = ruLastBeforePos(code, pos, ";;");
	exp_beg_before = ruMaxPos(ruLastBeforePos(code, pos, "|-"), ruLastBeforePos(code, pos, "#"));

	(exp_end_after != -1) && (exp_beg_before != -1) &&
	ruPosPreceeds(exp_end_after, exp_beg_after) &&
	ruPosPreceeds(exp_end_before, exp_beg_before);
}

ruMakeInsertLspEdit(lc : RuLineCol) -> LspTextEdit {
	LspTextEdit(
		LspRange(
			LspPosition(lc.line, lc.col),
			LspPosition(lc.line, lc.col),
		),
		""
	);
}

ruMakeInsertCompletion(label : string, kind : int, detail : string, filter : string, edit : LspCompletionTextEdit) -> LspCompletionItem {
	LspCompletionItem(
		label, //: string,
		LspCompletionItemLabelDetails("", ""),
		kind, // : int,
		[], //tags: [int], // Values: Deprecated=1
		detail, //: string,
		"", // documentation: string,
		false, //deprecated: bool,
		false, //preselect: bool,
		"", //sortText: string,
		filter, //filterText: string,
		"", //insertText: string,
		0, //insertTextFormat: int, // Value: PlainText=1, Snippet=2
		0, //insertTextMode
		Some(edit), //textEdit: Maybe<LspTextEdit>,
		[], //additionalTextEdits: [LspTextEdit],
		[], //commitCharacters: [string],
		None(), // command: Maybe<LspCommand>,
		JsonNull(), //data: Json
	);
}

ruCompleteImports(conf : RuConf, prefix : string, edit : LspTextEdit) -> [LspCompletionItem] {
	list2array(fold(conf.importRoots, makeList(), \acc, imp ->
		ruCompleteImport(imp, prefix, edit, acc)
	));
}

ruCompleteImport(imp : string, prefix : string, edit : LspTextEdit, acc : List<LspCompletionItem>) -> List<LspCompletionItem> {
	pref_path = ruSplitPath(prefix);
	dir = pathCombineMany(concat([imp], pref_path.dirs));
	if (!isDirectory(dir)) acc else {
		fold(readDirectory(dir), acc, \ac, nm ->
			if (!startsWith(nm, pref_path.file)) ac else {
				name = pathCombine(dir, nm);
				path = pathCombineMany(concat(pref_path.dirs, [nm]));
				insertion = strRight(path, strlen(prefix));
				if (ruDirContainsRuSources(name)) {
					Cons(
						ruMakeInsertCompletion(nm, lspCompletionItemFolder, "directory", prefix,
							LspTextEdit(edit with newText = insertion + "/")
						),
						ac
					);
				} else if (fileExists(name) && endsWith(name, ".ru")) {
					Cons(
						ruMakeInsertCompletion(changeFileExt(nm, ""), lspCompletionItemModule, "module", prefix, 
							LspTextEdit(edit with newText = changeFileExt(insertion, "") + ";;")
						),
						ac
					);
				} else {
					ac;
				}
			}
		);
	} 
}

ruCompleteSymbols(conf : RuConf, prefix : string, word : RuSubstr, line_no : int) -> [LspCompletionItem] {
	list2array(foldTree(ruLangConstCache(), makeList(), \id, const, acc -> {
		symb = id2s(const.info.id);
		if (!(startsWith(symb, prefix) || startsWith(const.latex, prefix))) acc else {
			edit = LspTextEdit(
				LspRange(
					LspPosition(line_no, word.beg),
					LspPosition(line_no, word.beg + word.len)
				),
				symb
			);
			Cons(ruMakeInsertCompletion(symb, lspCompletionItemConstant, "const", prefix, edit), acc);
		}
	}));
}

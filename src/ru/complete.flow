import text/blueprint;
import comm;
import base/util/lsp;
import lsp/util;
import ru/util/vol;
import ru/util/info;
import ru/util/ontology;
import ru/cache/cache;

export {
	ruCommComplete : RuComm;
}

ruCommComplete = RuComm(
	RuCommInfo(
		"complete", "info", "output a possible completion at given line-column position", "", false, false, 
		[
			RuCommArg("file", false, "input file", ""), 
			RuCommArg("line", false, "position line", ""), 
			RuCommArg("col",  false, "position column", ""),
			RuCommArg("kind", true, "kind of completion: 1, 2 or 3 (see completion in LSP protocol)", "1"), 
			RuCommArg("character",  true, "character, which triggered the completion", ""),
		], []
	), 
	ruRunComplete
);

ruRunComplete(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	task = unit.task;
	state = unit.state;
	conf = state.conf;
	lsp = ruTaskBoolArg(task, "lsp", false);
	maybeApply(ruTask2LineCol(task), \lc -> {
		cursor = ruUnderACursor(lc, env);
		id = ruCursorMostSpecificId(cursor, env);
		if (id != -1) {
			maybeApply(ruDeclCacheGet(id), \decl ->
				maybeApply(ruCacheGet(decl.info.src, false, env), \src -> {
					range = ruCodeCacheDeclRange(decl, src, env);
					code = ruCodeCacheGet(decl.info.src, env).code;
					if (lsp) {
						loc = ruRangeCode2LspLocation(range, src.info.path, code);
						env.out.respond(JsonArray([lspLocation2Json(loc)]));
					} else {
						env.out.println(
							ruRange2s(
								range, 
								"declaration of " + cursor.act, 
								src.info.path, 
								code
							)
						)
					}
				})
			);
		}
	});
	Some(state);
}
import base/util/timer;
import base/util/util;
import base/util/math;
import ru/util/math;

export {
	RuSubExpr(var : RuVar, exp : RuExp, vars : HashSet<int>);
	RuSubst(map : HashMap<int, RuSubExpr>);
	ruEmptySubst = RuSubst(makeHashMap(idfn));

	ruMakeSubst() -> RuSubst;
	ruCopySubst(s : RuSubst) -> RuSubst;
	ruLookupSubst(s : RuSubst, v : RuVar) -> Maybe<RuExp>;
	ruLookupSubstDef(s : RuSubst, v : RuVar) -> RuExp;

	ruSubstSize(s : RuSubst) -> int;
	ruSubstImage(s : RuSubst) -> [RuSubExpr];
	ruSubstVars(s : RuSubst) -> [RuVar];
	ruSubstMapsVar(s : RuSubst, v : int) -> bool;

	ruApplySubst(e : RuExp, s : RuSubst) -> RuExp;
	ruApplySubstVars(e : RuSubExpr, s : RuSubst) -> RuSubExpr;
	ruMatchExp(e : RuExp, pattern : RuExp, math : RuMath, env : RuEnv) -> Maybe<RuSubst>;
	ruMergeSubst(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst>;
	ruSubst2s(s : RuSubst, math : RuMath) -> string;
	ruSubstRPN2s(s : RuSubst) -> string;
	ruAdd2Subst(s : RuSubst, v : RuVar, e : RuExp) -> Maybe<RuSubst>;
	ruAdd2SubstVars(s : RuSubst, v : RuVar, e : RuSubExpr) -> Maybe<RuSubst>;
	ruAdd2Subst1(s : RuSubst, v : RuVar, e : RuExp, math : RuMath, env : RuEnv) -> Maybe<RuSubst>;
	ruIsVarRenaming(s : RuSubst) -> bool;
	ruReverseVarRenaming(s : RuSubst) -> RuSubst;
	ruMatchExpExactly(e : RuExp, pattern : RuExp) -> Maybe<Tree<RuVar, RuVar>>;

	ruCompose(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst>;
	ruUnsafeCompose(s1 : RuSubst, s2 : RuSubst) -> RuSubst;

	ruSubsAreEq(s1 : RuSubst, s2 : RuSubst) -> bool;
	ruSubsAreSim(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst>;

	ruSubComplexity(s : RuSubst) -> int;

	ruSubst2Renaming(s : RuSubst) -> Maybe<Tree<RuVar, RuVar>>;
	ruRenaming2Subst(r : Tree<RuVar, RuVar>) -> RuSubst;
	ruRenaming2s(r : Tree<RuVar, RuVar>) -> string;
	ruApplyRenaming2Theorem(r : Tree<RuVar, RuVar>, th : RuTheorem) -> RuTheorem;
	ruApplyRenaming2Decl(r : Tree<RuVar, RuVar>, decl : RuDecl) -> RuDecl;
	ruApplyRenaming2Statement(r : Tree<RuVar, RuVar>, stat : RuStatement) -> RuStatement;

	ruTransformSubst(s: RuSubst, f : (RuExp) -> RuExp) -> RuSubst;
	// Level of a substitution.
	// 0 - variable renaming,
	// 1 - mapping of variables onto variables and constants
	// >= 2 - general form of a substitution.
	ruSubstLevel(s: RuSubst) -> int;
	ruSubstLen(s: RuSubst) -> int;

	// remove identical v -> v entries
	ruReduceSubst(s: RuSubst) -> RuSubst;

	ruMakeFresherSubst(vars : [RuVar], fresher : (RuVar) -> RuVar) -> RuSubst;

	RuSplitSubs(
		indep : RuSubst,
		depend : [RuSubst]
	);

	ruSplitSubs(subs : [RuSubst]) -> RuSplitSubs;

	// Caution: unsafe merge ! Keys are overwritten !!!
	ruMergeSubsUnsafe(s1 : RuSubst, s2 : RuSubst) -> RuSubst;

	ruFilterSub(s : RuSubst, pred : (RuVar, RuExp) -> bool) -> RuSubst;
	ruSubSatisfies(s : RuSubst, cond : (RuExp) -> bool) -> bool;
}

ruMakeSubst() -> RuSubst {
	RuSubst(makeHashMap(idfn));
}

ruCopySubst(s : RuSubst) -> RuSubst {
	RuSubst(copyHashMap(s.map));
}

ruLookupSubst(s : RuSubst, v : RuVar) -> Maybe<RuExp> {
	maybeMap(lookupHashMap(s.map, v.id), \e -> e.exp);
}

ruLookupSubstDef(s : RuSubst, v : RuVar) -> RuExp {
	switch (lookupHashMap(s.map, v.id)) {
		Some(ev): {
			ev.exp;
		}
		None(): {
			ruVar2Exp(v);
		}
	}
}

ruSubstSize(s : RuSubst) -> int {
	sizeHashMap(s.map);
}

ruSubstImage(s : RuSubst) -> [RuSubExpr] {
	hashMapValues(s.map);
}

ruSubstVars(s : RuSubst) -> [RuVar] {
	map(hashMapValues(s.map), \se -> se.var);
}

ruSubstMapsVar(s : RuSubst, v : int) -> bool {
	containsKeyHashMap(s.map, v);
}

ruMergeSubst(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst> {
	conflict = ref false;
	m = copyHashMap(s1.map);
	mergeHashMapCustom(m, s2.map, \__, e1, e2 -> 
		if (e1.exp.nodes == e2.exp.nodes) e1 else { 
			conflict := true; 
			e1 
		}
	);
	if (^conflict) None() else Some(RuSubst(m));
}

ruSubst2s(s : RuSubst, math : RuMath) -> string {
	strGlue(map(hashMap2pairs(s.map), \p -> 
		id2s(p.first) + " => " + ruExp2s(p.second.exp, math.decls.lang.rules)
	), "\n")
}

ruSubstRPN2s(s : RuSubst) -> string {
	strGlue(map(hashMap2pairs(s.map), \p -> 
		id2s(p.first) + " => " + ruExpRPN2s(p.second.exp)
	), "\n")
}

ruAdd2Subst1(s : RuSubst, v : RuVar, e : RuExp, math : RuMath, env : RuEnv) -> Maybe<RuSubst> {
	if (e.nodes[0].type == v.type) ruAdd2Subst(s, v, e) else 
	maybeBind(ruSuperRule(e.nodes[0].type, v.type, math.decls.lang, env), \super ->
		ruAdd2Subst(s, v, 
			RuExp(
				concat([RuRuleNode(super.info.id, v.type, 1, 1)], e.nodes), 
				e.pos
			)
		)
	)
}

ruAdd2Subst(s : RuSubst, v : RuVar, e0 : RuExp) -> Maybe<RuSubst> {
	e = ruApplySubst(e0, s);
	if (e.nodes == [v]) Some(s) else {
		e_vars = ruExp2Vars(e);
		if (containsSet(e_vars, v)) None() else {
			switch (lookupHashMap(s.map, v.id)) {
				Some(e1): if (e.nodes == e1.exp.nodes) Some(s) else None();
				None(): {
					p = foldSet(e_vars, Pair(true, None()), \acc, e_v : RuVar ->
						if (!acc.first) acc else {
							switch (lookupHashMap(s.map, e_v.id)) {
								Some(e2): {
									if (!containsHashSet(e2.vars, e_v.id)) acc else {
										Pair(e2.exp.nodes == [v] && e.nodes == [e_v], Some(e_v));
									}
								}
								None(): acc;
							}
						}
					);
					if (!p.first) None() else {
						switch (p.second) {
							Some(w): {
								m = copyHashMap(s.map);
								removeFromHashMap(m, w.id);
								Some(RuSubst(m));
							}
							None():  {
								m = copyHashMap(s.map);
								iterHashMap(s.map, \w, x ->
									if (containsHashSet(x.vars, v.id)) {
										setHashMap(m, w, ruReplaceVarByExp(x, v, e));
									}
								);
								ev = RuSubExpr(v, e, ruExpVarIdsHashSet(e));
								setHashMap(m, v.id, ev);
								Some(RuSubst(m));
							}
						}
					}
				}
			}
		}
	}
}

/*
ruAdd2SubstVarsFold(s : RuSubst, v : RuVar, e : RuSubExpr, e_vars : [int], i : int, acc : Pair<bool, Maybe<RuVar>>) -> Pair<bool, Maybe<RuVar>> {
	if (!acc.first || i == length(e_vars)) acc else {
		e_v = e_vars[i];
		switch (lookupTree(s.map, e_v)) {
			Some(e2): {
				if (!containsSet(e2.vars, e_v.id)) {
					ruAdd2SubstVarsFold(s, v, e, e_vars, i + 1, acc); 
				} else {
					new_acc = Pair(e2.exp.nodes == [v] && e.exp.nodes == [e_v], Some(e_v));
					ruAdd2SubstVarsFold(s, v, e, e_vars, i + 1, new_acc);
				}
			}
			None(): {
				ruAdd2SubstVarsFold(s, v, e, e_vars, i + 1, acc);
			}
		}
	}
}*/

ruAdd2SubstVars(s : RuSubst, v : RuVar, e0 : RuSubExpr) -> Maybe<RuSubst> {
	e = ruApplySubstVars(e0, s);
	if (e.exp.nodes == [v]) Some(s) else {
		if (containsHashSet(e.vars, v.id)) None() else {
			switch (lookupHashMap(s.map, v.id)) {
				Some(e1): if (e.exp.nodes == e1.exp.nodes) Some(s) else None();
				None(): {
					//p = ruAdd2SubstVarsFold(s, v, e, set2array(e.vars), 0, Pair(true, None()));
					p = foldHashSet(e.vars, Pair(true, None()), \acc, e_v : int ->
						if (!acc.first) acc else {
							switch (lookupHashMap(s.map, e_v)) {
								Some(e2): {
									if (!containsHashSet(e2.vars, e_v)) acc else {
										Pair(
											e2.exp.nodes == [v] && 
											length(e.exp.nodes) == 1 &&
											switch (e.exp.nodes[0]) {
												RuVar(id,__): id == e_v;
												default: false;
											}, 
											Some(e_v)
										);
									}
								}
								None(): acc;
							}
						}
					);
					if (!p.first) None() else {
						switch (p.second) {
							Some(w): {
								m = s.map; //copyHashMap(s.map);
								removeFromHashMap(m, w);
								Some(RuSubst(m));
							}
							None():  {
								m = s.map; //copyHashMap(s.map);
								iterHashMap(s.map, \w, x ->
									if (containsHashSet(x.vars, v.id)) {
										setHashMap(m, w, ruReplaceVarByExpVars(x, v, e));
									}
								);
								setHashMap(m, v.id, RuSubExpr(e with var = v));
								Some(RuSubst(m));
							}
						}
					}
				}
			}
		}
	}
}

ruSemiCompose(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst> {
	foldHashMap(s1.map, Some(ruMakeSubst()), \v1, e1, acc ->
		maybeBind(acc, \s -> ruAdd2SubstVars(s, e1.var, ruApplySubstVars(e1, s2)))
	);
}

ruDoSemiCompose(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst> {
	foldHashMap(s1.map, Some(ruMakeSubst()), \v1, e1, acc ->
		maybeBind(acc, \s -> ruAdd2SubstVars(s, e1.var, ruApplySubstVars(e1, s2)))
	);
}

ruDoCompose(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst> {
	foldHashMap(s2.map, ruSemiCompose(s1, s2), \v2, e2, acc ->
		maybeBind(acc, \s -> if (containsKeyHashMap(s1.map, v2)) Some(s) else ruAdd2SubstVars(s, e2.var, e2))
	);
}

ruCompose(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst> {
	foldHashMap(s2.map, ruSemiCompose(s1, s2), \v2, e2, acc ->
		maybeBind(acc, \s -> if (containsKeyHashMap(s1.map, v2)) Some(s) else ruAdd2SubstVars(s, e2.var, e2))
	);
}

ruUnsafeCompose(s1 : RuSubst, s2 : RuSubst) -> RuSubst {
	m = prototypeHashMap(s1.map);
	iterHashMap(s1.map, \v, e -> 
		setHashMap(m, v, ruApplySubstVars(e, s2))
	);
	iterHashMap(s2.map, \v, e -> 
		if (!containsKeyHashMap(m, v)) {
			setHashMap(m, v, e);
		}
	);
	RuSubst(m);
}

ruMatchExp(e : RuExp, pattern : RuExp, math : RuMath, env : RuEnv) -> Maybe<RuSubst> {
	add2s = \i, p : Pair<Tree<RuVar, RuExp>, int>, v, ex ->
		switch (lookupTree(p.first, v)) {
			Some(e1): if (ex.nodes == e1.nodes) Some(Pair(p.first, p.second + i)) else None();
			None(): Some(Pair(setTree(p.first, v, ex), p.second + i));
		}
	addVar = \i, t1, t2, n1, p, ec -> 
		if (t1 == t2) { 
			add2s(i, p, n1, ec());
		} else {
			maybeBind(ruSuperRule(t2, t1, math.decls.lang, env), \super ->
				add2s(i, p, n1, 
					RuExp(
						concat([RuRuleNode(super.info.id, t1, 1, 1)], ec().nodes), 
						e.pos
					)
				)
			)
		}
	maybeMap(fold(pattern.nodes, Some(Pair(makeTree(), 0)), \acc, n1 ->
		maybeBind(acc, \p ->
			switch (n1) {
				RuRuleNode(r1,__,__,__): {
					switch (e.nodes[p.second]) {
						RuRuleNode(r2,__,__,__): 
							if (r1 != r2) None() else Some(Pair(p.first, p.second + 1));
						RuVar(__,__): None();
					}
				}
				RuVar(__,t1): {
					n2 = e.nodes[p.second];
					switch (n2) {
						RuRuleNode(r2, t2,__, len):
							addVar(len + 1, t1, t2, n1, p, \-> RuExp(subrange(e.nodes, p.second, len + 1), e.pos));
						RuVar(__,t2):
							addVar(1, t1, t2, n1, p, \-> RuExp([n2], e.pos));
					}
				}
			}
		)), 
		\p -> {
			t = foldTree(p.first, makeTree(), \v, e1, acc -> 
				setTree(acc, v.id, RuSubExpr(v, e1, ruExpVarIdsHashSet(e1)))
			);
			RuSubst(tree2hashMap(t, idfn));
		}
	);
}


RuApplyStack(
	parent : Maybe<RuApplyStack>,
	len : int
);

ruApplyComputeLen(arity : int, stack_len : Pair<RuApplyStack, int>) -> Pair<RuApplyStack, int> {
	if (arity == 0) stack_len else {
		switch (stack_len.first.parent) {
			Some(p): 
				ruApplyComputeLen(
					arity - 1, 
					Pair(p, stack_len.first.len + stack_len.second)
				);
			None(): {
				ruCrash("empty stack pop at ruApplyComputeLen");
				stack_len;
			}
		}
	}
}

RuApplyAcc(
	nodes : [RuExpNode],
	stack : RuApplyStack
);

ruApplySubst(e : RuExp, s : RuSubst) -> RuExp {
	if (!ruSubstAffectsExp(e, s)) e else {
		ruDoApplySubst(e, s);
	}
}

ruApplySubstVars(e : RuSubExpr, s : RuSubst) -> RuSubExpr {
	if (!existsHashSet(e.vars, \v -> containsKeyHashMap(s.map, v))) e else {
		e1 = ruDoApplySubst(e.exp, s);
		RuSubExpr(e.var, e1, ruExpVarIdsHashSet(e1));
	}
}

RuApplyAcc(
	nodes : List<[RuExpNode]>,
	stack : RuApplyStack
);

ruSubstAffectsExp(e : RuExp, s : RuSubst) -> bool {
	exists(e.nodes, \n -> 
		switch (n) { 
			RuRuleNode(__,__,__,__): false; 
			RuVar(id,__): containsKeyHashMap(s.map, id);
		}
	);
}

ruDoApplySubst(e : RuExp, s : RuSubst) -> RuExp {
	nodes_list = foldr(e.nodes, RuApplyAcc(makeList(), RuApplyStack(None(), 0)),
		\acc, n -> {
			switch (n) {
				RuRuleNode(r, t, a, l): {
					st_len = ruApplyComputeLen(a, Pair(acc.stack, 0));
					RuApplyAcc(
						Cons([RuRuleNode(r, t, a, st_len.second)], acc.nodes),
						RuApplyStack(Some(st_len.first), st_len.second + 1)
					);
				}
				RuVar(id,__): {
					switch (lookupHashMap(s.map, id)) {
						Some(x):
							RuApplyAcc(
								Cons(x.exp.nodes, acc.nodes),
								RuApplyStack(Some(acc.stack), length(x.exp.nodes))
							);
						None():
							RuApplyAcc(
								Cons([n], acc.nodes),
								RuApplyStack(Some(acc.stack), 1)
							);
					}
				}
			}
		}
	).nodes;
	nodes_arr = list2array(nodes_list);
	applied_nodes = ruConcatAr(nodes_arr);
	RuExp(applied_nodes, e.pos);
}

ruReplaceVarByExp(e : RuSubExpr, v : RuVar, by : RuExp) -> RuSubExpr {
	nodes_list = foldr(e.exp.nodes, 
		RuApplyAcc(makeList(), RuApplyStack(None(), 0)), \acc, n -> {
			switch (n) {
				RuRuleNode(r, t, a, l): {
					st_len = ruApplyComputeLen(a, Pair(acc.stack, 0));
					RuApplyAcc(
						Cons([RuRuleNode(r, t, a, st_len.second)], acc.nodes),
						RuApplyStack(Some(st_len.first), st_len.second + 1)
					);
				}
				RuVar(id,__): {
					if (id == v.id) {
						RuApplyAcc(
							Cons(by.nodes, acc.nodes),
							RuApplyStack(Some(acc.stack), length(by.nodes))
						);
					} else {
						RuApplyAcc(
							Cons([n], acc.nodes),
							RuApplyStack(Some(acc.stack), 1)
						);
					}
				}
			}
		}
	).nodes;
	nodes_arr = list2array(nodes_list);
	applied_nodes = ruConcatAr(nodes_arr);
	e1 = RuExp(applied_nodes, e.exp.pos);
	RuSubExpr(e.var, e1, ruExpVarIdsHashSet(e1));
}

ruReplaceVarByExpVars(e : RuSubExpr, v : RuVar, by : RuSubExpr) -> RuSubExpr {
	nodes_list = foldr(e.exp.nodes, 
		RuApplyAcc(makeList(), RuApplyStack(None(), 0)), \acc, n -> {
			switch (n) {
				RuRuleNode(r, t, a, l): {
					st_len = ruApplyComputeLen(a, Pair(acc.stack, 0));
					RuApplyAcc(
						Cons([RuRuleNode(r, t, a, st_len.second)], acc.nodes),
						RuApplyStack(Some(st_len.first), st_len.second + 1)
					);
				}
				RuVar(id,__): {
					if (id == v.id) {
						RuApplyAcc(
							Cons(by.exp.nodes, acc.nodes),
							RuApplyStack(Some(acc.stack), length(by.exp.nodes))
						);
					} else {
						RuApplyAcc(
							Cons([n], acc.nodes),
							RuApplyStack(Some(acc.stack), 1)
						);
					}
				}
			}
		}
	).nodes;
	nodes_arr = list2array(nodes_list);
	applied_nodes = ruConcatAr(nodes_arr);
	e1 = RuExp(applied_nodes, e.exp.pos);
	vars = mergeHashSets(e.vars, by.vars);
	removeHashSet(vars, v.id);
	RuSubExpr(e.var, e1, vars);
}


ruIsVarRenaming(s : RuSubst) -> bool {
	foldHashMap(s.map, true, \x, v, acc -> acc && ruIsVar(v.exp));
}

ruReverseVarRenaming(s : RuSubst) -> RuSubst {
	m = copyHashMap(s.map);
	iterHashMap(s.map, \v, e -> {
		w = e.exp.nodes[0];
		switch (w) {
			RuVar(id,__): setHashMap(m, id, RuSubExpr(w, RuExp([e.var], -1), makeHashSet1(e.var.id, idfn)));
			default: { };
		}
	});
	RuSubst(m);
}

ruMatchExpExactly(e : RuExp, pattern : RuExp) -> Maybe<Tree<RuVar, RuVar>> {
	if (length(e.nodes) != length(pattern.nodes)) None() else {
		foldi(e.nodes, Some(makeTree()), \i, acc, v1 ->
			maybeBind(acc, \s -> {
				switch (v1) {
					RuRuleNode(r1,__,__,__): {
						switch (pattern.nodes[i]) {
							RuRuleNode(r2,__,__,__): if (r1 != r2) None() else Some(s);
							RuVar(__,__): None();
						}
					}
					RuVar(__,__): {
						v2 = pattern.nodes[i];
						switch (v2) {
							RuRuleNode(__, __,__,__): None();
							RuVar(__,__):
								if (v1.type != v2.type) None() else {
									switch (lookupTree(s, v2)) {
										Some(w1): if (v1 == w1) Some(s) else None();
										None(): Some(setTree(s, v2, v1));
									}
								}
						}
					}
				}
			})
		)
	}
}

ruSubsAreEq(s1 : RuSubst, s2 : RuSubst) -> bool {
	equalsHashMap(s1.map, s2.map);
}

ruSubsAreSim(s1 : RuSubst, s2 : RuSubst) -> Maybe<RuSubst> {
	if (sizeHashMap(s1.map) != sizeHashMap(s2.map)) None() else {
		theta = ruMakeSubst();
		iterHashMap(s1.map, \v1, e1 ->
			switch (lookupHashMap(s2.map, v1)) {
				Some(__): { };
				None(): {
					if (length(e1.exp.nodes) == 1) {
						v2 = e1.exp.nodes[0];
						switch (v2) {
							RuVar(id,__):
								setHashMap(theta.map, id, 
									RuSubExpr(v2, RuExp([e1.var], -1), makeHashSet1(v1, idfn))
								);
							default: { };
						}
					}
				}
			}
		);
		maybeBind(ruCompose(s1, theta), \s -> if (ruSubsAreEq(s2, s)) Some(theta) else None());
	}
}

ruSubComplexity(s : RuSubst) -> int {
	ret = ref 0;
	iterHashMap(s.map, \v, e -> ret := ^ret + length(e.exp.nodes));
	^ret;
}

ruSubst2Renaming(s : RuSubst) -> Maybe<Tree<RuVar, RuVar>> {
	foldHashMap(s.map, Some(makeTree()), \__, e, acc -> 
		switch (acc) {
			Some(r): {
				switch (ruExp2Var(e.exp)) {
					Some(w): Some(setTree(r, e.var, w));
					None(): None();
				}
			}
			None(): None();
		}
	);
}

ruRenaming2Subst(r : Tree<RuVar, RuVar>) -> RuSubst {
	RuSubst(tree2hashMap(foldTree(r, makeTree(), \w, v, acc -> 
		setTree(acc, w.id, RuSubExpr(w, RuExp([v], -1), makeHashSet1(v.id, idfn)))
	), idfn));
}

ruRenaming2s(r : Tree<RuVar, RuVar>) -> string {
	strGlue(map(tree2pairs(r), \p -> id2s(p.first.id) + " => " + id2s(p.second.id)), "\n");
}

ruApplyRenaming2Vars(r : Tree<RuVar, RuVar>, vars : Tree<int, RuVar>) -> Tree<int, RuVar> {
	foldTree(vars, makeTree(), \__, v, acc ->
		eitherMap(
			lookupTree(r, v),
			\w -> setTree(acc, w.id, w),
			setTree(acc, v.id, v)
		)
	);
}

ruApplyRenaming2Disjs(r : Tree<RuVar, RuVar>, disjs : Set<RuDisj>) -> Set<RuDisj> {
	mapSet(disjs, \disj ->
		RuDisj(
			lookupTreeDef(r, disj.v1, disj.v1),
			lookupTreeDef(r, disj.v2, disj.v2)
		)
	);
}

ruApplyRenaming2Term(r : Tree<RuVar, RuVar>, term : RuTerm) -> RuTerm {
	RuTerm(term with
		nodes = map(term.nodes, \n -> 
			switch (n) {
				RuVar(__,__): lookupTreeDef(r, n, n);
				default: n;
			}
		)
	);
}

ruApplyRenaming2Exp(r : Tree<RuVar, RuVar>, expr : RuExp) -> RuExp {
	RuExp(expr with 
		nodes = map(expr.nodes, \n -> 
			switch (n) {
				RuVar(__,__): lookupTreeDef(r, n, n);
				default: n;
			}
		)
	);
}

ruApplyRenaming2Proof(r : Tree<RuVar, RuVar>, proof : RuProof) -> RuProof {
	RuProof(proof with
		vars = RuVarsDisjs(proof.vars with
			vars = ruApplyRenaming2Vars(r, proof.vars.vars),
			disjs = ruApplyRenaming2Disjs(r, proof.vars.disjs),
		),
		steps = map(proof.steps, \s -> RuStep(s with expr = ruApplyRenaming2Exp(r, s.expr)))
	);
}

ruApplyRenaming2Theorem(r : Tree<RuVar, RuVar>, th : RuTheorem) -> RuTheorem {
	RuTheorem(th with
		stat = ruApplyRenaming2Statement(r, th.stat),
		meta = mapSet(th.meta, \x -> foldTree(r, x, \v, w, acc -> if (v.id == x) w.id else acc)),
		proof = ruApplyRenaming2Proof(r, th.proof)
	);
}

ruApplyRenaming2Statement(r : Tree<RuVar, RuVar>, stat : RuStatement) -> RuStatement {
	RuStatement(stat with
		vars = RuVarsDisjs(stat.vars with
			vars = ruApplyRenaming2Vars(r, stat.vars.vars),
			disjs = ruApplyRenaming2Disjs(r, stat.vars.disjs),
		),
		hyps = map(stat.hyps, \h -> RuHyp(h with expr = ruApplyRenaming2Exp(r, h.expr))),
		prop = ruApplyRenaming2Exp(r, stat.prop)
	);
}

ruApplyRenaming2Decl(r : Tree<RuVar, RuVar>, decl : RuDecl) -> RuDecl	{
	switch (decl) {
		RuConst(__,__,__): decl;
		RuType(__,__): decl;
		RuRule(__,vars,term):
			RuRule(decl with
				vars = ruApplyRenaming2Vars(r, vars),
				term = ruApplyRenaming2Term(r, term)
			);
		RuAxiom(__, stat):
		    RuAxiom(decl with
				stat = ruApplyRenaming2Statement(r, stat)
			);
		RuDef(__, stat, defm, defs): 
			RuDef(decl with
				stat = ruApplyRenaming2Statement(r, stat),
				defm = ruApplyRenaming2Exp(r, defm),
				defs = ruApplyRenaming2Exp(r, defs)
			);
		RuTheorem(__, stat, meta, proof):
			ruApplyRenaming2Theorem(r, decl);
	}
}

ruTransformSubst(s: RuSubst, f : (RuExp) -> RuExp) -> RuSubst {
	m = prototypeHashMap(s.map);
	iterHashMap(s.map, \v, e -> {
		fe = f(e.exp);
		setHashMap(m, v, RuSubExpr(e.var, fe, ruExpVarIdsHashSet(fe)));
	});
	RuSubst(m);
}

ruSubstLevel(s: RuSubst) -> int {
	foldHashMap(s.map, 0, \v, e, acc ->
		max(acc, if (ruIsVar(e.exp)) 0 else length(e.exp.nodes))
	);
}

ruSubstLen(s: RuSubst) -> int {
	foldHashMap(s.map, 0, \v, e, acc ->
		acc + length(e.exp.nodes) - 1
	);
}

ruReduceSubst(s: RuSubst) -> RuSubst {
	ret = ruCopySubst(s);
	iterHashMap(s.map, \v, e ->
		if (length(e.exp.nodes) == 1) {
			switch (e.exp.nodes[0]) {
				RuVar(id,__): if (id == v) removeFromHashMap(ret.map, v);
				default: { };
			}
		}
	)
	ret;
}

ruMakeFresherSubst(vars : [RuVar], fresher : (RuVar) -> RuVar) -> RuSubst {
	s = ruMakeSubst();
	iter(vars, \v -> setHashMap(s.map, v.id, RuSubExpr(v, RuExp([fresher(v)], -1), makeHashSet1(v.id, idfn))));
	s;
}

RuSplitSubs(
	indep : RuSubst,
	depend : [RuSubst]
);

ruSplitSubs(subs : [RuSubst]) -> RuSplitSubs {
	doms = map(subs, \sub -> 
		buildHashSet(map(ruSubstVars(sub), \v -> v.id), idfn)
	);
	ims = map(subs, \sub -> {
		im = makeHashSet(idfn);
		iter(ruSubstImage(sub), \e -> 
			iterHashSet(e.vars, \v -> 
				insertHashSet(im, v)
			)
		);
		im
	});
	indep = ruMakeSubst();
	depend = mapi(subs, \i, sub -> {
		m = prototypeHashMap(sub.map);
		iterHashMap(sub.map, \v, e -> {
			//vs1 = insertHashSet(e.vars, v);
			if (ruExistsi(doms, \j, vs2 -> i != j && (ruHashSetsIntersect(e.vars, vs2) || containsHashSet(vs2, v))) || 
				ruExistsi(ims, \j, vs2 -> i != j && containsHashSet(vs2, v))) {
				setHashMap(m, v, e);
			} else {
				setHashMap(indep.map, v, e);
			}
		})
		RuSubst(m);
	});
	RuSplitSubs(indep, depend);
}

ruMergeSubsUnsafe(s1 : RuSubst, s2 : RuSubst) -> RuSubst {
	s0 = ruCopySubst(s1);
	mergeHashMap(s0.map, s2.map);
	s0;
}

ruFilterSub(s : RuSubst, pred : (RuVar, RuExp) -> bool) -> RuSubst { 
	filtered = ruMakeSubst();
	iterHashMap(s.map, \v, se -> if (pred(se.var, se.exp)) setHashMap(filtered.map, v, se));
	filtered;
}

ruSubSatisfies(s : RuSubst, cond : (RuExp) -> bool) -> bool {
	ret = ref true;
	iterHashMap(s.map, \__, e -> if (!cond(e.exp)) ret := false);
	^ret;
}

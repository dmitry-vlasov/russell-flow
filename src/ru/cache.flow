import text/binary;

import base/log;
import ru/src_utils;

export {
	RuCachedSource(
		source : RuSource, 
		dependencyChanged : () -> bool, 
		version : int
	);

	RuCachedDecl(
		decl : RuDecl,
		info : RuFileInfo
	);

	// Cached source code.
	RuCachedSourceText(
		text : string,
		modified : double
	);

	ruToMemCache(src : RuSource, conf : RuConf) -> void;
	ruToDiskCache(src : RuSource, conf : RuConf) -> void;

	ruFromCache(file : string, conf : RuConf) -> Maybe<RuCachedSource>;
	ruLoadToMemCache(file : string, conf : RuConf) -> void;
	ruRemoveFromCache(file : string, conf : RuConf) -> void;

	ruClearCache(conf : RuConf) -> void;
	ruClearMemCache() -> void;
	ruClearDiskCache(conf : RuConf) -> void;

	ruSaveCache(conf : RuConf) -> void;
	ruSaveCacheFile(file : string, conf : RuConf) -> void;
	ruSourcesCache() -> [RuSource];
	
	ruMakeCacheDir(conf : RuConf) -> void;

	ruCachedDecl(name : string) -> [RuCachedDecl];
	ruCachedDecl2s(name : string, conf : RuConf) -> string;
	ruCachedDecls() -> [RuCachedDecl];
	ruCachedAssertoins() -> Tree<string, RuAssertion>;
	ruCachedTheoremAxioms() -> Tree<string, Set<string>>;

	// Lookups a cached file source, if not found - loads and stores.
	ruFileSource(path : string) -> string;
	// Stores a certain string as a source for some path.
	ruSetFileSource(path : string, src : string) -> void;
	// Loads file source from filesystem. May be used to undo fcSetFileSource function.
	ruLoadFileSource(path : string) -> void;

	ruRange2LspLocation(range : RuRange, path : string) -> LspLocation;
	ruRange2s(path : string, range : RuRange, msg : string) -> string;
	ruRangeWithResolver2s(path : string, range : RuRange, msg : string, resolver : LineResolver) -> string;
	ruCachedDecl2LspSymbolInfos(name : string, conf : RuConf) -> [LspSymbolInformation];
	ruDecl2LspSymbolKind(decl : RuDecl) -> int;

	// Shows cache statistics
	ruCacheInfo(full : bool) -> string;
	// Declaration statistics
	ruDeclInfo(mode : [string], conf : RuConf) -> string;

	ruDeclRange(d : RuDecl, src : RuSource) -> RuRange;
}

ruCacheVersion = 4;

ruSourceCache = initConcurrentHashMap();
ruNameCache = initConcurrentHashMap();
ruTextCache = initConcurrentHashMap(); // Sources of files as strings
ruDefCache = initConcurrentHashMap();  // Definitions

ruClearCache(conf : RuConf) -> void {
	ruClearMemCache();
	ruClearDiskCache(conf);
}

ruClearMemCache() -> void {
	clearConcurrentHashMap(ruSourceCache);
	clearConcurrentHashMap(ruNameCache);
	clearConcurrentHashMap(ruTextCache);
	clearConcurrentHashMap(ruDefCache);
}

ruClearDiskCache(conf : RuConf) -> void {
	cache_dir = ruCacheDir(conf);
	to_remove = readDirectory(cache_dir);
	iter(readDirectory(cache_dir), \file -> 
		if (endsWith(file, ".cache")) {
			del = deleteFile(cache_dir + "/" + file);
			if (del != "") {
				conf.onError("while deleting a cache file '" + file + "' happened: '" + del + "'", []);
			}
		}
	);
}

ruSourcesCache() -> [RuSource] {
	filtermap(valuesConcurrentHashMap(ruSourceCache), idfn);
}

ruMakeCacheDir(conf : RuConf) -> void {
	err = ensureDirectoryExists(ruCacheDir(conf));
	if (err != "") {
		conf.onMessage(err);
	}
}

RuCachedFileSource(
	source : RuSource,
	version : int
);

ruDepChangedCallback(src : RuSource, conf : RuConf) -> () -> bool {
	\ -> {
		check = 
			ruFileChanged(src.info) || 
			exists(src.imports, \imp ->
				switch (ruFromCache(id2s(imp.id), conf)) {
					Some(cached): cached.dependencyChanged();
					None(): true; 
					//{
					//	conf.onError("a module '" + imp.module + "' must be already in cache, but is not there", []); true; 
					//}
				}
			);
		setConcurrentHashMap(ruSourceCache, src.info.module, Some(RuCachedSource(src, \ -> check, ruCacheVersion)));
		check
	}
}

ruUpdateNameCache(src : RuSource, conf : RuConf) -> void {
	//ruDebugLog1("ruUpdateNameCache: started " + src.info.file);
	iter(src.decls, \decl ->
		setConcurrentHashMap(ruNameCache, ruDeclName(decl), Some(RuCachedDecl(decl, src.info)))
	);
	//ruDebugLog1("ruUpdateNameCache: finished " + src.info.file);
}

ruUpdateDefCache(src : RuSource, conf : RuConf) -> void {
	//ruDebugLog1("ruUpdateDefCache: started " + src.info.file);
	iter(src.decls, \decl -> 
		switch (decl) {
			RuDef(__,__,defm, __): {
				switch (defm.nodes[0]) {
					RuRuleNode(rule_name, rule_id,__,__,__): {
						switch (getConcurrentHashMap(ruNameCache, rule_name, None())) {
							Some(cached_rule): {
								rule = cast(cached_rule.decl : RuDecl -> RuRule);
								non_bracket_consts = filtermap(rule.term.nodes, \n ->
									switch (n) {
										RuConstRef(id): {
											name = id2s(id);
											if (name == "(" || name == ")" || name == "," || name == ":") None() else {
												if (containsConcurrentHashMap(ruDefCache, name)) None() else {
													Some(name);
												}
											};
										}
										RuVar(__,__,__): None(); 
									}
								);
								//ruDebugLog1("DEFIENDUM: " + ruExpRPN2s(defm.nodes));
								//ruDebugLog1("TERM: " + ruTerm2s(rule.term.expr));

								iter(non_bracket_consts, \defiendum_const ->
									setConcurrentHashMap(ruDefCache, defiendum_const, 
										concat(
											getConcurrentHashMap(ruDefCache, defiendum_const, []),
											[RuCachedDecl(decl, src.info)]
										)
									)
								);
							}
							None(): conf.onError("Rule '" + rule_name + "' is not found in cache", []);
						}
					}
					default: { 
						ruDebugLog1("not a rule ref: " + ruExpRPN2s(defm));
					}
				}
			}
			default: { }
		}
	);
	//ruDebugLog1("ruUpdateDefCache: finished " + src.info.file);
}

ruSaveCache(conf : RuConf) -> void {
	iter(filtermap(valuesConcurrentHashMap(ruSourceCache), idfn), 
		\cached : RuCachedSource -> ruSaveCacheSource(cached.source, conf)
	);
}

ruSaveCacheFile(file : string, conf : RuConf) -> void {
	switch (getConcurrentHashMap(ruSourceCache, file, None())) {
		Some(cached): ruSaveCacheSource(cached.source, conf);
		None(): { }
	}
}

ruSaveCacheSource(src : RuSource, conf : RuConf) -> void {
	binary = toBinary(RuCachedFileSource(src, ruCacheVersion));
	if (!setFileContent(ruCachedPath(src.info.module, conf), binary)) {
		conf.onError("cannot save cached source '" + src.info.module + "'", []);
	}
	if (conf.verbose > 1) {
		conf.onMessage("\tsaved to cache: '" + src.info.module + "'");
	}
}

ruToMemCache(s : RuSource, conf : RuConf) -> void {
	if (lookupTreeDef(conf.opts, "caching", "") != "0" && lookupTreeDef(conf.opts, "mem-caching", "") != "0") {
		src = RuSource(s with info = ruUpdateFileInfo(s.info));
		cached = RuCachedSource(src, ruDepChangedCallback(src, conf), ruCacheVersion);
		setConcurrentHashMap(ruSourceCache, src.info.module, Some(cached));
		ruUpdateNameCache(src, conf);
		ruUpdateDefCache(src, conf);
	}
}

ruToDiskCache(s : RuSource, conf : RuConf) -> void {
	if (lookupTreeDef(conf.opts, "caching", "") != "0" && lookupTreeDef(conf.opts, "disk-caching", "") != "0") {
		src = RuSource(s with info = ruUpdateFileInfo(s.info));
		ruSaveCacheSource(src, conf);
	}
}

ruFromCache(file0 : string, conf : RuConf) -> Maybe<RuCachedSource> {
	ret = if (lookupTreeDef(conf.opts, "caching", "") == "0") None() else {
		file = ruTrimPath(file0, conf, ".ru");
		cached = switch (ruFromMemoryCache(file, conf)) {
			Some(cached): Some(cached);
			None(): ruFromDiskCache(file, conf);
		}
		ruCheckCachedIntegrity(file, cached, conf);
	}
	/*switch (ret) {
		Some(cached): println("LOADED from cache: " + cached.source.info.path);
		None(): println("NOT loaded from cache: " + file0);
	}*/
	ret
}

ruCheckCachedIntegrity(file : string, mcached : Maybe<RuCachedSource>, conf : RuConf) -> Maybe<RuCachedSource> {
	del_from_cache = \cached -> {
		//ruServerLog("ABOUT TO DELETE: " + cached.source.info.path, conf);
		//ruServerLog(ruFileChangedMessage(cached.source.info), conf);
		ruDeleteFromCache(file, ruCachedPath(file, conf), conf);
		None();
	}
	maybeBind(mcached, \cached -> {
		if (ruFileChanged(cached.source.info)) {
			if (conf.verbose > 1) {
				conf.onMessage("\t" + ruFileChangedMessage(cached.source.info));
			}
			del_from_cache(cached);
		} else if (cached.dependencyChanged()) {
			if (conf.verbose > 1) {
				conf.onMessage("\tdependency of file: '" + file + "' has changed");
			}
			del_from_cache(cached);
		} else {
			if (conf.verbose > 1) {
				conf.onMessage("\tloaded from cache: '" + file + "'");
			}
			setConcurrentHashMap(ruSourceCache, file, Some(cached));
			ruUpdateNameCache(cached.source, conf);
			if (lookupTreeDef(conf.opts, "disk-caching", "") != "0" && !fileExists(ruCachedPath(file, conf))) {
				ruSaveCacheSource(cached.source, conf);
			}
			Some(cached);
		}
	});
}

ruFromDiskCache(file : string, conf : RuConf) -> Maybe<RuCachedSource> {
	path = ruCachedPath(file, conf);
	if (lookupTreeDef(conf.opts, "disk-caching", "") == "0" || !fileExists(path)) None() else {
		deserialized = deserializeBinary(getFileContent(path), IllegalStruct());
		if (deserialized == IllegalStruct()) {
			conf.onError("WARNING: Illegal structure of cache file for '" + file + "'. Incremental file deleted.", []);
			ruDeleteFromCache(file, path, conf);
			None();
		} else {
			cached_file = cast(deserialized : flow -> RuCachedFileSource);
			if (cached_file.version == ruCacheVersion) {
				Some(RuCachedSource(cached_file.source, ruDepChangedCallback(cached_file.source, conf), cached_file.version));
			} else {
				if (conf.verbose > 1) {
					conf.onMessage("\tcached file " + file + " has outdated version " + i2s(cached_file.version) + " while current version is " + i2s(ruCacheVersion));
					ruDeleteFromCache(file, path, conf);
				}
				None();
			}
		}
	}
}

ruFromMemoryCache(file : string, conf : RuConf) -> Maybe<RuCachedSource> {
	if (lookupTreeDef(conf.opts, "mem-caching", "") == "0") None() else {
		if (containsConcurrentHashMap(ruSourceCache, file)) {
			getConcurrentHashMap(ruSourceCache, file, None());
		} else {
			None();
		}
	}
}

ruLoadToMemCache(file : string,  conf : RuConf) -> void {
	module = ruTrimPath(file, conf, ".ru");
	//ruServerLog("ruLoadToCache: started file: " + file + ", module: " + module, conf);
	sources = ruDoLoadToCache(module, conf, [], makeSet()).first;
	//ruDebugLog1("ruLoadToCache: sources are loaded " + file);
	iter(sources, \src -> ruUpdateDefCache(src, conf));
	//ruDebugLog1("ruLoadToCache: finished " + file);
}

ruDoLoadToCache(module : string,  conf : RuConf, acc : [RuSource], visited : Set<string>) -> Pair<[RuSource], Set<string>> {
	if (containsSet(visited, module)) Pair(acc, visited) else {
		new_visited = insertSet(visited, module);
		switch (ruFromCache(module, conf)) {
			Some(cached): {
				fold(
					cached.source.imports,
					Pair(concat(acc, [cached.source]), new_visited), 
					\ac, imp -> ruDoLoadToCache(id2s(imp.id), conf, ac.first, ac.second)
				);
			}
			None(): {
				//ruServerLog("MODULE: " + module + " is not cached", conf);
				Pair(acc, new_visited);
			}
		}
	}
}

ruRemoveFromCache(file : string, conf : RuConf) -> void {
	path = ruCachedPath(file, conf);
	ruDeleteFromCache(file, path, conf);
}

ruDeleteFromCache(file : string, path : string, conf : RuConf) -> void {
	if (lookupTreeDef(conf.opts, "caching", "") != "0") {
		if (conf.verbose > 1) {
			conf.onMessage("\tDeleting cached " + file);
		}
		// Remove from the source code (string) cache
		removeConcurrentHashMap(ruTextCache, file);
		// Remove from the source (RuSource) cache
		if (lookupTreeDef(conf.opts, "mem-caching", "") != "0") {
			removeConcurrentHashMap(ruSourceCache, file);
		}
		// Remove from the disk cache (serialized RuSource)
		if (lookupTreeDef(conf.opts, "disk-caching", "") != "0") {
			err = deleteFile(path);
			if (err != "") {
				if (fileExists(path)) {
					conf.onError("Could not delete " + path + ": " + err, []);
				}
			}
		}
	}
}

ruCachedDecl(name : string) -> [RuCachedDecl] {
	defs = getConcurrentHashMap(ruDefCache, name, []);
	switch (getConcurrentHashMap(ruNameCache, name, None())) {
		Some(cached): concat(defs, [cached]);
		None(): defs;
	}
}

ruCachedDecls() -> [RuCachedDecl] {
	filtermap(valuesConcurrentHashMap(ruNameCache), idfn);
}

ruCachedAssertoins() -> Tree<string, RuAssertion> {
	pairs2tree(
		filtermap(ruCachedDecls(), \cached -> {
			decl = cached.decl;
			switch (decl) {
				RuAssertion(): Some(Pair(ruDeclName(decl), decl));
				default: None();
			}
		})
	);
}

ruFileSource(path : string) -> string {
	if (!containsConcurrentHashMap(ruTextCache, path)) {
		setConcurrentHashMap(ruTextCache, path, RuCachedSourceText(getFileContent(path), fileModified(path)));
	}
	cached = getConcurrentHashMap(ruTextCache, path, RuCachedSourceText("", 0.0));
	modified = fileModified(path);
	if (cached.modified != modified) {
		// Reload outdated source.
		text = getFileContent(path);
		setConcurrentHashMap(ruTextCache, path, RuCachedSourceText(text, modified));
		text;
	} else {
		cached.text;
	}
}

ruSetFileSource(path : string, text : string) -> void {
	if (!containsConcurrentHashMap(ruTextCache, path)) {
		setConcurrentHashMap(ruTextCache, path, RuCachedSourceText(text, fileModified(path)));
	} else {
		cached = getConcurrentHashMap(ruTextCache, path, RuCachedSourceText("", 0.0));
		setConcurrentHashMap(ruTextCache, path, RuCachedSourceText(text, cached.modified));
	}
}

ruLoadFileSource(path : string) -> void {
	setConcurrentHashMap(ruTextCache, path, RuCachedSourceText(getFileContent(path), fileModified(path)));
}

ruRange2LspLocation(range : RuRange, path : string) -> LspLocation {
	code = ruFileSource(path);
	resolver = makeLineResolver(code);
	s = findLine(resolver, range.start);
	if (range.end < 0) {
		LspLocation(
			URI("file", URIAuthority("", "", ""), path, "", ""), 
			LspRange(
				LspPosition(s.lineno - 1, s.lineIndex),
				LspPosition(-1, -1)
			)
		);
	} else {
		e = findLine(resolver, range.end);
		LspLocation(
			URI("file", URIAuthority("", "", ""), path, "", ""), 
			LspRange(
				LspPosition(s.lineno - 1, s.lineIndex),
				LspPosition(e.lineno - 1, e.lineIndex)
			)
		);
	}
}

ruRange2s(path : string, range : RuRange, msg : string) -> string {
	if (path == "") "" else {
		code = ruFileSource(path);
		resolver = makeLineResolver(code);
		s = findLine(resolver, range.start);
		if (range.end < 0) {
			path + ":" + i2s(s.lineno) + ":" + i2s(s.lineIndex + 1) + ":" + (if (msg == "") "" else " " + msg);
		} else {
			e = findLine(resolver, range.end);
			path + ":" + i2s(s.lineno) + ":" + i2s(s.lineIndex + 1) + ":" + i2s(e.lineno) + ":" + i2s(e.lineIndex + 1) + ":" + (if (msg == "") "" else " " + msg);
		}
	}
}

ruRangeWithResolver2s(path : string, range : RuRange, msg : string, resolver : LineResolver) -> string {
	if (path == "") "" else {
		s = findLine(resolver, range.start);
		if (range.end < 0) {
			path + ":" + i2s(s.lineno) + ":" + i2s(s.lineIndex + 1) + ":" + (if (msg == "") "" else " " + msg);
		} else {
			e = findLine(resolver, range.end);
			path + ":" + i2s(s.lineno) + ":" + i2s(s.lineIndex + 1) + ":" + i2s(e.lineno) + ":" + i2s(e.lineIndex + 1) + ":" + (if (msg == "") "" else " " + msg);
		}
	}
}

ruCachedDecl2s(name : string, conf : RuConf) -> string {
	strGlue(
		filtermap(ruCachedDecl(name), \d -> 
			maybeMap(ruFromCache(d.info.module, conf), \cached -> {
				range = ruDeclRange(d.decl, cached.source);
				text = ruFileSource(cached.source.info.path);
				ruTrimAll(substring(text, range.start, range.end - range.start))
			})
		), "\n"
	);
}

ruDecl2LspSymbolKind(decl : RuDecl) -> int {
	switch (decl) {
		RuConst(__,__,__):      lookupTreeDef(lspSymbolKindName2id, "Object", 0);
		RuType(__,__):          lookupTreeDef(lspSymbolKindName2id, "Enum", 0);
		RuRule(__,__,__):       lookupTreeDef(lspSymbolKindName2id, "Variable", 0);
		RuAxiom(__,__):         lookupTreeDef(lspSymbolKindName2id, "Interface", 0);
		RuTheorem(__,__,__,__): lookupTreeDef(lspSymbolKindName2id, "Function", 0)
		RuDef(__,__,__,__):     lookupTreeDef(lspSymbolKindName2id, "Method", 0);
	}
}

ruCachedDecl2LspSymbolInfos(name : string, conf : RuConf) -> [LspSymbolInformation] {
	filtermap(ruCachedDecl(name), \d -> 
		maybeMap(ruFromCache(d.info.module, conf), \cached -> {
			range = ruDeclRange(d.decl, cached.source);
			location = ruRange2LspLocation(range, cached.source.info.path);
			LspSymbolInformation(name, ruDecl2LspSymbolKind(d.decl), false, location, "");
		})
	)
}

ruCacheInfo(full : bool) -> string {
	ret = 
	"cached sources: " + i2s(sizeConcurrentHashMap(ruSourceCache)) + "\n" +
	"cached names: " + i2s(sizeConcurrentHashMap(ruNameCache)) + "\n" +
	"cached source texts: " + i2s(sizeConcurrentHashMap(ruTextCache)) + "\n" +
	"cached definitions: " + i2s(sizeConcurrentHashMap(ruDefCache)) + "\n" +
	if (!full) "" else {
		"cached sources:\n" + strGlue(map(keysConcurrentHashMap(ruSourceCache), \n -> "\t" + n), "\n") + "\n"
		"cached source texts:\n" + strGlue(map(keysConcurrentHashMap(ruTextCache), \n -> "\t" + n),"\n") + "\n"
		"cached definitions:\n" + strGlue(map(keysConcurrentHashMap(ruDefCache), \n -> "\t" + n),"\n")
	};
	//ruDebugLog1("ruCacheInfo:\n" + ret);
	ret
}

RuDeclInfoAcc(
	consts   : [RuConst],
	types    : [RuType],
	rules    : [RuRule],
	axioms   : [RuAxiom],
	defs     : [RuDef],
	theorems : [RuTheorem]
);

ruDeclInfo(mode : [string], conf : RuConf) -> string {
	opts = buildSet(mode);
	info_acc = fold(
		filtermap(valuesConcurrentHashMap(ruNameCache), idfn), 
		RuDeclInfoAcc([], [], [], [], [], []),
		\acc, cached -> {
			decl = cached.decl;
			source = cached.info.module;
			switch (decl) {
				RuConst(__,__,__):      RuDeclInfoAcc(acc with consts = concat(acc.consts, [decl]));
				RuType(__,__):          RuDeclInfoAcc(acc with types  = concat(acc.types,  [decl]));
				RuRule(__,__,__):       RuDeclInfoAcc(acc with rules  = concat(acc.rules,  [decl]));
				RuAxiom(__,__):         RuDeclInfoAcc(acc with axioms = concat(acc.axioms, [decl]));
				RuDef(__,__,__,__):     RuDeclInfoAcc(acc with defs   = concat(acc.defs,   [decl]));
				RuTheorem(__,__,__,__): RuDeclInfoAcc(acc with theorems = concat(acc.theorems, [decl]));
			}
		}
	);
	rules = fold(info_acc.rules, makeTree(), \acc, r -> setTree(acc, r.descr.id, r));
	ruDebugLog1("ruDeclInfo");
	ret = 
	"consts:   " + i2s(length(info_acc.consts)) + "\n" + 
	"types:    " + i2s(length(info_acc.types)) + "\n" + 
	"rules:    " + i2s(length(info_acc.rules)) + "\n" + 
	"axioms:   " + i2s(length(info_acc.axioms)) + "\n" + 
	"defs:     " + i2s(length(info_acc.defs)) + "\n" + 
	"theorems: " + i2s(length(info_acc.theorems)) + "\n" + 
	(if (containsSet(opts, "consts") || containsSet(opts, "all")) {
		"consts:\n" + strGlue(map(info_acc.consts, \c -> "\t" + c.descr.name /*ru2s(c, rules)*/), "\n") + "\n"
	} else "") +
	(if (containsSet(opts, "types") || containsSet(opts, "all")) {
		"types:\n" + strGlue(map(info_acc.types, \t -> "\t" + ru2s(t, rules)), "\n") + "\n"
	} else "") +
	(if (containsSet(opts, "rules") || containsSet(opts, "all")) {
		"rules:\n" + strGlue(map(info_acc.rules, \r -> "\t" + ru2s(r, rules)), "\n") + "\n"
	} else "") +
	(if (containsSet(opts, "axioms") || containsSet(opts, "all")) {
		"axioms:\n" + strGlue(map(info_acc.axioms, \a -> {
			/*ruDebugLog1("going to print axiom: " + a.name);
			ret = "\t" + ru2s(a, rules);
			ruDebugLog1("printed:\n" + ret + "\n");
			ret*/
			"\t" + a.descr.name
		}), "\n") + "\n"
	} else "") +
	(if (containsSet(opts, "defs") || containsSet(opts, "all")) {
		"defs:\n" + strGlue(map(info_acc.defs, \d -> "\t" + d.descr.name /*ru2s(d, rules)*/), "\n") + "\n"
	} else "");
	ruDebugLog1("ruDeclInfo: " + ret);
	ret
}

ruDeclRange(d : RuDecl, src : RuSource) -> RuRange {
	ind = ruIndexOfDecl(ruDeclName(d), src);
	if (ind < 0) RuRange(-1, -1) else {
		text = ruFileSource(src.info.path);
		start = ruStartPosition(d);
		end = if (ind + 1 < length(src.decls)) {
			src.decls[ind + 1].descr.pos;
		} else {
			strlen(text);
		}
		switch (d) {
			RuTheorem(__,__,__,__):
				RuRange(start, strRangeIndexOf(text, "proof {", start, end));
			default: RuRange(start, end);
		}
	}
}

ruCachedTheoremAxioms() -> Tree<string, Set<string>> {
	assertions = ruCachedAssertoins();
	foldTree(assertions, makeTree(), \name, __, acc -> ruDoCachedTheoremAxioms(assertions, name, acc));
}

ruDoCachedTheoremAxioms(assertions : Tree<string, RuAssertion>, as_name : string, acc : Tree<string, Set<string>>) -> Tree<string, Set<string>> {
	switch (lookupTree(assertions, as_name)) {
		Some(ass): {
			switch (ass) {
				RuTheorem(descr,__,__,proof): {
					switch (lookupTree(acc, descr.name)) {
						Some(v): acc;
						None(): {
							acc1 = fold(proof.steps, acc, \ac, step -> ruDoCachedTheoremAxioms(assertions, id2s(step.assertion), ac));
							axioms = fold(proof.steps, makeSet(), \ac, step -> mergeSets(ac, lookupTreeDef(acc1, id2s(step.assertion), makeSet())));
							setTree(acc1, descr.name, axioms);
						}
					}
				}
				RuAxiom(descr,__):     setTree(acc, descr.name, makeSet1(descr.name));
				RuDef(descr,__,__,__): setTree(acc, descr.name, makeSet());
			}
		}
		None(): acc;
	}
}

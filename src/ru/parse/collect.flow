import base/stats;
import ru/parse/exp;
import ru/parse/parse;
import ru/verify/math;

export {
	ruCollectMath(sources : Tree<int, RuAnySource>, env : RuEnv, skip_proofs : bool) -> Maybe<RuMath>;
}

ruCollectMath(sources : Tree<int, RuAnySource>, env0 : RuEnv, skip_proofs : bool) -> Maybe<RuMath> {
	err_count = ref 0;
	env = ruAddErrCounter2Env(env0, err_count);
	timer = ruMakeTimer();
	acc = ruDoCollectMath(sources, makeSet(), env, ruMakeEmptyCollectEnv(skip_proofs));
	collected = acc.verified.math;
	ruSaveIds(env);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("ru collected: " + i2s(sizeTree(collected.sources)) + " files in " + ruTimePassed2s(timer));
		if (ruVerbose(env.conf) > 1) {
			//env.out.onMessage("\tcollection iterations: " + i2s(^ref_collect_counter));
			env.out.onMessage("\tmax read batch size: " + ruProcStats("sources_profile", ruMaxStats("size")));
			env.out.onMessage("\tavg read batch size: " + ruProcStats("sources_profile", ruAvgStats("size")));
			env.out.onMessage("\tsig read batch size: " + ruProcStats("sources_profile", ruSigmaStats("size")));
		}
	}
	if (^err_count == 0) {
		Some(collected);
	} else {
		None();
	}
}

RuCollectEnv(
	skipProofs : bool,
	verified : RuVerifyAcc,
	tenv : Tree<int, RuTypeEnv>
);

ruMakeEmptyCollectEnv(skip_proofs : bool) -> RuCollectEnv {
	RuCollectEnv(skip_proofs, RuVerifyAcc(ruEmptyMath, makeSet(), makeSet()), makeTree());
}

ruMergeCollectEnv(e1 : RuCollectEnv, e2 : RuCollectEnv, env : RuEnv) -> RuCollectEnv {
	RuCollectEnv(
		e1.skipProofs,
		ruVerifyAccMerge(e1.verified, e2.verified, env),
		ruMergeTypeEnvTree(e1.tenv, e2.tenv)
	);
}

ruDoCollectMath(left : Tree<int, RuAnySource>, done : Set<int>, env : RuEnv, acc : RuCollectEnv) -> RuCollectEnv {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(ruSourceImports(src), \imp -> containsSet(done, imp))
		);
		if (ready == []) {
			env.out.onError("cyclic import detected while collecting:\n" + ruRevealCyclicImport(left), []);
			acc
		} else {
			approve_src = \src -> RuVerifyAcc(
				ruMathFromSource(src, env),
				fold(src.decls, makeSet(), \ac, decl -> insertSet(ac, decl.info.id)),
				makeSet()
			);
			collected = filtermap(ready, \src ->
				switch (src) {
					RuRawSource(__,__,info): {
						maybeMap(ruParseSource(src, env), \parsed -> ruCollectParsed(parsed, acc, env));
					}
					RuParseSource(__,__,__,info): {
						Some(ruCollectParsed(src, acc, env));
					}
					RuSource(__,__,__,info): {
						timer = ruMakeTimer();
						ret = Some(ruCollectCached(src, RuCollectEnv(acc with verified = approve_src(src)), env)); 
						if (ruVerbose(env.conf) > 1) {
							env.out.onMessage("\tru collected cached: '" + info.module + "' in " + ruTimePassed2s(timer));
						}
						ret;
					}
				}
			);
			new_acc = ruMergeCollectEnv(acc, 
				fold(collected, 
					ruMakeEmptyCollectEnv(acc.skipProofs), 
					\ac, coll -> ruMergeCollectEnv(coll, ac, env)), 
				env
			);
			new_left = fold(ready, left, \ac, parsed -> removeFromTree(ac, ruSourceModule(parsed)));
			new_done = fold(ready, done, \ac, parsed -> insertSet(ac, ruSourceModule(parsed)));
			ruDoCollectMath(new_left, new_done, env, new_acc);
		}
	}
}

ruCollectCached(src : RuSource, acc : RuCollectEnv, env : RuEnv) -> RuCollectEnv {
	RuCollectEnv(acc with 
		tenv = fold(src.decls, acc.tenv, \ac, decl ->
			switch (decl) {
				RuType(descr,__): setTree(ac, descr.id, ruMakeTypeEnv(decl, env));
				RuRule(descr, vars, term): {
					switch (lookupTree(ac, term.type)) {
						Some(te): {
							setTree(ac, term.type, ruAddRule2TypeEnv(decl, te, env));
						}
						None(): {
							env.out.onError("Unknown type: '" + id2s(term.type) + "'", [RuPlace(src.info.module, descr.pos)]);
							ac;
						}
					}
				}
				default: ac;
			}
		)
	);
}

ruCollectOne(parsed : RuParsed, acc : RuCollectEnv, env : RuEnv) -> RuCollectEnv {
	switch (parsed) {
		RuParseSource(__,__,__,__): ruCollectParsed(parsed, acc, env);
		RuSource(__,__,__,__):      ruCollectCached(parsed, acc, env);
	}
}

RuCollectAcc(
	skipProofs : bool,
	file : string,
	module : int,
	global : RuMath,
	local : RuMath,
	tenv : Tree<int, RuTypeEnv>,
	env : RuEnv
);

ruCollectParsed(src : RuParseSource, acc : RuCollectEnv, env : RuEnv) -> RuCollectEnv {
	timer = ruMakeTimer();
	switch (lookupTree(acc.verified.math.sources, src.info.id)) {
		Some(__): {
			env.out.onError("source '" + src.info.module + "' is already defined", []);
			acc
		}
		None(): {
			imps = map(src.imports, \imp -> RuImport(imp.module, imp.pos));
			acc0 = RuCollectAcc(acc.skipProofs, src.info.path, src.info.id, acc.verified.math, ruEmptyMath, acc.tenv, env);
			acc1 = fold(src.decls, acc0, \ac, decl -> ruCollectSyntax(decl, ac));
			assertions = filtermap(ruConcurrent(map(src.decls, \decl -> \-> ruCreateAssertion(decl, acc1))), idfn);
			//assertions = filtermap(map(parse_decls, \decl -> ruCreateAssertion(decl, acc1)), idfn);
			acc2 = fold(assertions, acc1, \ac, ass -> 
				RuCollectAcc(ac with
					local = RuMath(ac.local with 
						decls = RuDecls(ac.local.decls with 
							assertions = setTree(ac.local.decls.assertions, ass.info.id, ass)
						)
					)
				)
			);
			decls = filtermap(src.decls, \decl -> 
				switch (decl) {
					RuParseConst(id,__,__,__,__):
						lookupTree(acc2.local.decls.consts, id);
					RuParseType(id,__,__,__): 
						lookupTree(acc2.local.decls.types, id);
					RuParseRule(id,__,__,__,__):
						lookupTree(acc2.local.decls.rules, id);
					RuParseAxiom(id,__,__,__,__,__,__):
						lookupTree(acc2.local.decls.assertions, id);
					RuParseTheorem(id,__,__,__,__,__,__,__,__):
						lookupTree(acc2.local.decls.assertions, id);
					RuParseDef(id,__,__,__,__,__,__,__,__):
						lookupTree(acc2.local.decls.assertions, id);
				}
			);
			if (ruVerbose(env.conf) > 1) {
				env.out.onMessage("\tru collected: '" + src.info.path + "' in " + ruTimePassed2s(timer));
			}
			ru_src = RuSource(imps, decls, ruCollectComments(src.comments, src.info.path, env), src.info);
			ruCacheAdd(ru_src, true, env);
			ruDiskCacheSave(ru_src, env);
			RuCollectEnv(
				acc2.skipProofs,
				ruVerifySource(ru_src, acc.verified, env),
				acc2.tenv
			);
		}
	}
}

ruCollectComments(comms : [RuParseComment], file : string, env : RuEnv) -> [RuComment] {
	map(comms, \comm -> 
		RuComment(comm.text, ruCollectAnnotation(comm.json, comm.pos, file, env), comm.pos)
	);
}

ruCollectAnnotation(json_str : string, pos : int, file : string, env : RuEnv) -> JsonObject {
	if (json_str == "") JsonObject([]) else {
		json = parseJson(json_str);
		switch (json) {
			JsonObject(__): json;
			default: {
				env.out.onError("Annotation must be a JSON object, got:\n\t" + json_str + "\n", [RuPlace(file, pos)]);
				JsonObject([]);
			}
		}
	}
}

ruCollectSyntax(decl : RuParseDecl, acc : RuCollectAcc) -> RuCollectAcc {
	switch (decl) {
		RuParseConst(__,__,__,__,__): ruCollectConst(decl, acc);
		RuParseType(__,__,__,__):     ruCollectType(decl, acc);
		RuParseRule(__,__,__,__,__):  ruCollectRule(decl, acc);
		default: acc;
	}
}

ruCreateAssertion(decl : RuParseDecl, acc : RuCollectAcc) -> Maybe<RuAssertion> {
	switch (decl) {
		RuParseAxiom(__,__,__,__,__,__,__):         ruCreateAxiom(decl, acc);
		RuParseTheorem(__,__,__,__,__,__,__,__,__): ruCreateTheorem(decl, acc);
		RuParseDef(__,__,__,__,__,__,__,__,__):     ruCreateDef(decl, acc);
		default: None();
	}
}

ruCollectConst(const : RuParseConst, acc : RuCollectAcc) -> RuCollectAcc {
	switch (ruLookupConst(acc, const.id)) {
		Some(__): {
			acc.env.out.onError("constant '" + id2s(const.id) + "' is already defined", [RuPlace(acc.file, const.pos)]);
			acc
		}
		None(): {
			RuCollectAcc(acc with
				local = RuMath(acc.local with 
					decls = RuDecls(acc.local.decls with
						consts = setTree(acc.local.decls.consts, const.id, 
							RuConst(
								RuDeclInfo(
									const.id, 
									acc.module, 
									ruCollectComments(const.comments, acc.file, acc.env), 
									const.pos
								), 
								if (const.ascii == -1) -1 else const.ascii, 
								if (const.latex == -1) -1 else const.latex
							)
						)
					),
				)
			);
		}
	}
}

ruCollectType(type : RuParseType, acc : RuCollectAcc) -> RuCollectAcc {
	switch (lookupTree(acc.tenv, type.id)) {
		Some(__): {
			acc.env.out.onError("type '" + id2s(type.id) + "' is already defined", [RuPlace(acc.file, type.pos)]);
			acc
		}
		None(): {
			conf1 = ruAddErr2Env(acc.env, "\nat type '" + id2s(type.id) + "'");
			new_type = RuType(
				RuDeclInfo(
					type.id, 
					acc.module, 
					ruCollectComments(type.comments, acc.file, acc.env), 
					type.pos
				), 
				type.supers
			);
			RuCollectAcc(acc with
				local = ruMathAddDeclToDecls(acc.local, new_type, conf1),
				tenv = setTree(acc.tenv, type.id, 
					ruMakeTypeEnv(new_type, conf1)
				)
			)
		}
	}
}

ruCollectRule(rule : RuParseRule, acc : RuCollectAcc) -> RuCollectAcc {
	switch (ruLookupRule(acc, rule.id)) {
		Some(__): {
			acc.env.out.onError("rule '" + id2s(rule.id) + "' is already defined", [RuPlace(acc.file, rule.pos)]);
			acc
		}
		None(): {
			conf1 = ruAddErr2Env(acc.env, "\nat rule " + id2s(rule.id));
			type = rule.term.type;
			vars = ruCollectVars(rule.vars, acc, conf1);
			term = ruMakeTerm(rule.term, vars, acc, ruAddErr2Env(acc.env, "\nat rule: " + id2s(rule.id)));
			new_rule = RuRule(
				RuDeclInfo(
					rule.id, 
					acc.module, 
					ruCollectComments(rule.comments, acc.file, acc.env), 
					rule.pos
				), 
				vars, term
			);
			switch (lookupTree(acc.tenv, rule.term.type)) {
				Some(tenv): {
					RuCollectAcc(acc with
						local = RuMath(acc.local with 
							decls = RuDecls(acc.local.decls with
								rules = setTree(acc.local.decls.rules, rule.id, new_rule)
							)
						),
						tenv = setTree(acc.tenv, type, ruAddRule2TypeEnv(new_rule, tenv, acc.env))
					);
				}
				None(): {
					acc.env.out.onError("unknown type '" + id2s(rule.term.type) + "'", [RuPlace(acc.file, rule.term.pos)]);
					acc;
				}
			}
		}
	}
}

ruMakeTerm(term : RuParseExp, vars : Tree<int, RuVar>, acc : RuCollectAcc, env : RuEnv) -> RuTerm {
	expr = fold(term.symbs, [], \ac, symb -> {
		switch (ruLookupConst(acc, symb)) {
			Some(s): concat(ac, [RuConstRef(symb)]);
			None(): 
				switch (lookupTree(vars, symb)) {
					Some(v): concat(ac, [RuVar(symb, v.type)]);
					None(): {
						env.out.onError("unknown symbol '" + id2s(symb) + "' in term '" + ruParse2s(term) + "'", [RuPlace(acc.file, term.pos)]);
						ac
					}
				}
			}
		}
	);
	RuTerm(term.type, expr, term.pos);
}

ruCreateAxiom(ax : RuParseAxiom, acc : RuCollectAcc) -> Maybe<RuAxiom> {
	switch (ruLookupAssertion(acc, ax.id)) {
		Some(__): {
			acc.env.out.onError("assertion with name '" + id2s(ax.id) + "' is already defined", [RuPlace(acc.file, ax.pos)]);
			None();
		}
		None(): {
			err = \-> { acc.env.out.onError("error in axiom " + id2s(ax.id), [RuPlace(acc.file, ax.pos)]); None(); }
			conf1 = ruAddErr2Env(acc.env, "\nat axiom " + id2s(ax.id));
			vars = ruCollectVars(ax.vars, acc, conf1);
			disjs = ruCollectDisjs(ax.disjs, vars, acc, conf1);
			hyps = filtermap(ax.hyps, \h -> ruCollectHyp(h, vars, acc, conf1));
			if (length(hyps) != length(ax.hyps)) {
				err();
			} else {
				switch (ruCollectExp(ax.prop, vars, acc, conf1)) {
					Some(prop): {
						Some(RuAxiom(
							RuDeclInfo(
								ax.id, 
								acc.module, 
								ruCollectComments(ax.comments, acc.file, acc.env), 
								ax.pos
							), 
							RuStatement(vars, disjs, hyps, prop)
						));
					}
					None(): err();
				}
			}
		}
	}
}

ruCollectExp(ex : RuParseExp, vars : Tree<int, RuVar>, acc : RuCollectAcc, env : RuEnv) -> Maybe<RuExp> {
	ruParseExp(ruMakeTerm(ex, vars, acc, env), acc.tenv, RuPlace(acc.file, ex.pos), env)
}

ruCollectVars(vars : [RuParseVar], acc : RuCollectAcc, env : RuEnv) -> Tree<int, RuVar> {
	fold(vars, makeTree(), \ac, v ->
		switch (lookupTree(acc.tenv, v.type)) {
			Some(tp): {
				setTree(ac, v.id, RuVar(v.id, v.type));
			}
			None(): {
				env.out.onError("unknown var '" + id2s(v.id) + "' of type '" + id2s(v.type) + "'", [RuPlace(acc.file, v.pos)]);
				ac
			}
		}
	)
}

ruCollectMeta(m : RuParseMeta, vars : Tree<int, RuVar>, acc : RuCollectAcc, env : RuEnv) -> Set<int> {
	fold(m.meta, makeSet(), \ac, v -> {
		if (containsKeyTree(vars, v)) insertSet(ac, v) else {
			env.out.onError("unknown var '" + id2s(v) + "'", [RuPlace(acc.file, m.pos)]);
			ac
		}
	});
}

ruCollectDisjs(disjs : [RuParseDisj], vars : Tree<int, RuVar>, acc : RuCollectAcc, env : RuEnv) -> Set<RuDisj> {
	make_var = \v, t -> RuVar(v, t);
	fold(disjs, makeSet(), \acc1, disj -> 
		fold(disj.vars, acc1, \acc2, v1 ->
			fold(disj.vars, acc2, \acc3, v2 -> {
					switch (lookupTree(vars, v1)) {
						Some(vr1): {
							switch (lookupTree(vars, v2)) {
								Some(vr2): {
									if (vr1.id < vr2.id) 
										insertSet(acc3, 
											RuDisj(
												make_var(vr1.id, vr1.type), 
												make_var(vr2.id, vr2.type)
											)
										) 
									else if (vr2.id < vr1.id) 
										insertSet(acc3, 
											RuDisj(
												make_var(vr2.id, vr2.type), 
												make_var(vr1.id, vr1.type)
											)
										) 
									else acc3 
								}
								None(): {
									env.out.onError("unknown var '" + id2s(v2) + "' in disjointed set, vars: " + 
									strGlue(map(getTreeValues(vars), \v -> "'" + id2s(v.id) + "'"), ", "), 
									[RuPlace(acc.file, disj.pos)]); acc3;
								}
							}
						}
						None(): {
							env.out.onError("unknown var '" + id2s(v1) + "' in disjointed set, vars: " + 
							strGlue(map(getTreeValues(vars), \v -> "'" + id2s(v.id) + "'"), ", "), 
							[RuPlace(acc.file, disj.pos)]); acc3;
						}
					}
				}
			)
		)
	)
}

ruCollectHyp(hyp : RuParseHyp, vars : Tree<int, RuVar>, acc : RuCollectAcc, env : RuEnv) -> Maybe<RuHyp> {
	maybeMap(
		ruCollectExp(hyp.expr, vars, acc, env), 
		\expr -> RuHyp(hyp.ind, expr, hyp.pos)
	)
}

ruCreateTheorem(th : RuParseTheorem, acc : RuCollectAcc) -> Maybe<RuTheorem> {
	switch (ruLookupAssertion(acc, th.id)) {
		Some(__): {
			acc.env.out.onError("assertion with name " + id2s(th.id) + " is already defined", [RuPlace(acc.file, th.pos)]);
			None()
		}
		None(): {
			err = \-> { acc.env.out.onError("error in theorem " + id2s(th.id), [RuPlace(acc.file, th.pos)]); None(); }
			conf1 = ruAddErr2Env(acc.env, "\nat theorem " + id2s(th.id));
			vars = ruCollectVars(th.vars, acc, conf1);
			disjs = ruCollectDisjs(th.disjs, vars, acc, conf1);
			meta = ruCollectMeta(th.meta, vars, acc, conf1);
			hyps = filtermap(th.hyps, \h -> ruCollectHyp(h, vars, acc, conf1));
			if (length(hyps) != length(th.hyps)) {
				err();
			} else {
				switch (ruCollectExp(th.prop, vars, acc, conf1)) { 
					Some(prop): {
						switch (ruCollectProof(th.proof, vars, acc, conf1)) {
							Some(proof): Some(RuTheorem(
								RuDeclInfo(
									th.id, 
									acc.module, 
									ruCollectComments(th.comments, acc.file, acc.env), 
									th.pos
								), 
								RuStatement(vars, disjs, hyps, prop), 
								meta, proof
							));
							None(): err();
						}
					}
					None(): err();
				}
			}
		}
	}
}

ruCollectProof(proof : RuParseProof, vars : Tree<int, RuVar>, acc : RuCollectAcc, env : RuEnv) -> Maybe<RuProof> {
	if (acc.skipProofs) Some(ruNoProof) else {
		proof_vars = ruCollectVars(proof.vars, acc, env);
		all_vars = mergeTreeCustom(proof_vars, vars, \v, w,__ -> {
			env.out.onError("duplicate variable '" + id2s(v) + "'", [RuPlace(acc.file, proof.pos)]);
			w
		});
		proof_disjs = ruCollectDisjs(proof.disjs, all_vars, acc, env);
		do_ref = \r -> switch (r) {
			RuParseHypRef(i): RuHypRef(i);
			RuParseStepRef(i): RuStepRef(i);
		}
		steps = filtermap(proof.steps,
			\s ->
				maybeMap2(\expr, subproof -> 
					RuStep(s.ind, s.assertion, map(s.refs, do_ref), expr, subproof, s.pos)
				)(
					ruCollectExp(s.expr, all_vars, acc, env),
					ruCollectProof(s.proof, all_vars, acc, env)
				)
		);
		if (length(steps) != length(proof.steps)) None() else {
			Some(RuProof(proof_vars, proof_disjs, steps, proof.pos));
		}
	}
}

ruCreateDef(df : RuParseDef, acc : RuCollectAcc) -> Maybe<RuDef> {
	switch (ruLookupAssertion(acc, df.id)) {
		Some(__): {
			acc.env.out.onError("assertion with name '" + id2s(df.id) + "' is already defined", [RuPlace(acc.file, df.pos)]);
			None()
		}
		None(): {
			err = \-> { acc.env.out.onError("error in definition " + id2s(df.id), [RuPlace(acc.file, df.pos)]); None(); }
			env1 = ruAddErr2Env(acc.env, "\nat definitoin " + id2s(df.id));
			vars = ruCollectVars(df.vars, acc, env1);
			disjs = ruCollectDisjs(df.disjs, vars, acc, env1);
			prop_ex = fold(df.prop.symbs, [], \ac, s ->
				if (s == s2id("defiendum")) concat(ac, df.defm.symbs) else
				if (s == s2id("definiens")) concat(ac, df.defs.symbs) else
				concat(ac, [s])
			);
			hyps = filtermap(df.hyps, \h -> ruCollectHyp(h, vars, acc, env1));
			if (length(hyps) != length(df.hyps)) {
				err();
			} else {
				switch (ruCollectExp(RuParseExp(df.prop.type, prop_ex, df.prop.pos), vars, acc, env1)) {
					Some(prop): {
						switch (ruCollectExp(df.defm, vars, acc, env1)) {
							Some(defm): {
								switch (ruCollectExp(df.defs, vars, acc, env1)) {
									Some(defs): 
										Some(RuDef(
											RuDeclInfo(
												df.id, 
												acc.module, 
												ruCollectComments(df.comments, acc.file, acc.env), 
												df.pos
											), 
											RuStatement(vars, disjs, hyps, prop), 
											defm, defs
										));
									None(): err();
								}
							}
							None(): err();
						}
					}
					None(): err();
				}
			}
		}
	}
}

ruLookupConst(acc : RuCollectAcc, n : int) -> Maybe<RuConst> {
	switch(lookupTree(acc.global.decls.consts, n)) {
		Some(c): Some(c);
		None(): lookupTree(acc.local.decls.consts, n);
	}
}

ruLookupRule(acc : RuCollectAcc, n : int) -> Maybe<RuRule> {
	switch(lookupTree(acc.global.decls.rules, n)) {
		Some(r): Some(r);
		None(): lookupTree(acc.local.decls.rules, n);
	}
}

ruLookupAssertion(acc : RuCollectAcc, n : int) -> Maybe<RuAssertion> {
	switch(lookupTree(acc.global.decls.assertions, n)) {
		Some(a): Some(a);
		None(): lookupTree(acc.local.decls.assertions, n);
	}
}

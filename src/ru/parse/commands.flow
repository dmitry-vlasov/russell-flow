import ru/parse/collect;
import ru/parse/write;

export {
	ruIoCommands() -> [RuComm];
	ruCommWrite(task : RuTask, env : RuEnv) -> RuEnv;
	ruCommRead(task : RuTask, env : RuEnv) -> RuEnv;
}

ruIoCommands() -> [RuComm] {[
	ruApplyToProjectRoots(RuComm(
		"read-ru", "io", "read a Russell file", "file",
		[RuCommArg("file", false, "input file", "")],
		ruCommRead
	)),
	RuComm(
		"write-ru", "io", "write a Russell file to a filesystem", "file",
		[
			RuCommArg("file", true, "input file", ""), 
			RuCommArg("all", true, "write all files", ""), 
			RuCommArg("all-to-one", true, "write all files to a one", "")
		],
		ruCommWrite
	),
]}

ruCommWrite(task : RuTask, env : RuEnv) -> RuEnv {
	math = env.ruMath;
	conf = env.conf;
	if (lookupTreeDef(task.args, "file", "") != "") {
		file = lookupTreeDef(task.args, "file", "");
		if (!endsWith(file, ".ru")) {
			conf.onError("Wrong file extension " + file + ", mus be *.ru", []);
		} else {
			module = ruTrimPath(file, conf, ".ru");
			switch (lookupTree(math.sources, module)) {
				Some(src): ruWriteSource(src, math, conf);
				None(): conf.onMessage("source: " + file + " is not found");
			}
		}
	} else if (lookupTreeDef(task.args, "all", "") == "1") {
		start = timestamp();
		iter(getTreeValues(math.sources), 
			\src -> ruWriteSource(src, math, conf)
		);
		time = (timestamp() - start);
		if (conf.verbose > 0 && time > 100.0) {
			conf.onMessage("ru written " + i2s(sizeTree(math.sources)) + " files in " + d2st(time/ 1000.0, 2) + "s");
		}
	} else if (lookupTreeDef(task.args, "all-to-one", "") != "") {
		file = lookupTreeDef(task.args, "all-to-one", "");
		if (!endsWith(file, ".ru")) {
			conf.onError("Wrong file extension " + file + ", mus be *.ru", []);
		} else {
			ruWriteSource(ruMath2SingleSource(math, ruRemoveExt(file, ".ru"), conf), math, conf);
		}
	}
	env;
}

ruCommRead(task : RuTask, env : RuEnv) -> RuEnv {
	file = lookupTreeDef(task.args, "file", "");
	if (!endsWith(file, ".ru")) {
		env.conf.onError("Wrong file extension: '" + file + "', must be *.ru", []);
		env;
	} else {
		path = resolveRelativePath(file);
		module = ruTrimPath(path, env.conf, getFileExt(file));
		ru = maybeBind(
			maybeBind(ruLoadAll(env.conf, module, ruFromCache), \loaded ->
				ruParseAll(getTreeValues(loaded), env.conf)
			), 
			\parsed -> ruCollectMath(parsed, env.conf)
		);
		eitherMap(ru, \math -> RuEnv(env with ruMath = math), env);
	}
}

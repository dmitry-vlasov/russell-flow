import ru/util/update;

export {
	ruWriteSource(src : RuSource, math : RuMath, env : RuEnv) -> void;
	ruWriteRefactoredSources(srcs : Set<int>, math : RuMath, env : RuEnv) -> void;
}

ruWriteSource(src : RuSource, math : RuMath, env : RuEnv) -> void {
	path = src.info.path;
	conf = env.conf;
	test = lookupTreeDef(conf.opts, "test-write", "");
	if (test != "1") {
		dir = ruDirName(path);
			if (dir != "") {
			ruEnsureDirectoryExists(dir, env.out);
		}
	}
	ext = ltrim2(getFileExt(path), ".");
	maxlen = s2i(lookupTreeDef(conf.opts, "maxlen-expr", "32"));
	src_str = ru2sWrapExp(src, math, \s -> ruIndentBrackets(s, maxlen));
	if (!setFileContent(src.info.path, src_str)) {
		env.out.onError("failed to save file", [RuPlace(src.info.module, -1)]);
	} else {
		if (ruVerbose(conf) >= 2) {
			env.out.onMessage("\t" + ext + " has written : '" + path + "'");
		}
		if (ruVerbose(conf) >= 3) {
			env.out.onMessage("\tsource saved:\n--------------------\n" + src_str + "\n--------------------\n\n\n");
		}
		upd_src = ruUpdateSourcePositions(src, env);
		ruCacheAdd(upd_src, true, env);
		ruDiskCacheSave(upd_src, env);
	}
}

ruWriteRefactoredSources(srcs : Set<int>, math : RuMath, env : RuEnv) -> void {
	timer = ruMakeTimer();
	iterSet(srcs, \s -> 
		maybeApply(lookupTree(math.sources, s), \src ->
			ruWriteSource(src, math, env)
		)
	);
	if (ruVerbose(env.conf) > 0) {
		msg = 
			"ru saved: " + i2s(sizeSet(srcs)) + " refactored sources in " + ruTimePassed2s(timer) + 
			(if (ruVerbose(env.conf) == 1) "" else
				"\n\tsaved sources:\n" + strGlue(map(set2array(srcs), \src -> "\t\t" + id2s(src)), "\n")
			);
		env.out.onMessage(msg);
	}
}

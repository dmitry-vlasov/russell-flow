import ru/update;

export {
	ruWriteSource(src : RuSource, math : RuMath, conf : RuConf) -> void;
	ruWriteRefactoredSources(srcs : Set<int>, math : RuMath, conf : RuConf) -> void;
}

ruWriteSource(src : RuSource, math : RuMath, conf : RuConf) -> void {
	path = src.info.path;
	test = lookupTreeDef(conf.opts, "test-write", "");
	if (test != "1") {
		dir = ruDirName(path);
			if (dir != "") {
			err = ensureDirectoryExists(dir);
			if (err != "") {
				conf.onError("failed to create directory: '" + dir + "'", [RuPlace(src.info.module, -1)]);
			}
		}
	}
	ext = ltrim2(getFileExt(path), ".");
	maxlen = s2i(lookupTreeDef(conf.opts, "maxlen-expr", "32"));
	src_str = ru2sWrapExp(src, math.rules, \s -> ruIndentBrackets(s, maxlen));
	if (!setFileContent(src.info.path, src_str)) {
		conf.onError("failed to save file", [RuPlace(src.info.module, -1)]);
	} else {
		if (ruVerbose(conf) >= 2) {
			conf.onMessage("\t" + ext + " has written : '" + path + "'");
		}
		if (ruVerbose(conf) >= 3) {
			conf.onMessage("\tsource saved:\n--------------------\n" + src_str + "\n--------------------\n\n\n");
		}
		upd_src = ruUpdateSourcePositions(src, conf);
		ruToMemCache(upd_src, conf);
		ruToDiskCache(upd_src, conf);
	}
}

ruWriteRefactoredSources(srcs : Set<int>, math : RuMath, conf : RuConf) -> void {
	start = ruTime();
	iterSet(srcs, \s -> 
		maybeApply(lookupTree(math.sources, s), \src ->
			ruWriteSource(src, math, conf)
		)
	);
	if (ruVerbose(conf) > 0) {
		msg = 
			"ru saved: " + i2s(sizeSet(srcs)) + " refactored sources in " + ruTime2s(ruTime() - start) + 
			(if (ruVerbose(conf) == 1) "" else
				"\n\tsaved sources:\n" + strGlue(map(set2array(srcs), \src -> "\t\t" + id2s(src)), "\n")
			);
		conf.onMessage(msg);
	}
}

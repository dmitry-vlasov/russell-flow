import lingo/compiler/syntaxtree_types;
import ru/parse/ast_mnemonics;

export {
	get_ru_source_ru_toplevel_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_scomment(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_mcomment(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_import(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_const(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_symbol(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_ascii_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_latex_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_type(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_supers_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_super_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_rule(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_axiom(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_def(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_theorem(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_proof(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_hyps_bar_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_hyp_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_defm(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_defs(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_proof_step_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_step(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_lemma(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_problem(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_refs(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_refs0_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_refs1_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_ref(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_hyp_ref(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_step_ref(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_disjs_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_disjs0_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_disjs1_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_disj(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_dis0_v(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_dis1_v_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_meta_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_meta0_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_meta1_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_vars_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_vars0_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_vars1_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_var(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_type_id(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_expr(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_symbws_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_symb(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_latex_symb(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_ind(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_id(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_var_id(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_id_char_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_digit_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_non_space_char(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_var_id_char_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_char_(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_ws(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_space_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_any_char(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_expr__choice62(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_scomment__auto63(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_scomment__auto63_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_mcomment__auto64(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_mcomment__auto64_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_symb__auto65(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_symb__auto65_s(st : SyntaxTree) -> [SyntaxTree];
	get_ru_source_ru_latex_symb__auto66(st : SyntaxTree) -> SyntaxTree;
	get_ru_source_ru_latex_symb__auto66_s(st : SyntaxTree) -> [SyntaxTree];

}

get_ru_source_ru_scomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_mcomment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_import(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_const(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_symbol(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_const) {
		st.children[2][0];
	} else failSyntaxTree
}
get_ru_source_ru_type(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_rule(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_axiom(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_def(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_theorem(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 8 && st.rule == st_ru_toplevel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_proof(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[10][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[10][0];
	} else failSyntaxTree
}
get_ru_source_ru_defm(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[8][0];
	} else failSyntaxTree
}
get_ru_source_ru_defs(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[9][0];
	} else failSyntaxTree
}
get_ru_source_ru_step(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_ru_proof_step) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_lemma(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_proof_step) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_problem(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ru_proof_step) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_refs(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[6][0];
	} else failSyntaxTree
}
get_ru_source_ru_ref(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_refs0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_refs1) {
		st.children[1][0];
	} else failSyntaxTree
}
get_ru_source_ru_hyp_ref(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_ref) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_step_ref(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ru_ref) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_disj(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_disjs0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_disjs1) {
		st.children[1][0];
	} else failSyntaxTree
}
get_ru_source_ru_dis0_v(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_disj) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_var(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_vars0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_vars1) {
		st.children[1][0];
	} else failSyntaxTree
}
get_ru_source_ru_type_id(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_var) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_expr) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_expr(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_rule) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[12][0];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_ru_hyp) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_defm) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_defs) {
		st.children[1][0];
	} else failSyntaxTree
}
get_ru_source_ru_symb(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_import) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_symbol) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_ascii) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_symbws) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_latex_symb(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_latex) {
		st.children[1][0];
	} else failSyntaxTree
}
get_ru_source_ru_ind(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_hyp) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_hyp_ref) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_step_ref) {
		st.children[1][0];
	} else failSyntaxTree
}
get_ru_source_ru_id(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_type) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_supers) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_super) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_rule) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_type_id) {
		st.children[1][0];
	} else failSyntaxTree
}
get_ru_source_ru_var_id(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_dis0_v) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_dis1_v) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_meta0) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_meta1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_var) {
		st.children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_non_space_char(st : SyntaxTree) -> SyntaxTree {
	if (get_ru_source_ru_symb__auto65(st).choice == 0) {
		get_ru_source_ru_symb__auto65(st).children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_char_(st : SyntaxTree) -> SyntaxTree {
	if (get_ru_source_ru_scomment__auto63(st).choice == 0) {
		get_ru_source_ru_scomment__auto63(st).children[0][0];
	} else if (get_ru_source_ru_mcomment__auto64(st).choice == 0) {
		get_ru_source_ru_mcomment__auto64(st).children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_ws(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_source) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_scomment) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_mcomment) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_import) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_import) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_import) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_const) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_const) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_const) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_symbol) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_symbol) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_symbol) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_ascii) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_ascii) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_ascii) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_latex) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_latex) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_latex) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_type) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_type) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_type) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_ru_supers) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_supers) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_super) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_super) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_rule) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_rule) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_rule) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_ru_rule) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_rule) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[10][0];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[11][0];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[13][0];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_ru_proof) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_proof) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_proof) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_hyps_bar) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_hyp) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_hyp) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_defm) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_defs) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[10][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[9][0];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_ru_refs) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_refs) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_refs1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_hyp_ref) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_hyp_ref) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_step_ref) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_step_ref) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_disjs) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_disjs) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_disjs) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_disjs1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_dis0_v) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_dis1_v) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_meta) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_meta) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_meta) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_meta0) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_meta1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_vars) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_vars) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_vars1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_var) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_type_id) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ru_type_id) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ru_expr) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ru_expr) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ru_expr) {
		st.children[5][0];
	} else if (st.choice == 0 && st.rule == st_ru_symbws) {
		st.children[1][0];
	} else failSyntaxTree
}
get_ru_source_ru_any_char(st : SyntaxTree) -> SyntaxTree {
	if (get_ru_source_ru_latex_symb__auto66(st).choice == 0) {
		get_ru_source_ru_latex_symb__auto66(st).children[0][0];
	} else failSyntaxTree
}
get_ru_source_ru_expr__choice62(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ru_expr) {
		st.children[2][0];
	} else failSyntaxTree
}
get_ru_source_ru_scomment__auto63(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_ru_source_ru_mcomment__auto64(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_ru_source_ru_symb__auto65(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_ru_source_ru_latex_symb__auto66(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}

get_ru_source_ru_toplevel_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_source) {
		st.children[1];
	} else []
}
get_ru_source_ru_ascii_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_const) {
		st.children[3];
	} else []
}
get_ru_source_ru_latex_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_const) {
		st.children[4];
	} else []
}
get_ru_source_ru_supers_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_type) {
		st.children[3];
	} else []
}
get_ru_source_ru_super_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_supers) {
		st.children[3];
	} else []
}
get_ru_source_ru_hyps_bar_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[6];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[6];
	} else []
}
get_ru_source_ru_hyp_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[7];
	} else if (st.choice == 0 && st.rule == st_ru_hyps_bar) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ru_hyps) {
		st.children[0];
	} else []
}
get_ru_source_ru_proof_step_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_proof) {
		st.children[4];
	} else []
}
get_ru_source_ru_refs0_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_refs) {
		st.children[1];
	} else []
}
get_ru_source_ru_refs1_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_refs0) {
		st.children[1];
	} else []
}
get_ru_source_ru_disjs_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_ru_proof) {
		st.children[2];
	} else []
}
get_ru_source_ru_disjs0_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_disjs) {
		st.children[2];
	} else []
}
get_ru_source_ru_disjs1_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_disjs0) {
		st.children[1];
	} else []
}
get_ru_source_ru_dis1_v_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_disj) {
		st.children[1];
	} else []
}
get_ru_source_ru_meta_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[5];
	} else []
}
get_ru_source_ru_meta0_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_meta) {
		st.children[2];
	} else []
}
get_ru_source_ru_meta1_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_meta0) {
		st.children[2];
	} else []
}
get_ru_source_ru_vars_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_rule) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_ru_axiom) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_ru_def) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_ru_theorem) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_ru_proof) {
		st.children[1];
	} else []
}
get_ru_source_ru_vars0_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_vars) {
		st.children[1];
	} else []
}
get_ru_source_ru_vars1_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_vars0) {
		st.children[1];
	} else []
}
get_ru_source_ru_symbws_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_step) {
		st.children[9];
	} else if (st.choice == 0 && st.rule == st_ru_lemma) {
		st.children[8];
	} else if (st.choice == 0 && st.rule == st_ru_problem) {
		st.children[7];
	} else if (st.choice == 0 && st.rule == st_ru_expr) {
		st.children[4];
	} else []
}
get_ru_source_ru_id_char_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_id) {
		st.children[0];
	} else []
}
get_ru_source_ru_digit_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_ind) {
		st.children[0];
	} else []
}
get_ru_source_ru_var_id_char_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_var_id) {
		st.children[0];
	} else []
}
get_ru_source_ru_space_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_ws) {
		st.children[0];
	} else []
}
get_ru_source_ru_scomment__auto63_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_scomment) {
		st.children[0];
	} else []
}
get_ru_source_ru_mcomment__auto64_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_mcomment) {
		st.children[0];
	} else []
}
get_ru_source_ru_symb__auto65_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_symb) {
		st.children[0];
	} else []
}
get_ru_source_ru_latex_symb__auto66_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ru_latex_symb) {
		st.children[0];
	} else []
}


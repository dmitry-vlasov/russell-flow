import base/stats;
import ru/parse/exp;
import ru/parse/parse;
import ru/verify/math;
import ru/parse/fast/lang;
import ru/parse/fast/assertions;

export {
	ruCreateMath(sources : [RuAnySource], env : RuEnv) -> Maybe<RuMath>;
	ruCollectMathFast(sources : Tree<int, RuAnySource>, env : RuEnv, skip_proofs : bool) -> Maybe<RuMath>;
}

ruCollectMathFast(sources : Tree<int, RuAnySource>, env : RuEnv, skip_proofs : bool) -> Maybe<RuMath> {
	ruCreateMath(getTreeValues(sources), env);
}

ruCreateMath(sources : [RuAnySource], env0 : RuEnv) -> Maybe<RuMath> {
	err_count = ref 0;
	env = ruAddErrCounter2Env(env0, err_count);
	timer = ruMakeTimer();
	p_timer = ruMakeTimer();
	parsed : [RuParsed] = filtermap(ruConcurrent(map(sources, \src -> \-> 
		switch (src) {
			RuRawSource(__,__,__): ruParseSource(src, env);
			RuParsed():            Some(src)
		}
	)), idfn);
	env.out.onMessage("PARSED: in " + ruTimePassed2s(p_timer));
	d_timer = ruMakeTimer();
	all_decls = ruSources2AnyDecls(parsed);
	env.out.onMessage("ALL DECLS: " + i2s(length(all_decls)) + " in " + ruTimePassed2s(d_timer));
	l_timer = ruMakeTimer();
	lang = ruCreateLang(all_decls, env);
	env.out.onMessage("LANG: " + ruTimePassed2s(l_timer));
	a_timer = ruMakeTimer();
	assertions = ruCreateAssertions(all_decls, lang, env);
	env.out.onMessage("ASS: " + ruTimePassed2s(a_timer));
	decls = RuDecls(lang, assertions);
	s_timer = ruMakeTimer();
	sources_tree = fold(parsed, makeTree(), \acc, src ->
		switch (src) {
			RuSource(__,__,__,info):      setTree(acc, info.id, src);
			RuParseSource(__,__,__,info): setTree(acc, info.id, ruCreateSource(src, decls, env));
		}
	);
	env.out.onMessage("SRC: " + ruTimePassed2s(s_timer));
	created = RuMath(sources_tree, decls);
	ruSaveIds(env);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("ru created: " + i2s(sizeTree(created.sources)) + " files in " + ruTimePassed2s(timer));
	}
	if (^err_count == 0) {
		Some(created);
	} else {
		None();
	}
}

ruCreateSource(src : RuParseSource, decls : RuDecls, env : RuEnv) -> RuSource {
	RuSource(
		map(src.imports, \imp -> RuImport(imp.module, imp.pos)),
		filtermap(src.decls, \decl -> ruFindDecl(decl.id, decls, env)),
		ruCreateComments(src.comments, src.info, env),
		src.info
	);
}

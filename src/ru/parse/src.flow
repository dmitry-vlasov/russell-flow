import base/fileinfo;

export {
	RuParseSource(imports : [RuParseImport], decls : [RuParseDecl], comments : [RuParseComment], info : RuFileInfo);
	RuParseImport(module : int, pos : int);
	RuParseDecl ::= RuParseConst, RuParseType, RuParseRule, RuParseAxiom, RuParseDef, RuParseTheorem;

	RuParseComment(text : string, json : string, pos : int);
	RuParseConst(id : int, comments : [RuParseComment], ascii : int, latex : int, pos : int);
	RuParseType(id : int, comments : [RuParseComment], supers : [int], pos : int);
	RuParseRule(id : int, comments : [RuParseComment], vars : [RuParseVar], term : RuParseExp, pos : int);
	RuParseAxiom(id : int, comments : [RuParseComment], vars : [RuParseVar], disjs : [RuParseDisj], hyps : [RuParseHyp], prop : RuParseExp, pos : int);
	RuParseTheorem(id : int, comments : [RuParseComment], vars : [RuParseVar], disjs : [RuParseDisj], meta : RuParseMeta, hyps : [RuParseHyp], prop : RuParseExp, proof : RuParseProof, pos : int);
	RuParseDef(id : int, comments : [RuParseComment], vars : [RuParseVar], disjs : [RuParseDisj], hyps : [RuParseHyp], defm : RuParseExp, defs : RuParseExp, prop : RuParseExp, pos : int);
	
	RuParseHyp(ind : int, expr : RuParseExp, pos : int);
	RuParseVar(id : int, type : int, pos : int);
	RuParseDisj(vars : [int], pos : int);
	RuParseProof(vars : [RuParseVar], disjs : [RuParseDisj], steps : [RuParseStep], pos : int);
	RuParseStep(ind : int, assertion : int, refs : [RuParseRef], expr : RuParseExp, proof : RuParseProof, pos : int);
	RuParseRef ::= RuParseHypRef, RuParseStepRef;
	RuParseHypRef(ind : int);
	RuParseStepRef(ind : int);

	RuParseExp(type : int, symbs : [int], pos : int);
	RuParseMeta(meta : [int], pos : int);

	RuParseAny ::= 
		RuParseSource, RuParseImport, RuParseConst, RuParseType, RuParseRule, RuParseAxiom, RuParseDef, RuParseTheorem, RuParseComment,
		RuParseStep, RuParseExp, RuParseHyp, RuParseProof, RuParseDisj, RuParseVar, RuParseHypRef, RuParseStepRef;

	ruParse2s(a : RuParseAny) -> string;
	ruSetParseDeclComments(decl : RuParseDecl, comms : [RuParseComment]) -> RuParseDecl;

	ruParseLemma = -1;
	ruParseProblem = -2;
	ruParseNoProof = RuParseProof([], [], [], -1);
}

ruParse2s(a : RuParseAny) -> string {
	vars2s  = \vars -> if (vars == []) "" else "(" + strGlue(map(vars, ruParse2s), ", ") + ") ";
	disjs2s = \disjs -> if (disjs == []) "" else "disjointed(" + strGlue(map(disjs, ruParse2s), ", ") + ") ";
	meta2s  = \m -> if (m.meta == []) "" else "meta(" + strGlue(map(m.meta, id2s), ", ") + ") ";
	exp2s   = \expr, delim -> ": " + id2s(expr.type) + " = " + delim + " " + strGlue(map(expr.symbs, id2s), " ") + " ;;";
	prop2s  = \prop -> "\tprop " + exp2s(prop, "|-") + "\n";
	refs2s  = \refs -> "(" + strGlue(map(refs, ruParse2s), ", ") + ")";
	hyps2s  = \hyps -> if (hyps == []) "" else strGlue(map(hyps, ruParse2s), "\n") + "\n";
	comms2s = \comms -> strGlue(map(comms, ruParse2s), "\n");
	switch (a) {
		RuParseSource(imps, decls, comms, info): 
			comms2s(comms) + "\n" +
			(if (imps == []) "" else strGlue(map(imps, ruParse2s), "\n") + "\n\n") +
			strGlue(map(decls, ruParse2s), "\n");
		RuParseImport(path,__):
			"import " + id2s(path) + ";;";
		RuParseConst(symbol, comms, ascii, latex,__): 
			comms2s(comms) + "\n" +
			"constant {\n" + 
				"\tsymbol " + id2s(symbol) + " ;;\n" +
				(if (id2s(ascii) != "") "\tascii " + id2s(ascii) + " ;;\n" else "") + 
				(if (id2s(latex) != "") "\tlatex " + id2s(latex) + " ;;\n" else "") +
			"}\n";
		RuParseType(name, comms, supers,__): 
			comms2s(comms) + "\n" +
			"type " + id2s(name) + (if (supers == []) "" else " : " + strGlue(map(supers, id2s), ", ")) + " ;;\n";
		RuParseRule(name, comms, vars, term,__):
			comms2s(comms) + "\n" +
			"rule " + id2s(name) + " " + vars2s(vars) + "{\n" +
				"\tterm " + exp2s(term, "#") + "\n" +
			"}\n";
		RuParseAxiom(name, comms, vars, disjs, hyps, prop,__):
			comms2s(comms) + "\n" +
			"axiom " + id2s(name) + " " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				hyps2s(hyps) +
				(if (hyps == []) "" else "\t----------\n") +
				prop2s(prop) +
			"}\n";
		RuParseDef(name, comms, vars, disjs, hyps, defm, defs, prop,__): 
			comms2s(comms) + "\n" +
			"definition " + id2s(name) + " " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				hyps2s(hyps) +
				"\tdefiendum " + exp2s(defm, "#") + "\n" +
				"\tdefiniens " + exp2s(defs, "#") + "\n" +
				"\t-------------\n" +
				prop2s(prop) +
			"}\n";
		RuParseTheorem(name, comms, vars, disjs, meta, hyps, prop, proof,__):
			comms2s(comms) + "\n" + 
			"theorem " + id2s(name) + " " + vars2s(vars) + disjs2s(disjs) + meta2s(meta) + "{\n" +
				hyps2s(hyps) + 
				(if (hyps == []) "" else "\t----------\n") +
				prop2s(prop) +
			"} " + ruParse2s(proof);
		RuParseHyp(ind, expr,__): 
			"\thyp " + i2s(ind + 1) + " " + exp2s(expr, "|-");
		RuParseProof(vars, disjs, steps,__): 
			"proof " + vars2s(vars) + disjs2s(disjs) + "{\n" +
				strGlue(map(steps, ruParse2s), "\n") + "\n" +
			"}\n";
		RuParseStep(ind, assertion, refs, expr, proof, __):
			if (assertion == ruParseLemma) {
				"\tstep " + i2s(ind + 1) + " : " + id2s(expr.type) + " = " + 
					"lemma " + refs2s(refs) + " |- " + strGlue(map(expr.symbs, id2s), " ") + " ;; " + ruParse2s(proof);
			} else if (assertion == ruParseLemma) {
				"\tstep " + i2s(ind + 1) + " : " + id2s(expr.type) + " = " + 
					" ? |- " + strGlue(map(expr.symbs, id2s), " ") + " ;;";
			} else {
				"\tstep " + i2s(ind + 1) + " : " + id2s(expr.type) + " = " + 
					id2s(assertion) + " " + refs2s(refs) + " |- " + strGlue(map(expr.symbs, id2s), " ") + " ;;";
			}
		RuParseComment(text, json, __): 
			if (json == "") "/* " + text + " */\n" else "/** " + json + "\n-----\n" + text + " */\n";
		RuParseDisj(disj,__): strGlue(map(disj, id2s), " ");
		RuParseExp(type, symbs,__): strGlue(map(symbs, id2s), " ");
		RuParseHypRef(i): "hyp " + i2s(i + 1);
		RuParseStepRef(i): "step " + i2s(i + 1);
		RuParseVar(name, type,__): id2s(name) + " : " + id2s(type);
	}
}

ruSetParseDeclComments(decl : RuParseDecl, comms : [RuParseComment]) -> RuParseDecl {
	switch (decl) {
		RuParseConst(__,__,__,__,__):
			RuParseConst(decl with comments = comms);
		RuParseType(__,__,__,__):
			RuParseType(decl with comments = comms);
		RuParseRule(__,__,__,__,__):
			RuParseRule(decl with comments = comms);
		RuParseAxiom(__,__,__,__,__,__,__):
			RuParseAxiom(decl with comments = comms);
		RuParseTheorem(__,__,__,__,__,__,__,__,__):
			RuParseTheorem(decl with comments = comms);
		RuParseDef(__,__,__,__,__,__,__,__,__):
			RuParseDef(decl with comments = comms);
	}
}

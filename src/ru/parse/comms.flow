import ru/parse/collect;
import ru/parse/write;

export {
	ruIoCommands : [RuComm] = [ 
		ruCommRead,
		ruCommWrite
	];
	ruRunWrite(unit : RuUnit) -> Maybe<RuState>;
	ruRunRead(unit : RuUnit) -> Maybe<RuState>;
}

ruCommWrite = RuComm(
	RuCommDescr(
		"write-ru", "io", "write a Russell file to a filesystem", "target", false, false, 
		[
			RuCommArg("target", true, "input file, module or 'all' (default)", "all"),
			RuCommArg("monolithic", true, "include all dependencies into a target file", ""),
			RuCommArg("test-write", true, "perform a test writing - do not save files", ""),
		], []
	),
	ruRunWrite
);

ruRunWrite(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	test = lookupTreeDef(task.args, "test-write", "");
	conf = if (test != "1") state.conf else RuConf(state.conf with opts = setTree(state.conf.opts, "test-write", "1"));
	math = ruMakeMathFromSources(state.ru, env);
	write_module = \module -> {
		switch (lookupTree(math.sources, module)) {
			Some(src): {
				if (ruVerbose(env.conf) > 1)  {
					env.out.onMessage("\tgoing to save: '" + id2s(module) + "'");
				}
				monolith =lookupTreeDef(task.args, "monolithic", "");
				if (monolith == "") {
					ruWriteSource(src, math, env);
				} else {
					if (monolith != "1") {
						ruWriteSource(ruSources2SingleSource(math.sources, monolith, env), math, env);
					} else {
						ruWriteSource(ruSources2SingleSource(math.sources, src.info.path, env), math, env);
					}
				}
			}
			None(): env.out.onMessage("module: '" + id2s(module) + "' is not found");
		}
	}
	if (sizeTree(math.sources) == 0) {
		env.out.onError("There are no Russell sources at all.", []);
	} else {
		file = lookupTreeDef(task.args, "target", "");
		ruSaveIds(env);
		if (file == "all") {
			timer = ruMakeTimer();
			iter(getTreeValues(math.sources), 
				\src -> ruWriteSource(src, math, env)
			);
			if (ruVerbose(env.conf) > 0 && ruTimePassed(timer) > 100.0) {
				env.out.onMessage("ru written " + i2s(sizeTree(math.sources)) + " files in " + ruTimePassed2s(timer));
			}
		} else {
			file_id = s2id(file);
			if (containsKeyTree(math.sources, file_id)) {
				write_module(file_id)
			} else {
				module = ruTrimPath(file, conf, ".ru");
				module_id = s2id(module);
				if (containsKeyTree(math.sources, module_id)) {
					write_module(module_id)
				} else {
					env.out.onError("Russell source '" + file + "' is not found", []);
				}
			}
		}
	}
	Some(state);
}

ruCommRead = RuComm(
	RuCommDescr(
		"read-ru", "io", "read a Russell file", "file", true, false, 
		[
			RuCommArg("file", false, "input file", ""),
			RuCommArg("skip-proofs", true, "leave proofs blank", ""),
		], []
	),
	ruRunRead
);

ruRunRead(unit : RuUnit) -> Maybe<RuState> {
	env = ruUnitEnv(unit);
	state = unit.state;
	task = unit.task;
	file = lookupTreeDef(task.args, "file", "");
	if (!endsWith(file, ".ru")) {
		env.out.onError("Wrong extension of a file: '" + file + "', must be *.ru", []);
		None();
	} else {
		conf = state.conf;
		path = ruResolveRelativePath(file, conf.workingDir);
		if (!fileExists(path)) {
			env.out.onError("ru file: '" + file + "' is not found", []);
			None();
		} else {
			module = ruTrimPath(path, conf, getFileExt(file));
			skip_proofs = lookupTreeDef(task.args, "skip-proofs", "");
			ru = maybeBind(
				maybeBind(ruLoadAll(env, s2id(module), ruFromCache), \loaded ->
					ruParseAll(getTreeValues(loaded), env)
				), 
				\parsed -> ruCollectMath(parsed, env, skip_proofs == "1")
			);
			maybeMap(ru, \math -> RuState(state with ru = math.sources));
		}
	}
}

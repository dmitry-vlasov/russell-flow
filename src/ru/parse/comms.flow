import ru/parse/collect;
import ru/parse/write;

export {
	ruIoCommands : [RuComm] = [ 
		ruCommRead,
		ruCommWrite
	];
	ruRunWrite(task : ScTask, env : RuState) -> Maybe<RuState>;
	ruRunRead(task : ScTask, env : RuState) -> Maybe<RuState>;
}

ruCommWrite = RuComm(
	"write-ru", "io", "write a Russell file to a filesystem", "target",
	[
		RuCommArg("target", true, "input file, module or 'all' (default)", "all"),
		RuCommArg("monolithic", true, "include all dependencies into a target file", "")
	],
	ruRunWrite
);

ruRunWrite(task : ScTask, env : RuState) -> Maybe<RuState> {
	math = env.ruMath;
	conf = env.conf;
	write_module = \module -> {
		switch (lookupTree(math.sources, module)) {
			Some(src): {
				monolith =lookupTreeDef(task.args, "monolithic", "");
				if (monolith == "") {
					ruWriteSource(src, math, conf);
				} else {
					if (monolith != "1") {
						ruWriteSource(ruMath2SingleSource(math, monolith, conf), math, conf);
					} else {
						ruWriteSource(ruMath2SingleSource(math, src.info.path, conf), math, conf);
					}
				}
			}
			None(): conf.onMessage("module: " + module + " is not found");
		}
	}
	target = lookupTreeDef(task.args, "target", "");
	if (target == "all") {
		start = timestamp();
		iter(getTreeValues(math.sources), 
			\src -> ruWriteSource(src, math, conf)
		);
		time = (timestamp() - start);
		if (conf.verbose > 0 && time > 100.0) {
			conf.onMessage("ru written " + i2s(sizeTree(math.sources)) + " files in " + d2st(time/ 1000.0, 2) + "s");
		}
	} else {
		if (containsKeyTree(math.sources, target)) {
			write_module(target)
		} else {
			if (!endsWith(target, ".ru")) {
				conf.onError("Wrong extension of a file '" + target + "', must be *.ru", []);
			} else {
				module = ruTrimPath(target, conf, ".ru");
				write_module(module);
			}
		}
	}
	Some(env);
}

ruCommRead = RuComm(
	"read-ru", "io", "read a Russell file", "file",
	[RuCommArg("file", false, "input file", "")],
	ruRunRead
);

ruRunRead(task : ScTask, env : RuState) -> Maybe<RuState> {
	file = lookupTreeDef(task.args, "file", "");
	if (!endsWith(file, ".ru")) {
		env.conf.onError("Wrong extension of a file: '" + file + "', must be *.ru", []);
		None();
	} else {
		path = resolveRelativePath(file);
		module = ruTrimPath(path, env.conf, getFileExt(file));
		ru = maybeBind(
			maybeBind(ruLoadAll(env.conf, module, ruFromCache), \loaded ->
				ruParseAll(getTreeValues(loaded), env.conf)
			), 
			\parsed -> ruCollectMath(parsed, env.conf)
		);
		maybeMap(ru, \math -> RuState(env with ruMath = math));
	}
}


import base/load;
import ru/parse/src;
import ru/src;

export {
	RuParsed ::= RuParseSource, RuSource;
	RuAnySource ::= RuRawSource, RuParseSource, RuSource;

	ruSourceImports(src : RuAnySource) -> [int];
	ruSourceModule(src : RuAnySource) -> int;

	ruDetectCyclicImports(parsed : Tree<int, RuAnySource>, env : RuEnv) -> bool;
	ruRevealCyclicImport(parsed : Tree<int, RuAnySource>) -> string;

	ruParsedSourcesOrder(sources : [RuParsed], out : RuOut) -> [RuParsed];
}

ruSourceImports(src : RuAnySource) -> [int] {
	switch (src) {
		RuSource(imports,__,__,__):      map(imports, \imp -> imp.id);
		RuParseSource(imports,__,__,__): map(imports, \imp -> imp.module);
		RuRawSource(imports,__,__):      imports;
	}
}

ruSourceModule(src : RuAnySource) -> int {
	switch (src) {
		RuSource(__,__,__,info):      info.id;
		RuParseSource(__,__,__,info): info.id;
		RuRawSource(__,__,info):      info.id;
	}
}

ruDetectCyclicImports(parsed : Tree<int, RuAnySource>, env : RuEnv) -> bool {
	if (isEmptyTree(parsed)) false else {
		ready = filter(
			getTreeValues(parsed), 
			\src -> forall(ruSourceImports(src), \imp -> !containsKeyTree(parsed, imp))
		);
		if (ready == []) {
			env.out.error("cyclic import detected:\n" + ruRevealCyclicImport(parsed), []);
			true
		} else {
			less_parsed = fold(ready, parsed, \acc, src -> removeFromTree(acc, ruSourceModule(src)));
			ruDetectCyclicImports(less_parsed, env);
		}
	}
}

ruRevealCyclicImport(parsed : Tree<int, RuAnySource>) -> string {
	strIndent(strGlue(map(getTreeKeys(parsed), \f -> "'" + id2s(f) + "'"), "\n"));
}

ruParsedSourcesOrder(sources : [RuParsed], out : RuOut) -> [RuParsed] {
	ruDoParsedSourcesOrder(sources, [], makeSet(), out);
}

ruDoParsedSourcesOrder(srcs : [RuParsed], acc : [RuParsed], visited: Set<int>, out : RuOut) -> [RuParsed] {
	new_level = filter(srcs, \src -> forall(ruSourceImports(src), \imp -> containsSet(visited, imp)));
	level_names = buildSet(map(new_level, \src -> src.info.id));
	if (new_level == []) {
		if (length(srcs) == 0) acc else {
			out.error("Cycilc imports detected:\n" + strIndent(strGlue(map(srcs, \src -> id2s(src.info.id)), "\n")), []);
			[]
		};
	} else {
		new_srcs = filter(srcs, \src -> !containsSet(level_names, src.info.id));
		ruDoParsedSourcesOrder(new_srcs, concat(acc, new_level), mergeSets(visited, level_names), out);
	}
}

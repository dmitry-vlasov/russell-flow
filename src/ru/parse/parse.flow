
import ds/vector;
import ru/parse/load;
import ru/parse/file;
import ru/parse/src;
import ru/parse/ast;
import ru/math;

export {
	RuParsed ::= RuParseSource, RuSource;
	RuAnySource ::= RuRawSource, RuParseSource, RuSource;

	ruSourceImports(src : RuAnySource) -> [int];
	ruSourceModule(src : RuAnySource) -> int;

	ruParseAll(loaded : [RuLoaded], env : RuEnv) -> Maybe<Tree<int, RuParsed>>;
	ruParseOne(loaded : RuLoaded, env : RuEnv) -> Maybe<RuParsed>;
	ruParseSource(loaded : RuRawSource, env : RuEnv) -> Maybe<RuParseSource>;
	ruRevealCyclicImport(parsed : Tree<int, RuAnySource>) -> string;
}

ruSourceImports(src : RuAnySource) -> [int] {
	switch (src) {
		RuSource(imports,__,__,__):      map(imports, \imp -> imp.id);
		RuParseSource(imports,__,__,__): map(imports, \imp -> imp.module);
		RuRawSource(imports,__,__):      imports;
	}
}

ruSourceModule(src : RuAnySource) -> int {
	switch (src) {
		RuSource(__,__,__,info):      info.id;
		RuParseSource(__,__,__,info): info.id;
		RuRawSource(__,__,info):      info.id;
	}
}

ruParseAll(loaded : [RuLoaded], env0 : RuEnv) -> Maybe<Tree<int, RuParsed>> {
	err_count = ref 0;
	env = ruAddErrCounter2Env(env0, err_count);
	timer = ruMakeTimer();
	parsed : [RuParsed] = filtermap(ruConcurrent(map(loaded, \l -> \-> ruParseOne(l, env))), idfn);
	ret = fold(parsed, makeTree(),
		\acc, src -> setTree(acc, ruSourceModule(src), src)
	);
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage("ru parsed: " +i2s(sizeTree(ret)) + " files in " + ruTimePassed2s(timer));
	}
	if (^err_count == 0) {
		if (ruDetectCyclicImports(ret, env)) None() else {
			Some(ret);
		}
	} else {
		env.out.onError("ru failed to parse", []);
		None();
	}
}

ruParseOne(loaded : RuLoaded, env : RuEnv) -> Maybe<RuParsed> {
	switch (loaded) {
		RuSource(__,__,__,__): Some(loaded);
		RuRawSource(__,__,__): cast(ruParseSource(loaded, env) : Maybe<RuParseSource> -> Maybe<RuParsed>);
	}
}

ruParseSource(loaded : RuRawSource, env : RuEnv) -> Maybe<RuParseSource> {
	timer = ruMakeTimer();
	pr1 = parse_source(loaded.src);
	st = pr1.first;
	err = pr1.second;
	if (st.end != strlen(loaded.src)) {
		env.out.onError(
			"Syntax error:\n" + 
				"\t" + ruExpectError2s(err) + "\n" +
			"source:\n" +
				strIndent(ruHighlightErrorPos(loaded.src, st.end)),  
			[RuPlace(loaded.info.path, st.end)]
		);
		None();
	} else {
		parsed = ruMakeSrc(loaded, st, env);
		if (ruVerbose(env.conf) > 1) {
			env.out.onMessage("\tru parsed: '" + loaded.info.path + "' in " + ruTimePassed2s(timer));
		}
		Some(parsed);
	}
}

RuParseSourceAcc(
	imports : [RuParseImport],
	decls : Vector<RuParseDecl>,
	comments : [RuParseComment]
);

ruMakeSrc(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseSource {
	parsed = fold(get_source_toplevel_s(st), RuParseSourceAcc([], makeVector(128), []),
		\acc, decl -> {
			if (decl.rule == st_scomment || decl.rule == st_mcomment) {
				RuParseSourceAcc(acc with comments = concat(acc.comments, [ruMakeComment(loaded, decl, env)]));
			} else if (decl.rule == st_import) {
				RuParseSourceAcc(acc with imports = concat(acc.imports, [ruMakeImport(loaded, decl, env)]));
			} else if (decl.rule == st_const) {
				pushVector(acc.decls, ruMakeConst(loaded, decl, acc.comments, env));
				RuParseSourceAcc(acc with comments = []);
			} else if (decl.rule == st_type) {
				pushVector(acc.decls, ruMakeType(loaded, decl, acc.comments, env));
				RuParseSourceAcc(acc with comments = []);
			} else if (decl.rule == st_rule) {
				pushVector(acc.decls, ruMakeRule(loaded, decl, acc.comments, env));
				RuParseSourceAcc(acc with comments = []);
			} else if (decl.rule == st_axiom) {
				pushVector(acc.decls, ruMakeAxiom(loaded, decl, acc.comments, env));
				RuParseSourceAcc(acc with comments = []);
			} else if (decl.rule == st_def) {
				pushVector(acc.decls, ruMakeDef(loaded, decl, acc.comments, env));
				RuParseSourceAcc(acc with comments = []);
			} else if (decl.rule == st_theorem) {
				pushVector(acc.decls, ruMakeTheorem(loaded, decl, acc.comments, env));
				RuParseSourceAcc(acc with comments = []);
			} else {
				acc
			}
		}
	);
	RuParseSource(parsed.imports, vector2array(parsed.decls), parsed.comments, loaded.info);
}

ruMakeComment(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseComment {
	all_text1 = trim2(grabSTText(st, loaded.src), " \n\t\r");
	all_text2 = if (startsWith(all_text1, "/*") || startsWith(all_text1, "//")) strRight(all_text1, 2) else all_text1;
	all_text = if (endsWith(all_text2, "*/")) strLeft(all_text2, strlen(all_text2) - 2) else all_text2;
	if (!startsWith(all_text, "*")) RuParseComment(all_text, "", st.start) else {
		json_end = strIndexOf(all_text, "\n-----");
		if (json_end == -1) {
			json = substring(all_text, 1, strlen(all_text));
			RuParseComment("", json, st.start);
		} else {
			json = substring(all_text, 1, json_end - 1);
			text_begin = for(
				json_end + 5, 
				\i -> (i < strlen(all_text)) && getCharAt(all_text, i) == "-", 
				\i -> i + 1
			);
			text = substring(all_text, text_begin + 1, strlen(all_text));
			RuParseComment(text, json, st.start)
		}
	}
}

ruMakeImport(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseImport { 
	path = ruTrimPath(grabSTText(get_source_symb(st), loaded.src), env.conf, ".ru");
	RuParseImport(s2id(path), st.start);
}

ruMakeConst(loaded : RuRawSource, st : SyntaxTree, comments : [RuParseComment], env : RuEnv) -> RuParseConst {
	symb = s2id(rtrim(grabSTText(get_source_symb(get_source_symbol(st)), loaded.src)));
	ascii_st = get_source_ascii_s(st);
	ascii = if (ascii_st != []) s2id(rtrim(grabSTText(get_source_symb(ascii_st[0]), loaded.src))) else -1;
	latex_st = get_source_latex_s(st);
	latex = if (latex_st != []) s2id(rtrim(grabSTText(get_source_symb(latex_st[0]), loaded.src))) else -1;
	RuParseConst(symb, comments, ascii, latex, st.start);
}

ruMakeType(loaded : RuRawSource, st : SyntaxTree, comments : [RuParseComment], env : RuEnv) -> RuParseType {
	make_id = \s -> rtrim(grabSTText(get_source_id(s), loaded.src));
	name = make_id(st);
	supers_st = get_source_supers_s(st);
	supers = if (supers_st == []) [] else {
		concat(
			[make_id(supers_st[0])],
			map(get_source_super_s(supers_st[0]), make_id)
		)
	}
	RuParseType(s2id(name), comments, map(supers, s2id), st.start)
}

ruMakeRule(loaded : RuRawSource, st : SyntaxTree, comments : [RuParseComment], env : RuEnv) -> RuParseRule {
	name = grabSTText(get_source_id(st), loaded.src);
	vars_st = get_source_vars_s(st);
	vars = if (vars_st != []) ruMakeVars(loaded, vars_st[0], env) else [];
	term = ruMakeExp(loaded, get_source_expr(st), env);
	RuParseRule(s2id(name), comments, vars, term, st.start);
}

ruMakeVars(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> [RuParseVar] {
	if (get_source_vars0_s(st) != []) {
		vars0 = get_source_vars0_s(st)[0];
		var = get_source_var(vars0);
		make_var = \t -> ruMakeVar(loaded, t, env);
		vars1 = get_source_vars1_s(vars0);
		concat([make_var(var)], map(vars1, \v -> make_var(get_source_var(v))))
	} else {
		[]
	}
}

ruMakeVar(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseVar {
	name = rtrim(grabSTText(get_source_var_id(st), loaded.src));
	type = grabSTText(get_source_id(get_source_type_id(st)), loaded.src);
	RuParseVar(s2id(name), s2id(type), st.start)
}

ruMakeExp(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseExp {
	type = grabSTText(get_source_id(get_source_type_id(st)), loaded.src);
	symbs_st = get_source_symbws_s(st);
	symbs = map(symbs_st, \s -> rtrim(grabSTText(get_source_symb(s), loaded.src)));
	RuParseExp(s2id(type), map(symbs, s2id), symbs_st[0].start)
}

ruMakeAxiom(loaded : RuRawSource, st : SyntaxTree, comments : [RuParseComment], env : RuEnv) -> RuParseAxiom {
	name  = grabSTText(get_source_id(st), loaded.src);
	vars  = if (get_source_vars_s(st) == []) [] else ruMakeVars(loaded, get_source_vars_s(st)[0], env);
	disjs = if (get_source_disjs_s(st) == []) [] else ruMakeDisjs(loaded, get_source_disjs_s(st)[0], env);
	hyps  = if (get_source_hyps_bar_s(st) == []) [] else {
		map(
			get_source_hyp_s(get_source_hyps_bar_s(st)[0]),  
			\h -> ruMakeHyp(loaded, h, env)
		)
	}
	prop  = ruMakeExp(loaded, get_source_expr(st), env);
	RuParseAxiom(s2id(name), comments, vars, disjs, hyps, prop, st.start);
}

ruMakeDisjs(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> [RuParseDisj] {
	if (get_source_disjs0_s(st) != []) {
		disjs0    = get_source_disjs0_s(st)[0];
		disj      = get_source_disj(disjs0);
		disjs1    = get_source_disjs1_s(disjs0);
		make_disj = \d -> ruMakeDisj(loaded, d, env);
		concat([make_disj(disj)], map(disjs1, \d -> make_disj(get_source_disj(d))))
	} else {
		[]
	}
}

ruMakeDisj(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseDisj {
	dis_v    = get_source_dis0_v(st);
	dis_vs   = get_source_dis1_v_s(st);
	make_var = \v -> s2id(rtrim(grabSTText(get_source_var_id(v), loaded.src)));
	RuParseDisj(concat(
		[make_var(dis_v)], 
		map(dis_vs, make_var)
	), st.start)
}

ruMakeMeta(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseMeta {
	meta_v    = get_source_meta0_s(st)[0];
	meta_vs   = get_source_meta1_s(st);
	make_var = \v -> s2id(rtrim(grabSTText(get_source_var_id(v), loaded.src)));
	RuParseMeta(concat([make_var(meta_v)], map(meta_vs, make_var)), st.start);
}

ruMakeHyp(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseHyp {
	ind  = ruMakeInd(loaded, st, env);
	expr = ruMakeExp(loaded, get_source_expr(st), env);
	RuParseHyp(ind, expr, st.start)
}

ruMakeDef(loaded : RuRawSource, st : SyntaxTree, comments : [RuParseComment], env : RuEnv) -> RuParseDef {
	name  = grabSTText(get_source_id(st), loaded.src);
	vars  = if (get_source_vars_s(st) == []) [] else ruMakeVars(loaded, get_source_vars_s(st)[0], env);
	disjs = if (get_source_disjs_s(st) == []) [] else ruMakeDisjs(loaded, get_source_disjs_s(st)[0], env);
	hyps  = if (get_source_hyp_s(st) == []) [] else map(get_source_hyp_s(st), \h -> ruMakeHyp(loaded, h, env));
	defm  = ruMakeExp(loaded, get_source_expr(get_source_defm(st)), env);
	defs  = ruMakeExp(loaded, get_source_expr(get_source_defs(st)), env);
	prop  = ruMakeExp(loaded, get_source_expr(st), env);
	RuParseDef(s2id(name), comments, vars, disjs, hyps, defm, defs, prop, st.start);
}

ruMakeTheorem(loaded : RuRawSource, st : SyntaxTree, comments : [RuParseComment], env : RuEnv) -> RuParseTheorem {
	name  = grabSTText(get_source_id(st), loaded.src);
	vars  = if (get_source_vars_s(st) == []) [] else ruMakeVars(loaded, get_source_vars_s(st)[0], env);
	disjs = if (get_source_disjs_s(st) == []) [] else ruMakeDisjs(loaded, get_source_disjs_s(st)[0], env);
	meta  = if (get_source_meta_s(st) == []) RuParseMeta([], st.start) else ruMakeMeta(loaded, get_source_meta_s(st)[0], env);
	hyps  = if (get_source_hyps_bar_s(st) == []) [] else {
		map(
			get_source_hyp_s(get_source_hyps_bar_s(st)[0]),  
			\h -> ruMakeHyp(loaded, h, env)
		)
	}
	prop  = ruMakeExp(loaded, get_source_expr(st), env);
	proof = ruMakeProof(loaded, get_source_proof(st), env);
	RuParseTheorem(s2id(name), comments, vars, disjs, meta, hyps, prop, proof, st.start);
}

ruMakeProof(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseProof {
	vars  = if (get_source_vars_s(st) == []) [] else ruMakeVars(loaded, get_source_vars_s(st)[0], env);
	disjs = if (get_source_disjs_s(st) == []) [] else ruMakeDisjs(loaded, get_source_disjs_s(st)[0], env);
	steps = map(get_source_step_s(st), \s -> ruMakeStep(loaded, s, env));
	RuParseProof(vars, disjs, steps, st.start);
}

ruMakeStep(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> RuParseStep {
	ind  = ruMakeInd(loaded, st, env);
	type = grabSTText(get_source_id(get_source_type_id(st)), loaded.src);
	assertion = grabSTText(get_source_id(st), loaded.src);
	refs = ruMakeRefs(loaded, get_source_refs(st), env);
	symbs = map(get_source_symbws_s(st), \s -> s2id(rtrim(grabSTText(get_source_symb(s), loaded.src))));
	RuParseStep(ind, s2id(assertion), refs, RuParseExp(s2id(type), symbs, get_source_symbws_s(st)[0].start), st.start);
}

ruMakeRefs(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> [RuParseRef] {
	if (get_source_refs0_s(st) == []) [] else {
		refs0 = get_source_refs0_s(st)[0];
		refs_st = concat([get_source_ref(refs0)], map(get_source_refs1_s(refs0), get_source_ref));
		map(refs_st, \r->
			if (r.rule == st_hyp_ref) {
				RuParseHypRef(ruMakeInd(loaded, r, env), r.start);
			} else {
				RuParseStepRef(ruMakeInd(loaded, r, env), r.start);
			}
		)	
	}
}

ruMakeInd(loaded : RuRawSource, st : SyntaxTree, env : RuEnv) -> int {
	s2i(grabSTText(get_source_ind(st), loaded.src)) - 1
}

ruDetectCyclicImports(parsed : Tree<int, RuAnySource>, env : RuEnv) -> bool {
	if (isEmptyTree(parsed)) false else {
		ready = filter(
			getTreeValues(parsed), 
			\src -> forall(ruSourceImports(src), \imp -> !containsKeyTree(parsed, imp))
		);
		if (ready == []) {
			env.out.onError("A) cyclic import detected:\n" + ruRevealCyclicImport(parsed), []);
			true
		} else {
			less_parsed = fold(ready, parsed, \acc, src -> removeFromTree(acc, ruSourceModule(src)));
			ruDetectCyclicImports(less_parsed, env);
		}
	}
}


ruRevealCyclicImport(parsed : Tree<int, RuAnySource>) -> string {
	strIndent(strGlue(map(getTreeKeys(parsed), \f -> "'" + id2s(f) + "'"), "\n"));
}


ruRevealCyclicImport1(parsed : Tree<int, RuParsed>) -> string {
	cycles = filtermap(getTreeValues(parsed), \src -> {
		println("ruRevealCyclicImport observing: " + id2s(ruSourceModule(src)));
		cycs = ruMakeImportsCycle(src, parsed, makeSet1(ruSourceModule(src)));
		if (cycs == []) {
			println("cycle not found");
			None(); 
		} else {
			println("found cycle: " + i2s(length(cycs)) + ": '" + strGlue(map(cycs, id2s), ", ") + "'");
			Some(cycs);
		}
	});
	if (cycles == []) "" else {
		min_cycle = fold(tail(cycles), cycles[0], \acc, cycle -> if (length(cycle) < length(acc)) cycle else acc);
		strGlue(map(min_cycle, \s -> "\t" + id2s(s)), "\n");
	}
}

ruMakeImportsCycle(src : RuAnySource, parsed : Tree<int, RuAnySource>, acc : Set<int>) -> [int] {
	//println("ruMakeImportsCycle observing: " + ruSourceModule(src));
	imports = ruSourceImports(src);
	switch (find(imports, \imp -> containsSet(acc, imp))) {
		Some(imp): set2array(acc);
		None(): {
			cycles = filtermap(imports, \imp ->
				maybeMap(lookupTree(parsed, imp), \new_src -> 
					//ruMakeImportsCycle(new_src, removeFromTree(parsed, ruSourceModule(src)), insertSet(acc, imp))
					ruMakeImportsCycle(new_src, parsed, insertSet(acc, imp))
				)
			);
			if (cycles == []) [] else {
				fold(tail(cycles), cycles[0], \ac, cycle -> 
					if (length(cycle) < length(ac)) cycle else ac
				);
			}
		}
	} 
}

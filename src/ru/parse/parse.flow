import ru/parse/load;
import ru/parse/file;
import ru/parse/src;
import ru/parse/ast;
import ru/ru_math;

export {
	RuParsed ::= RuParseSource, RuCachedSource;

	ruParsedImports(parsed : RuParsed) -> [string];
	ruParsedModule(parsed : RuParsed) -> string;
	ruParseAll(loaded : [RuLoaded], conf : RuConf) -> Maybe<Tree<string, RuParsed>>;
	ruParseOne(loaded : RuLoaded, conf : RuConf) -> Maybe<RuParsed>;
	ruParseSource(loaded : RuRawSource, conf : RuConf) -> Maybe<RuParseSource>;
}

ruParsedImports(parsed : RuParsed) -> [string] {
	switch (parsed) {
		RuCachedSource(source, __,__): map(source.imports, \imp -> imp.module);
		RuParseSource(imports,__,__): map(imports, \imp -> imp.module);
	}
}

ruParsedModule(parsed : RuParsed) -> string {
	switch (parsed) {
		RuCachedSource(source, __,__): source.info.module;
		RuParseSource(__,__, info): info.module;
	}
}

ruParseAll(loaded : [RuLoaded], conf0 : RuConf) -> Maybe<Tree<string, RuParsed>> {
	parsed_file = \parsed -> {
		switch (parsed) {
			RuCachedSource(source, __,__): source.info.module;
			RuParseSource(__,__, info): info.module;
		}
	}
	err_count = ref 0;
	conf = ruAddErrCounter(conf0, err_count);
	start = timestamp();
	parsed : [RuParsed] = filtermap(ruConcurrent(map(loaded, \l -> \-> ruParseOne(l, conf))), idfn);
	ret = fold(parsed, makeTree(),
		\acc, src -> setTree(acc, parsed_file(src), src)
	);
	if (conf.verbose > 0) {
		conf.onMessage("ru parsed: " +i2s(sizeTree(ret)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	if (^err_count == 0) {
		if (ruDetectCyclicImports(ret, conf)) None() else {
			Some(ret);
		}
	} else {
		None();
	}
}

ruParseOne(loaded : RuLoaded, conf : RuConf) -> Maybe<RuParsed> {
	switch (loaded) {
		RuCachedSource(__,__,__): Some(loaded);
		RuRawSource(__,__,__): cast(ruParseSource(loaded, conf) : Maybe<RuParseSource> -> Maybe<RuParsed>);
	}
}

ruParseSource(loaded : RuRawSource, conf : RuConf) -> Maybe<RuParseSource> {
	start = timestamp();
	pr1 = parse_source(loaded.src);
	st = pr1.first;
	err = pr1.second;
	if (st.end != strlen(loaded.src)) {
		conf.onError("Syntax error", [RuPlace(loaded.info.path, st.end)]);
		None()
	} else {
		parsed = ruMakeSrc(loaded, st, conf);
		if (conf.verbose > 1) {
			conf.onMessage("\tru parsed: '" + loaded.info.module + "' in " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
		}
		Some(parsed);
	}
}

ruMakeSrc(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseSource {
	imports = ref [];
	decls = ref [];
	iter(get_source_toplevel_s(st),
		\decl -> {
			if (decl.rule == st_scomment || decl.rule == st_mcomment) {
				refArrayPush(decls, ruMakeComment(loaded, decl, conf));
			} else if (decl.rule == st_import) {
				refArrayPush(imports, ruMakeImport(loaded, decl, conf));
			} else if (decl.rule == st_const) {
				refArrayPush(decls, ruMakeConst(loaded, decl, conf));
			} else if (decl.rule == st_type) {
				refArrayPush(decls, ruMakeType(loaded, decl, conf));
			} else if (decl.rule == st_rule) {
				refArrayPush(decls, ruMakeRule(loaded, decl, conf));
			} else if (decl.rule == st_axiom) {
				refArrayPush(decls, ruMakeAxiom(loaded, decl, conf));
			} else if (decl.rule == st_def) {
				refArrayPush(decls, ruMakeDef(loaded, decl, conf));
			} else if (decl.rule == st_theorem) {
				refArrayPush(decls, ruMakeTheorem(loaded, decl, conf));
			}
		}
	);
	RuParseSource(^imports, ^decls, loaded.info);
}

ruMakeComment(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseComment {
	all_text = grabSTText(st, loaded.src);
	if (!startsWith(all_text, "*")) RuParseComment(all_text, "", st.start) else {
		json_end = strIndexOf(all_text, "\n-----");
		if (json_end == -1) RuParseComment(all_text, "", st.start) else {
			json = substring(all_text, 1, json_end - 1);
			text_begin = for(
				json_end, 
				\i -> (i < strlen(all_text)) && { c = getCharAt(all_text, i); c == "\n" || c == "-"; }, 
				\i -> i + 1
			);
			text = substring(all_text, text_begin + 1, strlen(all_text));
			RuParseComment(text, json, st.start)
		}
	}
}

ruMakeImport(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseImport { 
	path = ruTrimPath(grabSTText(get_source_symb(st), loaded.src), conf, ".ru");
	RuParseImport(path, st.start);
}

ruMakeConst(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseConst {
	symb = rtrim(grabSTText(get_source_symb(get_source_symbol(st)), loaded.src));
	ascii_st = get_source_ascii_s(st);
	ascii = if (ascii_st != []) rtrim(grabSTText(get_source_symb(ascii_st[0]), loaded.src)) else "";
	latex_st = get_source_latex_s(st);
	latex = if (latex_st != []) rtrim(grabSTText(get_source_symb(latex_st[0]), loaded.src)) else "";
	RuParseConst(symb, ascii, latex, st.start);
}

ruMakeType(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseType {
	make_id = \s -> rtrim(grabSTText(get_source_id(s), loaded.src));
	name = make_id(st);
	supers_st = get_source_supers_s(st);
	supers = if (supers_st == []) [] else {
		concat(
			[make_id(supers_st[0])],
			map(get_source_super_s(supers_st[0]), make_id)
		)
	}
	RuParseType(name, supers, st.start)
}

ruMakeRule(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseRule {
	name = grabSTText(get_source_id(st), loaded.src);
	vars_st = get_source_vars_s(st);
	vars = if (vars_st != []) ruMakeVars(loaded, vars_st[0], conf) else [];
	term = ruMakeExp(loaded, get_source_expr(st), conf);
	RuParseRule(name, vars, term, st.start);
}

ruMakeVars(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> [RuParseVar] {
	if (get_source_vars0_s(st) != []) {
		vars0 = get_source_vars0_s(st)[0];
		var = get_source_var(vars0);
		make_var = \t -> ruMakeVar(loaded, t, conf);
		vars1 = get_source_vars1_s(vars0);
		concat([make_var(var)], map(vars1, \v -> make_var(get_source_var(v))))
	} else {
		[]
	}
}

ruMakeVar(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseVar {
	name = rtrim(grabSTText(get_source_var_id(st), loaded.src));
	type = grabSTText(get_source_id(get_source_type_id(st)), loaded.src);
	RuParseVar(name, type, st.start)
}

ruMakeExp(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseExp {
	type = grabSTText(get_source_id(get_source_type_id(st)), loaded.src);
	symbs = map(get_source_symbws_s(st), \s -> rtrim(grabSTText(get_source_symb(s), loaded.src)));
	RuParseExp(type, symbs, st.start)
}

ruMakeAxiom(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseAxiom {
	name  = grabSTText(get_source_id(st), loaded.src);
	vars  = if (get_source_vars_s(st) == []) [] else ruMakeVars(loaded, get_source_vars_s(st)[0], conf);
	disjs = if (get_source_disjs_s(st) == []) [] else ruMakeDisjs(loaded, get_source_disjs_s(st)[0], conf);
	hyps  = if (get_source_hyps_bar_s(st) == []) [] else {
		map(
			get_source_hyp_s(get_source_hyps_bar_s(st)[0]),  
			\h -> ruMakeHyp(loaded, h, conf)
		)
	}
	prop  = ruMakeExp(loaded, get_source_expr(st), conf);
	RuParseAxiom(name, vars, disjs, hyps, prop, st.start);
}

ruMakeDisjs(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> [RuParseDisj] {
	if (get_source_disjs0_s(st) != []) {
		disjs0    = get_source_disjs0_s(st)[0];
		disj      = get_source_disj(disjs0);
		disjs1    = get_source_disjs1_s(disjs0);
		make_disj = \d -> ruMakeDisj(loaded, d, conf);
		concat([make_disj(disj)], map(disjs1, \d -> make_disj(get_source_disj(d))))
	} else {
		[]
	}
}

ruMakeDisj(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseDisj {
	dis_v    = get_source_dis0_v(st);
	dis_vs   = get_source_dis1_v_s(st);
	make_var = \v -> rtrim(grabSTText(get_source_var_id(v), loaded.src));
	RuParseDisj(concat(
		[make_var(dis_v)], 
		map(dis_vs, make_var)
	), st.start)
}

ruMakeMeta(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseMeta {
	meta_v    = get_source_meta0_s(st)[0];
	meta_vs   = get_source_meta1_s(st);
	make_var = \v -> rtrim(grabSTText(get_source_var_id(v), loaded.src));
	RuParseMeta(concat([make_var(meta_v)], map(meta_vs, make_var)), st.start);
}

ruMakeHyp(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseHyp {
	ind  = ruMakeInd(loaded, st, conf);
	expr = ruMakeExp(loaded, get_source_expr(st), conf);
	RuParseHyp(ind, expr, st.start)
}

ruMakeDef(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseDef {
	name  = grabSTText(get_source_id(st), loaded.src);
	vars  = if (get_source_vars_s(st) == []) [] else ruMakeVars(loaded, get_source_vars_s(st)[0], conf);
	disjs = if (get_source_disjs_s(st) == []) [] else ruMakeDisjs(loaded, get_source_disjs_s(st)[0], conf);
	hyps  = if (get_source_hyp_s(st) == []) [] else map(get_source_hyp_s(st), \h -> ruMakeHyp(loaded, h, conf));
	defm  = ruMakeExp(loaded, get_source_expr(get_source_defm(st)), conf);
	defs  = ruMakeExp(loaded, get_source_expr(get_source_defs(st)), conf);
	prop  = ruMakeExp(loaded, get_source_expr(st), conf);
	RuParseDef(name, vars, disjs, hyps, defm, defs, prop, st.start);
}

ruMakeTheorem(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseTheorem {
	name  = grabSTText(get_source_id(st), loaded.src);
	vars  = if (get_source_vars_s(st) == []) [] else ruMakeVars(loaded, get_source_vars_s(st)[0], conf);
	disjs = if (get_source_disjs_s(st) == []) [] else ruMakeDisjs(loaded, get_source_disjs_s(st)[0], conf);
	meta  = if (get_source_meta_s(st) == []) RuParseMeta([], st.start) else ruMakeMeta(loaded, get_source_meta_s(st)[0], conf);
	hyps  = if (get_source_hyps_bar_s(st) == []) [] else {
		map(
			get_source_hyp_s(get_source_hyps_bar_s(st)[0]),  
			\h -> ruMakeHyp(loaded, h, conf)
		)
	}
	prop  = ruMakeExp(loaded, get_source_expr(st), conf);
	proof = ruMakeProof(loaded, get_source_proof(st), conf);
	RuParseTheorem(name, vars, disjs, meta, hyps, prop, proof, st.start);
}

ruMakeProof(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseProof {
	vars  = if (get_source_vars_s(st) == []) [] else ruMakeVars(loaded, get_source_vars_s(st)[0], conf);
	disjs = if (get_source_disjs_s(st) == []) [] else ruMakeDisjs(loaded, get_source_disjs_s(st)[0], conf);
	steps = map(get_source_step_s(st), \s -> ruMakeStep(loaded, s, conf));
	RuParseProof(vars, disjs, steps, st.start);
}

ruMakeStep(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> RuParseStep {
	ind  = ruMakeInd(loaded, st, conf);
	type = grabSTText(get_source_id(get_source_type_id(st)), loaded.src);
	assertion = grabSTText(get_source_id(st), loaded.src);
	refs = ruMakeRefs(loaded, get_source_refs(st), conf);
	symbs = map(get_source_symbws_s(st), \s -> rtrim(grabSTText(get_source_symb(s), loaded.src)));
	RuParseStep(ind, assertion, refs, RuParseExp(type, symbs, get_source_symbws_s(st)[0].start), st.start);
}

ruMakeRefs(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> [RuParseRef] {
	if (get_source_refs0_s(st) == []) [] else {
		refs0 = get_source_refs0_s(st)[0];
		refs_st = concat([get_source_ref(refs0)], map(get_source_refs1_s(refs0), get_source_ref));
		map(refs_st, \r->
			if (r.rule == st_hyp_ref) {
				RuParseHypRef(ruMakeInd(loaded, r, conf), r.start);
			} else {
				RuParseStepRef(ruMakeInd(loaded, r, conf), r.start);
			}
		)	
	}
}

ruMakeInd(loaded : RuRawSource, st : SyntaxTree, conf : RuConf) -> int {
	s2i(grabSTText(get_source_ind(st), loaded.src)) - 1
}

ruDetectCyclicImports(parsed : Tree<string, RuParsed>, conf : RuConf) -> bool {
	if (isEmptyTree(parsed)) false else {
		ready = filter(
			getTreeValues(parsed), 
			\src -> forall(ruParsedImports(src), \imp -> !containsKeyTree(parsed, imp))
		);
		if (ready == []) {
			conf.onError("cyclic import detected:\n" + ruRevealCyclicImport(parsed), []);
			true
		} else {
			less_parsed = fold(ready, parsed, \acc, src -> removeFromTree(acc, ruParsedModule(src)));
			ruDetectCyclicImports(less_parsed, conf);
		}
	}
}

ruRevealCyclicImport(parsed : Tree<string, RuParsed>) -> string {
	cycles = map(getTreeValues(parsed), \src -> 
		ruMakeImportsCycle(src, parsed, makeSet1(ruParsedModule(src)))
	);
	if (cycles == []) "" else {
		min_cycle = fold(tail(cycles), cycles[0], \acc, cycle -> if (length(cycle) < length(acc)) cycle else acc);
		strGlue(map(min_cycle, \s -> "\t" + s), "\n");
	}
}

ruMakeImportsCycle(src : RuParsed, parsed : Tree<string, RuParsed>, acc : Set<string>) -> [string] {
	imports = ruParsedImports(src);
	switch (find(imports, \imp -> containsSet(acc, imp))) {
		Some(imp): set2array(acc);
		None(): {
			cycles = filtermap(imports, \imp ->
				maybeMap(lookupTree(parsed, imp), \new_src -> 
					ruMakeImportsCycle(new_src, parsed, insertSet(acc, imp))
				)
			);
			if (cycles == []) [] else {
				fold(tail(cycles), cycles[0], \ac, cycle -> if (length(cycle) < length(ac)) cycle else ac);
			}
		}
	} 
}

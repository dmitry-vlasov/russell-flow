import math/stringmath;
import ru/parse/exps/parser;

export {
	ruParseExp(term : RuTerm, lang : RuLang, place : RuPlace, env : RuEnv) -> Maybe<RuExp>;
	ruCreateTypeParsers(term : RuTerm, lang : RuLang, env : RuEnv) -> Tree<int, RuTypeParser>;
}

ruCreateTypeParsers(term : RuTerm, lang : RuLang, env : RuEnv) -> Tree<int, RuTypeParser> {
	types = foldTree(lang.types, 
		makeTree(), 
		\id, type, acc -> setTree(acc, id, ruMakeTypeParser(type, env))
	);
	symbs = fold(term.nodes, makeSet(), \acc, node -> 
		switch (node) {
			RuVar(__, type): acc;
			RuConstRef(c): insertSet(acc, c);
		}
	);
	fold(
		filter(
			getTreeValues(lang.rules),
			\rule -> forall(rule.term.nodes, \node ->
				switch (node) {
					RuConstRef(c): containsSet(symbs, c);
					default: true;
				}
			)
		), 
		types,
		\acc, rule -> ruAddRule2TypeParserTree(rule, acc, env)
	);
}

ruParseExp(term : RuTerm, lang : RuLang, place : RuPlace, env : RuEnv) -> Maybe<RuExp> {
	if (length(term.nodes) == 0) {
		env.out.onError("empty expression is met", []);
		None()
	} else {
		types = ruCreateTypeParsers(term, lang, env);
		switch (lookupTree(types, term.type)) {
			Some(tenv): {
				ret = maybeMap(
					ruParseExpr(RuParseEnv(term.nodes, types, env), 0, RuParseStack(None(), 0, 0, term.type, tenv.trie, [])),
					\nodes -> RuExp(nodes, term.pos)
				);
				if (ret == None()) {
					term_symbs = set2array(fold(term.nodes, makeSet(),
						\acc, node -> 
							switch (node) {
								RuVar(__, type): acc;
								RuConstRef(c): insertSet(acc, c);
							}
					));
					env.out.onError(
						"expr: '" + ruTypedTerm2s(term) + "' was not parsed\n" + 
						ruTypeParserTree2s(types) + "\n" +
						"term symbs: " + strGlue(map(term_symbs, id2s), ", ") + "\n" + 
						"all rules:\n" + concatStrings(map(getTreeValues(lang.rules), \r -> "\t" + ruTerm2s(r.term) + "\n")),
						[place]
					);
					ruCrash("parser failure");
				}
				ret
			}
			None(): {
				env.out.onError("unknown type: '" + id2s(term.type) + "'", []);
				None();
			}
		}
	}
}

RuParseEnv(
	nodes : [RuTermNode],
	types : Tree<int, RuTypeParser>, 
	env : RuEnv,
);

RuParseStack(
	parent : Maybe<RuParseStack>,
	start : int,
	curr : int,
	type_id : int,
	trie : RuTrie2<int, RuRuleNode>,
	expr : [[RuExpNode]],
);

ruPopExprStack(env : RuParseEnv, pos : int, stack : RuParseStack) -> RuParseStack {
	switch (stack.trie.data) {
		Some(ref): {
			switch (stack.parent) {
				Some(parent): {
					subexpr = concatA(reverseA(stack.expr));
					ruPopExprStack(env, pos, 
						RuParseStack(parent with
							expr = concat(
								[
									concat(
										[RuRuleNode(ref.rule, ref.type, ref.arity, length(subexpr))], 
										subexpr
									)
								], 
								parent.expr
							)
						)
					);
				}
				None(): stack;
			}
		}
		None(): stack;
	}
}

ruParseExpr(env : RuParseEnv, pos : int, stack0 : RuParseStack) -> Maybe<[RuExpNode]> {
	stack = RuParseStack(stack0 with curr = pos);
	if (pos == length(env.nodes)) {
		expr = concatA(reverseA(stack.expr));
		switch (stack.trie.data) {
			Some(ref): Some(concat(
				[RuRuleNode(ref.rule, ref.type, ref.arity, length(expr))], 
				expr
			));
			None(): Some(expr);
		}
	} else {
		do_step = \st, n -> {
			poped = ruPopExprStack(env, pos, RuParseStack(st with trie = n));
			ruParseExpr(env, pos + 1, poped);
		}
		try_var = \t, n -> {
			switch (lookupTree(env.types, t)) {
				Some(tenv): {
					if (t == stack.type_id && stack.curr == stack.start) None() else {
						ruParseExpr(env, pos, 
							RuParseStack(
								Some(RuParseStack(stack with trie = n)), 
								pos, pos, t, tenv.trie, []
							)
						)
					}
				}
				None(): None();
			}
		}
		try_supers1 = \v, t -> {
			foldTree(stack.trie.map1, None(), \tp, m, ac -> 
				if (ac != None()) ac else {
					x = try_var(tp, m);
					if (isSome(x)) x else {
						switch (m.data) {
							Some(r): {
								do_step(RuParseStack(stack with expr = concat([[r, RuVar(v, t)]], stack.expr)), m);
							}
							None(): None();
						}
					}
				}
			);
		}
		try_supers = \v, t -> {
			supers = lookupTreeDef(env.types, t, ruNoTypeParser).supers;
			foldTree(stack.trie.map1, None(), \tp, m, ac -> 
				if (ac != None()) ac else {
					//x = try_var(tp, m);
					//if (isSome(x)) x else {
						switch (lookupTree(supers, tp)) {
							Some(r): {
								ret = do_step(RuParseStack(stack with 
									expr = concat(
										[[
											RuRuleNode(r.info.id, r.term.type, 1, 1), 
											RuVar(v, t)
										]], 
										stack.expr
									)
								), m);
								if (isSome(ret)) ret else 
									//ac;
									try_var(tp, m);
									//None();
							}
							None(): 
								//ac;
								try_var(tp, m);
								//None();
						}
					//}
				}
			);
		}
		try_vars = \-> {
			foldTree(stack.trie.map1, None(), \t, n, ac ->
				if (ac != None()) ac else {
					try_var(t, n);
				}
			)
		}
		switch (env.nodes[pos]) {
			RuVar(v, t_id): {
				switch (lookupTree(stack.trie.map1, t_id)) {
					Some(n): {
						switch (do_step(RuParseStack(stack with expr = concat([[RuVar(v, t_id)]], stack.expr)), n)) {
							Some(ret): Some(ret);
							None(): try_supers(v, t_id);
						}
					}
					None(): try_supers(v, t_id);
				}
			}
			RuConstRef(id): {
				switch (lookupTree(stack.trie.map2, id)) {
					Some(n): {
						switch (do_step(stack, n)) {
							Some(ret): Some(ret);
							None(): try_vars();
						}
					}
					None(): try_vars();
				}
			}
		}
	}
}

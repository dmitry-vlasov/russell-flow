import base/stats;
import base/id_consts;
import ru/parse/parse;
import ru/parse/exps/lang;
import ru/parse/exps/exp;
import ru/verify/math;

export {
	ruCreateAssertions(decls : [RuDeclAux], lang : RuLang, env : RuEnv) -> Tree<int, RuAssertion>;

	ruCreateAssertion(ass : RuParseAssertion, lang : RuLang, src_info : RuFileInfo, env : RuEnv) -> RuAssertion;
}

ruCreateAssertions(decls : [RuDeclAux], lang : RuLang, env : RuEnv) -> Tree<int, RuAssertion> {
	fold(
		filtermap(ruConcurrent(map(decls, \ad -> \env1 -> 
			switch (ad.decl) {
				RuParseAssertion(): Some(ruCreateAssertion(ad.decl, lang, ad.srcInfo, env1));
				RuAssertion(): Some(cast(ad.decl : RuAnyDecl -> RuAssertion));
				default:       None();
			}
		), env), idfn),
		makeTree(),
		\acc, ass -> ruAssertionsAddDecl(acc, ass, env)
	);
}

ruCreateAssertion(ass : RuParseAssertion, lang : RuLang, src_info : RuFileInfo, env : RuEnv) -> RuAssertion {
	switch (ass) {
		RuParseAxiom(__,__,__,__,__,__,__):         ruCreateAxiom(ass, lang, src_info, env);
		RuParseTheorem(__,__,__,__,__,__,__,__,__): ruCreateTheorem(ass, lang, src_info, env);
		RuParseDef(__,__,__,__,__,__,__,__,__):     ruCreateDef(ass, lang, src_info, env);
	}
}

ruCreateAxiom(ax : RuParseAxiom, lang : RuLang, src_info : RuFileInfo, env : RuEnv) -> RuAxiom {
	vars = ruCreateVars(ax.vars);
	disjs = ruCreateDisjs(ax.disjs, vars, src_info, env);
	hyps = map(ax.hyps, \h -> ruCreateHyp(h, vars, lang, src_info, env));
	prop = ruCreateExp(ax.prop, vars, lang, src_info, env);
	RuAxiom(
		RuDeclInfo(ax.id, src_info.id, ruCreateComments(ax.comments, src_info, env), ax.pos), 
		RuStatement(RuVarsDisjs(vars, disjs), hyps, prop)
	);
}

ruCreateExp(ex : RuParseExp, vars : Tree<int, RuVar>, lang : RuLang, src_info : RuFileInfo, env : RuEnv) -> RuTermExp {
	term = ruCreateTerm(ex, vars, env);
	switch (ruParseExp(term, lang, RuPlace(src_info.path, ex.pos), env)) {
		Some(e): e;
		None():  {
			println("FAILED TO PARSE: '" + ruTerm2s(term) + "'");
			term; // This is an error, but we defer it for later considerations
		}
	}
}

ruCreateMeta(m : RuParseMeta, vars : Tree<int, RuVar>, src_info : RuFileInfo, env : RuEnv) -> Set<int> {
	fold(m.meta, makeSet(), \ac, v -> {
		if (containsKeyTree(vars, v)) insertSet(ac, v) else {
			env.out.error("unknown var '" + id2s(v) + "'", [RuPlace(src_info.path, m.pos)]);
			ac
		}
	});
}

ruCreateDisjs(disjs : [RuParseDisj], vars : Tree<int, RuVar>, src_info : RuFileInfo, env : RuEnv) -> Set<RuDisj> {
	make_var = \v, t -> RuVar(v, t);
	fold(disjs, makeSet(), \acc1, disj -> 
		fold(disj.vars, acc1, \acc2, v1 ->
			fold(disj.vars, acc2, \acc3, v2 -> {
					switch (lookupTree(vars, v1)) {
						Some(vr1): {
							switch (lookupTree(vars, v2)) {
								Some(vr2): {
									if (vr1.id < vr2.id) 
										insertSet(acc3, 
											RuDisj(
												make_var(vr1.id, vr1.type), 
												make_var(vr2.id, vr2.type)
											)
										) 
									else if (vr2.id < vr1.id) 
										insertSet(acc3, 
											RuDisj(
												make_var(vr2.id, vr2.type), 
												make_var(vr1.id, vr1.type)
											)
										) 
									else acc3 
								}
								None(): {
									env.out.error("unknown var '" + id2s(v2) + "' in disjointed set, vars: " + 
									strGlue(map(getTreeValues(vars), \v -> "'" + id2s(v.id) + "'"), ", "), 
									[RuPlace(src_info.path, disj.pos)]); acc3;
								}
							}
						}
						None(): {
							env.out.error("unknown var '" + id2s(v1) + "' in disjointed set, vars: " + 
							strGlue(map(getTreeValues(vars), \v -> "'" + id2s(v.id) + "'"), ", "), 
							[RuPlace(src_info.path, disj.pos)]); acc3;
						}
					}
				}
			)
		)
	)
}

ruCreateHyp(hyp : RuParseHyp, vars : Tree<int, RuVar>, lang : RuLang, src_info : RuFileInfo,  env : RuEnv) -> RuHyp {
	expr = ruCreateExp(hyp.expr, vars, lang, src_info, env);
	RuHyp(hyp.ind, expr, hyp.pos);
}

ruCreateTheorem(th : RuParseTheorem, lang : RuLang, src_info : RuFileInfo, env : RuEnv) -> RuTheorem {
	vars = ruCreateVars(th.vars);
	disjs = ruCreateDisjs(th.disjs, vars, src_info, env);
	meta = ruCreateMeta(th.meta, vars, src_info, env);
	hyps = map(th.hyps, \h -> ruCreateHyp(h, vars, lang, src_info, env));
	prop = ruCreateExp(th.prop, vars, lang, src_info, env);
	proof = ruCreateProof(th.proof, vars, lang, src_info, env);
	RuTheorem(
		RuDeclInfo(th.id, src_info.id, ruCreateComments(th.comments, src_info, env), th.pos), 
		RuStatement(RuVarsDisjs(vars, disjs), hyps, prop), 
		meta, proof
	);
}

ruCreateRef(rf : RuParseRef) -> RuRef {
	switch (rf) {
		RuParseHypRef(i): RuHypRef(i);
		RuParseStepRef(i): RuStepRef(i);
	}
}

ruCreateProof(proof : RuParseProof, vars : Tree<int, RuVar>, lang : RuLang, src_info : RuFileInfo, env : RuEnv) -> RuProof {
	proof_vars = ruCreateVars(proof.vars);
	all_vars = mergeTreeCustom(proof_vars, vars, \v, w,__ -> {
		env.out.error("duplicate variable '" + id2s(v) + "'", [RuPlace(src_info.path, proof.pos)]);
		w
	});
	proof_disjs = ruCreateDisjs(proof.disjs, all_vars, src_info, env);
	steps = map(proof.steps, \s -> {
		expr = ruCreateExp(s.expr, all_vars, lang, src_info, env);
		subproof = ruCreateProof(s.proof, all_vars, lang, src_info, env);
		RuStep(s.ind, s.assertion, map(s.refs, ruCreateRef), expr, subproof, s.pos);
	});
	RuProof(RuVarsDisjs(proof_vars, proof_disjs), steps, proof.pos);
}

ruCreateDef(df : RuParseDef, lang : RuLang, src_info : RuFileInfo, env : RuEnv) -> RuDef {
	vars = ruCreateVars(df.vars);
	disjs = ruCreateDisjs(df.disjs, vars, src_info, env);
	prop_ex = fold(df.prop.symbs, [], \ac, s ->
		if (s == ruIdDefiendum()) concat(ac, df.defm.symbs) else
		if (s == ruIdDefiniens()) concat(ac, df.defs.symbs) else
		concat(ac, [s])
	);
	hyps = map(df.hyps, \h -> ruCreateHyp(h, vars, lang, src_info, env));
	prop = ruCreateExp(RuParseExp(df.prop.type, prop_ex, df.prop.pos), vars, lang, src_info, env);
	dfm = ruCreateExp(df.defm, vars, lang, src_info, env);
	dfs = ruCreateExp(df.defs, vars, lang, src_info, env);
	RuDef(
		RuDeclInfo(df.id, src_info.id, ruCreateComments(df.comments, src_info, env), df.pos), 
		RuStatement(RuVarsDisjs(vars, disjs), hyps, prop), 
		dfm, dfs
	);
}

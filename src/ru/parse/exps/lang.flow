import base/stats;
import ru/parse/parse;
import ru/verify/math;
import ru/parse/exps/decl;

export {
	ruCollectSourcesLang(sources : [RuParsed], env : RuEnv) -> RuLang;

	ruCreateLang(decls : [RuDeclAux], env : RuEnv) -> RuLang;

	ruCreateVars(vars : [RuParseVar]) -> Tree<int, RuVar>;
	ruCreateComments(comms : [RuParseComment], info : RuFileInfo, env : RuEnv) -> [RuComment];
	ruCreateTerm(term : RuParseExp, vars : Tree<int, RuVar>, env : RuEnv) -> RuTerm;

	ruCheckLang(lang : RuLang, imports : Tree<int, Set<int>>, env : RuEnv) -> void;
}

ruCollectSourcesLang(sources : [RuParsed], env : RuEnv) -> RuLang {
	fold(
		ruConcurrent(map(sources, \src -> \env1 -> ruCollectSourceLang(src, env1)), env), 
		ruEmptyLang, 
		\acc, lang -> ruLangMerge(acc, lang, env)
	);
}

ruCollectSourceLang(src : RuParsed, env : RuEnv) -> RuLang {
	switch (src) {
		RuParseSource(__,decls,__,info): {
			fold(src.decls, ruEmptyLang, \ac, decl ->
				eitherMap(ruCreateLangDecl(decl, info, env), \lang -> ruLangAddDecl(ac, lang, env), ac)
			)
		}
		RuSource(__,decls,__,info): {
			fold(src.decls, ruEmptyLang, \ac, decl -> 
				ruLangAddDecl(ac, decl, env)
			)
		}
	}
}

ruCreateLang(decls : [RuDeclAux], env : RuEnv) -> RuLang {
	fold(
		filtermap(ruConcurrent(map(decls, \ad -> \env1 -> 
			switch (ad.decl) {
				RuParseDecl(): ruCreateLangDecl(ad.decl, ad.srcInfo, env1);
				RuLangDecl():  Some(ad.decl);
				default:       None();
			}
		), env), idfn),
		ruEmptyLang,
		\acc, decl -> ruLangAddDecl(acc, decl, env)
	);
}

ruCreateLangDecl(decl : RuParseDecl, src_info : RuFileInfo, env : RuEnv) -> Maybe<RuLangDecl> {
	switch (decl) {
		RuParseConst(__,__,__,__,__): Some(ruCreateConst(decl, src_info, env));
		RuParseType(__,__,__,__):     Some(ruCreateType(decl, src_info, env));
		RuParseRule(__,__,__,__,__):  Some(ruCreateRule(decl, src_info, env));
		default: None();
	}
}

ruCreateConst(const : RuParseConst, src_info : RuFileInfo, env : RuEnv) -> RuConst {
	RuConst(
		RuDeclInfo(
			const.id, 
			src_info.id, 
			ruCreateComments(const.comments, src_info, env), 
			const.pos
		), 
		const.ascii, 
		const.latex
	);
}

ruCreateType(type : RuParseType, src_info : RuFileInfo, env : RuEnv) -> RuType {
	RuType(
		RuDeclInfo(
			type.id, 
			src_info.id, 
			ruCreateComments(type.comments, src_info, env), 
			type.pos
		), 
		type.supers
	);
}

ruCreateRule(rule : RuParseRule, src_info : RuFileInfo, env : RuEnv) -> RuRule {
	vars = ruCreateVars(rule.vars);
	RuRule(
		RuDeclInfo(
			rule.id, 
			src_info.id, 
			ruCreateComments(rule.comments, src_info, env), 
			rule.pos
		), 
		vars, 
		ruCreateTerm(rule.term, vars, env)
	);
}

ruCreateTerm(term : RuParseExp, vars : Tree<int, RuVar>, env : RuEnv) -> RuTerm {
	expr = fold(term.symbs, [], \ac, symb ->
		switch (lookupTree(vars, symb)) {
			Some(v): concat(ac, [RuVar(symb, v.type)]);
			None():  concat(ac, [RuConstRef(symb)]);
		}
	);
	RuTerm(term.type, expr, term.pos);
}

ruCreateComments(comms : [RuParseComment], info : RuFileInfo, env : RuEnv) -> [RuComment] {
	map(comms, \comm -> 
		RuComment(comm.text, ruCreateAnnotation(comm.json, comm.pos, info, env), comm.pos)
	);
}

ruCreateAnnotation(json_str : string, pos : int, info : RuFileInfo, env : RuEnv) -> JsonObject {
	if (json_str == "") JsonObject([]) else {
		json = parseJson(json_str);
		switch (json) {
			JsonObject(__): json;
			default: {
				env.out.onError("Annotation must be a JSON object, got:\n\t" + json_str + "\n", [RuPlace(info.path, pos)]);
				JsonObject([]);
			}
		}
	}
}

ruCreateVars(vars : [RuParseVar]) -> Tree<int, RuVar> {
	fold(vars, makeTree(), \ac, v -> setTree(ac, v.id, RuVar(v.id, v.type)));
}

ruCheckLang(lang : RuLang, imports : Tree<int, Set<int>>, env : RuEnv) -> void {
	traverseInOrder(lang.types, \id, type -> 
		iter(type.supers, \sup -> ruCheckTypePreceeds(sup, lang, type, imports, env))
	);
	traverseInOrder(lang.rules, \id, rule -> {
		ruCheckVars(rule.vars, lang, rule, imports, env);
		ruCheckTerm(rule.term, rule.vars, lang, rule, imports, env);
	});
}

//ruCheckType(type : RuType, lang : RuLang, decl : RuDecl, imports : Tree<int, Set<int>>, env : RuEnv) -> void {
//	iter(type.supers, \sup -> ruCheckTypePreceeds(sup, lang, type, imports, env));
//}

ruCheckVars(vars : Tree<int, RuVar>, lang : RuLang, decl : RuDecl, imports : Tree<int, Set<int>>, env : RuEnv) -> void {
	traverseInOrder(vars, \id, v -> ruCheckTypePreceeds(v.type, lang, decl, imports, env));
}

ruCheckTerm(term : RuTerm, vars : Tree<int, RuVar>, lang : RuLang, decl : RuDecl, imports : Tree<int, Set<int>>, env : RuEnv) -> void {
	ruCheckTypePreceeds(term.type, lang, decl, imports, env);
	iter(term.nodes, \node -> 
		switch (node) {
			RuConstRef(id): {
				if (!containsKeyTree(lang.consts, id)) {
					env.out.onError("symbol '" + id2s(id) + "' is not declared as constant", [ruDeclPlace(decl, env)]);
				}
			}
			RuVar(id, type): {
				if (!containsKeyTree(vars, id)) {
					env.out.onError("variable '" + id2s(id) + "' is not declared as variable", [ruDeclPlace(decl, env)]);
				}
			}
		}
	);
}

ruCheckTypePreceeds(type_id : int, lang : RuLang, decl : RuDecl, imports : Tree<int, Set<int>>, env : RuEnv) -> void {
	switch (lookupTree(lang.types, type_id)) {
		Some(type): {
			if (!ruDeclInfoPreceeds(type.info, decl.info, imports)) {
				env.out.onError("type: '" + id2s(type_id) + "' must preceed '" + id2s(decl.info.id) + "'", [ruDeclPlace(decl, env)]);
			}
		}
		None(): {
			env.out.onError("type: '" + id2s(type_id) + "' is undefined", [ruDeclPlace(decl, env)]);
		}
	}
}

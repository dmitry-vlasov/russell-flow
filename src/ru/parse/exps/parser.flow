import base/trie2;
import ru/util/utils;

export {
	RuParsedExp(nodes : [RuParsedNode], pos : int);
		RuParsedNode ::= RuParsedRule, RuVar;
		RuParsedRule(ruleType : int, arityLen : int);

	ruMakeParsedRule(rule : int, type : int, arity : int, len : int) -> RuParsedRule;

	RuTypeParser(
		trie   : RuTrie2<int, RuParsedRule>,
		supers : Tree<int, RuRule>,
	);
	ruNoTypeParser = RuTypeParser(ruTrie2Empty, makeTree());

	ruAddRule2TypeParserTree(rule : RuRule, tenv : Tree<int, RuTypeParser>, env : RuEnv) -> Tree<int, RuTypeParser>;
	ruAddRule2TypeParser(rule : RuRule, te : RuTypeParser, env : RuEnv) -> RuTypeParser;	
	
	ruRemoveTermFromTrie2(term : RuTerm, trie : RuTrie2<int, RuParsedRule>) -> RuTrie2<int, RuParsedRule>;
	ruMergeTypeParser(e1 : RuTypeParser, e2 : RuTypeParser) -> RuTypeParser;
	ruMergeTypeParserTree(e1 : Tree<int, RuTypeParser>, e2 : Tree<int, RuTypeParser>) -> Tree<int, RuTypeParser>;
	ruMakeTypeParser(type : RuType, env : RuEnv) -> RuTypeParser;

	ruTypeParser2s(tenv : RuTypeParser) -> string;
	ruTypeParserTree2s(tree : Tree<int, RuTypeParser>) -> string;
}

ruMakeParsedRule(rule : int, type : int, arity : int, len : int) -> RuParsedRule {
	RuParsedRule(
		ruMakeRuleType(rule, type),
		ruMakeArityLen(arity, len)
	);
}

ruAddRule2TypeParserTree(rule : RuRule, tenv : Tree<int, RuTypeParser>, env : RuEnv) -> Tree<int, RuTypeParser> {
	switch (lookupTree(tenv, rule.term.type)) {
		Some(te): {
			setTree(tenv, rule.term.type, ruAddRule2TypeParser(rule, te, env));
		}
		None(): tenv;
	}
}

ruAddRule2TypeParser(rule : RuRule, te : RuTypeParser, env : RuEnv) -> RuTypeParser {
	if (ruTermIsVar(rule.term)) te else {
		RuTypeParser(te with
			trie = ruAddTerm2RuTrie2(rule.term, 
				Some(ruMakeParsedRule(rule.info.id, rule.term.type, sizeTree(rule.vars), 0)),
				te.trie, env
			)
		);
	}
}

ruAddTerm2RuTrie2(term : RuTerm, rule : Maybe<RuParsedRule>, trie : RuTrie2<int, RuParsedRule>, env : RuEnv) -> RuTrie2<int, RuParsedRule> {
	ruAdd2Trie2(trie, map(term.nodes, ruTermNode2Key), rule, 
		\a1, a2 -> {
			if (a1 != a2) {
				env.out.error("rule term: '" + ruTerm2s(term) + "' is already used", []);
			}
			a1
		}
	)
}

ruTermNode2Key(n : RuTermNode) -> Pair<int, bool> {
	switch (n) {
		RuConstRef(id):  Pair(id, false);
		RuVar(id, type): Pair(type, true);
	}
}

ruRemoveTermFromTrie2(term : RuTerm, trie : RuTrie2<int, RuParsedRule>) -> RuTrie2<int, RuParsedRule> {
	ruRemoveFromTrie2(map(term.nodes, ruTermNode2Key), trie);
}

ruMergeTypeParser(e1 : RuTypeParser, e2 : RuTypeParser) -> RuTypeParser {
	RuTypeParser(
		ruMergeRuTrie2(e1.trie, e2.trie, \a1, a2 -> a1),
		mergeTree(e1.supers, e2.supers)
	)
}

ruMergeTypeParserTree(t1 : Tree<int, RuTypeParser>, t2 : Tree<int, RuTypeParser>) -> Tree<int, RuTypeParser> {
	mergeTreeCustom(t1, t2, \__, e1, e2 -> ruMergeTypeParser(e1, e2));
}

ruMakeTypeParser(type : RuType, env : RuEnv) -> RuTypeParser {
	RuTypeParser(
		ruAddTerm2RuTrie2(
			RuTerm(type.info.id, [RuVar(ruIdX(), type.info.id)], type.info.pos), 
			None(),
			ruTrie2Empty, env
		),
		fold(type.supers, makeTree(), \ac, super -> 
			setTree(ac, super, ruMakeSuperRule(super, type.info.id, type.info.src, type.info.pos))
		)
	)
}

ruTypeParser2s(tenv : RuTypeParser) -> string {
	ruTrie2Tos(tenv.trie, id2s, \n -> id2s(ruRuleType2Rule(n.ruleType)));
}

ruTypeParserTree2s(tree : Tree<int, RuTypeParser>) -> string {
	foldTree(tree, "", \type, tenv, acc ->
		acc + "\ntype: " + id2s(type) + "\n" + strIndent(ruTypeParser2s(tenv))
	);
}

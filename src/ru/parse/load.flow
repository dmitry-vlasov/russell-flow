import base/load;
import ru/cache;

export {
	RuLoaded ::= RuRawSource, RuCachedSource;

	ruLoadAll(conf : RuConf, module : string, from_cache : (string, RuConf) -> Maybe<RuCachedSource>) -> Maybe<Tree<string, RuLoaded>>;
	ruLoadOne(conf : RuConf, module : string, from_cache : (string, RuConf) -> Maybe<RuCachedSource>) -> Maybe<RuLoaded>;

	ruLoadDescr = RuLoadDescr("/*", "*/", "//", "\n", "import", ";;", ".ru");
}

ruLoadAll(conf : RuConf, module : string, from_cache : (string, RuConf) -> Maybe<RuCachedSource>) -> Maybe<Tree<string, RuLoaded>> {
	err_count = ref 0;
	start = timestamp();
	if (conf.verbose > 1) {
		conf.onMessage("loading: " + module);
	}
	loaded = ruLoadImports([module], ruAddErrCounter(conf, err_count), from_cache, makeTree());
	if (conf.verbose > 0) {
		conf.onMessage(strRight(ruLoadDescr.ext, 1) + " loaded: " + i2s(sizeTree(loaded)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s");
	}
	if (^err_count == 0) {
		Some(loaded);
	} else {
		None();
	}
}

ruLoadOne(conf : RuConf, module : string, from_cache : (string, RuConf) -> Maybe<RuCachedSource>) -> Maybe<RuLoaded> {
	switch (from_cache(module, conf)) {
		Some(src): Some(src);
		None():    cast(ruLoadRawSource(module, conf, ruLoadDescr) : Maybe<RuRawSource> -> Maybe<RuLoaded>);
	}
}

ruLoadImports(imports : [string], conf : RuConf, from_cache : (string, RuConf) -> Maybe<RuCachedSource>, acc : Tree<string, RuLoaded>) -> Tree<string, RuLoaded> {
	loaded_file = \loaded -> {
		switch (loaded) {
			RuCachedSource(src, __,__):  src.info.module;
			RuRawSource(__,__, info): info.module;
		}
	}
	loaded_imports = \loaded -> {
		switch (loaded) {
			RuCachedSource(src, __,__):    map(src.imports, \imp -> imp.module);
			RuRawSource(imps,__, info): imps;
		}
	}
	if (imports == []) acc else {
		loaded : [RuLoaded]  = filtermap(ruConcurrent(map(imports, \imp -> \ -> ruLoadOne(conf, imp, from_cache))), idfn);
		acc1 = fold(loaded, acc, \ac, l -> setTree(ac, loaded_file(l), l));
		new_imports = fold(loaded, makeSet(), \ac, l -> 
			fold(loaded_imports(l), ac, \a, p ->
				if (containsKeyTree(acc1, ruTrimPath(p, conf, ruLoadDescr.ext))) a else insertSet(a, p)
			)
		);
		ruLoadImports(set2array(new_imports), conf, from_cache, acc1)
	}
}

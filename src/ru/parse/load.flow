import base/util/timer;
import ru/cache/cache;
import ru/parse/source;

export {
	RuLoaded ::= RuRawSource, RuSource;

	ruLoadAll(env : RuEnv, module : int, from_cache : (int) -> Maybe<RuSource>) -> Maybe<Tree<int, RuLoaded>>;
	ruLoadOne(env : RuEnv, module : int, from_cache : (int) -> Maybe<RuSource>) -> Maybe<RuLoaded>;

	ruLoader = RuLoader(
		"/*", "*/", "//", "\n", "import", ";;", ".ru", 
		ruCacheCodeLoader
	);

	ruCacheCodeLoader(module : int, env : RuEnv) -> Maybe<RuCode>;
}

ruCacheCodeLoader(module : int, env : RuEnv) -> Maybe<RuCode> {
	cached = ruCodeCacheGet(module, env);
	if (ruCodeIsDefined(cached)) Some(cached) else {
		ruFileCodeLoader(module, env);
	}
}

ruLoadAll(env : RuEnv, module : int, from_cache : (int) -> Maybe<RuSource>) -> Maybe<Tree<int, RuLoaded>> {
	err_count = ref 0;
	timer = ruMakeTimer();
	if (ruVerbose(env.conf) > 1) {
		env.out.onMessage("\tloading: '" + id2s(module) + "'");
	}
	loaded = ruLoadImports([module], ruAddErrCounter2Env(env, err_count), from_cache, makeTree());
	if (ruVerbose(env.conf) > 0) {
		env.out.onMessage(strRight(ruLoader.ext, 1) + " loaded: " + i2s(sizeTree(loaded)) + " files in " + ruTimePassed2s(timer));
	}
	if (^err_count == 0) {
		Some(loaded);
	} else {
		env.out.onError(strRight(ruLoader.ext, 1) + " failed to load: '" + id2s(module) + "'", []);
		None();
	}
}

ruLoadOne(env : RuEnv, module : int, from_cache : (int) -> Maybe<RuSource>) -> Maybe<RuLoaded> {
	switch (from_cache(module)) {
		Some(src): {
			if (ruVerbose(env.conf) > 2) {
				env.out.onMessage("\t\tgetting: " + id2s(module) + " from cache");
			}
			Some(src);
		}
		None(): {
			if (ruVerbose(env.conf) > 2) {
				env.out.onMessage("\t\tparsing source of: " + id2s(module));
			}
			cast(ruLoadRawSource(module, env, ruLoader) : Maybe<RuRawSource> -> Maybe<RuLoaded>);
		}
	}
}

ruLoadImports(imports : [int], env : RuEnv, from_cache : (int) -> Maybe<RuSource>, acc : Tree<int, RuLoaded>) -> Tree<int, RuLoaded> {
	if (imports == []) acc else {
		timer = ruMakeTimer();
		loaded : [RuLoaded]  = filtermap(ruConcurrent(map(imports, \imp -> \ -> ruLoadOne(env, imp, from_cache))), idfn);
		acc1 = fold(loaded, acc, \ac, l -> setTree(ac, ruSourceModule(l), l));
		new_imports = fold(loaded, makeSet(), \ac, l -> 
			fold(ruSourceImports(l), ac, \a, p -> {
				imp = s2id(ruTrimPath(id2s(p), env.conf, ruLoader.ext));
				if (containsKeyTree(acc1, imp)) a else insertSet(a, imp);
			})
		);
		ruLoadImports(set2array(new_imports), env, from_cache, acc1)
	}
}

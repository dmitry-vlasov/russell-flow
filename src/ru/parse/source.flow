
import base/load;
import ru/parse/src;
import ru/src;

export {
	RuParsed ::= RuParseSource, RuSource;
	RuAnySource ::= RuRawSource, RuParseSource, RuSource;

	ruSourceImports(src : RuAnySource) -> [int];
	ruSourceModule(src : RuAnySource) -> int;

	ruDetectCyclicImports(parsed : Tree<int, RuAnySource>, env : RuEnv) -> bool;
	ruRevealCyclicImport(parsed : Tree<int, RuAnySource>) -> string;
}

ruSourceImports(src : RuAnySource) -> [int] {
	switch (src) {
		RuSource(imports,__,__,__):      map(imports, \imp -> imp.id);
		RuParseSource(imports,__,__,__): map(imports, \imp -> imp.module);
		RuRawSource(imports,__,__):      imports;
	}
}

ruSourceModule(src : RuAnySource) -> int {
	switch (src) {
		RuSource(__,__,__,info):      info.id;
		RuParseSource(__,__,__,info): info.id;
		RuRawSource(__,__,info):      info.id;
	}
}

ruDetectCyclicImports(parsed : Tree<int, RuAnySource>, env : RuEnv) -> bool {
	if (isEmptyTree(parsed)) false else {
		ready = filter(
			getTreeValues(parsed), 
			\src -> forall(ruSourceImports(src), \imp -> !containsKeyTree(parsed, imp))
		);
		if (ready == []) {
			env.out.onError("cyclic import detected:\n" + ruRevealCyclicImport(parsed), []);
			true
		} else {
			less_parsed = fold(ready, parsed, \acc, src -> removeFromTree(acc, ruSourceModule(src)));
			ruDetectCyclicImports(less_parsed, env);
		}
	}
}

ruRevealCyclicImport(parsed : Tree<int, RuAnySource>) -> string {
	strIndent(strGlue(map(getTreeKeys(parsed), \f -> "'" + id2s(f) + "'"), "\n"));
}


ruRevealCyclicImport1(parsed : Tree<int, RuParsed>) -> string {
	cycles = filtermap(getTreeValues(parsed), \src -> {
		//println("ruRevealCyclicImport observing: " + id2s(ruSourceModule(src)));
		cycs = ruMakeImportsCycle(src, parsed, makeSet1(ruSourceModule(src)));
		if (cycs == []) {
			println("cycle not found");
			None(); 
		} else {
			println("found cycle: " + i2s(length(cycs)) + ": '" + strGlue(map(cycs, id2s), ", ") + "'");
			Some(cycs);
		}
	});
	if (cycles == []) "" else {
		min_cycle = fold(tail(cycles), cycles[0], \acc, cycle -> if (length(cycle) < length(acc)) cycle else acc);
		strGlue(map(min_cycle, \s -> "\t" + id2s(s)), "\n");
	}
}

ruMakeImportsCycle(src : RuAnySource, parsed : Tree<int, RuAnySource>, acc : Set<int>) -> [int] {
	//println("ruMakeImportsCycle observing: " + ruSourceModule(src));
	imports = ruSourceImports(src);
	switch (find(imports, \imp -> containsSet(acc, imp))) {
		Some(imp): set2array(acc);
		None(): {
			cycles = filtermap(imports, \imp ->
				maybeMap(lookupTree(parsed, imp), \new_src -> 
					//ruMakeImportsCycle(new_src, removeFromTree(parsed, ruSourceModule(src)), insertSet(acc, imp))
					ruMakeImportsCycle(new_src, parsed, insertSet(acc, imp))
				)
			);
			if (cycles == []) [] else {
				fold(tail(cycles), cycles[0], \ac, cycle -> 
					if (length(cycle) < length(ac)) cycle else ac
				);
			}
		}
	} 
}

import base/concurrent;
import base/db;
import ru/src;

export {
	ruComments2ascii(sources : [RuSource], env : RuEnv) -> [RuSource];
}

ruComments2ascii(sources : [RuSource], env : RuEnv) -> [RuSource] {
	vars = if (env.conf.project == "") makeTree() else {
		typesetting_json = ruGetDbItem(env.conf.project, ["vars_typesetting"]);
		typesetting_array = map(getJsonArrayValue(typesetting_json, []), \var -> {
			id = getJsonStringField(var, "unicode", "");
			ascii = getJsonStringField(var, "ascii", "");
			Pair(s2id(id), s2id(ascii));
		});
		pairs2tree(typesetting_array);
	}
	consts = fold(sources, makeTree(), \acc, src -> 
		fold(src.decls, acc, \ac, decl ->
			switch (decl) {
				RuConst(info, ascii,__): 
					setTree(ac, info.id, if (ascii != -1) ascii else info.id);
				default: ac;
			}
		)
	);
	proc_comms = \comms, e -> map(comms, \comm -> ruComment2Ascii(comm, vars, consts, e));
	proc_info = \info, e -> RuDeclInfo(info with comments = proc_comms(info.comments, e));
	ruConcurrent(map(sources, \src -> \e ->
		RuSource(src with 
			decls = map(src.decls, \decl ->
				switch (decl) {
					RuConst(info, __,__):      RuConst(decl with info = proc_info(info, e));
					RuType(info, __):          RuType(decl with info = proc_info(info, e));
					RuRule(info, __,__):       RuRule(decl with info = proc_info(info, e));
					RuAxiom(info, __):         RuAxiom(decl with info = proc_info(info, e));
					RuTheorem(info, __,__,__): RuTheorem(decl with info = proc_info(info, e));
					RuDef(info,__,__,__):      RuDef(decl with info = proc_info(info, e));
				}
			),
			comments = proc_comms(src.comments, e)
		)
	), env);
}


ruComment2Ascii(comm : RuComment, vars : Tree<int, int>, consts : Tree<int, int>, env : RuEnv) -> RuComment {
	RuComment(comm with 
		text = ruTransformTokensInQuoted(comm.text, "`", \t -> {
			id = s2id_(t);
			if (id == -1) t else {
				switch (lookupTree(consts, id)) {
					Some(ascii): id2s(ascii);
					None(): switch (lookupTree(vars, id)) {
						Some(v): id2s(v);
						None(): t;
					}
				}
			}
		})
	);
}

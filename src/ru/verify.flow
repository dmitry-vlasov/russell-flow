import ru/subst;
import command;

export {
	RuVerifyAcc(
		math : RuMath,
		approved  : Set<string>,
		disproved : Set<string>
	);
	ruVerifyTheorem(th : RuTheorem, math : RuMath, conf : RuConf) -> Maybe<RuTheorem>;
	ruVerifySource(src : RuSource, acc : RuVerifyAcc, conf : RuConf) -> Pair<RuSource, RuVerifyAcc>;
	// TODO: remove ruVerifySource1
	ruVerifySource1(src : RuSource, math : RuMath, conf : RuConf) -> Maybe<RuSource>;
	ruVerifyMath(math : RuMath, conf : RuConf) -> Maybe<RuMath>;
	ruMatchStep(step : RuStep, th : RuTheorem, math : RuMath, conf : RuConf) -> Maybe<Pair<RuAssertion, Tree<RuVar, RuExp>>>;
	ruCommVerify : RuComm;
}

ruCommVerify = RuComm(
	"verify", "misc", "verify Russell target", "target",
	[RuCommArg("target", false, "the target: a theorem name, file name or 'all' for verification of all math", "")],
	ruRunVerify
);

ruVerifyMath(math : RuMath, conf : RuConf) -> Maybe<RuMath> {
	err_count = ref 0;
	start = timestamp();
	acc = ruDoVerifyMath(math.sources, RuVerifyAcc(math, makeSet(), makeSet()), conf);
	if (conf.verbose > 0) {
		conf.onMessage(
			"ru verified: " +i2s(sizeTree(math.sources)) + " files in " + d2st((timestamp() - start)/ 1000.0, 2) + "s" +
			(if (conf.verbose > 2) "\n\tapproved theorems:\n" + strGlue(map(set2array(acc.approved), \th -> "\t" + th), "\n") else "")
		);
	}
	if (sizeSet(acc.disproved) > 0) {
		conf.onMessage(
			(if (conf.verbose > 0) "" else "ru disproved: " +i2s(sizeSet(acc.disproved)) + " theorems in " + d2st((timestamp() - start)/ 1000.0, 2) + "s\n") +
			"\tdisproved theorems:\n" + strGlue(map(set2array(acc.disproved), \th -> "\t\t" + th), "\n")
		);
		None();
	} else {
		Some(acc.math);
	}
}

ruDoVerifyMath(left : Tree<string, RuSource>, acc : RuVerifyAcc, conf : RuConf) -> RuVerifyAcc {
	if (sizeTree(left) == 0) acc else {
		ready = filter(
			getTreeValues(left), 
			\src -> forall(src.imports, \imp -> !containsKeyTree(left, imp.module))
		);
		if (ready == []) {
			conf.onError("cannot verify: " +i2s(sizeTree(left)) + " files - cyclic import", []);
			acc;
		} else {
			verified = ruConcurrent(map(ready, \s -> \-> ruVerifySource(s, acc, conf)));
			new_acc = fold(verified, acc, \ac, p -> {
				src = p.first;
				RuVerifyAcc(
					RuMath(ac.math with 
						assertions = fold(src.decls, ac.math.assertions, \a, decl ->
							switch (decl) {
								RuTheorem(descr,__,__,__,__,__,__,__): setTree(a, descr.name, decl);
								default: a;
							}
						), 
						sources = setTree(ac.math.sources, src.info.module, src)
					),
					mergeSets(ac.approved, p.second.approved),
					mergeSets(ac.disproved, p.second.disproved)
				);
			});
			new_left = fold(ready, left, \ac, src -> removeFromTree(ac, src.info.module));
			ruDoVerifyMath(new_left, new_acc, conf);
		}
	}
}

ruVerifySource(src : RuSource, acc : RuVerifyAcc, conf : RuConf) -> Pair<RuSource, RuVerifyAcc> {
	start = timestamp();
	approve_th = \ac, decl -> Pair(concat(ac.first, [decl]), 
		RuVerifyAcc(ac.second with
			math = RuMath(ac.second.math with
				assertions = setTree(ac.second.math.assertions, ruDeclName(decl), decl)
			),
			approved = insertSet(ac.second.approved, ruDeclName(decl))
		)
	);
	approve = \ac, decl -> Pair(concat(ac.first, [decl]), 
		RuVerifyAcc(ac.second with
			approved = insertSet(ac.second.approved, ruDeclName(decl))
		)
	);
	disprove = \ac, decl -> Pair(ac.first,
		RuVerifyAcc(ac.second with 
			disproved = insertSet(ac.second.disproved, ruDeclName(decl))
		)
	);

	p = fold(src.decls, Pair([], acc), \ac, decl -> 
		switch (decl) {
			RuTheorem(__,__,__,__,__,__,__,__): {
				switch (ruDoVerifyTheorem(decl, ac.second, conf)) {
					Some(th): approve_th(ac, th);
					None(): disprove(ac, decl);
				}
			}
			RuAxiom(__,__,__,__,__,__): approve(ac, decl);
			RuDef(__,__,__,__,__,__,__,__): approve(ac, decl);
			default: Pair(concat(ac.first, [decl]), ac.second);
		}
	);
	if (conf.verbose > 1) {
		conf.onMessage("\tru verified: '" + src.info.module + "' in " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
	}
	Pair(RuSource(src with decls = p.first), p.second);
}

ruVerifySource1(src : RuSource, math : RuMath, conf : RuConf) -> Maybe<RuSource> {
	start = timestamp();
	approve = \ac, decl -> Pair(
		concat(ac.first, [decl]), 
		RuMath(ac.second with
			assertions = setTree(ac.second.assertions, ruDeclName(decl), decl)
		)
	);
	err = ref false;
	p = fold(src.decls, Pair([], math), \ac, decl -> 
		switch (decl) {
			RuTheorem(__,__,__,__,__,__,__,__): {
				switch (ruDoVerifyTheorem1(decl, ac.second, conf)) {
					Some(th): approve(ac, th);
					None(): { err := true; ac; };
				}
			}
			default: Pair(concat(ac.first, [decl]), ac.second);
		}
	);
	if (conf.verbose > 1) {
		conf.onMessage("\tru verified: '" + src.info.module + "' in " + d2st((timestamp() - start)/ 1000.0, 4) + " s");
	}
	if (^err) None() else Some(RuSource(src with decls = p.first));
}

ruStepRefExp(ref : RuRef, th : RuTheorem) -> RuExp {
	switch (ref) {
		RuHypRef(i,__): th.hyps[i].expr;
		RuStepRef(i,__): th.proof.steps[i].expr;
	}
}

ruMatchStep(step : RuStep, th : RuTheorem, math : RuMath, conf0 : RuConf) -> Maybe<Pair<RuAssertion, Tree<RuVar, RuExp>>> {
	step_ass_mgs = \ ->
		switch (lookupTree(math.assertions, step.assertion)) {
			Some(ass): "\nstep assertion:\n" + ruAssertion2s(ass, math.rules);
			None(): "";
		}
	conf = ruAddErr2Conf(conf0, "\nstep match failed, step: " + ru2s(step, math.rules) + step_ass_mgs());
	matchExps = \e1, e2 -> {
		switch (ruMatchExp(e1, e2, math, conf)) {
			Some(v): Some(v);
			None(): {
				conf.onError(
					"expression:\n\t" + ru2s(e1, math.rules) + "\ndo not match with:\n\t" + ru2s(e2, math.rules), 
					[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			}
		}
	}
	joinSubst = \s1, s2 -> {
		switch (ruMergeSubst(s1, s2)) {
			Some(s): Some(s);
			None(): {
				conf.onError(
					"substution:\n" + ruSubst2s(s1, math) + "\ncannot be joined with:\n" + ruSubst2s(s2, math), 
					[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			}
		}
	}
	switch (lookupTree(math.assertions, step.assertion)) {
		Some(ass): {
			if (length(step.refs) != length(ass.hyps)) {
				conf.onError(
					"number of refs: " + i2s(length(step.refs)) + " mismatch assertion arity: " + i2s(length(ass.hyps)), 
					[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			} else
			maybeMap(
				maybeBind(
					foldi(ass.hyps, Some(makeTree()), \i, ac, h -> {
						switch (ac) {
							None(): None();
							Some(s): 
								if (i >= length(step.refs)) None() else
								maybeBind(
									matchExps(ruStepRefExp(step.refs[i], th), h.expr),
									\x -> joinSubst(s, x)
								);
						}
					}), 
					\s -> maybeBind(
						matchExps(step.expr, ass.prop),
						\x -> joinSubst(s, x)
					)
				),
				\subst -> Pair(ass, subst)
			);
		}
		None(): {
			conf.onError(
				"unknown assertion '" + step.assertion + "'", 
				[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
			);
			None();
		}
	}
}

ruDoVerifyTheorem(th : RuTheorem, acc0 : RuVerifyAcc, conf : RuConf) -> Maybe<RuTheorem> {
	math = acc0.math;
	ret = maybeBind(
		fold(th.proof.steps, Some(makeSet()), \acc, step ->
			switch (acc) {
				None(): acc;
				Some(disjs): {
					if (!containsSet(acc0.approved, step.assertion)) {
						conf.onError(
							"Step '" + ru2s(step, math.rules) + "' depends on a non-verified assertion " + step.assertion,
							[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
						);
						None();
					} else {
						switch (ruMatchStep(step, th, math, conf)) {
							Some(p): 
								ruComputeDisjs(p.second, disjs, p.first.disjs, 
									\disj, common_vars -> conf.onError(
										"disjointed variables violation, variables: " + disj.v1.name + " and " + disj.v2.name +
										" are mappped onto expressions, with common vars: " + strGlue(map(set2array(common_vars), \v -> v.name), ", "), 
										[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
									)
								);
							None(): None();
						}
					}
				}
			}
		), 
		\ds -> {
			th_vars = ruAssertion2Vars(th);
			th_ds = filterSet(ds, \d -> containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2));
			pr_ds = filterSet(ds, \d -> !(containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2)));
			if (th.prop.nodes != lastElement(th.proof.steps, ruNoStep).expr.nodes) {
				conf.onError(
					"assertion statement does not coincide with the proved statement", 
					[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			} else {
				Some(RuTheorem(th with 
					disjs = th_ds,
					proof = RuProof(th.proof with disjs = pr_ds)
				));
			}
		}
	)
	if (isNone(ret)) {
		conf.onError(
			"verification of theorem '" + th.descr.name + "' failed\n" + ru2s(th, math.rules),
			[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
		);
		quit(0);
	} else if (conf.verbose > 2) {
		conf.onMessage("\tru theorem verified: '" + th.descr.name + "'");
	}
	ret;
}

ruDoVerifyTheorem1(th : RuTheorem, math : RuMath, conf : RuConf) -> Maybe<RuTheorem> {
	ret = maybeBind(
		fold(th.proof.steps, Some(makeSet()), \acc, step ->
			switch (acc) {
				None(): acc;
				Some(disjs): {
					switch (ruMatchStep(step, th, math, conf)) {
							Some(p): 
								ruComputeDisjs(p.second, disjs, p.first.disjs, 
									\disj, common_vars -> conf.onError(
										"disjointed variables violation, variables: " + disj.v1.name + " and " + disj.v2.name +
										" are mappped onto expressions, with common vars: " + strGlue(map(set2array(common_vars), \v -> v.name), ", "), 
										[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
									)
								);
							None(): None();
						}
					}
			}
		), 
		\ds -> {
			th_vars = ruAssertion2Vars(th);
			th_ds = filterSet(ds, \d -> containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2));
			pr_ds = filterSet(ds, \d -> !(containsSet(th_vars, d.v1) && containsSet(th_vars, d.v2)));
			if (th.prop.nodes != lastElement(th.proof.steps, ruNoStep).expr.nodes) {
				conf.onError(
					"assertion statement does not coincide with the proved statement", 
					[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
				);
				None();
			} else {
				Some(RuTheorem(th with 
					disjs = th_ds,
					proof = RuProof(th.proof with disjs = pr_ds)
				));
			}
		}
	)
	if (isNone(ret)) {
		conf.onError(
			"Theorem '" + th.descr.name + "' is disproved\n" + ru2s(th, math.rules),
			[RuPlace(eitherMap(ruNameSource(th.descr.name, math), \src -> src.info.module, ""), th.pos)]
		);
		//quit(0);
	} else if (conf.verbose > 2) {
		conf.onMessage("ru theorem is disproved: '" + th.descr.name + "'");
	}
	ret;
}

ruVerifyTheorem(th : RuTheorem, math : RuMath, conf : RuConf) -> Maybe<RuTheorem> {
	maybeBind(lookupTree(math.sources, th.descr.source), \src -> {
		deps = fold(src.imports, 
			fold(src.decls, Pair(makeSet(), false), \acc, decl ->
				if (acc.second) acc else
				if (ruDeclName(decl) == th.descr.name) Pair(acc.first, true) else	
				Pair(insertSet(acc.first, ruDeclName(decl)), false)
			).first, 
			\acc, imp -> ruSourceDeclNames(imp.module, acc, math, conf)
		);
		ruDoVerifyTheorem(th, RuVerifyAcc(math, deps, makeSet()), conf);
	});
}

ruRunVerify(task : RuTask, env : RuEnv) -> Maybe<RuEnv> {
	target0 = lookupTreeDef(task.args, "target", "");
	target = if (!endsWith(target0, ".ru")) target0 else ruTrimPath(target0, env.conf, ".ru");
	math = env.ruMath;
	conf = env.conf;
	m = if (target == "" || target == "all" || target == "1") {
		//ruDebugLog("target: " + target, math.conf);
		ruVerifyMath(math, conf);
	} else {
		switch (lookupTree(math.assertions, target)) {
			Some(th): {
				switch (th) {
					RuTheorem(__, __,__,__,__,__,__,__): {
						start = timestamp();
						verified = ruVerifyTheorem(th, math, conf);
						ret = maybeMap(verified, \t -> ruReplaceAssertion(t, math, conf));
						if (conf.verbose > 0) {
							msg = "ru " + (if (isSome(verified)) "verified" else "disproved") + " " + target + "' in " + d2st((timestamp() - start)/ 1000.0, 2) + "s";
							conf.onMessage(msg);
						}
						ret;
					}
					default: {
						conf.onError("assertion '" + target + "' is not a theorem", []);
						None();
					}
				}
			}
			None(): {
				switch (lookupTree(math.sources, target)) {
					Some(src): {
						start = timestamp();
						// ruSourceDeclNames(src : string, acc : Set<string>, math : RuMath, conf : RuConf) -> Set<string>;
						deps = fold(src.imports, makeSet(), \acc, imp -> ruSourceDeclNames(imp.module, acc, math, conf));
						p = ruVerifySource(src, RuVerifyAcc(math, deps, makeSet()), conf);
						src_verified = p.first;
						acc = p.second;
						if (conf.verbose > 0) {
							conf.onMessage(
								"ru verified: '" + target + "' in " + d2st((timestamp() - start)/ 1000.0, 2) + "s" +
								(if (conf.verbose > 2) "\n\tapproved theorems:\n" + strGlue(map(set2array(acc.approved), \th -> "\t\t" + th), "\n") else "")
							);
						}
						if (sizeSet(acc.disproved) > 0) {
							conf.onMessage(
								(if (conf.verbose > 0) "" else "ru disproved: '" + target + "' in " + d2st((timestamp() - start)/ 1000.0, 2) + "s\n") +
								"\tdisproved theorems:\n" + strGlue(map(set2array(acc.disproved), \th -> "\t\t" + th), "\n")
							);
							None();
						} else {
							Some(RuMath(acc.math with 
								assertions = fold(src_verified.decls, acc.math.assertions, \a, decl ->
									switch (decl) {
										RuTheorem(descr,__,__,__,__,__,__,__): setTree(a, descr.name, decl);
										default: a;
									}
								), 
								sources = setTree(acc.math.sources, src_verified.info.module, src_verified)
							));
						}
					}
					None(): {
						conf.onError("verification target '" + target + "' is not found", []);
						None();
					}
				}
			}
		}
	}
	maybeMap(m, \new_math -> RuEnv(env with ruMath = new_math));
}

import ds/list;
import ds/vector;
import ru/index;
import ru/unify/exps;

export {
	RuUnified(
		sub : RuSubst,
		data : ?,
		expr : RuExp
	);
	ruUnifyIndex(e : RuExp, index : RuIndex<?>, sub : RuSubst, math : RuMath, env : RuEnv) -> [RuUnified<?>];

	RuSimilar(
		data : ?,
		expr : RuExp
	);
	ruFindSimilarIndex(e : RuExp, index : RuIndex<?>, math : RuMath, env : RuEnv) -> [RuSimilar<?>];
}

ruUnifyIndex(e : RuExp, index : RuIndex<?>, sub : RuSubst, math : RuMath, env : RuEnv) -> [RuUnified<?>] {
	acc = RuUnifyIndexAcc(e, sub, ref makeList());
	ruDoUnifyIndex(0, index, math, env, acc);
	list2array(^(acc.unified));
}

RuUnifyIndexAcc(
	expr : RuExp,
	sub : RuSubst,
	unified : ref List<RuUnified<?>>
);

ruDoUnifyIndex(i : int, index : RuIndex<?>, math : RuMath, env : RuEnv, acc : RuUnifyIndexAcc) -> void {
	unify_step = \j, var, end, ex -> {
		switch (ruLookupSubst(acc.sub, var)) {
			Some(ex1): {
				switch (ruUnifyExps([ex1, ex], acc.sub, math, env)) {
					Some(s): ruDoUnifyIndexNode(j, end, math, env, RuUnifyIndexAcc(acc with sub = s));
					None(): { }
				}
			}
			None():
				switch (ruAdd2Subst(acc.sub, var, ex)) {
					Some(s): ruDoUnifyIndexNode(j, end, math, env, RuUnifyIndexAcc(acc with sub = s));
					None(): { }
				}
		}
	}
	unify_var = \j, var, ex_type, end, e ->
		if (ex_type == var.type) unify_step(j, var, end, e())
		else {
			switch (ruSuperRule(var.type, ex_type, math.decls.lang, env)) {
				Some(sr): {
					ex = RuExp(concat([ruMakeRuleNode(sr.info.id, var.type, 1, 1)], e().nodes), -1);
					unify_step(j, var, end, ex);
				}
				None(): { }
			}
		}
	if (i < length(acc.expr.nodes)) {
		switch (acc.expr.nodes[i]) {
			RuRuleNode(rule_type, arity_len): {
				rule = ruRuleType2Rule(rule_type);
				type = ruRuleType2Type(rule_type);
				len = ruArityLen2Len(arity_len);
				switch (lookupHashMap(index.rules, rule)) {
					Some(n): ruDoUnifyIndexNode(i, n, math, env, acc);
					None(): { }
				}
				iterHashMap(index.vars, \v, n ->
					unify_var(i + len, RuVar(n.name_id, n.type_id), type, n,
						\-> RuExp(subrange(acc.expr.nodes, i, len + 1), -1)
					)
				);
			}
			RuVar(id, type): {
				iterHashMap(index.rules, \nm, n ->
					iterSet(n.ends, \e -> {
						end = getVectorUnsafe(index.nodes, e);
						unify_var(i, RuVar(id, type), n.type_id, end,
							\-> ruIndexSubexpr(n, end)
						);
					})
				);
				iterHashMap(index.vars, \v, n ->
					unify_var(i, RuVar(n.name_id, n.type_id), type, n,
						\-> RuExp([RuVar(id, type)], -1)
					)
				);
			}
		}
	}
}

ruDoUnifyIndexNode(i : int, node : RuIndexNode<?>, math : RuMath, env : RuEnv, acc : RuUnifyIndexAcc) -> void {
	if (i + 1 == length(acc.expr.nodes)) {
		iter(node.data, \d ->
			acc.unified := Cons(RuUnified(acc.sub, d, ruApplySubst(acc.expr, acc.sub)), ^(acc.unified))
		);
	} else {
		ruDoUnifyIndex(i + 1, node.index, math, env, acc);
	}
}

ruFindSimilarIndex(e : RuExp, index : RuIndex<?>, math : RuMath, env : RuEnv) -> [RuSimilar<?>] {
	acc = RuFindSimilarIndexAcc(e, ref makeList());
	ruDoFindSimilarIndex(0, index, math, env, acc);
	list2array(^(acc.similar));
}

RuFindSimilarIndexAcc(
	expr : RuExp,
	similar : ref List<RuSimilar<?>>
);

ruDoFindSimilarIndex(i : int, index : RuIndex<?>, math : RuMath, env : RuEnv, acc : RuFindSimilarIndexAcc) -> void {
	unify_var = \j, var, ex_type, end ->
		if (ex_type == var.type) ruDoFindSimilarIndexNode(j, end, math, env, acc)
		else {
			switch (ruSuperRule(var.type, ex_type, math.decls.lang, env)) {
				Some(sr): {
					ruDoFindSimilarIndexNode(j, end, math, env, acc);
				}
				None(): { }
			}
		}
	if (i < length(acc.expr.nodes)) {
		switch (acc.expr.nodes[i]) {
			RuRuleNode(rule_type, arity_len): {
				rule = ruRuleType2Rule(rule_type);
				type = ruRuleType2Type(rule_type);
				len = ruArityLen2Len(arity_len);
				switch (lookupHashMap(index.rules, rule)) {
					Some(n): ruDoFindSimilarIndexNode(i, n, math, env, acc);
					None(): { }
				}
				iterHashMap(index.vars, \v, n ->
					unify_var(i + len, RuVar(n.name_id, n.type_id), type, n)
				);
			}
			RuVar(id, type): {
				iterHashMap(index.rules, \nm, n ->
					iterSet(n.ends, \e -> {
						end = getVectorUnsafe(index.nodes, e);
						unify_var(i, RuVar(id, type), n.type_id, end);
					})
				);
				iterHashMap(index.vars, \v, n ->
					unify_var(i, RuVar(n.name_id, n.type_id), type, n)
				);
			}
		}
	}
}

ruDoFindSimilarIndexNode(i : int, node : RuIndexNode<?>, math : RuMath, env : RuEnv, acc : RuFindSimilarIndexAcc) -> void {
	if (i + 1 == length(acc.expr.nodes)) {
		iter(node.data, \d ->
			acc.similar := Cons(RuSimilar(d, acc.expr), ^(acc.similar))
		);
	} else {
		ruDoFindSimilarIndex(i + 1, node.index, math, env, acc);
	}
}


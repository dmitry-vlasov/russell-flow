import ds/list;
import ds/vector;
import base/util/timed;
import ru/index;
import ru/unify/exps;

export {
	RuUnified(
		sub : RuSubst,
		data : ?,
		expr : RuExp
	);
	ruUnifyIndex(e : RuExp, index : RuIndex<?>, sub : RuSubst, math : RuMath, env : RuEnv, timer : RuTaskTimer) -> [RuUnified<?>];

	RuSimilar(
		data : ?,
		expr : RuExp
	);
	ruFindSimilarIndex(e : RuExp, index : RuIndex<?>, math : RuMath, env : RuEnv, timer : RuTaskTimer) -> [RuSimilar<?>];
}

ruUnifyIndex(e : RuExp, index : RuIndex<?>, sub : RuSubst, math : RuMath, env : RuEnv, timer : RuTaskTimer) -> [RuUnified<?>] {
	acc = RuUnifyIndexAcc(e, sub, timer, ref makeList());
	ruDoUnifyIndex(0, index, math, env, acc);
	list2array(^(acc.unified));
}

RuUnifyIndexAcc(
	expr : RuExp,
	sub : RuSubst,
	timer : RuTaskTimer,
	unified : ref List<RuUnified<?>>
);

ruDoUnifyIndex(i : int, index : RuIndex<?>, math : RuMath, env : RuEnv, acc : RuUnifyIndexAcc) -> void {
	if (ruTimeIsOver(acc.timer.timer)) {
		acc.timer.interrupted := true;
	} else {
		unify_step = \j, var, end, ex -> {
			switch (ruLookupSubst(acc.sub, var)) {
				Some(ex1): {
					switch (ruUnifyExps([ex1, ex], acc.sub, math, env)) {
						Some(s): ruDoUnifyIndexNode(j, end, math, env, RuUnifyIndexAcc(acc with sub = s));
						None(): { }
					}
				}
				None():
					switch (ruAdd2Subst(acc.sub, var, ex)) {
						Some(s): ruDoUnifyIndexNode(j, end, math, env, RuUnifyIndexAcc(acc with sub = s));
						None(): { }
					}
			}
		}
		unify_var = \j, var, ex_type, end, e ->
			if (ex_type == var.type) unify_step(j, var, end, e())
			else {
				switch (ruSuperRule(var.type, ex_type, math.decls.lang, env)) {
					Some(sr): {
						ex = RuExp(concat([RuRuleNode(sr.info.id, var.type, 1, 1)], e().nodes), -1);
						unify_step(j, var, end, ex);
					}
					None(): { }
				}
			}
		if (i < length(acc.expr.nodes)) {
			switch (acc.expr.nodes[i]) {
				RuRuleNode(rule, type, arity, len): {
					switch (lookupHashMap(index.rules, rule)) {
						Some(n): ruDoUnifyIndexNode(i, n, math, env, acc);
						None(): { }
					}
					ruIterHashMap(index.vars, \v, n ->
						unify_var(i + len, RuVar(n.name_id, n.type_id), type, n,
							\-> RuExp(subrange(acc.expr.nodes, i, len + 1), -1)
						),
						acc.timer
					);
				}
				RuVar(id, type): {
					ruIterHashMap(index.rules, \nm, n ->
						ruIterSet(n.ends, \e -> {
 							end = getVectorUnsafe(index.nodes, e);
							unify_var(i, RuVar(id, type), n.type_id, end,
								\-> ruIndexSubexpr(n, end)
							);
						}, acc.timer),
						acc.timer
					);
					ruIterHashMap(index.vars, \v, n ->
						unify_var(i, RuVar(n.name_id, n.type_id), type, n,
							\-> RuExp([RuVar(id, type)], -1)
						),
						acc.timer
					);
				}
			}
		}
	}
}

ruDoUnifyIndexNode(i : int, node : RuIndexNode<?>, math : RuMath, env : RuEnv, acc : RuUnifyIndexAcc) -> void {
	if (ruTimeIsOver(acc.timer.timer)) {
		acc.timer.interrupted := true;
	} else {
		if (i + 1 == length(acc.expr.nodes)) {
			ruIter(node.data, \d ->
				acc.unified := Cons(RuUnified(acc.sub, d, ruApplySubst(acc.expr, acc.sub)), ^(acc.unified)), 
				acc.timer
			);
		} else {
			ruDoUnifyIndex(i + 1, node.index, math, env, acc);
		}
	}
}

ruFindSimilarIndex(e : RuExp, index : RuIndex<?>, math : RuMath, env : RuEnv, timer : RuTaskTimer) -> [RuSimilar<?>] {
	acc = RuFindSimilarIndexAcc(e, timer, ref makeList());
	ruDoFindSimilarIndex(0, index, math, env, acc);
	list2array(^(acc.similar));
}

RuFindSimilarIndexAcc(
	expr : RuExp,
	timer : RuTaskTimer,
	similar : ref List<RuSimilar<?>>
);

ruDoFindSimilarIndex(i : int, index : RuIndex<?>, math : RuMath, env : RuEnv, acc : RuFindSimilarIndexAcc) -> void {
	if (ruTimeIsOver(acc.timer.timer)) {
		acc.timer.interrupted := true;
	} else {
		unify_var = \j, var, ex_type, end ->
			if (ex_type == var.type) ruDoFindSimilarIndexNode(j, end, math, env, acc)
			else {
				switch (ruSuperRule(var.type, ex_type, math.decls.lang, env)) {
					Some(sr): {
						ruDoFindSimilarIndexNode(j, end, math, env, acc);
					}
					None(): { }
				}
			}
		if (i < length(acc.expr.nodes)) {
			switch (acc.expr.nodes[i]) {
				RuRuleNode(rule, type, arity, len): {
					switch (lookupHashMap(index.rules, rule)) {
						Some(n): ruDoFindSimilarIndexNode(i, n, math, env, acc);
						None(): { }
					}
					ruIterHashMap(index.vars, \v, n ->
						unify_var(i + len, RuVar(n.name_id, n.type_id), type, n),
						acc.timer
					);
				}
				RuVar(id, type): {
					ruIterHashMap(index.rules, \nm, n ->
						ruIterSet(n.ends, \e -> {
 							end = getVectorUnsafe(index.nodes, e);
							unify_var(i, RuVar(id, type), n.type_id, end);
						}, acc.timer),
						acc.timer
					);
					ruIterHashMap(index.vars, \v, n ->
						unify_var(i, RuVar(n.name_id, n.type_id), type, n),
						acc.timer
					);
				}
			}
		}
	}
}

ruDoFindSimilarIndexNode(i : int, node : RuIndexNode<?>, math : RuMath, env : RuEnv, acc : RuFindSimilarIndexAcc) -> void {
	if (ruTimeIsOver(acc.timer.timer)) {
		acc.timer.interrupted := true;
	} else {
		if (i + 1 == length(acc.expr.nodes)) {
			ruIter(node.data, \d ->
				acc.similar := Cons(RuSimilar(d, acc.expr), ^(acc.similar)), 
				acc.timer
			);
		} else {
			ruDoFindSimilarIndex(i + 1, node.index, math, env, acc);
		}
	}
}


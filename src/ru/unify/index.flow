import ds/list;
import ru/index;
import ru/unify/exps;

export {
	RuUnified(
		sub : Tree<RuVar, RuExp>,
		data : ?,
		expr : RuExp
	);
	ruUnifyIndex(e : RuExp, index : RuIndex<?>, sub : Tree<RuVar, RuExp>, math : RuMath, conf : RuConf, time_limit : double) -> [RuUnified<?>];
}

ruUnifyIndex(e : RuExp, index : RuIndex<?>, sub : Tree<RuVar, RuExp>, math : RuMath, conf : RuConf, time_limit : double) -> [RuUnified<?>] {
	unified = ref [];
	ruDoUnifyIndex(0, index, math, conf, RuUnifyEnv(e, sub, ruMakeTimer(time_limit), unified));
	^unified
}

RuUnifyEnv(
	expr : RuExp,
	sub : Tree<RuVar, RuExp>,
	timer : RuTimer,
	unified : ref [RuUnified<?>]
);

ruDoUnifyIndex(i : int, index : RuIndex<?>, math : RuMath, conf : RuConf, env : RuUnifyEnv) -> void {
	if (!ruTimeIsOver(env.timer)) {
		unify_step = \j, var, end, ex -> {
			switch (lookupTree(env.sub, var)) {
				Some(ex1): {
					switch (ruUnifyExps([ex1, ex], env.sub, math, conf)) {
						Some(s): ruDoUnifyIndexNode(j, end, math, conf, RuUnifyEnv(env with sub = s));
						None(): {};
					}
				}
				None():
					switch (ruAdd2Subst(env.sub, var, ex)) {
						Some(s): ruDoUnifyIndexNode(j, end, math, conf, RuUnifyEnv(env with sub = s));
						None(): {};
					}
			}
		}
		unify_var = \j, var, ex_type, end, e ->
			if (ex_type == var.type) unify_step(j, var, end, e())
			else {
				switch (ruSuperRule(var.type, ex_type, math, conf)) {
					Some(sr): {
						ex = RuExp(concat([RuRuleRef(sr.descr.name, var.type, 1, 1)], e().nodes), -1);
						unify_step(j, var, end, ex);
					}
					None(): {}
				}
			}
		if (i < length(env.expr.nodes)) {
			switch (env.expr.nodes[i]) {
				RuRuleRef(name, type, arity, len): {
					switch (lookupTree(index.rules, name)) {
						Some(n): ruDoUnifyIndexNode(i, n, math, conf, env);
						None(): {};
					}
					traverseInOrder(index.vars, \v, n -> 
						unify_var(i + len, RuVar(n.name, n.type), type, n, 
							\-> RuExp(subrange(env.expr.nodes, i, len + 1), -1)
						)
					);
				}
				RuVar(name, type): {
					traverseInOrder(index.rules, \nm, n -> {
						iterSet(n.ends, \e -> {
							end = ^(index.nodes)[e];
							unify_var(i, RuVar(name, type), n.type, end, 
								\-> ruIndexSubexpr(n, end)
							)
						})
					});
					traverseInOrder(index.vars, \v, n -> 
						unify_var(i, RuVar(n.name, n.type), type, n, 
							\-> RuExp([RuVar(name, type)], -1)
						)
					);
				}
			}
		}
	}
}

ruDoUnifyIndexNode(i : int, node : RuIndexNode<?>, math : RuMath, conf : RuConf, env : RuUnifyEnv) -> void {
	if (!ruTimeIsOver(env.timer)) {
		if (i + 1 == length(env.expr.nodes)) {
			iter(node.data, \d -> refArrayPush(env.unified, RuUnified(env.sub, d, ruApplySubst(env.expr, env.sub))));
		}
		ruDoUnifyIndex(i + 1, node.index, math, conf, env);
	}
}


/// ----------------------------
/*
ruUnifyIndex1(e : RuExp, index : RuIndex<?>, sub : Tree<RuVar, RuExp>, math : RuMath, conf : RuConf) -> [RuUnified<?>] {
	unified = ref [];
	ruDoUnifyIndex(0, index, math, conf, RuUnifyEnv(e, sub, unified));
	^unified
}

RuUnifyEnv1(
	expr : RuExp,
	sub : Tree<RuVar, RuExp>,
	unified : ref [RuUnified<?>]
);

ruDoUnifyIndex1(i : int, index : RuIndex<?>, math : RuMath, conf : RuConf, env : RuUnifyEnv) -> void {
	unify_step = \j, var, end, ex -> {
		switch (lookupTree(env.sub, var)) {
			Some(ex1): {
				switch (ruUnifyExps([ex1, ex], env.sub, math, conf)) {
					Some(s): ruDoUnifyIndexNode(j, end, math, conf, RuUnifyEnv(env with sub = s));
					None(): {};
				}
			}
			None():
				switch (ruAdd2Subst(env.sub, var, ex)) {
					Some(s): ruDoUnifyIndexNode(j, end, math, conf, RuUnifyEnv(env with sub = s));
					None(): {};
				}
		}
	}
	unify_var = \j, var, ex_type, end, e ->
		if (ex_type == var.type) unify_step(j, var, end, e())
		else {
			switch (ruSuperRule(var.type, ex_type, math, conf)) {
				Some(sr): {
					ex = RuExp(concat([RuRuleRef(sr.descr.name, var.type, 1, 1)], e().nodes), -1);
					unify_step(j, var, end, ex);
				}
				None(): {}
			}
		}
	if (i < length(env.expr.nodes)) {
		switch (env.expr.nodes[i]) {
			RuRuleRef(name, type, arity, len): {
				switch (lookupTree(index.rules, name)) {
					Some(n): ruDoUnifyIndexNode(i, n, math, conf, env);
					None(): {};
				}
				traverseInOrder(index.vars, \v, n -> 
					unify_var(i + len, RuVar(n.name, n.type), type, n, 
						\-> RuExp(subrange(env.expr.nodes, i, len + 1), -1)
					)
				);
			}
			RuVar(name, type): {
				traverseInOrder(index.rules, \nm, n -> {
					iterSet(n.ends, \e -> {
						end = ^(index.nodes)[e];
						unify_var(i, RuVar(name, type), n.type, end, 
							\-> ruIndexSubexpr(n, end)
						)
					})
				});
				traverseInOrder(index.vars, \v, n -> 
					unify_var(i, RuVar(n.name, n.type), type, n, 
						\-> RuExp([RuVar(name, type)], -1)
					)
				);
			}
		}
	}
}

ruDoUnifyIndexNode1(i : int, node : RuIndexNode<?>, math : RuMath, conf : RuConf, env : RuUnifyEnv) -> void {
	if (i + 1 == length(env.expr.nodes)) {
		iter(node.data, \d -> refArrayPush(env.unified, RuUnified(env.sub, d, ruApplySubst(env.expr, env.sub))));
	}
	ruDoUnifyIndex(i + 1, node.index, math, conf, env);
}
*/
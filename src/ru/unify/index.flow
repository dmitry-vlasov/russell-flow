import ds/list;
import base/util/timed;
import ru/index;
import ru/unify/exps;

export {
	RuUnified(
		sub : Tree<RuVar, RuExp>,
		data : ?,
		expr : RuExp
	);
	ruUnifyIndex(e : RuExp, index : RuIndex<?>, sub : Tree<RuVar, RuExp>, math : RuMath, env : RuEnv, time_limit : double) -> [RuUnified<?>];
}

ruUnifyIndex(e : RuExp, index : RuIndex<?>, sub : Tree<RuVar, RuExp>, math : RuMath, env : RuEnv, time_limit : double) -> [RuUnified<?>] {
	list2array(
		ruDoUnifyIndex(
			0, index, math, env, 
			RuUnifyIndexAcc(e, sub, ruMakeLimitedTimer(time_limit))
		)
	);
}

RuUnifyIndexAcc(
	expr : RuExp,
	sub : Tree<RuVar, RuExp>,
	timer : RuTimer
);

ruDoUnifyIndex(i : int, index : RuIndex<?>, math : RuMath, env : RuEnv, acc : RuUnifyIndexAcc) -> List<RuUnified<?>> {
	if (ruTimeIsOver(acc.timer)) {
		makeList();
	} else {
		unify_step = \j, var, end, ex -> {
			switch (lookupTree(acc.sub, var)) {
				Some(ex1): {
					switch (ruUnifyExps([ex1, ex], acc.sub, math, env)) {
						Some(s): ruDoUnifyIndexNode(j, end, math, env, RuUnifyIndexAcc(acc with sub = s));
						None(): makeList();
					}
				}
				None():
					switch (ruAdd2Subst(acc.sub, var, ex)) {
						Some(s): ruDoUnifyIndexNode(j, end, math, env, RuUnifyIndexAcc(acc with sub = s));
						None(): makeList();
					}
			}
		}
		unify_var = \j, var, ex_type, end, e ->
			if (ex_type == var.type) unify_step(j, var, end, e())
			else {
				switch (ruSuperRule(var.type, ex_type, math.decls, env)) {
					Some(sr): {
						ex = RuExp(concat([RuRuleNode(sr.descr.id, var.type, 1, 1)], e().nodes), -1);
						unify_step(j, var, end, ex);
					}
					None(): makeList()
				}
			}
		if (i < length(acc.expr.nodes)) {
			switch (acc.expr.nodes[i]) {
				RuRuleNode(rule, type, arity, len): {
					unified_1 = switch (lookupTree(index.rules, rule)) {
						Some(n): ruDoUnifyIndexNode(i, n, math, env, acc);
						None(): makeList();
					}
					ruFoldTree(index.vars, unified_1, \v, n, ac -> 
						concatList(ac,
							unify_var(i + len, RuVar(n.name_id, n.type_id), type, n, 
								\-> RuExp(subrange(acc.expr.nodes, i, len + 1), -1)
							)
						),
						acc.timer
					);
				}
				RuVar(id, type): {
					unfied_1 = ruFoldTree(index.rules, makeList(), \nm, n, ac ->
						ruFoldSet(n.ends, ac, \a, e -> {
							end = getVectorUnsafe(index.nodes, e);
							concatList(a,
								unify_var(i, RuVar(id, type), n.type_id, end, 
									\-> ruIndexSubexpr(n, end)
								)
							);
						}, acc.timer),
						acc.timer
					);
					ruFoldTree(index.vars, unfied_1, \v, n, ac -> 
						concatList(ac,
							unify_var(i, RuVar(n.name_id, n.type_id), type, n, 
								\-> RuExp([RuVar(id, type)], -1)
							)
						), acc.timer
					);
				}
			}
		} else {
			makeList();
		}
	}
}

ruDoUnifyIndexNode(i : int, node : RuIndexNode<?>, math : RuMath, env : RuEnv, acc : RuUnifyIndexAcc) -> List<RuUnified<?>> {
	if (ruTimeIsOver(acc.timer)) {
		makeList();
	} else  {
		new_unified = if (i + 1 == length(acc.expr.nodes)) {
			ruFold(node.data, makeList(), \ac, d -> 
				Cons(RuUnified(acc.sub, d, ruApplySubst(acc.expr, acc.sub)), ac), acc.timer
			);
		} else {
			makeList();
		}
		concatList(new_unified, 
			ruDoUnifyIndex(i + 1, node.index, math, env, acc)
		);
	}
}

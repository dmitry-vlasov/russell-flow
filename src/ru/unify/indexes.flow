import ds/cart_prod;
import ru/unify/index;

export {
	ruUnifyIndexes(inds : [RuIndex<?>], sub : RuSubst, math : RuMath, env : RuEnv) -> [RuUnified<[Set<?>]>];
}

RuSubIndex(
	start : RuIndexNode<?>, 
	curr  : RuIndexNode<?>,
	ends  : Set<int>
);

RuUnifyIndexesAcc(
	sub  : RuSubst,
	inds : [RuSubIndex<?>],
	math : RuMath,
	env : RuEnv
);

RuUnifyIndexesStepAcc(
	is_var: [bool],
	vars  : [RuVar],
	exprs : [RuExp],
	inds  : [RuSubIndex<?>],
	rule_id : int,
	type_id : int,
	arity : int,
	ok    : bool
);

ruUnifyIndexesStepAcc2s(step : RuUnifyIndexesStepAcc<?>, math : RuMath) -> string {
	"rule: " + id2s(step.rule_id) + ", type: " + id2s(step.type_id) + ", ok: " + b2s(step.ok) + "\n"
	"is_var: " + strGlue(map(step.is_var, b2s), ", ")  + "\n" +
	"vars: " + strGlue(map(step.vars, \v -> ru2s(v, math)), ", ")  + "\n" +
	"exprs:\n" + strIndent(strGlue(map(step.exprs, \e -> ru2s(e, math)), "\n"))  + "\n"
}

ruUnifyIndexesStepVar(step : RuUnifyIndexesStepAcc<?>, math : RuMath, env : RuEnv) -> Maybe<RuVar> {
	maybeBind(
		fold(tail(step.vars), Some(step.vars[0]), \acc, v ->
			maybeBind(acc, \t -> 
				if (v.type == t.type || isSome(ruSuperRule(v.type, t.type, math.decls.lang, env))) Some(v) else
				if (v.type == t.type || isSome(ruSuperRule(t.type, v.type, math.decls.lang, env))) Some(t) else None()
			)
		),
		\v -> if (step.type_id == -1 || v.type == step.type_id || isSome(ruSuperRule(v.type, step.type_id, math.decls.lang, env))) Some(v) else None()
	)
}

ruDoUnifyIndexesStep(ns : [RuIndexNode<?>], acc : RuUnifyIndexesAcc<?>) -> RuUnifyIndexesStepAcc<?> {
	foldi(
		ns,
		RuUnifyIndexesStepAcc([], [], [], [], -1, -1, -1, true), 
		\i, ac, n ->
			if (n.arity == -1) {
				switch (ruLookupSubst(acc.sub, RuVar(n.name_id, n.type_id))) {
					None():
						RuUnifyIndexesStepAcc(ac with
							is_var = concat(ac.is_var, [true]),
							vars = concat(ac.vars, [RuVar(n.name_id, n.type_id)])
						);
					Some(ex): {
						m = ex.nodes[0];
						switch (m) {
							RuRuleNode(rule_id,__,__,__):
								RuUnifyIndexesStepAcc(ac with
									is_var = concat(ac.is_var, [true]),
									exprs = concat(ac.exprs, [ex])
								);
							RuVar(__,__):
								RuUnifyIndexesStepAcc(ac with 
									is_var = concat(ac.is_var, [true]),
									vars = concat(ac.vars, [m])
								);
						}
					}
				}
			} else {
				RuUnifyIndexesStepAcc(ac with
					is_var = concat(ac.is_var, [false]),
					inds = concat(ac.inds, [RuSubIndex(n, n, n.ends)]),
					rule_id = n.name_id,
					type_id = n.type_id,
					arity = n.arity,
					ok = ac.ok && (ac.rule_id == -1 || n.name_id == ac.rule_id)
				);
			}
	);
}

RuUnifiyIndexesRet(
	vect : [int],
	sub  : RuSubst,
	expr : RuExp
);

ruDoUnifyIndexNodesNext(s : RuSubst, new_inds : [RuSubIndex<?>], acc : RuUnifyIndexesAcc) -> [RuUnifiyIndexesRet] {
	vect = map(new_inds, \n -> n.curr.id);
	ends = mapi(new_inds, \i, ind -> containsSet(ind.ends, vect[i]) || isEmptySet(ind.ends));
	if (!all(ends)) {
		ruDoUnifyIndexes(
			RuUnifyIndexesAcc(acc with sub = s, inds = new_inds)
		);
	} else {
		[RuUnifiyIndexesRet(vect, s, ruApplySubst(ruIndexSubexpr(new_inds[0].start, new_inds[0].curr), s))];
	}
}

ruDoUnifyIndexNextInds(vect : [int], step : RuUnifyIndexesStepAcc<?>, nodes : [RuIndexNode<?>], acc : RuUnifyIndexesAcc) -> [RuSubIndex<?>] {
	foldi(nodes, Pair([], 0), \i, ac, n -> 
		if (step.is_var[i]) {
			Pair(
				concat(ac.first, [RuSubIndex(acc.inds[i].start, n, acc.inds[i].ends)]), 
				ac.second
			);
		} else {
			end_node : RuIndexNode<?> = getVectorUnsafe(acc.inds[i].start.index.nodes, vect[ac.second]);
			Pair(
				concat(ac.first, [RuSubIndex(acc.inds[i].start, end_node, acc.inds[i].ends)]), 
				ac.second + 1
			);
		}
	).first;
}

ruDoUnifyTrivial(node : RuIndexNode<?>, acc : RuUnifyIndexesAcc<?>) -> [RuUnifiyIndexesRet] {
	foldSet(node.ends, [], \ac, end -> 
		concat(ac, [RuUnifiyIndexesRet([end], acc.sub, ruIndexSubexpr(node, getVectorUnsafe(node.index.nodes, end)))])
	);
}

ruDoUnifyIndexNodes(nodes : [RuIndexNode<?>], acc : RuUnifyIndexesAcc<?>) -> [RuUnifiyIndexesRet] {
	if (length(nodes) == 0) [] else 
	if (length(nodes) == 1) {
		ruDoUnifyTrivial(nodes[0], acc);
	} else {
		step = ruDoUnifyIndexesStep(nodes, acc);
		if (!step.ok) [] else {
			if (step.rule_id != -1) {
				if (any(step.is_var)) {
					if (step.arity > 0) {
						sub_unified = 
							if (length(step.inds) > 1) {
								ruDoUnifyIndexes(RuUnifyIndexesAcc(acc with inds = step.inds));
							} else if (length(step.inds) == 1) {
								ruDoUnifyTrivial(nodes[findiDef(step.is_var, \v -> !v, -1)], acc);
							} else [];
						concatA(filtermap(sub_unified, \ret -> {
							maybeBind(ruUnifyExps(concat(step.exprs, [ret.expr]), ret.sub, acc.math, acc.env), \s -> {
								ex = ruApplySubst(ret.expr, s);
								maybeBind(
									fold(step.vars, Some(s), \ac, var -> 
										maybeBind(ac, \s1 -> ruAdd2Subst1(s1, var, ex, acc.math, acc.env))
									),
									\s1 -> {
										ni = ruDoUnifyIndexNextInds(ret.vect, step, nodes, acc);
										Some(ruDoUnifyIndexNodesNext(s1, ni, acc));
									}
								);
							});
						}));
					} else {
						const = RuExp([RuRuleNode(step.rule_id, step.type_id, 0, 0)], -1);
						eitherMap(ruUnifyExps(concat(step.exprs, [const]), acc.sub, acc.math, acc.env), 
							\s -> {
								eitherMap(
									fold(step.vars, Some(s), \ac, var -> 
										maybeBind(ac, \s1 -> ruAdd2Subst1(s1, var, const, acc.math, acc.env))
									),
									\s1 -> {
										ni = mapi(nodes, \i, n -> RuSubIndex(acc.inds[i].start, n, acc.inds[i].ends));
										ruDoUnifyIndexNodesNext(s1, ni, acc)
									},
									[]
								);
							},
							[]
						);
					}
				} else {
					eitherMap(ruUnifyExps(step.exprs, acc.sub, acc.math, acc.env), 
						\s -> {
							ni = mapi(nodes, \i, n -> RuSubIndex(acc.inds[i].start, n, acc.inds[i].ends));
							ruDoUnifyIndexNodesNext(s, ni, acc)
						},
						[]
					);
				}
			} else {
				if (step.exprs == []) {
					eitherMap(ruUnifyIndexesStepVar(step, acc.math, acc.env), \w ->
						eitherMap(
							fold(step.vars, Some(acc.sub), \ac, var -> 
								maybeBind(ac, \s1 -> ruAdd2Subst1(s1, var, RuExp([w], -1), acc.math, acc.env))
							),
							\s1 -> {
								ni = mapi(nodes, \i, n -> RuSubIndex(acc.inds[i].start, n, acc.inds[i].ends));
								ruDoUnifyIndexNodesNext(s1, ni, acc);
							},
							[]
						), []
					);
				} else {
					eitherMap(ruUnifyExps(step.exprs, acc.sub, acc.math, acc.env), 
						\s -> {
							ex = ruApplySubst(step.exprs[0], s);
							eitherMap(
								fold(step.vars, Some(s), \ac, var -> 
									maybeBind(ac, \s1 -> ruAdd2Subst1(s1, var, ex, acc.math, acc.env))
								),
								\s1 -> {
									ni = mapi(nodes, \i, n -> RuSubIndex(acc.inds[i].start, n, acc.inds[i].ends));
									ruDoUnifyIndexNodesNext(s1, ni, acc);
								},
								[]
							);
						},
						[]
					);
				}
			}
		}
	}
}

ruDoUnifyIndexes(acc : RuUnifyIndexesAcc<?>) -> [RuUnifiyIndexesRet] {
	prod = CartProd(map(acc.inds, \subind -> concat(hashMapValues(subind.curr.index.rules), hashMapValues(subind.curr.index.vars))));
	foldCartProd(prod, [], \ac, nodes -> concat(ac, ruDoUnifyIndexNodes(nodes, acc)));
}

ruUnifyIndexes(inds : [RuIndex<?>], sub : RuSubst, math : RuMath, env : RuEnv) -> [RuUnified<[Set<?>]>] {
	if (inds == []) [] else {
		prod = CartProd(map(inds, \ind -> concat(hashMapValues(ind.rules), hashMapValues(ind.vars))));
		rets = foldCartProd(prod, [], \acc, nodes -> 
			concat(acc, ruDoUnifyIndexNodes(nodes,
				RuUnifyIndexesAcc(sub, 
					mapi(nodes, \i, n -> RuSubIndex(n, n, n.ends)),
					math, 
					env
				)
			))
		);
		map(rets, \ret -> 
			RuUnified(ret.sub, mapi(ret.vect, \i, n -> buildSet(getVectorUnsafe(inds[i].nodes, n).data)), ret.expr)
		);
	}
}

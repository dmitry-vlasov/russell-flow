import ru/prover/util;
import ru/unify/indexes;

export {
	RuSubData(
		sub : RuSubst,
		data: ?
	);
	ruUnifySubsProd(
		prod : CartProd<RuSubData<?>>,
		admitExp : (RuExp) -> bool,
		math : RuMath, 
		env : RuEnv
	) -> [RuSubData<[?]>];

	ruUnifyProdSubs2s(
		prod : CartProd<RuSubData<?>>,
		math : RuMath
	) -> string;
}

RuSubsColumn(
	var : RuVar,
	rows : [RuIndex<int>]
);

RuSubsMatrix(
	cols : [RuSubsColumn]
);

ruSubsMatrix2s(matrix : RuSubsMatrix, math : RuMath) -> string {
	n_rows = if (matrix.cols == []) 0 else length(matrix.cols[0].rows);
	stringMatrix2s(
		map(matrix.cols, \col -> map(col.rows, \row -> ruIndex2s(row, i2s, math))),
		Some(map(matrix.cols, \col -> ru2s(col.var, math))),
		Some(map(enumFromTo(1, n_rows), \i -> "h_" + i2s(i)))
	);
}

ruMakeSubsMatrix(prod : CartProd<RuSubData<?>>) -> RuSubsMatrix {
	vars = set2array(fold(prod.sets, makeSet(), \acc, ss ->
		fold(ss, acc, \ac, s ->
			mergeSets(ac, buildSet(map(hashMapValues(s.sub.map), \se -> se.var)))
		)
	));
	make_cell = \v, ss -> {
		foldi(ss, ruMakeIndex(), \i, ac, s ->
			switch (ruLookupSubst(s.sub, v)) {
				Some(ex): ruSetIndex(ex, i, ac);
				None(): ruSetIndex(RuExp([v], -1), i, ac);
			}
		)
	}
	RuSubsMatrix(
		fold(vars, [], \acc, v ->
			concat(acc, 
				[RuSubsColumn(v,
					fold(prod.sets, [], \ac, ss ->
						concat(ac, [make_cell(v, ss)])
					)
				)]
			)
		)
	);
}

ruUnifyProdSubs2s(prod : CartProd<RuSubData<?>>, math : RuMath) -> string {
	ruSubsMatrix2s(ruMakeSubsMatrix(prod), math);
}

RuSubArrData(
	subs : [RuSubst],
	data : ?
);

ruIntersectCols(col1 : [RuSubArrData<[Set<int>]>], col2 : [RuUnified<[Set<int>]>], math : RuMath) -> [RuSubArrData<[Set<int>]>] {
	fold(col1, [], \acc, unif1 ->
		fold(col2, acc, \ac, unif2 -> {
				common = mapi(unif1.data, \i, d1 -> intersectSets(d1, unif2.data[i]));
				if (exists(common, isEmptySet)) ac else
				concat(ac, [RuSubArrData(concat(unif1.subs, [unif2.sub]), common)]);
			}
		)
	);
}

ruUnifiedCols2s(unified : [[RuUnified<[Set<int>]>]], matrix : RuSubsMatrix, math : RuMath) -> string {
	n_rows = if (matrix.cols == []) 0 else length(matrix.cols[0].rows);
	stringMatrix2s(
		map(unified, \col -> map(col, \row -> 
			"sub:\n" + ruSubst2s(row.sub, math) + "\n" + 
			"data:\n" + superglue(row.data, \set -> "{" + superglue(set2array(set), i2s, ", ") + "}", "\n")
		)),
		Some(map(matrix.cols, \col -> ru2s(col.var, math))),
		Some(map(enumFromTo(1, n_rows), \i -> "h_" + i2s(i)))
	);
}

ruUnifiedCols2s1(unified : [[RuUnified<[Set<int>]>]], matrix : RuSubsMatrix, math : RuMath) -> string {
	superglue(unified, 
		\col -> superglue(col, 
			\row -> 
				"sub:\n" + ruSubst2s(row.sub, math) + "\n" + 
				"data:\n" + superglue(row.data, \set -> "{" + superglue(set2array(set), i2s, ", ") + "}", "\n"), 
			"\n--------------\n"
		),
		"\n================\n"
	);
}

ruUnifiedCol2s1(col : [RuSubData<[Set<int>]>], math : RuMath) -> string {
	superglue(col, 
		\row -> 
			"sub:\n" + ruSubst2s(row.sub, math) + "\n" + 
			"data:\n" + superglue(row.data, \set -> "{" + superglue(set2array(set), i2s, ", ") + "}", "\n"), 
		"\n--------------\n"
	);
}

ruUnifySubsProd(prod : CartProd<RuSubData<?>>, admitExp : (RuExp) -> bool, math : RuMath, env : RuEnv) -> [RuSubData<[?]>] {
	subs = prod.sets;
	if (subs == [] || exists(subs, \s -> s == [])) [] else 
	if (length(subs) == 1) map(subs[0], \d -> RuSubData(d.sub, [d.data])) else {
		matrix = ruMakeSubsMatrix(prod);
		if (matrix.cols == []) {
			mapCartProd(prod, \vect -> RuSubData(ruEmptySubst, map(vect, \sd -> sd.data)));
		} else {
			empty = ref false;
			unified = mapi(matrix.cols, 
				\i, col -> {
					size = fold(col.rows, 1, \acc, ind -> acc * ruIndexDataCount(ind));
					uns = ruUnifyIndexes(col.rows, ruEmptySubst, math, env);
					unif_col = filtermap(uns, \unif -> {
						switch (ruLookupSubst(unif.sub, col.var)) {
							None(): 
								maybeBind(ruAdd2Subst1(unif.sub, col.var, unif.expr, math, env), \s ->
									if (ruSubSatisfies(s, admitExp)) {
										Some(RuUnified(s, unif.data, ruApplySubst(unif.expr, s)));
									} else {
										None();
									}
								);
							Some(ex): {
								maybeBind(ruUnifyExps([unif.expr, ex], unif.sub, math, env), \un -> 
									maybeBind(ruCompose(unif.sub, un), \s ->
										if (ruSubSatisfies(s, admitExp)) {
											Some(RuUnified(s, unif.data, ruApplySubst(ex, s)));
										} else {
											None();
										}
									)
								);
							}
						}
					});
					if (unif_col == []) {
						empty := true;
					}
					unif_col
				}
			);
			if (^empty) [] else {
				inter_cols = fold(
					tail(unified), 
					map(unified[0], \unif -> RuSubArrData([unif.sub], unif.data)), 
					\acc, col -> ruIntersectCols(acc, col, math)
				);
				intersected = filtermap(inter_cols, \ss -> 
					maybeMap(
						fold(ss.subs, Some(ruEmptySubst), \acc, s2 -> 
							maybeBind(acc, \s1 ->
								maybeBind(ruUnifySubs([s1, s2], math, env), \s3 ->
									if (ruSubSatisfies(s3, admitExp)) {
										Some(s3);
									} else {
										None();
									}
								)
							)
						),
						\s -> RuSubData(s, ss.data)
					)
				);
				fold(intersected, [],
					\acc, unif -> {
						ret_prod = CartProd(map(unif.data, \d -> set2array(d)));
						concat(acc, mapCartProd(ret_prod, \v -> RuSubData(unif.sub, mapi(v, \i, n -> subs[i][n].data))))
					}
				);
			}
		}
	}
}

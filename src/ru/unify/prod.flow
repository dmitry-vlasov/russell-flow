import ru/prover/util;
import ru/unify/indexes;

export {
	RuSubData(
		sub : Tree<RuVar, RuExp>,
		data: ?
	);
	ruUnifySubsProd(prod : [[RuSubData<?>]], admitExp : (RuExp) -> bool, timer : () -> bool, math : RuMath, conf : RuConf) -> [RuSubData<[?]>];
}

RuSubsColumn(
	var : RuVar,
	rows : [RuIndex<int>]
);

RuSubsMatrix(
	cols : [RuSubsColumn]
);

ruMakeSubsMatrix(subs : [[RuSubData<?>]]) -> RuSubsMatrix;

ruSubsMatrix2s(matrix : RuSubsMatrix, math : RuMath) -> string;

debugUnifySubsProd = ref false;

ruSubsMatrix2s(matrix : RuSubsMatrix, math : RuMath) -> string {
	n_rows = if (matrix.cols == []) 0 else length(matrix.cols[0].rows);
	ruStringMatrix2s(
		map(matrix.cols, \col -> map(col.rows, \row -> ruIndex2s(row, i2s, math))),
		Some(map(matrix.cols, \col -> ru2s(col.var, math.rules))),
		Some(map(enumFromTo(1, n_rows), \i -> "h_" + i2s(i)))
	);
}

ruMakeSubsMatrix(subs : [[RuSubData<?>]]) -> RuSubsMatrix {
	vars = set2array(fold(subs, makeSet(), \acc, ss ->
		fold(ss, acc, \ac, s ->
			mergeSets(ac, buildSet(getTreeKeys(s.sub)))
		)
	));
	make_cell = \v, ss -> {
		foldi(ss, ruMakeIndex(), \i, ac, s ->
			switch (lookupTree(s.sub, v)) {
				Some(ex): ruSetIndex(ex, i, ac);
				None(): ruSetIndex(RuExp([v], -1), i, ac);
			}
		)
	}
	RuSubsMatrix(
		fold(vars, [], \acc, v ->
			concat(acc, 
				[RuSubsColumn(v,
					fold(subs, [], \ac, ss ->
						concat(ac, [make_cell(v, ss)])
					)
				)]
			)
		)
	);
}

ruIntersectCols(col1 : [RuSubData<[Set<int>]>], col2 : [RuUnified<[Set<int>]>], math : RuMath, conf : RuConf) -> [RuSubData<[Set<int>]>] {
	fold(col1, [], \acc, unif1 ->
		fold(col2, acc, \ac, unif2 -> {
				common = mapi(unif1.data, \i, d1 -> intersectSets(d1, unif2.data[i]));
				if (exists(common, isEmptySet)) ac else {
					eitherMap(ruUnifySubs([unif1.sub, unif2.sub], math, conf), 
						\s -> concat(ac, [RuSubData(s, common)]), ac
					)
				}
			}
		)
	);
}

RuSubArrData(
	subs : [Tree<RuVar, RuExp>],
	data : ?
);

ruIntersectCols1(col1 : [RuSubArrData<[Set<int>]>], col2 : [RuUnified<[Set<int>]>], math : RuMath) -> [RuSubArrData<[Set<int>]>] {
	fold(col1, [], \acc, unif1 ->
		fold(col2, acc, \ac, unif2 -> {
				common = mapi(unif1.data, \i, d1 -> intersectSets(d1, unif2.data[i]));
				if (exists(common, isEmptySet)) ac else
				concat(ac, [RuSubArrData(concat(unif1.subs, [unif2.sub]), common)]);
			}
		)
	);
}

ruUnifySubsProd(subs : [[RuSubData<?>]], admitExp : (RuExp) -> bool, timeLimit : () -> bool, math : RuMath, conf : RuConf) -> [RuSubData<[?]>] {
	if (subs == [] || exists(subs, \s -> s == [])) [] else 
	if (length(subs) == 1) map(subs[0], \d -> RuSubData(d.sub, [d.data])) else {
		started = timestamp();
		matrix = ruMakeSubsMatrix(subs);
		if (matrix.cols == []) {
			mapCartProd(CartProd(subs), \vect -> RuSubData(makeTree(), map(vect, \sd -> sd.data)));
		} else {
			empty = ref false;
			unified = mapi(matrix.cols, \i, col -> {
					if (^debugUnifySubsProd) {
						conf.onMessage("unifying COLUMN " + i2s(i) + ":");
						debugUnifyIndexes := true;
					}
					if (!^empty && !timeLimit()) {
						size = fold(col.rows, 1, \acc, ind -> acc * ruIndexDataCount(ind));
						descr = strGlue(map(col.rows, \ind -> i2s(ruIndexDataCount(ind))), "x");
						t = timestamp();
						uns = ruUnifyIndexes(col.rows, makeTree(), math, conf, 1.0);
						stats = RuStatsRow("prod " + descr, 
							pairs2tree([Pair("size", i2d(size)), Pair("time", timestamp() - t), Pair("rets", i2d(length(uns)))])
						);
						ruAddStats("unif_index_prod", stats);
						
						unif_col = filtermap(uns, \unif -> {
							
								if (^debugUnifySubsProd) {
									conf.onMessage("sub:");
									conf.onMessage(ruIndent(ruSubst2s(unif.sub, math)));
									conf.onMessage("expr");
									conf.onMessage(ruIndent(ru2s(unif.expr, math.rules)));
									conf.onMessage("vect: " + strGlue(map(unif.data, \set -> "{" + strGlue(map(set2array(set), i2s), ", ") + "}"), "x"));
								}
								switch (lookupTree(unif.sub, col.var)) {
									None(): 
										maybeBind(ruAdd2Subst1(unif.sub, col.var, unif.expr, math, conf), \s ->
											if (ruSubSatisfies(s, admitExp)) {
												Some(RuUnified(s, unif.data, ruApplySubst(unif.expr, s)));
											} else {
												None();
											}
										);
									Some(ex):
										maybeBind(ruUnifyExps([unif.expr, ex], unif.sub, math, conf), \un -> 
											maybeBind(ruCompose(unif.sub, un), \s ->
												if (ruSubSatisfies(s, admitExp)) {
													Some(RuUnified(s, unif.data, ruApplySubst(ex, s)));
												} else {
													None();
												}
											)
										);
								}
							}
						);
						if (unif_col == []) {
							empty := true;
						}
						unif_col
					} else {
						[]
					}
				}
			);
			if (^empty) [] else {
				if (^debugUnifySubsProd) {
					conf.onMessage("filtered:");
					iteri(unified, \i, col -> {
						conf.onMessage("COLUMN " + i2s(i));
						iter(col, \unif -> {
							conf.onMessage("sub:");
							conf.onMessage(ruIndent(ruSubst2s(unif.sub, math)));
							conf.onMessage("expr");
							conf.onMessage(ruIndent(ru2s(unif.expr, math.rules)));
							conf.onMessage("vect: " + strGlue(map(unif.data, \set -> "{" + strGlue(map(set2array(set), i2s), ", ") + "}"), "x"));
						})
					});
				}
				//mergeSort(a : [?], comparisonFn : (?, ?) -> int) -> [?];
				//unified_sorted = mergeSort(unified, \col1, col2 -> length(col1) - length(col2));
				t = timestamp();
				/*inter_pair = fold(
					tail(unified), 
					Pair(map(unified[0], \unif -> RuSubData(unif.sub, unif.data)), []), 
					\acc, col -> {
						ret = ruIntersectCols(acc.first, col, math);
						Pair(ret, concat(acc.second, [length(acc.first) * length(col)]));
					}
				);*/
				
				t1 = timestamp();
				inter_pair = fold(
					tail(unified), 
					Pair(map(unified[0], \unif -> RuSubArrData([unif.sub], unif.data)), []), 
					\acc, col -> {
						if (timeLimit()) acc else {
							ret = ruIntersectCols1(acc.first, col, math);
							Pair(ret, concat(acc.second, [length(acc.first) * length(col)]));
						}
					}
				);
				intersected_1 = inter_pair.first;
				sizes = inter_pair.second;
				
				size1 = fold(sizes, 0, \acc, s -> acc + s);
				descr = strGlue(map(sizes, \s -> i2s(s)), ",");
				
				stats1 = RuStatsRow("prod " + descr, 
					pairs2tree([Pair("size", i2d(size1)), Pair("time", timestamp() - t1), Pair("rets", i2d(length(intersected_1)))])
				);
				ruAddStats("intersect_index_prod", stats1);
				
				
				t2 = timestamp();
				intersected = filtermap(intersected_1, \ss -> 
					maybeMap(
						fold(ss.subs, Some(makeTree()), \acc, s2 -> 
							maybeBind(acc, \s1 ->
								maybeBind(ruUnifySubs([s1, s2], math, conf), \s3 ->
									if (ruSubSatisfies(s3, admitExp) && !timeLimit()) {
										Some(s3);
									} else {
										None();
									}
								)
							)
						),
						\s -> RuSubData(s, ss.data)
					)
				);
				size2 = length(intersected_1) * length(unified);
				stats2 = RuStatsRow("unify_subs", 
					pairs2tree([Pair("size", i2d(size2)), Pair("time", timestamp() - t2), Pair("rets", i2d(length(intersected)))])
				);
				ruAddStats("unfy_subs_index_prod", stats2);
			
				if (^debugUnifySubsProd) {
					conf.onMessage("result:");
					iter(intersected, \unif -> {
						conf.onMessage("sub:");
						conf.onMessage(ruIndent(ruSubst2s(unif.sub, math)));
						//conf.onMessage("expr");
						//conf.onMessage(ruIndent(ru2s(unif.expr, math.rules)));
						conf.onMessage("vect: " + strGlue(map(unif.data, \set -> "{" + strGlue(map(set2array(set), i2s), ", ") + "}"), "x"));
					});
				}
				fold(intersected, [],
					\acc, unif -> {
						prod = CartProd(map(unif.data, \d -> set2array(d)));
						concat(acc, mapCartProd(prod, \v -> RuSubData(unif.sub, mapi(v, \i, n -> subs[i][n].data))))
					}
				);
			}
		}
	}
}
